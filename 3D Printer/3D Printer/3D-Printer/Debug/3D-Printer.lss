
3D-Printer.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000046  00800200  00001b0e  00001ba2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001b0e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000ac  00800246  00800246  00001be8  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001be8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001c44  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000680  00000000  00000000  00001c84  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00010740  00000000  00000000  00002304  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002b8a  00000000  00000000  00012a44  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000037cc  00000000  00000000  000155ce  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000160c  00000000  00000000  00018d9c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000028a0  00000000  00000000  0001a3a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00008674  00000000  00000000  0001cc48  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000660  00000000  00000000  000252bc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	32 c1       	rjmp	.+612    	; 0x266 <__ctors_end>
       2:	00 00       	nop
       4:	60 c1       	rjmp	.+704    	; 0x2c6 <__bad_interrupt>
       6:	00 00       	nop
       8:	5e c1       	rjmp	.+700    	; 0x2c6 <__bad_interrupt>
       a:	00 00       	nop
       c:	5c c1       	rjmp	.+696    	; 0x2c6 <__bad_interrupt>
       e:	00 00       	nop
      10:	5a c1       	rjmp	.+692    	; 0x2c6 <__bad_interrupt>
      12:	00 00       	nop
      14:	58 c1       	rjmp	.+688    	; 0x2c6 <__bad_interrupt>
      16:	00 00       	nop
      18:	56 c1       	rjmp	.+684    	; 0x2c6 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	54 c1       	rjmp	.+680    	; 0x2c6 <__bad_interrupt>
      1e:	00 00       	nop
      20:	52 c1       	rjmp	.+676    	; 0x2c6 <__bad_interrupt>
      22:	00 00       	nop
      24:	50 c1       	rjmp	.+672    	; 0x2c6 <__bad_interrupt>
      26:	00 00       	nop
      28:	4e c1       	rjmp	.+668    	; 0x2c6 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	4c c1       	rjmp	.+664    	; 0x2c6 <__bad_interrupt>
      2e:	00 00       	nop
      30:	4a c1       	rjmp	.+660    	; 0x2c6 <__bad_interrupt>
      32:	00 00       	nop
      34:	48 c1       	rjmp	.+656    	; 0x2c6 <__bad_interrupt>
      36:	00 00       	nop
      38:	46 c1       	rjmp	.+652    	; 0x2c6 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	44 c1       	rjmp	.+648    	; 0x2c6 <__bad_interrupt>
      3e:	00 00       	nop
      40:	42 c1       	rjmp	.+644    	; 0x2c6 <__bad_interrupt>
      42:	00 00       	nop
      44:	40 c1       	rjmp	.+640    	; 0x2c6 <__bad_interrupt>
      46:	00 00       	nop
      48:	3e c1       	rjmp	.+636    	; 0x2c6 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	3c c1       	rjmp	.+632    	; 0x2c6 <__bad_interrupt>
      4e:	00 00       	nop
      50:	3a c1       	rjmp	.+628    	; 0x2c6 <__bad_interrupt>
      52:	00 00       	nop
      54:	38 c1       	rjmp	.+624    	; 0x2c6 <__bad_interrupt>
      56:	00 00       	nop
      58:	36 c1       	rjmp	.+620    	; 0x2c6 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	9d c5       	rjmp	.+2874   	; 0xb98 <__vector_23>
      5e:	00 00       	nop
      60:	32 c1       	rjmp	.+612    	; 0x2c6 <__bad_interrupt>
      62:	00 00       	nop
      64:	62 c4       	rjmp	.+2244   	; 0x92a <__vector_25>
      66:	00 00       	nop
      68:	96 c4       	rjmp	.+2348   	; 0x996 <__vector_26>
      6a:	00 00       	nop
      6c:	2c c1       	rjmp	.+600    	; 0x2c6 <__bad_interrupt>
      6e:	00 00       	nop
      70:	2a c1       	rjmp	.+596    	; 0x2c6 <__bad_interrupt>
      72:	00 00       	nop
      74:	28 c1       	rjmp	.+592    	; 0x2c6 <__bad_interrupt>
      76:	00 00       	nop
      78:	26 c1       	rjmp	.+588    	; 0x2c6 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	24 c1       	rjmp	.+584    	; 0x2c6 <__bad_interrupt>
      7e:	00 00       	nop
      80:	22 c1       	rjmp	.+580    	; 0x2c6 <__bad_interrupt>
      82:	00 00       	nop
      84:	20 c1       	rjmp	.+576    	; 0x2c6 <__bad_interrupt>
      86:	00 00       	nop
      88:	1e c1       	rjmp	.+572    	; 0x2c6 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	1c c1       	rjmp	.+568    	; 0x2c6 <__bad_interrupt>
      8e:	00 00       	nop
      90:	1a c1       	rjmp	.+564    	; 0x2c6 <__bad_interrupt>
      92:	00 00       	nop
      94:	18 c1       	rjmp	.+560    	; 0x2c6 <__bad_interrupt>
      96:	00 00       	nop
      98:	16 c1       	rjmp	.+556    	; 0x2c6 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	14 c1       	rjmp	.+552    	; 0x2c6 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	12 c1       	rjmp	.+548    	; 0x2c6 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	10 c1       	rjmp	.+544    	; 0x2c6 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	0e c1       	rjmp	.+540    	; 0x2c6 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	0c c1       	rjmp	.+536    	; 0x2c6 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	0a c1       	rjmp	.+532    	; 0x2c6 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	08 c1       	rjmp	.+528    	; 0x2c6 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	06 c1       	rjmp	.+524    	; 0x2c6 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	04 c1       	rjmp	.+520    	; 0x2c6 <__bad_interrupt>
      be:	00 00       	nop
      c0:	02 c1       	rjmp	.+516    	; 0x2c6 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	00 c1       	rjmp	.+512    	; 0x2c6 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	fe c0       	rjmp	.+508    	; 0x2c6 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	fc c0       	rjmp	.+504    	; 0x2c6 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	fa c0       	rjmp	.+500    	; 0x2c6 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	f8 c0       	rjmp	.+496    	; 0x2c6 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	f6 c0       	rjmp	.+492    	; 0x2c6 <__bad_interrupt>
      da:	00 00       	nop
      dc:	f4 c0       	rjmp	.+488    	; 0x2c6 <__bad_interrupt>
      de:	00 00       	nop
      e0:	f2 c0       	rjmp	.+484    	; 0x2c6 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	fc 06       	cpc	r15, r28
      e6:	ff 06       	cpc	r15, r31
      e8:	ee 06       	cpc	r14, r30
      ea:	f2 06       	cpc	r15, r18
      ec:	f8 06       	cpc	r15, r24
      ee:	36 07       	cpc	r19, r22
      f0:	03 07       	cpc	r16, r19
      f2:	07 07       	cpc	r16, r23
      f4:	0d 07       	cpc	r16, r29
      f6:	11 07       	cpc	r17, r17
      f8:	15 07       	cpc	r17, r21
      fa:	1b 07       	cpc	r17, r27
      fc:	1f 07       	cpc	r17, r31
      fe:	23 07       	cpc	r18, r19
     100:	36 07       	cpc	r19, r22
     102:	29 07       	cpc	r18, r25
     104:	2d 07       	cpc	r18, r29
     106:	31 07       	cpc	r19, r17

00000108 <__trampolines_end>:
     108:	4e 41       	sbci	r20, 0x1E	; 30
     10a:	4e 49       	Address 0x0000010a is out of bounds.
.word	0xffff	; ????

0000010b <pstr_inity>:
     10b:	49 4e 49 54 59                                      INITY

00000110 <pstr_inf>:
     110:	49 4e 46                                            INF

00000113 <pwr_m10>:
     113:	cd cc cc 3d 0a d7 23 3c 17 b7 d1 38 77 cc 2b 32     ...=..#<...8w.+2
     123:	95 95 e6 24 1f b1 4f 0a                             ...$..O.

0000012b <pwr_p10>:
     12b:	00 00 20 41 00 00 c8 42 00 40 1c 46 20 bc be 4c     .. A...B.@.F ..L
     13b:	ca 1b 0e 5a ae c5 9d 74                             ...Z...t

00000143 <digital_pin_to_timer_PGM>:
     143:	00 00 0a 0b 02 09 0c 0d 0e 08 07 03 04 01 00 00     ................
	...
     16f:	12 11 10 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...

00000189 <digital_pin_to_bit_mask_PGM>:
     189:	01 02 10 20 20 08 08 10 20 40 10 20 40 80 02 01     ...  ... @. @...
     199:	02 01 08 04 02 01 01 02 04 08 10 20 40 80 80 40     ........... @..@
     1a9:	20 10 08 04 02 01 80 04 02 01 80 40 20 10 08 04      ..........@ ...
     1b9:	02 01 08 04 02 01 01 02 04 08 10 20 40 80 01 02     ........... @...
     1c9:	04 08 10 20 40 80                                   ... @.

000001cf <digital_pin_to_port_PGM>:
     1cf:	05 05 05 05 07 05 08 08 08 08 02 02 02 02 0a 0a     ................
     1df:	08 08 04 04 04 04 01 01 01 01 01 01 01 01 03 03     ................
     1ef:	03 03 03 03 03 03 04 07 07 07 0c 0c 0c 0c 0c 0c     ................
     1ff:	0c 0c 02 02 02 02 06 06 06 06 06 06 06 06 0b 0b     ................
     20f:	0b 0b 0b 0b 0b 0b                                   ......

00000215 <port_to_input_PGM>:
     215:	00 00 20 00 23 00 26 00 29 00 2c 00 2f 00 32 00     .. .#.&.).,./.2.
     225:	00 01 00 00 03 01 06 01 09 01                       ..........

0000022f <port_to_output_PGM>:
     22f:	00 00 22 00 25 00 28 00 2b 00 2e 00 31 00 34 00     ..".%.(.+...1.4.
     23f:	02 01 00 00 05 01 08 01 0b 01                       ..........

00000249 <port_to_mode_PGM>:
     249:	00 00 21 00 24 00 27 00 2a 00 2d 00 30 00 33 00     ..!.$.'.*.-.0.3.
     259:	01 01 00 00 04 01 07 01 0a 01 00                    ...........

00000264 <__ctors_start>:
     264:	fd 04       	cpc	r15, r13

00000266 <__ctors_end>:
     266:	11 24       	eor	r1, r1
     268:	1f be       	out	0x3f, r1	; 63
     26a:	cf ef       	ldi	r28, 0xFF	; 255
     26c:	d1 e2       	ldi	r29, 0x21	; 33
     26e:	de bf       	out	0x3e, r29	; 62
     270:	cd bf       	out	0x3d, r28	; 61
     272:	00 e0       	ldi	r16, 0x00	; 0
     274:	0c bf       	out	0x3c, r16	; 60

00000276 <__do_copy_data>:
     276:	12 e0       	ldi	r17, 0x02	; 2
     278:	a0 e0       	ldi	r26, 0x00	; 0
     27a:	b2 e0       	ldi	r27, 0x02	; 2
     27c:	ee e0       	ldi	r30, 0x0E	; 14
     27e:	fb e1       	ldi	r31, 0x1B	; 27
     280:	00 e0       	ldi	r16, 0x00	; 0
     282:	0b bf       	out	0x3b, r16	; 59
     284:	02 c0       	rjmp	.+4      	; 0x28a <__do_copy_data+0x14>
     286:	07 90       	elpm	r0, Z+
     288:	0d 92       	st	X+, r0
     28a:	a6 34       	cpi	r26, 0x46	; 70
     28c:	b1 07       	cpc	r27, r17
     28e:	d9 f7       	brne	.-10     	; 0x286 <__do_copy_data+0x10>

00000290 <__do_clear_bss>:
     290:	22 e0       	ldi	r18, 0x02	; 2
     292:	a6 e4       	ldi	r26, 0x46	; 70
     294:	b2 e0       	ldi	r27, 0x02	; 2
     296:	01 c0       	rjmp	.+2      	; 0x29a <.do_clear_bss_start>

00000298 <.do_clear_bss_loop>:
     298:	1d 92       	st	X+, r1

0000029a <.do_clear_bss_start>:
     29a:	a2 3f       	cpi	r26, 0xF2	; 242
     29c:	b2 07       	cpc	r27, r18
     29e:	e1 f7       	brne	.-8      	; 0x298 <.do_clear_bss_loop>

000002a0 <__do_global_ctors>:
     2a0:	11 e0       	ldi	r17, 0x01	; 1
     2a2:	c3 e3       	ldi	r28, 0x33	; 51
     2a4:	d1 e0       	ldi	r29, 0x01	; 1
     2a6:	00 e0       	ldi	r16, 0x00	; 0
     2a8:	06 c0       	rjmp	.+12     	; 0x2b6 <__do_global_ctors+0x16>
     2aa:	21 97       	sbiw	r28, 0x01	; 1
     2ac:	01 09       	sbc	r16, r1
     2ae:	80 2f       	mov	r24, r16
     2b0:	fe 01       	movw	r30, r28
     2b2:	0e 94 c4 09 	call	0x1388	; 0x1388 <__tablejump2__>
     2b6:	c2 33       	cpi	r28, 0x32	; 50
     2b8:	d1 07       	cpc	r29, r17
     2ba:	80 e0       	ldi	r24, 0x00	; 0
     2bc:	08 07       	cpc	r16, r24
     2be:	a9 f7       	brne	.-22     	; 0x2aa <__do_global_ctors+0xa>
     2c0:	ca d3       	rcall	.+1940   	; 0xa56 <main>
     2c2:	0c 94 85 0d 	jmp	0x1b0a	; 0x1b0a <_exit>

000002c6 <__bad_interrupt>:
     2c6:	9c ce       	rjmp	.-712    	; 0x0 <__vectors>

000002c8 <setup>:

///CREDIT: Adam Baniuszewicz, Bartosz Flis, Jakub Sybidlo
void setup()
{
	StepperInit();
	LimitSwitchPinInit();
     2c8:	dd d0       	rcall	.+442    	; 0x484 <_Z11StepperInitv>
     2ca:	ae d0       	rcall	.+348    	; 0x428 <_Z18LimitSwitchPinInitv>
  public:
    inline HardwareSerial(
      volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
      volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
      volatile uint8_t *ucsrc, volatile uint8_t *udr);
    void begin(unsigned long baud) { begin(baud, SERIAL_8N1); }
     2cc:	26 e0       	ldi	r18, 0x06	; 6
     2ce:	40 e0       	ldi	r20, 0x00	; 0
     2d0:	51 ee       	ldi	r21, 0xE1	; 225
     2d2:	60 e0       	ldi	r22, 0x00	; 0
     2d4:	70 e0       	ldi	r23, 0x00	; 0
     2d6:	86 e4       	ldi	r24, 0x46	; 70
     2d8:	92 e0       	ldi	r25, 0x02	; 2
     2da:	c4 d2       	rcall	.+1416   	; 0x864 <_ZN14HardwareSerial5beginEmh>
	Serial.begin(57600);
	Serial.println("Connected");
     2dc:	66 e0       	ldi	r22, 0x06	; 6
     2de:	72 e0       	ldi	r23, 0x02	; 2
     2e0:	86 e4       	ldi	r24, 0x46	; 70
     2e2:	92 e0       	ldi	r25, 0x02	; 2
     2e4:	04 c4       	rjmp	.+2056   	; 0xaee <_ZN5Print7printlnEPKc>

000002e6 <loop>:
}

///CREDIT: Adam Baniuszewicz, Bartosz Flis, Jakub Sybidlo
void loop()
{
     2e6:	4f 92       	push	r4
     2e8:	5f 92       	push	r5
     2ea:	6f 92       	push	r6
     2ec:	7f 92       	push	r7
     2ee:	8f 92       	push	r8
     2f0:	9f 92       	push	r9
     2f2:	af 92       	push	r10
     2f4:	bf 92       	push	r11
     2f6:	cf 92       	push	r12
     2f8:	df 92       	push	r13
     2fa:	ef 92       	push	r14
     2fc:	0f 93       	push	r16
     2fe:	1f 93       	push	r17
     300:	cf 93       	push	r28
     302:	df 93       	push	r29
     304:	cd b7       	in	r28, 0x3d	; 61
     306:	de b7       	in	r29, 0x3e	; 62
     308:	62 97       	sbiw	r28, 0x12	; 18
     30a:	0f b6       	in	r0, 0x3f	; 63
     30c:	f8 94       	cli
     30e:	de bf       	out	0x3e, r29	; 62
     310:	0f be       	out	0x3f, r0	; 63
     312:	cd bf       	out	0x3d, r28	; 61
		int y = (int)GetNumberAfterCharacter(readDataChar, 'y');
		int z = (int)GetNumberAfterCharacter(readDataChar, 'z');
		
		MovementXYZ(&x, &y, &z, limitSwitchX, limitSwitchY, limitSwitchZ);
	}
}
     314:	4d b6       	in	r4, 0x3d	; 61
     316:	5e b6       	in	r5, 0x3e	; 62
}

///CREDIT: Adam Baniuszewicz, Bartosz Flis, Jakub Sybidlo
void loop()
{
	String readData;
     318:	68 e3       	ldi	r22, 0x38	; 56
     31a:	72 e0       	ldi	r23, 0x02	; 2
     31c:	ce 01       	movw	r24, r28
     31e:	07 96       	adiw	r24, 0x07	; 7

	bool limitSwitchX = digitalRead(pinLimitSwitchX);
     320:	9f d6       	rcall	.+3390   	; 0x1060 <_ZN6StringC1EPKc>
     322:	82 e0       	ldi	r24, 0x02	; 2
	bool limitSwitchY = digitalRead(pinLimitSwitchY);
     324:	0e d6       	rcall	.+3100   	; 0xf42 <digitalRead>
     326:	5c 01       	movw	r10, r24
     328:	8f e0       	ldi	r24, 0x0F	; 15
	bool limitSwitchZ = digitalRead(pinLimitSwitchZ);
     32a:	0b d6       	rcall	.+3094   	; 0xf42 <digitalRead>
     32c:	4c 01       	movw	r8, r24
     32e:	83 e1       	ldi	r24, 0x13	; 19
	
	if (Serial.available())
     330:	08 d6       	rcall	.+3088   	; 0xf42 <digitalRead>
     332:	3c 01       	movw	r6, r24
     334:	86 e4       	ldi	r24, 0x46	; 70
     336:	92 e0       	ldi	r25, 0x02	; 2
     338:	94 d1       	rcall	.+808    	; 0x662 <_ZN14HardwareSerial9availableEv>
     33a:	89 2b       	or	r24, r25
     33c:	09 f4       	brne	.+2      	; 0x340 <loop+0x5a>

		int x = (int)GetNumberAfterCharacter(readDataChar, 'x');
		int y = (int)GetNumberAfterCharacter(readDataChar, 'y');
		int z = (int)GetNumberAfterCharacter(readDataChar, 'z');
		
		MovementXYZ(&x, &y, &z, limitSwitchX, limitSwitchY, limitSwitchZ);
     33e:	56 c0       	rjmp	.+172    	; 0x3ec <loop+0x106>
	bool limitSwitchY = digitalRead(pinLimitSwitchY);
	bool limitSwitchZ = digitalRead(pinLimitSwitchZ);
	
	if (Serial.available())
	{
		Serial.println("Podaj ilosc krokow:");
     340:	cd b6       	in	r12, 0x3d	; 61
     342:	de b6       	in	r13, 0x3e	; 62
     344:	60 e1       	ldi	r22, 0x10	; 16
     346:	72 e0       	ldi	r23, 0x02	; 2
     348:	86 e4       	ldi	r24, 0x46	; 70
		String readDataString = Serial.readString();
     34a:	92 e0       	ldi	r25, 0x02	; 2
     34c:	d0 d3       	rcall	.+1952   	; 0xaee <_ZN5Print7printlnEPKc>
     34e:	66 e4       	ldi	r22, 0x46	; 70
     350:	72 e0       	ldi	r23, 0x02	; 2
     352:	ce 01       	movw	r24, r28
     354:	01 96       	adiw	r24, 0x01	; 1
     356:	09 d4       	rcall	.+2066   	; 0xb6a <_ZN6Stream10readStringEv>
     358:	4d 81       	ldd	r20, Y+5	; 0x05
		
		//convert string to char
		char readDataChar[readDataString.length()];
     35a:	5e 81       	ldd	r21, Y+6	; 0x06
     35c:	8d b7       	in	r24, 0x3d	; 61
     35e:	9e b7       	in	r25, 0x3e	; 62
     360:	84 1b       	sub	r24, r20
     362:	95 0b       	sbc	r25, r21
     364:	0f b6       	in	r0, 0x3f	; 63
     366:	f8 94       	cli
     368:	9e bf       	out	0x3e, r25	; 62
     36a:	0f be       	out	0x3f, r0	; 63
     36c:	8d bf       	out	0x3d, r24	; 61
     36e:	0d b7       	in	r16, 0x3d	; 61
	void setCharAt(unsigned int index, char c);
	char operator [] (unsigned int index) const;
	char& operator [] (unsigned int index);
	void getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index=0) const;
	void toCharArray(char *buf, unsigned int bufsize, unsigned int index=0) const
		{ getBytes((unsigned char *)buf, bufsize, index); }
     370:	1e b7       	in	r17, 0x3e	; 62
     372:	0f 5f       	subi	r16, 0xFF	; 255
     374:	1f 4f       	sbci	r17, 0xFF	; 255
     376:	20 e0       	ldi	r18, 0x00	; 0
		readDataString.toCharArray(readDataChar, readDataString.length());
		
		RemoveSpaces(readDataChar);
     378:	30 e0       	ldi	r19, 0x00	; 0
     37a:	b8 01       	movw	r22, r16
		strlwr(readDataChar); //convert data to lowercase
     37c:	ce 01       	movw	r24, r28

		int x = (int)GetNumberAfterCharacter(readDataChar, 'x');
     37e:	01 96       	adiw	r24, 0x01	; 1
     380:	c2 d6       	rcall	.+3460   	; 0x1106 <_ZNK6String8getBytesEPhjj>
     382:	c8 01       	movw	r24, r16
     384:	63 d0       	rcall	.+198    	; 0x44c <_Z12RemoveSpacesPc>
     386:	c8 01       	movw	r24, r16
		int y = (int)GetNumberAfterCharacter(readDataChar, 'y');
     388:	0e 94 69 0d 	call	0x1ad2	; 0x1ad2 <strlwr>
     38c:	68 e7       	ldi	r22, 0x78	; 120
     38e:	c8 01       	movw	r24, r16
     390:	6a d0       	rcall	.+212    	; 0x466 <_Z23GetNumberAfterCharacterPcc>
     392:	0d d1       	rcall	.+538    	; 0x5ae <__fixsfsi>
     394:	7a 8b       	std	Y+18, r23	; 0x12
     396:	69 8b       	std	Y+17, r22	; 0x11
		int z = (int)GetNumberAfterCharacter(readDataChar, 'z');
     398:	69 e7       	ldi	r22, 0x79	; 121
     39a:	c8 01       	movw	r24, r16
     39c:	64 d0       	rcall	.+200    	; 0x466 <_Z23GetNumberAfterCharacterPcc>
     39e:	07 d1       	rcall	.+526    	; 0x5ae <__fixsfsi>
     3a0:	78 8b       	std	Y+16, r23	; 0x10
     3a2:	6f 87       	std	Y+15, r22	; 0x0f
     3a4:	6a e7       	ldi	r22, 0x7A	; 122
     3a6:	c8 01       	movw	r24, r16
		
		MovementXYZ(&x, &y, &z, limitSwitchX, limitSwitchY, limitSwitchZ);
     3a8:	5e d0       	rcall	.+188    	; 0x466 <_Z23GetNumberAfterCharacterPcc>
     3aa:	01 d1       	rcall	.+514    	; 0x5ae <__fixsfsi>
     3ac:	7e 87       	std	Y+14, r23	; 0x0e
     3ae:	6d 87       	std	Y+13, r22	; 0x0d
     3b0:	ee 24       	eor	r14, r14
     3b2:	e3 94       	inc	r14
     3b4:	67 28       	or	r6, r7
     3b6:	09 f4       	brne	.+2      	; 0x3ba <loop+0xd4>
     3b8:	e1 2c       	mov	r14, r1
     3ba:	01 e0       	ldi	r16, 0x01	; 1
     3bc:	89 28       	or	r8, r9
     3be:	09 f4       	brne	.+2      	; 0x3c2 <loop+0xdc>
     3c0:	00 e0       	ldi	r16, 0x00	; 0
     3c2:	21 e0       	ldi	r18, 0x01	; 1
     3c4:	ab 28       	or	r10, r11
     3c6:	09 f4       	brne	.+2      	; 0x3ca <loop+0xe4>
     3c8:	20 e0       	ldi	r18, 0x00	; 0
     3ca:	ae 01       	movw	r20, r28
     3cc:	43 5f       	subi	r20, 0xF3	; 243
     3ce:	5f 4f       	sbci	r21, 0xFF	; 255
	bool limitSwitchZ = digitalRead(pinLimitSwitchZ);
	
	if (Serial.available())
	{
		Serial.println("Podaj ilosc krokow:");
		String readDataString = Serial.readString();
     3d0:	be 01       	movw	r22, r28
     3d2:	61 5f       	subi	r22, 0xF1	; 241
     3d4:	7f 4f       	sbci	r23, 0xFF	; 255
     3d6:	ce 01       	movw	r24, r28
     3d8:	41 96       	adiw	r24, 0x11	; 17
     3da:	78 d0       	rcall	.+240    	; 0x4cc <_Z11MovementXYZPiS_S_bbb>
     3dc:	ce 01       	movw	r24, r28
     3de:	01 96       	adiw	r24, 0x01	; 1
     3e0:	d8 d5       	rcall	.+2992   	; 0xf92 <_ZN6StringD1Ev>
}

///CREDIT: Adam Baniuszewicz, Bartosz Flis, Jakub Sybidlo
void loop()
{
	String readData;
     3e2:	0f b6       	in	r0, 0x3f	; 63
     3e4:	f8 94       	cli
     3e6:	de be       	out	0x3e, r13	; 62
     3e8:	0f be       	out	0x3f, r0	; 63
		int y = (int)GetNumberAfterCharacter(readDataChar, 'y');
		int z = (int)GetNumberAfterCharacter(readDataChar, 'z');
		
		MovementXYZ(&x, &y, &z, limitSwitchX, limitSwitchY, limitSwitchZ);
	}
}
     3ea:	cd be       	out	0x3d, r12	; 61
     3ec:	ce 01       	movw	r24, r28
     3ee:	07 96       	adiw	r24, 0x07	; 7
     3f0:	d0 d5       	rcall	.+2976   	; 0xf92 <_ZN6StringD1Ev>
     3f2:	0f b6       	in	r0, 0x3f	; 63
     3f4:	f8 94       	cli
     3f6:	5e be       	out	0x3e, r5	; 62
     3f8:	0f be       	out	0x3f, r0	; 63
     3fa:	4d be       	out	0x3d, r4	; 61
     3fc:	62 96       	adiw	r28, 0x12	; 18
     3fe:	0f b6       	in	r0, 0x3f	; 63
     400:	f8 94       	cli
     402:	de bf       	out	0x3e, r29	; 62
     404:	0f be       	out	0x3f, r0	; 63
     406:	cd bf       	out	0x3d, r28	; 61
     408:	df 91       	pop	r29
     40a:	cf 91       	pop	r28
     40c:	1f 91       	pop	r17
     40e:	0f 91       	pop	r16
     410:	ef 90       	pop	r14
     412:	df 90       	pop	r13
     414:	cf 90       	pop	r12
     416:	bf 90       	pop	r11
     418:	af 90       	pop	r10
     41a:	9f 90       	pop	r9
     41c:	8f 90       	pop	r8
     41e:	7f 90       	pop	r7
     420:	6f 90       	pop	r6
     422:	5f 90       	pop	r5
     424:	4f 90       	pop	r4
     426:	08 95       	ret

00000428 <_Z18LimitSwitchPinInitv>:
#include "..\Header Files\LimitSwitch.h"

///CREDIT: Adam Baniuszewicz, Bartosz Flis, Jakub Sybidlo
void LimitSwitchPinInit()
{
	pinMode(pinLimitSwitchX, INPUT);
     428:	60 e0       	ldi	r22, 0x00	; 0
     42a:	82 e0       	ldi	r24, 0x02	; 2
     42c:	20 d5       	rcall	.+2624   	; 0xe6e <pinMode>
	pinMode(pinLimitSwitchY, INPUT);
     42e:	60 e0       	ldi	r22, 0x00	; 0
     430:	8f e0       	ldi	r24, 0x0F	; 15
	pinMode(pinLimitSwitchZ, INPUT);
     432:	1d d5       	rcall	.+2618   	; 0xe6e <pinMode>
     434:	60 e0       	ldi	r22, 0x00	; 0
	digitalWrite(pinLimitSwitchX, HIGH);
     436:	83 e1       	ldi	r24, 0x13	; 19
     438:	1a d5       	rcall	.+2612   	; 0xe6e <pinMode>
     43a:	61 e0       	ldi	r22, 0x01	; 1
	digitalWrite(pinLimitSwitchY, HIGH);
     43c:	82 e0       	ldi	r24, 0x02	; 2
     43e:	53 d5       	rcall	.+2726   	; 0xee6 <digitalWrite>
     440:	61 e0       	ldi	r22, 0x01	; 1
	digitalWrite(pinLimitSwitchZ, HIGH);
     442:	8f e0       	ldi	r24, 0x0F	; 15
     444:	50 d5       	rcall	.+2720   	; 0xee6 <digitalWrite>
     446:	61 e0       	ldi	r22, 0x01	; 1
     448:	83 e1       	ldi	r24, 0x13	; 19
     44a:	4d c5       	rjmp	.+2714   	; 0xee6 <digitalWrite>

0000044c <_Z12RemoveSpacesPc>:
#include "stdlib.h"
#include "Arduino.h"

///CREDIT: Adam Baniuszewicz, Bartosz Flis, Jakub Sybidlo
void RemoveSpaces(char* source)
{
     44c:	fc 01       	movw	r30, r24
	char* i = source;
	char* j = source;

	while(*j != '\0')
     44e:	21 91       	ld	r18, Z+
     450:	22 23       	and	r18, r18
     452:	31 f0       	breq	.+12     	; 0x460 <_Z12RemoveSpacesPc+0x14>
	{
		*i = *j++;
     454:	dc 01       	movw	r26, r24
     456:	2c 93       	st	X, r18
		if(*i != ' ')
     458:	20 32       	cpi	r18, 0x20	; 32
     45a:	c9 f3       	breq	.-14     	; 0x44e <_Z12RemoveSpacesPc+0x2>
		i++;
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	f7 cf       	rjmp	.-18     	; 0x44e <_Z12RemoveSpacesPc+0x2>
	}
	*i = 0;
     460:	fc 01       	movw	r30, r24
     462:	10 82       	st	Z, r1
     464:	08 95       	ret

00000466 <_Z23GetNumberAfterCharacterPcc>:
}

///CREDIT: Adam Baniuszewicz, Bartosz Flis, Jakub Sybidlo
double GetNumberAfterCharacter(char* source, char character)
{
	while (*source != '\0')
     466:	fc 01       	movw	r30, r24
     468:	21 91       	ld	r18, Z+
     46a:	cf 01       	movw	r24, r30
     46c:	22 23       	and	r18, r18
     46e:	31 f0       	breq	.+12     	; 0x47c <_Z23GetNumberAfterCharacterPcc+0x16>
	{
		if (*source++ == character)
     470:	26 13       	cpse	r18, r22
     472:	f9 cf       	rjmp	.-14     	; 0x466 <_Z23GetNumberAfterCharacterPcc>
		{
			//extract all digits after desired character
			return strtod(source, NULL);
     474:	60 e0       	ldi	r22, 0x00	; 0
     476:	70 e0       	ldi	r23, 0x00	; 0
     478:	0c 94 e6 0b 	jmp	0x17cc	; 0x17cc <strtod>
		}
	}
	return 0; //returning '0' won't cause any movement
     47c:	60 e0       	ldi	r22, 0x00	; 0
     47e:	70 e0       	ldi	r23, 0x00	; 0
     480:	cb 01       	movw	r24, r22
     482:	08 95       	ret

00000484 <_Z11StepperInitv>:
void ChangeStepperZDir(bool dirZ)
{
	if (dirZ)
		pinMode(pinDirZ, HIGH);
	else 
		pinMode(pinDirZ, LOW);
     484:	61 e0       	ldi	r22, 0x01	; 1
     486:	87 e3       	ldi	r24, 0x37	; 55
     488:	f2 d4       	rcall	.+2532   	; 0xe6e <pinMode>
     48a:	61 e0       	ldi	r22, 0x01	; 1
     48c:	8d e3       	ldi	r24, 0x3D	; 61
     48e:	ef d4       	rcall	.+2526   	; 0xe6e <pinMode>
     490:	61 e0       	ldi	r22, 0x01	; 1
     492:	80 e3       	ldi	r24, 0x30	; 48
     494:	ec d4       	rcall	.+2520   	; 0xe6e <pinMode>
     496:	61 e0       	ldi	r22, 0x01	; 1
     498:	86 e2       	ldi	r24, 0x26	; 38
     49a:	e9 d4       	rcall	.+2514   	; 0xe6e <pinMode>
     49c:	61 e0       	ldi	r22, 0x01	; 1
     49e:	88 e3       	ldi	r24, 0x38	; 56
     4a0:	e6 d4       	rcall	.+2508   	; 0xe6e <pinMode>
     4a2:	61 e0       	ldi	r22, 0x01	; 1
     4a4:	8e e3       	ldi	r24, 0x3E	; 62
     4a6:	e3 d4       	rcall	.+2502   	; 0xe6e <pinMode>
     4a8:	61 e0       	ldi	r22, 0x01	; 1
     4aa:	85 e3       	ldi	r24, 0x35	; 53
     4ac:	e0 d4       	rcall	.+2496   	; 0xe6e <pinMode>
     4ae:	61 e0       	ldi	r22, 0x01	; 1
     4b0:	81 e3       	ldi	r24, 0x31	; 49
     4b2:	dd d4       	rcall	.+2490   	; 0xe6e <pinMode>
     4b4:	61 e0       	ldi	r22, 0x01	; 1
     4b6:	88 e2       	ldi	r24, 0x28	; 40
     4b8:	da d4       	rcall	.+2484   	; 0xe6e <pinMode>
     4ba:	61 e0       	ldi	r22, 0x01	; 1
     4bc:	86 e3       	ldi	r24, 0x36	; 54
     4be:	d7 d4       	rcall	.+2478   	; 0xe6e <pinMode>
     4c0:	61 e0       	ldi	r22, 0x01	; 1
     4c2:	8c e3       	ldi	r24, 0x3C	; 60
     4c4:	d4 d4       	rcall	.+2472   	; 0xe6e <pinMode>
     4c6:	61 e0       	ldi	r22, 0x01	; 1
     4c8:	8e e2       	ldi	r24, 0x2E	; 46
     4ca:	d1 c4       	rjmp	.+2466   	; 0xe6e <pinMode>

000004cc <_Z11MovementXYZPiS_S_bbb>:
}

///CREDIT: Adam Baniuszewicz, Bartosz Flis, Jakub Sybidlo
void MovementXYZ(int *SteppsX, int *SteppsY, int *SteppsZ, bool switchX, bool switchY, bool switchZ)
{
     4cc:	af 92       	push	r10
     4ce:	bf 92       	push	r11
     4d0:	cf 92       	push	r12
     4d2:	df 92       	push	r13
     4d4:	ef 92       	push	r14
     4d6:	0f 93       	push	r16
     4d8:	1f 93       	push	r17
     4da:	cf 93       	push	r28
     4dc:	df 93       	push	r29
     4de:	5c 01       	movw	r10, r24
     4e0:	6b 01       	movw	r12, r22
     4e2:	ea 01       	movw	r28, r20
     4e4:	12 2f       	mov	r17, r18
	if (*SteppsX > 0 && !(switchX))
     4e6:	fc 01       	movw	r30, r24
     4e8:	80 81       	ld	r24, Z
     4ea:	91 81       	ldd	r25, Z+1	; 0x01
     4ec:	18 16       	cp	r1, r24
     4ee:	19 06       	cpc	r1, r25
     4f0:	2c f4       	brge	.+10     	; 0x4fc <_Z11MovementXYZPiS_S_bbb+0x30>
     4f2:	21 11       	cpse	r18, r1
     4f4:	03 c0       	rjmp	.+6      	; 0x4fc <_Z11MovementXYZPiS_S_bbb+0x30>
		digitalWrite(pinStepX, LOW);
     4f6:	60 e0       	ldi	r22, 0x00	; 0
     4f8:	86 e3       	ldi	r24, 0x36	; 54
     4fa:	f5 d4       	rcall	.+2538   	; 0xee6 <digitalWrite>
	if (*SteppsY > 0 && !(switchY))
     4fc:	f6 01       	movw	r30, r12
     4fe:	80 81       	ld	r24, Z
     500:	91 81       	ldd	r25, Z+1	; 0x01
     502:	18 16       	cp	r1, r24
     504:	19 06       	cpc	r1, r25
     506:	2c f4       	brge	.+10     	; 0x512 <_Z11MovementXYZPiS_S_bbb+0x46>
     508:	01 11       	cpse	r16, r1
     50a:	03 c0       	rjmp	.+6      	; 0x512 <_Z11MovementXYZPiS_S_bbb+0x46>
		digitalWrite(pinStepY, LOW);
     50c:	60 e0       	ldi	r22, 0x00	; 0
     50e:	8c e3       	ldi	r24, 0x3C	; 60
     510:	ea d4       	rcall	.+2516   	; 0xee6 <digitalWrite>
	if (*SteppsZ > 0 && !(switchZ))
     512:	88 81       	ld	r24, Y
     514:	99 81       	ldd	r25, Y+1	; 0x01
     516:	18 16       	cp	r1, r24
     518:	19 06       	cpc	r1, r25
     51a:	2c f4       	brge	.+10     	; 0x526 <_Z11MovementXYZPiS_S_bbb+0x5a>
     51c:	e1 10       	cpse	r14, r1
		digitalWrite(pinStepZ, LOW);
     51e:	03 c0       	rjmp	.+6      	; 0x526 <_Z11MovementXYZPiS_S_bbb+0x5a>
     520:	60 e0       	ldi	r22, 0x00	; 0
     522:	8e e2       	ldi	r24, 0x2E	; 46
	
	delay(1);
     524:	e0 d4       	rcall	.+2496   	; 0xee6 <digitalWrite>
     526:	61 e0       	ldi	r22, 0x01	; 1
     528:	70 e0       	ldi	r23, 0x00	; 0
     52a:	80 e0       	ldi	r24, 0x00	; 0
     52c:	90 e0       	ldi	r25, 0x00	; 0

	if (*SteppsX > 0 && !(switchX))
     52e:	af d3       	rcall	.+1886   	; 0xc8e <delay>
     530:	f5 01       	movw	r30, r10
     532:	80 81       	ld	r24, Z
     534:	91 81       	ldd	r25, Z+1	; 0x01
     536:	18 16       	cp	r1, r24
     538:	19 06       	cpc	r1, r25
	{
		digitalWrite(pinStepX, HIGH);
     53a:	5c f4       	brge	.+22     	; 0x552 <_Z11MovementXYZPiS_S_bbb+0x86>
     53c:	11 11       	cpse	r17, r1
     53e:	09 c0       	rjmp	.+18     	; 0x552 <_Z11MovementXYZPiS_S_bbb+0x86>
     540:	61 e0       	ldi	r22, 0x01	; 1
		(*SteppsX)--;
     542:	86 e3       	ldi	r24, 0x36	; 54
     544:	d0 d4       	rcall	.+2464   	; 0xee6 <digitalWrite>
     546:	f5 01       	movw	r30, r10
     548:	80 81       	ld	r24, Z
     54a:	91 81       	ldd	r25, Z+1	; 0x01
     54c:	01 97       	sbiw	r24, 0x01	; 1
	}
	if (*SteppsY > 0 && !(switchY))
     54e:	91 83       	std	Z+1, r25	; 0x01
     550:	80 83       	st	Z, r24
     552:	f6 01       	movw	r30, r12
     554:	80 81       	ld	r24, Z
     556:	91 81       	ldd	r25, Z+1	; 0x01
     558:	18 16       	cp	r1, r24
     55a:	19 06       	cpc	r1, r25
	{
		digitalWrite(pinStepY, HIGH);
     55c:	5c f4       	brge	.+22     	; 0x574 <_Z11MovementXYZPiS_S_bbb+0xa8>
     55e:	01 11       	cpse	r16, r1
     560:	09 c0       	rjmp	.+18     	; 0x574 <_Z11MovementXYZPiS_S_bbb+0xa8>
     562:	61 e0       	ldi	r22, 0x01	; 1
		(*SteppsY)--;
     564:	8c e3       	ldi	r24, 0x3C	; 60
     566:	bf d4       	rcall	.+2430   	; 0xee6 <digitalWrite>
     568:	f6 01       	movw	r30, r12
     56a:	80 81       	ld	r24, Z
     56c:	91 81       	ldd	r25, Z+1	; 0x01
     56e:	01 97       	sbiw	r24, 0x01	; 1
	}
	if (*SteppsZ > 0 && !(switchZ))
     570:	91 83       	std	Z+1, r25	; 0x01
     572:	80 83       	st	Z, r24
     574:	88 81       	ld	r24, Y
     576:	99 81       	ldd	r25, Y+1	; 0x01
     578:	18 16       	cp	r1, r24
     57a:	19 06       	cpc	r1, r25
	{
		digitalWrite(pinStepZ, LOW);
     57c:	54 f4       	brge	.+20     	; 0x592 <_Z11MovementXYZPiS_S_bbb+0xc6>
     57e:	e1 10       	cpse	r14, r1
     580:	08 c0       	rjmp	.+16     	; 0x592 <_Z11MovementXYZPiS_S_bbb+0xc6>
     582:	60 e0       	ldi	r22, 0x00	; 0
		(*SteppsZ)--;
     584:	8e e2       	ldi	r24, 0x2E	; 46
     586:	af d4       	rcall	.+2398   	; 0xee6 <digitalWrite>
     588:	88 81       	ld	r24, Y
     58a:	99 81       	ldd	r25, Y+1	; 0x01
     58c:	01 97       	sbiw	r24, 0x01	; 1
	}
	delay(1);
     58e:	99 83       	std	Y+1, r25	; 0x01
     590:	88 83       	st	Y, r24
     592:	61 e0       	ldi	r22, 0x01	; 1
     594:	70 e0       	ldi	r23, 0x00	; 0
     596:	80 e0       	ldi	r24, 0x00	; 0
     598:	90 e0       	ldi	r25, 0x00	; 0
     59a:	df 91       	pop	r29
     59c:	cf 91       	pop	r28
     59e:	1f 91       	pop	r17
     5a0:	0f 91       	pop	r16
     5a2:	ef 90       	pop	r14
     5a4:	df 90       	pop	r13
	if (*SteppsZ > 0 && !(switchZ))
	{
		digitalWrite(pinStepZ, LOW);
		(*SteppsZ)--;
	}
	delay(1);
     5a6:	cf 90       	pop	r12
     5a8:	bf 90       	pop	r11
     5aa:	af 90       	pop	r10
     5ac:	70 c3       	rjmp	.+1760   	; 0xc8e <delay>

000005ae <__fixsfsi>:
     5ae:	04 d0       	rcall	.+8      	; 0x5b8 <__fixunssfsi>
     5b0:	68 94       	set
     5b2:	b1 11       	cpse	r27, r1
     5b4:	50 c0       	rjmp	.+160    	; 0x656 <__fp_szero>
     5b6:	08 95       	ret

000005b8 <__fixunssfsi>:
     5b8:	33 d0       	rcall	.+102    	; 0x620 <__fp_splitA>
     5ba:	88 f0       	brcs	.+34     	; 0x5de <__fixunssfsi+0x26>
     5bc:	9f 57       	subi	r25, 0x7F	; 127
     5be:	90 f0       	brcs	.+36     	; 0x5e4 <__fixunssfsi+0x2c>
     5c0:	b9 2f       	mov	r27, r25
     5c2:	99 27       	eor	r25, r25
     5c4:	b7 51       	subi	r27, 0x17	; 23
     5c6:	a0 f0       	brcs	.+40     	; 0x5f0 <__fixunssfsi+0x38>
     5c8:	d1 f0       	breq	.+52     	; 0x5fe <__fixunssfsi+0x46>
     5ca:	66 0f       	add	r22, r22
     5cc:	77 1f       	adc	r23, r23
     5ce:	88 1f       	adc	r24, r24
     5d0:	99 1f       	adc	r25, r25
     5d2:	1a f0       	brmi	.+6      	; 0x5da <__fixunssfsi+0x22>
     5d4:	ba 95       	dec	r27
     5d6:	c9 f7       	brne	.-14     	; 0x5ca <__fixunssfsi+0x12>
     5d8:	12 c0       	rjmp	.+36     	; 0x5fe <__fixunssfsi+0x46>
     5da:	b1 30       	cpi	r27, 0x01	; 1
     5dc:	81 f0       	breq	.+32     	; 0x5fe <__fixunssfsi+0x46>
     5de:	3a d0       	rcall	.+116    	; 0x654 <__fp_zero>
     5e0:	b1 e0       	ldi	r27, 0x01	; 1
     5e2:	08 95       	ret
     5e4:	37 c0       	rjmp	.+110    	; 0x654 <__fp_zero>
     5e6:	67 2f       	mov	r22, r23
     5e8:	78 2f       	mov	r23, r24
     5ea:	88 27       	eor	r24, r24
     5ec:	b8 5f       	subi	r27, 0xF8	; 248
     5ee:	39 f0       	breq	.+14     	; 0x5fe <__fixunssfsi+0x46>
     5f0:	b9 3f       	cpi	r27, 0xF9	; 249
     5f2:	cc f3       	brlt	.-14     	; 0x5e6 <__fixunssfsi+0x2e>
     5f4:	86 95       	lsr	r24
     5f6:	77 95       	ror	r23
     5f8:	67 95       	ror	r22
     5fa:	b3 95       	inc	r27
     5fc:	d9 f7       	brne	.-10     	; 0x5f4 <__fixunssfsi+0x3c>
     5fe:	3e f4       	brtc	.+14     	; 0x60e <__fixunssfsi+0x56>
     600:	90 95       	com	r25
     602:	80 95       	com	r24
     604:	70 95       	com	r23
     606:	61 95       	neg	r22
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	8f 4f       	sbci	r24, 0xFF	; 255
     60c:	9f 4f       	sbci	r25, 0xFF	; 255
     60e:	08 95       	ret

00000610 <__fp_split3>:
     610:	57 fd       	sbrc	r21, 7
     612:	90 58       	subi	r25, 0x80	; 128
     614:	44 0f       	add	r20, r20
     616:	55 1f       	adc	r21, r21
     618:	59 f0       	breq	.+22     	; 0x630 <__fp_splitA+0x10>
     61a:	5f 3f       	cpi	r21, 0xFF	; 255
     61c:	71 f0       	breq	.+28     	; 0x63a <__fp_splitA+0x1a>
     61e:	47 95       	ror	r20

00000620 <__fp_splitA>:
     620:	88 0f       	add	r24, r24
     622:	97 fb       	bst	r25, 7
     624:	99 1f       	adc	r25, r25
     626:	61 f0       	breq	.+24     	; 0x640 <__fp_splitA+0x20>
     628:	9f 3f       	cpi	r25, 0xFF	; 255
     62a:	79 f0       	breq	.+30     	; 0x64a <__fp_splitA+0x2a>
     62c:	87 95       	ror	r24
     62e:	08 95       	ret
     630:	12 16       	cp	r1, r18
     632:	13 06       	cpc	r1, r19
     634:	14 06       	cpc	r1, r20
     636:	55 1f       	adc	r21, r21
     638:	f2 cf       	rjmp	.-28     	; 0x61e <__fp_split3+0xe>
     63a:	46 95       	lsr	r20
     63c:	f1 df       	rcall	.-30     	; 0x620 <__fp_splitA>
     63e:	08 c0       	rjmp	.+16     	; 0x650 <__fp_splitA+0x30>
     640:	16 16       	cp	r1, r22
     642:	17 06       	cpc	r1, r23
     644:	18 06       	cpc	r1, r24
     646:	99 1f       	adc	r25, r25
     648:	f1 cf       	rjmp	.-30     	; 0x62c <__fp_splitA+0xc>
     64a:	86 95       	lsr	r24
     64c:	71 05       	cpc	r23, r1
     64e:	61 05       	cpc	r22, r1
     650:	08 94       	sec
     652:	08 95       	ret

00000654 <__fp_zero>:
     654:	e8 94       	clt

00000656 <__fp_szero>:
     656:	bb 27       	eor	r27, r27
     658:	66 27       	eor	r22, r22
     65a:	77 27       	eor	r23, r23
     65c:	cb 01       	movw	r24, r22
     65e:	97 f9       	bld	r25, 7
     660:	08 95       	ret

00000662 <_ZN14HardwareSerial9availableEv>:
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
     662:	fc 01       	movw	r30, r24
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
     664:	91 8d       	ldd	r25, Z+25	; 0x19
     666:	22 8d       	ldd	r18, Z+26	; 0x1a
     668:	89 2f       	mov	r24, r25
     66a:	90 e0       	ldi	r25, 0x00	; 0
     66c:	80 5c       	subi	r24, 0xC0	; 192
     66e:	9f 4f       	sbci	r25, 0xFF	; 255
     670:	82 1b       	sub	r24, r18
     672:	91 09       	sbc	r25, r1
}
     674:	8f 73       	andi	r24, 0x3F	; 63
     676:	99 27       	eor	r25, r25
     678:	08 95       	ret

0000067a <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
     67a:	fc 01       	movw	r30, r24
  if (_rx_buffer_head == _rx_buffer_tail) {
     67c:	91 8d       	ldd	r25, Z+25	; 0x19
     67e:	82 8d       	ldd	r24, Z+26	; 0x1a
     680:	98 17       	cp	r25, r24
     682:	31 f0       	breq	.+12     	; 0x690 <_ZN14HardwareSerial4peekEv+0x16>
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
     684:	82 8d       	ldd	r24, Z+26	; 0x1a
     686:	e8 0f       	add	r30, r24
     688:	f1 1d       	adc	r31, r1
     68a:	85 8d       	ldd	r24, Z+29	; 0x1d
     68c:	90 e0       	ldi	r25, 0x00	; 0
     68e:	08 95       	ret
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
     690:	8f ef       	ldi	r24, 0xFF	; 255
     692:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
     694:	08 95       	ret

00000696 <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
     696:	fc 01       	movw	r30, r24
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
     698:	91 8d       	ldd	r25, Z+25	; 0x19
     69a:	82 8d       	ldd	r24, Z+26	; 0x1a
     69c:	98 17       	cp	r25, r24
     69e:	61 f0       	breq	.+24     	; 0x6b8 <_ZN14HardwareSerial4readEv+0x22>
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
     6a0:	82 8d       	ldd	r24, Z+26	; 0x1a
     6a2:	df 01       	movw	r26, r30
     6a4:	a8 0f       	add	r26, r24
     6a6:	b1 1d       	adc	r27, r1
     6a8:	5d 96       	adiw	r26, 0x1d	; 29
     6aa:	8c 91       	ld	r24, X
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
     6ac:	92 8d       	ldd	r25, Z+26	; 0x1a
     6ae:	9f 5f       	subi	r25, 0xFF	; 255
     6b0:	9f 73       	andi	r25, 0x3F	; 63
     6b2:	92 8f       	std	Z+26, r25	; 0x1a
    return c;
     6b4:	90 e0       	ldi	r25, 0x00	; 0
     6b6:	08 95       	ret

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
     6b8:	8f ef       	ldi	r24, 0xFF	; 255
     6ba:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
     6bc:	08 95       	ret

000006be <_ZN14HardwareSerial17availableForWriteEv>:
{
#if (SERIAL_TX_BUFFER_SIZE>256)
  uint8_t oldSREG = SREG;
  cli();
#endif
  tx_buffer_index_t head = _tx_buffer_head;
     6be:	fc 01       	movw	r30, r24
     6c0:	53 8d       	ldd	r21, Z+27	; 0x1b
  tx_buffer_index_t tail = _tx_buffer_tail;
     6c2:	44 8d       	ldd	r20, Z+28	; 0x1c
     6c4:	25 2f       	mov	r18, r21
     6c6:	30 e0       	ldi	r19, 0x00	; 0
     6c8:	84 2f       	mov	r24, r20
     6ca:	90 e0       	ldi	r25, 0x00	; 0
#if (SERIAL_TX_BUFFER_SIZE>256)
  SREG = oldSREG;
#endif
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
     6cc:	82 1b       	sub	r24, r18
     6ce:	93 0b       	sbc	r25, r19
     6d0:	54 17       	cp	r21, r20
     6d2:	10 f0       	brcs	.+4      	; 0x6d8 <_ZN14HardwareSerial17availableForWriteEv+0x1a>
     6d4:	cf 96       	adiw	r24, 0x3f	; 63
     6d6:	08 95       	ret
  return tail - head - 1;
     6d8:	01 97       	sbiw	r24, 0x01	; 1
}
     6da:	08 95       	ret

000006dc <_Z14serialEventRunv>:
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
     6dc:	84 ef       	ldi	r24, 0xF4	; 244
     6de:	94 e0       	ldi	r25, 0x04	; 4
     6e0:	89 2b       	or	r24, r25
     6e2:	39 f0       	breq	.+14     	; 0x6f2 <_Z14serialEventRunv+0x16>
     6e4:	80 e0       	ldi	r24, 0x00	; 0
     6e6:	90 e0       	ldi	r25, 0x00	; 0
     6e8:	89 2b       	or	r24, r25
     6ea:	19 f0       	breq	.+6      	; 0x6f2 <_Z14serialEventRunv+0x16>
     6ec:	7d d1       	rcall	.+762    	; 0x9e8 <_Z17Serial0_availablev>
     6ee:	81 11       	cpse	r24, r1
#endif
#if defined(HAVE_HWSERIAL1)
  if (Serial1_available && serialEvent1 && Serial1_available()) serialEvent1();
     6f0:	25 c0       	rjmp	.+74     	; 0x73c <_Z14serialEventRunv+0x60>
     6f2:	80 e0       	ldi	r24, 0x00	; 0
     6f4:	90 e0       	ldi	r25, 0x00	; 0
     6f6:	89 2b       	or	r24, r25
     6f8:	41 f0       	breq	.+16     	; 0x70a <_Z14serialEventRunv+0x2e>
     6fa:	80 e0       	ldi	r24, 0x00	; 0
     6fc:	90 e0       	ldi	r25, 0x00	; 0
     6fe:	89 2b       	or	r24, r25
     700:	21 f0       	breq	.+8      	; 0x70a <_Z14serialEventRunv+0x2e>
     702:	0e 94 00 00 	call	0	; 0x0 <__vectors>
     706:	81 11       	cpse	r24, r1
#endif
#if defined(HAVE_HWSERIAL2)
  if (Serial2_available && serialEvent2 && Serial2_available()) serialEvent2();
     708:	1c c0       	rjmp	.+56     	; 0x742 <_Z14serialEventRunv+0x66>
     70a:	80 e0       	ldi	r24, 0x00	; 0
     70c:	90 e0       	ldi	r25, 0x00	; 0
     70e:	89 2b       	or	r24, r25
     710:	41 f0       	breq	.+16     	; 0x722 <_Z14serialEventRunv+0x46>
     712:	80 e0       	ldi	r24, 0x00	; 0
     714:	90 e0       	ldi	r25, 0x00	; 0
     716:	89 2b       	or	r24, r25
     718:	21 f0       	breq	.+8      	; 0x722 <_Z14serialEventRunv+0x46>
     71a:	0e 94 00 00 	call	0	; 0x0 <__vectors>
     71e:	81 11       	cpse	r24, r1
#endif
#if defined(HAVE_HWSERIAL3)
  if (Serial3_available && serialEvent3 && Serial3_available()) serialEvent3();
     720:	13 c0       	rjmp	.+38     	; 0x748 <_Z14serialEventRunv+0x6c>
     722:	80 e0       	ldi	r24, 0x00	; 0
     724:	90 e0       	ldi	r25, 0x00	; 0
     726:	89 2b       	or	r24, r25
     728:	a1 f0       	breq	.+40     	; 0x752 <_Z14serialEventRunv+0x76>
     72a:	80 e0       	ldi	r24, 0x00	; 0
     72c:	90 e0       	ldi	r25, 0x00	; 0
     72e:	89 2b       	or	r24, r25
     730:	81 f0       	breq	.+32     	; 0x752 <_Z14serialEventRunv+0x76>
     732:	0e 94 00 00 	call	0	; 0x0 <__vectors>
     736:	81 11       	cpse	r24, r1
     738:	0a c0       	rjmp	.+20     	; 0x74e <_Z14serialEventRunv+0x72>
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
     73a:	08 95       	ret
     73c:	0e 94 00 00 	call	0	; 0x0 <__vectors>
#endif
#if defined(HAVE_HWSERIAL1)
  if (Serial1_available && serialEvent1 && Serial1_available()) serialEvent1();
     740:	d8 cf       	rjmp	.-80     	; 0x6f2 <_Z14serialEventRunv+0x16>
     742:	0e 94 00 00 	call	0	; 0x0 <__vectors>
#endif
#if defined(HAVE_HWSERIAL2)
  if (Serial2_available && serialEvent2 && Serial2_available()) serialEvent2();
     746:	e1 cf       	rjmp	.-62     	; 0x70a <_Z14serialEventRunv+0x2e>
     748:	0e 94 00 00 	call	0	; 0x0 <__vectors>
#endif
#if defined(HAVE_HWSERIAL3)
  if (Serial3_available && serialEvent3 && Serial3_available()) serialEvent3();
     74c:	ea cf       	rjmp	.-44     	; 0x722 <_Z14serialEventRunv+0x46>
     74e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
     752:	08 95       	ret

00000754 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
}

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
     754:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
     756:	84 8d       	ldd	r24, Z+28	; 0x1c
     758:	df 01       	movw	r26, r30
     75a:	a8 0f       	add	r26, r24
     75c:	b1 1d       	adc	r27, r1
     75e:	a3 5a       	subi	r26, 0xA3	; 163
     760:	bf 4f       	sbci	r27, 0xFF	; 255
     762:	2c 91       	ld	r18, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
     764:	84 8d       	ldd	r24, Z+28	; 0x1c
     766:	90 e0       	ldi	r25, 0x00	; 0
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	8f 73       	andi	r24, 0x3F	; 63
     76c:	99 27       	eor	r25, r25
     76e:	84 8f       	std	Z+28, r24	; 0x1c

  *_udr = c;
     770:	a6 89       	ldd	r26, Z+22	; 0x16
     772:	b7 89       	ldd	r27, Z+23	; 0x17
     774:	2c 93       	st	X, r18

  // clear the TXC bit -- "can be cleared by writing a one to its bit
  // location". This makes sure flush() won't return until the bytes
  // actually got written
  sbi(*_ucsra, TXC0);
     776:	a0 89       	ldd	r26, Z+16	; 0x10
     778:	b1 89       	ldd	r27, Z+17	; 0x11
     77a:	8c 91       	ld	r24, X
     77c:	80 64       	ori	r24, 0x40	; 64
     77e:	8c 93       	st	X, r24

  if (_tx_buffer_head == _tx_buffer_tail) {
     780:	93 8d       	ldd	r25, Z+27	; 0x1b
     782:	84 8d       	ldd	r24, Z+28	; 0x1c
     784:	98 13       	cpse	r25, r24
     786:	06 c0       	rjmp	.+12     	; 0x794 <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x40>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
     788:	02 88       	ldd	r0, Z+18	; 0x12
     78a:	f3 89       	ldd	r31, Z+19	; 0x13
     78c:	e0 2d       	mov	r30, r0
     78e:	80 81       	ld	r24, Z
     790:	8f 7d       	andi	r24, 0xDF	; 223
     792:	80 83       	st	Z, r24
     794:	08 95       	ret

00000796 <_ZN14HardwareSerial5writeEh>:
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}

size_t HardwareSerial::write(uint8_t c)
{
     796:	ef 92       	push	r14
     798:	ff 92       	push	r15
     79a:	0f 93       	push	r16
     79c:	1f 93       	push	r17
     79e:	cf 93       	push	r28
     7a0:	df 93       	push	r29
     7a2:	ec 01       	movw	r28, r24
  _written = true;
     7a4:	81 e0       	ldi	r24, 0x01	; 1
     7a6:	88 8f       	std	Y+24, r24	; 0x18
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
     7a8:	9b 8d       	ldd	r25, Y+27	; 0x1b
     7aa:	8c 8d       	ldd	r24, Y+28	; 0x1c
     7ac:	98 13       	cpse	r25, r24
     7ae:	05 c0       	rjmp	.+10     	; 0x7ba <_ZN14HardwareSerial5writeEh+0x24>
     7b0:	e8 89       	ldd	r30, Y+16	; 0x10
     7b2:	f9 89       	ldd	r31, Y+17	; 0x11
     7b4:	80 81       	ld	r24, Z
     7b6:	85 fd       	sbrc	r24, 5
     7b8:	23 c0       	rjmp	.+70     	; 0x800 <_ZN14HardwareSerial5writeEh+0x6a>
     7ba:	f6 2e       	mov	r15, r22
    *_udr = c;
    sbi(*_ucsra, TXC0);
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
     7bc:	0b 8d       	ldd	r16, Y+27	; 0x1b
     7be:	10 e0       	ldi	r17, 0x00	; 0
     7c0:	0f 5f       	subi	r16, 0xFF	; 255
     7c2:	1f 4f       	sbci	r17, 0xFF	; 255
     7c4:	0f 73       	andi	r16, 0x3F	; 63
     7c6:	11 27       	eor	r17, r17
     7c8:	e0 2e       	mov	r14, r16
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
     7ca:	8c 8d       	ldd	r24, Y+28	; 0x1c
     7cc:	e8 12       	cpse	r14, r24
     7ce:	0b c0       	rjmp	.+22     	; 0x7e6 <_ZN14HardwareSerial5writeEh+0x50>
    if (bit_is_clear(SREG, SREG_I)) {
     7d0:	0f b6       	in	r0, 0x3f	; 63
     7d2:	07 fc       	sbrc	r0, 7
     7d4:	fa cf       	rjmp	.-12     	; 0x7ca <_ZN14HardwareSerial5writeEh+0x34>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
     7d6:	e8 89       	ldd	r30, Y+16	; 0x10
     7d8:	f9 89       	ldd	r31, Y+17	; 0x11
     7da:	80 81       	ld	r24, Z
     7dc:	85 ff       	sbrs	r24, 5
     7de:	f5 cf       	rjmp	.-22     	; 0x7ca <_ZN14HardwareSerial5writeEh+0x34>
	_tx_udr_empty_irq();
     7e0:	ce 01       	movw	r24, r28
     7e2:	b8 df       	rcall	.-144    	; 0x754 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
     7e4:	f2 cf       	rjmp	.-28     	; 0x7ca <_ZN14HardwareSerial5writeEh+0x34>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
     7e6:	8b 8d       	ldd	r24, Y+27	; 0x1b
     7e8:	fe 01       	movw	r30, r28
     7ea:	e8 0f       	add	r30, r24
     7ec:	f1 1d       	adc	r31, r1
     7ee:	e3 5a       	subi	r30, 0xA3	; 163
     7f0:	ff 4f       	sbci	r31, 0xFF	; 255
     7f2:	f0 82       	st	Z, r15
  _tx_buffer_head = i;
     7f4:	0b 8f       	std	Y+27, r16	; 0x1b
	
  sbi(*_ucsrb, UDRIE0);
     7f6:	ea 89       	ldd	r30, Y+18	; 0x12
     7f8:	fb 89       	ldd	r31, Y+19	; 0x13
     7fa:	80 81       	ld	r24, Z
     7fc:	80 62       	ori	r24, 0x20	; 32
     7fe:	07 c0       	rjmp	.+14     	; 0x80e <_ZN14HardwareSerial5writeEh+0x78>
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    *_udr = c;
     800:	ee 89       	ldd	r30, Y+22	; 0x16
     802:	ff 89       	ldd	r31, Y+23	; 0x17
     804:	60 83       	st	Z, r22
    sbi(*_ucsra, TXC0);
     806:	e8 89       	ldd	r30, Y+16	; 0x10
     808:	f9 89       	ldd	r31, Y+17	; 0x11
     80a:	80 81       	ld	r24, Z
     80c:	80 64       	ori	r24, 0x40	; 64
     80e:	80 83       	st	Z, r24
  _tx_buffer_head = i;
	
  sbi(*_ucsrb, UDRIE0);
  
  return 1;
}
     810:	81 e0       	ldi	r24, 0x01	; 1
     812:	90 e0       	ldi	r25, 0x00	; 0
     814:	df 91       	pop	r29
     816:	cf 91       	pop	r28
     818:	1f 91       	pop	r17
     81a:	0f 91       	pop	r16
     81c:	ff 90       	pop	r15
     81e:	ef 90       	pop	r14
     820:	08 95       	ret

00000822 <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
     822:	cf 93       	push	r28
     824:	df 93       	push	r29
     826:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
     828:	88 8d       	ldd	r24, Y+24	; 0x18
     82a:	88 23       	and	r24, r24
     82c:	c1 f0       	breq	.+48     	; 0x85e <_ZN14HardwareSerial5flushEv+0x3c>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
     82e:	ea 89       	ldd	r30, Y+18	; 0x12
     830:	fb 89       	ldd	r31, Y+19	; 0x13
     832:	80 81       	ld	r24, Z
     834:	85 fd       	sbrc	r24, 5
     836:	05 c0       	rjmp	.+10     	; 0x842 <_ZN14HardwareSerial5flushEv+0x20>
     838:	a8 89       	ldd	r26, Y+16	; 0x10
     83a:	b9 89       	ldd	r27, Y+17	; 0x11
     83c:	8c 91       	ld	r24, X
     83e:	86 fd       	sbrc	r24, 6
     840:	0e c0       	rjmp	.+28     	; 0x85e <_ZN14HardwareSerial5flushEv+0x3c>
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
     842:	0f b6       	in	r0, 0x3f	; 63
     844:	07 fc       	sbrc	r0, 7
     846:	f5 cf       	rjmp	.-22     	; 0x832 <_ZN14HardwareSerial5flushEv+0x10>
     848:	80 81       	ld	r24, Z
     84a:	85 ff       	sbrs	r24, 5
     84c:	f2 cf       	rjmp	.-28     	; 0x832 <_ZN14HardwareSerial5flushEv+0x10>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
     84e:	a8 89       	ldd	r26, Y+16	; 0x10
     850:	b9 89       	ldd	r27, Y+17	; 0x11
     852:	8c 91       	ld	r24, X
     854:	85 ff       	sbrs	r24, 5
     856:	ed cf       	rjmp	.-38     	; 0x832 <_ZN14HardwareSerial5flushEv+0x10>
	  _tx_udr_empty_irq();
     858:	ce 01       	movw	r24, r28
     85a:	7c df       	rcall	.-264    	; 0x754 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
     85c:	e8 cf       	rjmp	.-48     	; 0x82e <_ZN14HardwareSerial5flushEv+0xc>
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
     85e:	df 91       	pop	r29
     860:	cf 91       	pop	r28
     862:	08 95       	ret

00000864 <_ZN14HardwareSerial5beginEmh>:
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
     864:	cf 92       	push	r12
     866:	df 92       	push	r13
     868:	ef 92       	push	r14
     86a:	ff 92       	push	r15
     86c:	1f 93       	push	r17
     86e:	cf 93       	push	r28
     870:	df 93       	push	r29
     872:	ec 01       	movw	r28, r24
     874:	6a 01       	movw	r12, r20
     876:	7b 01       	movw	r14, r22
     878:	12 2f       	mov	r17, r18
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
     87a:	e8 89       	ldd	r30, Y+16	; 0x10
     87c:	f9 89       	ldd	r31, Y+17	; 0x11
     87e:	82 e0       	ldi	r24, 0x02	; 2
     880:	80 83       	st	Z, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
     882:	41 15       	cp	r20, r1
     884:	51 4e       	sbci	r21, 0xE1	; 225
     886:	61 05       	cpc	r22, r1
     888:	71 05       	cpc	r23, r1
     88a:	a9 f0       	breq	.+42     	; 0x8b6 <_ZN14HardwareSerial5beginEmh+0x52>
// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
     88c:	60 e0       	ldi	r22, 0x00	; 0
     88e:	79 e0       	ldi	r23, 0x09	; 9
     890:	8d e3       	ldi	r24, 0x3D	; 61
     892:	90 e0       	ldi	r25, 0x00	; 0
     894:	a7 01       	movw	r20, r14
     896:	96 01       	movw	r18, r12
     898:	55 d5       	rcall	.+2730   	; 0x1344 <__udivmodsi4>
     89a:	da 01       	movw	r26, r20
     89c:	c9 01       	movw	r24, r18
     89e:	01 97       	sbiw	r24, 0x01	; 1
     8a0:	a1 09       	sbc	r26, r1
     8a2:	b1 09       	sbc	r27, r1
     8a4:	b6 95       	lsr	r27
     8a6:	a7 95       	ror	r26
     8a8:	97 95       	ror	r25
     8aa:	87 95       	ror	r24
     8ac:	9c 01       	movw	r18, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
     8ae:	21 15       	cp	r18, r1
     8b0:	80 e1       	ldi	r24, 0x10	; 16
     8b2:	38 07       	cpc	r19, r24
     8b4:	a0 f0       	brcs	.+40     	; 0x8de <_ZN14HardwareSerial5beginEmh+0x7a>
  {
    *_ucsra = 0;
     8b6:	e8 89       	ldd	r30, Y+16	; 0x10
     8b8:	f9 89       	ldd	r31, Y+17	; 0x11
     8ba:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
     8bc:	60 e8       	ldi	r22, 0x80	; 128
     8be:	74 e8       	ldi	r23, 0x84	; 132
     8c0:	8e e1       	ldi	r24, 0x1E	; 30
     8c2:	90 e0       	ldi	r25, 0x00	; 0
     8c4:	a7 01       	movw	r20, r14
     8c6:	96 01       	movw	r18, r12
     8c8:	3d d5       	rcall	.+2682   	; 0x1344 <__udivmodsi4>
     8ca:	da 01       	movw	r26, r20
     8cc:	c9 01       	movw	r24, r18
     8ce:	01 97       	sbiw	r24, 0x01	; 1
     8d0:	a1 09       	sbc	r26, r1
     8d2:	b1 09       	sbc	r27, r1
     8d4:	b6 95       	lsr	r27
     8d6:	a7 95       	ror	r26
     8d8:	97 95       	ror	r25
     8da:	87 95       	ror	r24
     8dc:	9c 01       	movw	r18, r24
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
     8de:	ec 85       	ldd	r30, Y+12	; 0x0c
     8e0:	fd 85       	ldd	r31, Y+13	; 0x0d
     8e2:	30 83       	st	Z, r19
  *_ubrrl = baud_setting;
     8e4:	ee 85       	ldd	r30, Y+14	; 0x0e
     8e6:	ff 85       	ldd	r31, Y+15	; 0x0f
     8e8:	20 83       	st	Z, r18

  _written = false;
     8ea:	18 8e       	std	Y+24, r1	; 0x18

  //set the data bits, parity, and stop bits
#if defined(__AVR_ATmega8__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
     8ec:	ec 89       	ldd	r30, Y+20	; 0x14
     8ee:	fd 89       	ldd	r31, Y+21	; 0x15
     8f0:	10 83       	st	Z, r17
  
  sbi(*_ucsrb, RXEN0);
     8f2:	ea 89       	ldd	r30, Y+18	; 0x12
     8f4:	fb 89       	ldd	r31, Y+19	; 0x13
     8f6:	80 81       	ld	r24, Z
     8f8:	80 61       	ori	r24, 0x10	; 16
     8fa:	80 83       	st	Z, r24
  sbi(*_ucsrb, TXEN0);
     8fc:	ea 89       	ldd	r30, Y+18	; 0x12
     8fe:	fb 89       	ldd	r31, Y+19	; 0x13
     900:	80 81       	ld	r24, Z
     902:	88 60       	ori	r24, 0x08	; 8
     904:	80 83       	st	Z, r24
  sbi(*_ucsrb, RXCIE0);
     906:	ea 89       	ldd	r30, Y+18	; 0x12
     908:	fb 89       	ldd	r31, Y+19	; 0x13
     90a:	80 81       	ld	r24, Z
     90c:	80 68       	ori	r24, 0x80	; 128
     90e:	80 83       	st	Z, r24
  cbi(*_ucsrb, UDRIE0);
     910:	ea 89       	ldd	r30, Y+18	; 0x12
     912:	fb 89       	ldd	r31, Y+19	; 0x13
     914:	80 81       	ld	r24, Z
     916:	8f 7d       	andi	r24, 0xDF	; 223
     918:	80 83       	st	Z, r24
}
     91a:	df 91       	pop	r29
     91c:	cf 91       	pop	r28
     91e:	1f 91       	pop	r17
     920:	ff 90       	pop	r15
     922:	ef 90       	pop	r14
     924:	df 90       	pop	r13
     926:	cf 90       	pop	r12
     928:	08 95       	ret

0000092a <__vector_25>:
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
     92a:	1f 92       	push	r1
     92c:	0f 92       	push	r0
     92e:	0f b6       	in	r0, 0x3f	; 63
     930:	0f 92       	push	r0
     932:	11 24       	eor	r1, r1
     934:	0b b6       	in	r0, 0x3b	; 59
     936:	0f 92       	push	r0
     938:	2f 93       	push	r18
     93a:	8f 93       	push	r24
     93c:	9f 93       	push	r25
     93e:	ef 93       	push	r30
     940:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
     942:	e0 91 56 02 	lds	r30, 0x0256	; 0x800256 <__data_end+0x10>
     946:	f0 91 57 02 	lds	r31, 0x0257	; 0x800257 <__data_end+0x11>
     94a:	80 81       	ld	r24, Z
     94c:	e0 91 5c 02 	lds	r30, 0x025C	; 0x80025c <__data_end+0x16>
     950:	f0 91 5d 02 	lds	r31, 0x025D	; 0x80025d <__data_end+0x17>
     954:	82 fd       	sbrc	r24, 2
     956:	12 c0       	rjmp	.+36     	; 0x97c <__vector_25+0x52>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
     958:	90 81       	ld	r25, Z
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
     95a:	80 91 5f 02 	lds	r24, 0x025F	; 0x80025f <__data_end+0x19>
     95e:	8f 5f       	subi	r24, 0xFF	; 255
     960:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
     962:	20 91 60 02 	lds	r18, 0x0260	; 0x800260 <__data_end+0x1a>
     966:	82 17       	cp	r24, r18
     968:	51 f0       	breq	.+20     	; 0x97e <__vector_25+0x54>
      _rx_buffer[_rx_buffer_head] = c;
     96a:	e0 91 5f 02 	lds	r30, 0x025F	; 0x80025f <__data_end+0x19>
     96e:	f0 e0       	ldi	r31, 0x00	; 0
     970:	ea 5b       	subi	r30, 0xBA	; 186
     972:	fd 4f       	sbci	r31, 0xFD	; 253
     974:	95 8f       	std	Z+29, r25	; 0x1d
      _rx_buffer_head = i;
     976:	80 93 5f 02 	sts	0x025F, r24	; 0x80025f <__data_end+0x19>
     97a:	01 c0       	rjmp	.+2      	; 0x97e <__vector_25+0x54>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
     97c:	80 81       	ld	r24, Z
    Serial._rx_complete_irq();
  }
     97e:	ff 91       	pop	r31
     980:	ef 91       	pop	r30
     982:	9f 91       	pop	r25
     984:	8f 91       	pop	r24
     986:	2f 91       	pop	r18
     988:	0f 90       	pop	r0
     98a:	0b be       	out	0x3b, r0	; 59
     98c:	0f 90       	pop	r0
     98e:	0f be       	out	0x3f, r0	; 63
     990:	0f 90       	pop	r0
     992:	1f 90       	pop	r1
     994:	18 95       	reti

00000996 <__vector_26>:
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
     996:	1f 92       	push	r1
     998:	0f 92       	push	r0
     99a:	0f b6       	in	r0, 0x3f	; 63
     99c:	0f 92       	push	r0
     99e:	11 24       	eor	r1, r1
     9a0:	0b b6       	in	r0, 0x3b	; 59
     9a2:	0f 92       	push	r0
     9a4:	2f 93       	push	r18
     9a6:	3f 93       	push	r19
     9a8:	4f 93       	push	r20
     9aa:	5f 93       	push	r21
     9ac:	6f 93       	push	r22
     9ae:	7f 93       	push	r23
     9b0:	8f 93       	push	r24
     9b2:	9f 93       	push	r25
     9b4:	af 93       	push	r26
     9b6:	bf 93       	push	r27
     9b8:	ef 93       	push	r30
     9ba:	ff 93       	push	r31
  Serial._tx_udr_empty_irq();
     9bc:	86 e4       	ldi	r24, 0x46	; 70
     9be:	92 e0       	ldi	r25, 0x02	; 2
     9c0:	c9 de       	rcall	.-622    	; 0x754 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
     9c2:	ff 91       	pop	r31
     9c4:	ef 91       	pop	r30
     9c6:	bf 91       	pop	r27
     9c8:	af 91       	pop	r26
     9ca:	9f 91       	pop	r25
     9cc:	8f 91       	pop	r24
     9ce:	7f 91       	pop	r23
     9d0:	6f 91       	pop	r22
     9d2:	5f 91       	pop	r21
     9d4:	4f 91       	pop	r20
     9d6:	3f 91       	pop	r19
     9d8:	2f 91       	pop	r18
     9da:	0f 90       	pop	r0
     9dc:	0b be       	out	0x3b, r0	; 59
     9de:	0f 90       	pop	r0
     9e0:	0f be       	out	0x3f, r0	; 63
     9e2:	0f 90       	pop	r0
     9e4:	1f 90       	pop	r1
     9e6:	18 95       	reti

000009e8 <_Z17Serial0_availablev>:
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
     9e8:	86 e4       	ldi	r24, 0x46	; 70
     9ea:	92 e0       	ldi	r25, 0x02	; 2
     9ec:	3a de       	rcall	.-908    	; 0x662 <_ZN14HardwareSerial9availableEv>
     9ee:	21 e0       	ldi	r18, 0x01	; 1
     9f0:	89 2b       	or	r24, r25
     9f2:	09 f4       	brne	.+2      	; 0x9f6 <_Z17Serial0_availablev+0xe>
     9f4:	20 e0       	ldi	r18, 0x00	; 0
}
     9f6:	82 2f       	mov	r24, r18
     9f8:	08 95       	ret

000009fa <_GLOBAL__sub_I___vector_25>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
     9fa:	e6 e4       	ldi	r30, 0x46	; 70
     9fc:	f2 e0       	ldi	r31, 0x02	; 2
     9fe:	13 82       	std	Z+3, r1	; 0x03
     a00:	12 82       	std	Z+2, r1	; 0x02
  public:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;

    Stream() {_timeout=1000;}
     a02:	88 ee       	ldi	r24, 0xE8	; 232
     a04:	93 e0       	ldi	r25, 0x03	; 3
     a06:	a0 e0       	ldi	r26, 0x00	; 0
     a08:	b0 e0       	ldi	r27, 0x00	; 0
     a0a:	84 83       	std	Z+4, r24	; 0x04
     a0c:	95 83       	std	Z+5, r25	; 0x05
     a0e:	a6 83       	std	Z+6, r26	; 0x06
     a10:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
     a12:	88 e2       	ldi	r24, 0x28	; 40
     a14:	92 e0       	ldi	r25, 0x02	; 2
     a16:	91 83       	std	Z+1, r25	; 0x01
     a18:	80 83       	st	Z, r24
     a1a:	85 ec       	ldi	r24, 0xC5	; 197
     a1c:	90 e0       	ldi	r25, 0x00	; 0
     a1e:	95 87       	std	Z+13, r25	; 0x0d
     a20:	84 87       	std	Z+12, r24	; 0x0c
     a22:	84 ec       	ldi	r24, 0xC4	; 196
     a24:	90 e0       	ldi	r25, 0x00	; 0
     a26:	97 87       	std	Z+15, r25	; 0x0f
     a28:	86 87       	std	Z+14, r24	; 0x0e
     a2a:	80 ec       	ldi	r24, 0xC0	; 192
     a2c:	90 e0       	ldi	r25, 0x00	; 0
     a2e:	91 8b       	std	Z+17, r25	; 0x11
     a30:	80 8b       	std	Z+16, r24	; 0x10
     a32:	81 ec       	ldi	r24, 0xC1	; 193
     a34:	90 e0       	ldi	r25, 0x00	; 0
     a36:	93 8b       	std	Z+19, r25	; 0x13
     a38:	82 8b       	std	Z+18, r24	; 0x12
     a3a:	82 ec       	ldi	r24, 0xC2	; 194
     a3c:	90 e0       	ldi	r25, 0x00	; 0
     a3e:	95 8b       	std	Z+21, r25	; 0x15
     a40:	84 8b       	std	Z+20, r24	; 0x14
     a42:	86 ec       	ldi	r24, 0xC6	; 198
     a44:	90 e0       	ldi	r25, 0x00	; 0
     a46:	97 8b       	std	Z+23, r25	; 0x17
     a48:	86 8b       	std	Z+22, r24	; 0x16
     a4a:	11 8e       	std	Z+25, r1	; 0x19
     a4c:	12 8e       	std	Z+26, r1	; 0x1a
     a4e:	13 8e       	std	Z+27, r1	; 0x1b
     a50:	14 8e       	std	Z+28, r1	; 0x1c
     a52:	08 95       	ret

00000a54 <initVariant>:
     a54:	08 95       	ret

00000a56 <main>:
void setupUSB() __attribute__((weak));
void setupUSB() { }

int main(void)
{
	init();
     a56:	54 d1       	rcall	.+680    	; 0xd00 <init>
     a58:	fd df       	rcall	.-6      	; 0xa54 <initVariant>
     a5a:	36 dc       	rcall	.-1940   	; 0x2c8 <setup>
     a5c:	ce e6       	ldi	r28, 0x6E	; 110
     a5e:	d3 e0       	ldi	r29, 0x03	; 3
     a60:	42 dc       	rcall	.-1916   	; 0x2e6 <loop>
     a62:	20 97       	sbiw	r28, 0x00	; 0
     a64:	e9 f3       	breq	.-6      	; 0xa60 <main+0xa>
     a66:	3a de       	rcall	.-908    	; 0x6dc <_Z14serialEventRunv>
     a68:	fb cf       	rjmp	.-10     	; 0xa60 <main+0xa>

00000a6a <_ZN5Print5writeEPKhj>:
size_t Print::println(const String &s)
{
  size_t n = print(s);
  n += println();
  return n;
}
     a6a:	cf 92       	push	r12
     a6c:	df 92       	push	r13
     a6e:	ef 92       	push	r14
     a70:	ff 92       	push	r15
     a72:	0f 93       	push	r16
     a74:	1f 93       	push	r17
     a76:	cf 93       	push	r28
     a78:	df 93       	push	r29
     a7a:	6c 01       	movw	r12, r24
     a7c:	7a 01       	movw	r14, r20
     a7e:	8b 01       	movw	r16, r22
     a80:	c0 e0       	ldi	r28, 0x00	; 0
     a82:	d0 e0       	ldi	r29, 0x00	; 0
     a84:	ce 15       	cp	r28, r14
     a86:	df 05       	cpc	r29, r15
     a88:	81 f0       	breq	.+32     	; 0xaaa <_ZN5Print5writeEPKhj+0x40>
     a8a:	d8 01       	movw	r26, r16
     a8c:	6d 91       	ld	r22, X+
     a8e:	8d 01       	movw	r16, r26
     a90:	d6 01       	movw	r26, r12
     a92:	ed 91       	ld	r30, X+
     a94:	fc 91       	ld	r31, X
     a96:	01 90       	ld	r0, Z+
     a98:	f0 81       	ld	r31, Z
     a9a:	e0 2d       	mov	r30, r0
     a9c:	c6 01       	movw	r24, r12
     a9e:	19 95       	eicall
     aa0:	89 2b       	or	r24, r25
     aa2:	11 f0       	breq	.+4      	; 0xaa8 <_ZN5Print5writeEPKhj+0x3e>
     aa4:	21 96       	adiw	r28, 0x01	; 1
     aa6:	ee cf       	rjmp	.-36     	; 0xa84 <_ZN5Print5writeEPKhj+0x1a>
     aa8:	7e 01       	movw	r14, r28
     aaa:	c7 01       	movw	r24, r14
     aac:	df 91       	pop	r29
     aae:	cf 91       	pop	r28
     ab0:	1f 91       	pop	r17
     ab2:	0f 91       	pop	r16
     ab4:	ff 90       	pop	r15
     ab6:	ef 90       	pop	r14
     ab8:	df 90       	pop	r13
     aba:	cf 90       	pop	r12
     abc:	08 95       	ret

00000abe <_ZN5Print5writeEPKc>:
     abe:	61 15       	cp	r22, r1
     ac0:	71 05       	cpc	r23, r1
     ac2:	79 f0       	breq	.+30     	; 0xae2 <_ZN5Print5writeEPKc+0x24>
     ac4:	fb 01       	movw	r30, r22
     ac6:	01 90       	ld	r0, Z+
     ac8:	00 20       	and	r0, r0
     aca:	e9 f7       	brne	.-6      	; 0xac6 <_ZN5Print5writeEPKc+0x8>
     acc:	31 97       	sbiw	r30, 0x01	; 1
     ace:	af 01       	movw	r20, r30
     ad0:	46 1b       	sub	r20, r22
     ad2:	57 0b       	sbc	r21, r23
     ad4:	dc 01       	movw	r26, r24
     ad6:	ed 91       	ld	r30, X+
     ad8:	fc 91       	ld	r31, X
     ada:	02 80       	ldd	r0, Z+2	; 0x02
     adc:	f3 81       	ldd	r31, Z+3	; 0x03
     ade:	e0 2d       	mov	r30, r0
     ae0:	19 94       	eijmp
     ae2:	80 e0       	ldi	r24, 0x00	; 0
     ae4:	90 e0       	ldi	r25, 0x00	; 0
     ae6:	08 95       	ret

00000ae8 <_ZN5Print7printlnEv>:
     ae8:	66 e3       	ldi	r22, 0x36	; 54
     aea:	72 e0       	ldi	r23, 0x02	; 2
     aec:	e8 cf       	rjmp	.-48     	; 0xabe <_ZN5Print5writeEPKc>

00000aee <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
     aee:	0f 93       	push	r16
     af0:	1f 93       	push	r17
     af2:	cf 93       	push	r28
     af4:	df 93       	push	r29
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
     af6:	ec 01       	movw	r28, r24
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
     af8:	e2 df       	rcall	.-60     	; 0xabe <_ZN5Print5writeEPKc>
     afa:	8c 01       	movw	r16, r24
  return n;
}
     afc:	ce 01       	movw	r24, r28
     afe:	f4 df       	rcall	.-24     	; 0xae8 <_ZN5Print7printlnEv>
     b00:	80 0f       	add	r24, r16
     b02:	91 1f       	adc	r25, r17
     b04:	df 91       	pop	r29
     b06:	cf 91       	pop	r28
     b08:	1f 91       	pop	r17
     b0a:	0f 91       	pop	r16
     b0c:	08 95       	ret

00000b0e <_ZN6Stream9timedReadEv>:
    if (c < 0 || c == terminator) break;
    *buffer++ = (char)c;
    index++;
  }
  return index; // return number of characters, not including null terminator
}
     b0e:	0f 93       	push	r16
     b10:	1f 93       	push	r17
     b12:	cf 93       	push	r28
     b14:	df 93       	push	r29
     b16:	ec 01       	movw	r28, r24
     b18:	89 d0       	rcall	.+274    	; 0xc2c <millis>
     b1a:	68 87       	std	Y+8, r22	; 0x08
     b1c:	79 87       	std	Y+9, r23	; 0x09
     b1e:	8a 87       	std	Y+10, r24	; 0x0a
     b20:	9b 87       	std	Y+11, r25	; 0x0b
     b22:	e8 81       	ld	r30, Y
     b24:	f9 81       	ldd	r31, Y+1	; 0x01
     b26:	02 84       	ldd	r0, Z+10	; 0x0a
     b28:	f3 85       	ldd	r31, Z+11	; 0x0b
     b2a:	e0 2d       	mov	r30, r0
     b2c:	ce 01       	movw	r24, r28
     b2e:	19 95       	eicall
     b30:	97 ff       	sbrs	r25, 7
     b32:	16 c0       	rjmp	.+44     	; 0xb60 <_ZN6Stream9timedReadEv+0x52>
     b34:	7b d0       	rcall	.+246    	; 0xc2c <millis>
     b36:	08 85       	ldd	r16, Y+8	; 0x08
     b38:	19 85       	ldd	r17, Y+9	; 0x09
     b3a:	2a 85       	ldd	r18, Y+10	; 0x0a
     b3c:	3b 85       	ldd	r19, Y+11	; 0x0b
     b3e:	dc 01       	movw	r26, r24
     b40:	cb 01       	movw	r24, r22
     b42:	80 1b       	sub	r24, r16
     b44:	91 0b       	sbc	r25, r17
     b46:	a2 0b       	sbc	r26, r18
     b48:	b3 0b       	sbc	r27, r19
     b4a:	0c 81       	ldd	r16, Y+4	; 0x04
     b4c:	1d 81       	ldd	r17, Y+5	; 0x05
     b4e:	2e 81       	ldd	r18, Y+6	; 0x06
     b50:	3f 81       	ldd	r19, Y+7	; 0x07
     b52:	80 17       	cp	r24, r16
     b54:	91 07       	cpc	r25, r17
     b56:	a2 07       	cpc	r26, r18
     b58:	b3 07       	cpc	r27, r19
     b5a:	18 f3       	brcs	.-58     	; 0xb22 <_ZN6Stream9timedReadEv+0x14>
     b5c:	8f ef       	ldi	r24, 0xFF	; 255
     b5e:	9f ef       	ldi	r25, 0xFF	; 255
     b60:	df 91       	pop	r29
     b62:	cf 91       	pop	r28
     b64:	1f 91       	pop	r17
     b66:	0f 91       	pop	r16
     b68:	08 95       	ret

00000b6a <_ZN6Stream10readStringEv>:

String Stream::readString()
{
     b6a:	0f 93       	push	r16
     b6c:	1f 93       	push	r17
     b6e:	cf 93       	push	r28
     b70:	df 93       	push	r29
     b72:	ec 01       	movw	r28, r24
     b74:	8b 01       	movw	r16, r22
  String ret;
     b76:	68 e3       	ldi	r22, 0x38	; 56
     b78:	72 e0       	ldi	r23, 0x02	; 2
  int c = timedRead();
     b7a:	72 d2       	rcall	.+1252   	; 0x1060 <_ZN6StringC1EPKc>
     b7c:	c8 01       	movw	r24, r16
  while (c >= 0)
     b7e:	c7 df       	rcall	.-114    	; 0xb0e <_ZN6Stream9timedReadEv>

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
	String & operator += (char c)			{concat(c); return (*this);}
     b80:	97 fd       	sbrc	r25, 7
     b82:	04 c0       	rjmp	.+8      	; 0xb8c <_ZN6Stream10readStringEv+0x22>
     b84:	68 2f       	mov	r22, r24
     b86:	ce 01       	movw	r24, r28
  {
    ret += (char)c;
    c = timedRead();
  }
  return ret;
}
     b88:	ab d2       	rcall	.+1366   	; 0x10e0 <_ZN6String6concatEc>
     b8a:	f8 cf       	rjmp	.-16     	; 0xb7c <_ZN6Stream10readStringEv+0x12>
     b8c:	ce 01       	movw	r24, r28
     b8e:	df 91       	pop	r29
     b90:	cf 91       	pop	r28
     b92:	1f 91       	pop	r17
     b94:	0f 91       	pop	r16
     b96:	08 95       	ret

00000b98 <__vector_23>:
	

#endif

	// busy wait
	__asm__ __volatile__ (
     b98:	1f 92       	push	r1
     b9a:	0f 92       	push	r0
     b9c:	0f b6       	in	r0, 0x3f	; 63
     b9e:	0f 92       	push	r0
     ba0:	11 24       	eor	r1, r1
     ba2:	2f 93       	push	r18
     ba4:	3f 93       	push	r19
     ba6:	8f 93       	push	r24
     ba8:	9f 93       	push	r25
     baa:	af 93       	push	r26
     bac:	bf 93       	push	r27
     bae:	80 91 e4 02 	lds	r24, 0x02E4	; 0x8002e4 <timer0_millis>
     bb2:	90 91 e5 02 	lds	r25, 0x02E5	; 0x8002e5 <timer0_millis+0x1>
     bb6:	a0 91 e6 02 	lds	r26, 0x02E6	; 0x8002e6 <timer0_millis+0x2>
     bba:	b0 91 e7 02 	lds	r27, 0x02E7	; 0x8002e7 <timer0_millis+0x3>
     bbe:	30 91 e3 02 	lds	r19, 0x02E3	; 0x8002e3 <timer0_fract>
     bc2:	23 e0       	ldi	r18, 0x03	; 3
     bc4:	23 0f       	add	r18, r19
     bc6:	2d 37       	cpi	r18, 0x7D	; 125
     bc8:	20 f4       	brcc	.+8      	; 0xbd2 <__vector_23+0x3a>
     bca:	01 96       	adiw	r24, 0x01	; 1
     bcc:	a1 1d       	adc	r26, r1
     bce:	b1 1d       	adc	r27, r1
     bd0:	05 c0       	rjmp	.+10     	; 0xbdc <__vector_23+0x44>
     bd2:	26 e8       	ldi	r18, 0x86	; 134
     bd4:	23 0f       	add	r18, r19
     bd6:	02 96       	adiw	r24, 0x02	; 2
     bd8:	a1 1d       	adc	r26, r1
     bda:	b1 1d       	adc	r27, r1
     bdc:	20 93 e3 02 	sts	0x02E3, r18	; 0x8002e3 <timer0_fract>
     be0:	80 93 e4 02 	sts	0x02E4, r24	; 0x8002e4 <timer0_millis>
     be4:	90 93 e5 02 	sts	0x02E5, r25	; 0x8002e5 <timer0_millis+0x1>
     be8:	a0 93 e6 02 	sts	0x02E6, r26	; 0x8002e6 <timer0_millis+0x2>
     bec:	b0 93 e7 02 	sts	0x02E7, r27	; 0x8002e7 <timer0_millis+0x3>
     bf0:	80 91 e8 02 	lds	r24, 0x02E8	; 0x8002e8 <timer0_overflow_count>
     bf4:	90 91 e9 02 	lds	r25, 0x02E9	; 0x8002e9 <timer0_overflow_count+0x1>
     bf8:	a0 91 ea 02 	lds	r26, 0x02EA	; 0x8002ea <timer0_overflow_count+0x2>
     bfc:	b0 91 eb 02 	lds	r27, 0x02EB	; 0x8002eb <timer0_overflow_count+0x3>
     c00:	01 96       	adiw	r24, 0x01	; 1
     c02:	a1 1d       	adc	r26, r1
     c04:	b1 1d       	adc	r27, r1
     c06:	80 93 e8 02 	sts	0x02E8, r24	; 0x8002e8 <timer0_overflow_count>
     c0a:	90 93 e9 02 	sts	0x02E9, r25	; 0x8002e9 <timer0_overflow_count+0x1>
     c0e:	a0 93 ea 02 	sts	0x02EA, r26	; 0x8002ea <timer0_overflow_count+0x2>
     c12:	b0 93 eb 02 	sts	0x02EB, r27	; 0x8002eb <timer0_overflow_count+0x3>
     c16:	bf 91       	pop	r27
     c18:	af 91       	pop	r26
     c1a:	9f 91       	pop	r25
     c1c:	8f 91       	pop	r24
     c1e:	3f 91       	pop	r19
     c20:	2f 91       	pop	r18
     c22:	0f 90       	pop	r0
     c24:	0f be       	out	0x3f, r0	; 63
     c26:	0f 90       	pop	r0
     c28:	1f 90       	pop	r1
     c2a:	18 95       	reti

00000c2c <millis>:
     c2c:	2f b7       	in	r18, 0x3f	; 63
     c2e:	f8 94       	cli
     c30:	60 91 e4 02 	lds	r22, 0x02E4	; 0x8002e4 <timer0_millis>
     c34:	70 91 e5 02 	lds	r23, 0x02E5	; 0x8002e5 <timer0_millis+0x1>
     c38:	80 91 e6 02 	lds	r24, 0x02E6	; 0x8002e6 <timer0_millis+0x2>
     c3c:	90 91 e7 02 	lds	r25, 0x02E7	; 0x8002e7 <timer0_millis+0x3>
     c40:	2f bf       	out	0x3f, r18	; 63
     c42:	08 95       	ret

00000c44 <micros>:
     c44:	3f b7       	in	r19, 0x3f	; 63
     c46:	f8 94       	cli
     c48:	80 91 e8 02 	lds	r24, 0x02E8	; 0x8002e8 <timer0_overflow_count>
     c4c:	90 91 e9 02 	lds	r25, 0x02E9	; 0x8002e9 <timer0_overflow_count+0x1>
     c50:	a0 91 ea 02 	lds	r26, 0x02EA	; 0x8002ea <timer0_overflow_count+0x2>
     c54:	b0 91 eb 02 	lds	r27, 0x02EB	; 0x8002eb <timer0_overflow_count+0x3>
     c58:	26 b5       	in	r18, 0x26	; 38
     c5a:	a8 9b       	sbis	0x15, 0	; 21
     c5c:	05 c0       	rjmp	.+10     	; 0xc68 <micros+0x24>
     c5e:	2f 3f       	cpi	r18, 0xFF	; 255
     c60:	19 f0       	breq	.+6      	; 0xc68 <micros+0x24>
     c62:	01 96       	adiw	r24, 0x01	; 1
     c64:	a1 1d       	adc	r26, r1
     c66:	b1 1d       	adc	r27, r1
     c68:	3f bf       	out	0x3f, r19	; 63
     c6a:	ba 2f       	mov	r27, r26
     c6c:	a9 2f       	mov	r26, r25
     c6e:	98 2f       	mov	r25, r24
     c70:	88 27       	eor	r24, r24
     c72:	82 0f       	add	r24, r18
     c74:	91 1d       	adc	r25, r1
     c76:	a1 1d       	adc	r26, r1
     c78:	b1 1d       	adc	r27, r1
     c7a:	bc 01       	movw	r22, r24
     c7c:	cd 01       	movw	r24, r26
     c7e:	42 e0       	ldi	r20, 0x02	; 2
     c80:	66 0f       	add	r22, r22
     c82:	77 1f       	adc	r23, r23
     c84:	88 1f       	adc	r24, r24
     c86:	99 1f       	adc	r25, r25
     c88:	4a 95       	dec	r20
     c8a:	d1 f7       	brne	.-12     	; 0xc80 <micros+0x3c>
     c8c:	08 95       	ret

00000c8e <delay>:
     c8e:	8f 92       	push	r8
     c90:	9f 92       	push	r9
     c92:	af 92       	push	r10
     c94:	bf 92       	push	r11
     c96:	cf 92       	push	r12
     c98:	df 92       	push	r13
     c9a:	ef 92       	push	r14
     c9c:	ff 92       	push	r15
     c9e:	6b 01       	movw	r12, r22
     ca0:	7c 01       	movw	r14, r24
     ca2:	d0 df       	rcall	.-96     	; 0xc44 <micros>
     ca4:	4b 01       	movw	r8, r22
     ca6:	5c 01       	movw	r10, r24
     ca8:	c1 14       	cp	r12, r1
     caa:	d1 04       	cpc	r13, r1
     cac:	e1 04       	cpc	r14, r1
     cae:	f1 04       	cpc	r15, r1
     cb0:	f1 f0       	breq	.+60     	; 0xcee <delay+0x60>
     cb2:	57 d2       	rcall	.+1198   	; 0x1162 <yield>
     cb4:	c7 df       	rcall	.-114    	; 0xc44 <micros>
     cb6:	dc 01       	movw	r26, r24
     cb8:	cb 01       	movw	r24, r22
     cba:	88 19       	sub	r24, r8
     cbc:	99 09       	sbc	r25, r9
     cbe:	aa 09       	sbc	r26, r10
     cc0:	bb 09       	sbc	r27, r11
     cc2:	88 3e       	cpi	r24, 0xE8	; 232
     cc4:	93 40       	sbci	r25, 0x03	; 3
     cc6:	a1 05       	cpc	r26, r1
     cc8:	b1 05       	cpc	r27, r1
     cca:	70 f3       	brcs	.-36     	; 0xca8 <delay+0x1a>
     ccc:	21 e0       	ldi	r18, 0x01	; 1
     cce:	c2 1a       	sub	r12, r18
     cd0:	d1 08       	sbc	r13, r1
     cd2:	e1 08       	sbc	r14, r1
     cd4:	f1 08       	sbc	r15, r1
     cd6:	88 ee       	ldi	r24, 0xE8	; 232
     cd8:	88 0e       	add	r8, r24
     cda:	83 e0       	ldi	r24, 0x03	; 3
     cdc:	98 1e       	adc	r9, r24
     cde:	a1 1c       	adc	r10, r1
     ce0:	b1 1c       	adc	r11, r1
     ce2:	c1 14       	cp	r12, r1
     ce4:	d1 04       	cpc	r13, r1
     ce6:	e1 04       	cpc	r14, r1
     ce8:	f1 04       	cpc	r15, r1
     cea:	21 f7       	brne	.-56     	; 0xcb4 <delay+0x26>
     cec:	dd cf       	rjmp	.-70     	; 0xca8 <delay+0x1a>
     cee:	ff 90       	pop	r15
     cf0:	ef 90       	pop	r14
     cf2:	df 90       	pop	r13
     cf4:	cf 90       	pop	r12
     cf6:	bf 90       	pop	r11
     cf8:	af 90       	pop	r10
     cfa:	9f 90       	pop	r9
     cfc:	8f 90       	pop	r8
     cfe:	08 95       	ret

00000d00 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
     d00:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
     d02:	84 b5       	in	r24, 0x24	; 36
     d04:	82 60       	ori	r24, 0x02	; 2
     d06:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
     d08:	84 b5       	in	r24, 0x24	; 36
     d0a:	81 60       	ori	r24, 0x01	; 1
     d0c:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
     d0e:	85 b5       	in	r24, 0x25	; 37
     d10:	82 60       	ori	r24, 0x02	; 2
     d12:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
     d14:	85 b5       	in	r24, 0x25	; 37
     d16:	81 60       	ori	r24, 0x01	; 1
     d18:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
     d1a:	ee e6       	ldi	r30, 0x6E	; 110
     d1c:	f0 e0       	ldi	r31, 0x00	; 0
     d1e:	80 81       	ld	r24, Z
     d20:	81 60       	ori	r24, 0x01	; 1
     d22:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
     d24:	e1 e8       	ldi	r30, 0x81	; 129
     d26:	f0 e0       	ldi	r31, 0x00	; 0
     d28:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
     d2a:	80 81       	ld	r24, Z
     d2c:	82 60       	ori	r24, 0x02	; 2
     d2e:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
     d30:	80 81       	ld	r24, Z
     d32:	81 60       	ori	r24, 0x01	; 1
     d34:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
     d36:	e0 e8       	ldi	r30, 0x80	; 128
     d38:	f0 e0       	ldi	r31, 0x00	; 0
     d3a:	80 81       	ld	r24, Z
     d3c:	81 60       	ori	r24, 0x01	; 1
     d3e:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
     d40:	e1 eb       	ldi	r30, 0xB1	; 177
     d42:	f0 e0       	ldi	r31, 0x00	; 0
     d44:	80 81       	ld	r24, Z
     d46:	84 60       	ori	r24, 0x04	; 4
     d48:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
     d4a:	e0 eb       	ldi	r30, 0xB0	; 176
     d4c:	f0 e0       	ldi	r31, 0x00	; 0
     d4e:	80 81       	ld	r24, Z
     d50:	81 60       	ori	r24, 0x01	; 1
     d52:	80 83       	st	Z, r24
//#else
	// Timer 2 not finished (may not be present on this CPU)
#endif

#if defined(TCCR3B) && defined(CS31) && defined(WGM30)
	sbi(TCCR3B, CS31);		// set timer 3 prescale factor to 64
     d54:	e1 e9       	ldi	r30, 0x91	; 145
     d56:	f0 e0       	ldi	r31, 0x00	; 0
     d58:	80 81       	ld	r24, Z
     d5a:	82 60       	ori	r24, 0x02	; 2
     d5c:	80 83       	st	Z, r24
	sbi(TCCR3B, CS30);
     d5e:	80 81       	ld	r24, Z
     d60:	81 60       	ori	r24, 0x01	; 1
     d62:	80 83       	st	Z, r24
	sbi(TCCR3A, WGM30);		// put timer 3 in 8-bit phase correct pwm mode
     d64:	e0 e9       	ldi	r30, 0x90	; 144
     d66:	f0 e0       	ldi	r31, 0x00	; 0
     d68:	80 81       	ld	r24, Z
     d6a:	81 60       	ori	r24, 0x01	; 1
     d6c:	80 83       	st	Z, r24
	sbi(TCCR4D, WGM40);		// put timer 4 in phase- and frequency-correct PWM mode	
	sbi(TCCR4A, PWM4A);		// enable PWM mode for comparator OCR4A
	sbi(TCCR4C, PWM4D);		// enable PWM mode for comparator OCR4D
#else /* beginning of timer4 block for ATMEGA1280 and ATMEGA2560 */
#if defined(TCCR4B) && defined(CS41) && defined(WGM40)
	sbi(TCCR4B, CS41);		// set timer 4 prescale factor to 64
     d6e:	e1 ea       	ldi	r30, 0xA1	; 161
     d70:	f0 e0       	ldi	r31, 0x00	; 0
     d72:	80 81       	ld	r24, Z
     d74:	82 60       	ori	r24, 0x02	; 2
     d76:	80 83       	st	Z, r24
	sbi(TCCR4B, CS40);
     d78:	80 81       	ld	r24, Z
     d7a:	81 60       	ori	r24, 0x01	; 1
     d7c:	80 83       	st	Z, r24
	sbi(TCCR4A, WGM40);		// put timer 4 in 8-bit phase correct pwm mode
     d7e:	e0 ea       	ldi	r30, 0xA0	; 160
     d80:	f0 e0       	ldi	r31, 0x00	; 0
     d82:	80 81       	ld	r24, Z
     d84:	81 60       	ori	r24, 0x01	; 1
     d86:	80 83       	st	Z, r24
#endif
#endif /* end timer4 block for ATMEGA1280/2560 and similar */	

#if defined(TCCR5B) && defined(CS51) && defined(WGM50)
	sbi(TCCR5B, CS51);		// set timer 5 prescale factor to 64
     d88:	e1 e2       	ldi	r30, 0x21	; 33
     d8a:	f1 e0       	ldi	r31, 0x01	; 1
     d8c:	80 81       	ld	r24, Z
     d8e:	82 60       	ori	r24, 0x02	; 2
     d90:	80 83       	st	Z, r24
	sbi(TCCR5B, CS50);
     d92:	80 81       	ld	r24, Z
     d94:	81 60       	ori	r24, 0x01	; 1
     d96:	80 83       	st	Z, r24
	sbi(TCCR5A, WGM50);		// put timer 5 in 8-bit phase correct pwm mode
     d98:	e0 e2       	ldi	r30, 0x20	; 32
     d9a:	f1 e0       	ldi	r31, 0x01	; 1
     d9c:	80 81       	ld	r24, Z
     d9e:	81 60       	ori	r24, 0x01	; 1
     da0:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
     da2:	ea e7       	ldi	r30, 0x7A	; 122
     da4:	f0 e0       	ldi	r31, 0x00	; 0
     da6:	80 81       	ld	r24, Z
     da8:	84 60       	ori	r24, 0x04	; 4
     daa:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
     dac:	80 81       	ld	r24, Z
     dae:	82 60       	ori	r24, 0x02	; 2
     db0:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
     db2:	80 81       	ld	r24, Z
     db4:	81 60       	ori	r24, 0x01	; 1
     db6:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
     db8:	80 81       	ld	r24, Z
     dba:	80 68       	ori	r24, 0x80	; 128
     dbc:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
     dbe:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7000c1>
     dc2:	08 95       	ret

00000dc4 <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
     dc4:	90 e0       	ldi	r25, 0x00	; 0
     dc6:	fc 01       	movw	r30, r24
     dc8:	31 97       	sbiw	r30, 0x01	; 1
     dca:	e2 31       	cpi	r30, 0x12	; 18
     dcc:	f1 05       	cpc	r31, r1
     dce:	08 f0       	brcs	.+2      	; 0xdd2 <turnOffPWM+0xe>
     dd0:	4d c0       	rjmp	.+154    	; 0xe6c <turnOffPWM+0xa8>
     dd2:	88 27       	eor	r24, r24
     dd4:	ee 58       	subi	r30, 0x8E	; 142
     dd6:	ff 4f       	sbci	r31, 0xFF	; 255
     dd8:	8f 4f       	sbci	r24, 0xFF	; 255
     dda:	d6 c2       	rjmp	.+1452   	; 0x1388 <__tablejump2__>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
     ddc:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
     de0:	8f 77       	andi	r24, 0x7F	; 127
     de2:	03 c0       	rjmp	.+6      	; 0xdea <turnOffPWM+0x26>
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
     de4:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
     de8:	8f 7d       	andi	r24, 0xDF	; 223
     dea:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
     dee:	08 95       	ret
		#endif
		#if defined(TCCR1A) && defined(COM1C1)
		case TIMER1C:   cbi(TCCR1A, COM1C1);    break;
     df0:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
     df4:	87 7f       	andi	r24, 0xF7	; 247
     df6:	f9 cf       	rjmp	.-14     	; 0xdea <turnOffPWM+0x26>
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
     df8:	84 b5       	in	r24, 0x24	; 36
     dfa:	8f 77       	andi	r24, 0x7F	; 127
     dfc:	02 c0       	rjmp	.+4      	; 0xe02 <turnOffPWM+0x3e>
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
     dfe:	84 b5       	in	r24, 0x24	; 36
     e00:	8f 7d       	andi	r24, 0xDF	; 223
     e02:	84 bd       	out	0x24, r24	; 36
     e04:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
     e06:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7000b0>
     e0a:	8f 77       	andi	r24, 0x7F	; 127
     e0c:	03 c0       	rjmp	.+6      	; 0xe14 <turnOffPWM+0x50>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
     e0e:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7000b0>
     e12:	8f 7d       	andi	r24, 0xDF	; 223
     e14:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7000b0>
     e18:	08 95       	ret
		#endif
		
		#if defined(TCCR3A) && defined(COM3A1)
		case  TIMER3A:  cbi(TCCR3A, COM3A1);    break;
     e1a:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
     e1e:	8f 77       	andi	r24, 0x7F	; 127
     e20:	07 c0       	rjmp	.+14     	; 0xe30 <turnOffPWM+0x6c>
		#endif
		#if defined(TCCR3A) && defined(COM3B1)
		case  TIMER3B:  cbi(TCCR3A, COM3B1);    break;
     e22:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
     e26:	8f 7d       	andi	r24, 0xDF	; 223
     e28:	03 c0       	rjmp	.+6      	; 0xe30 <turnOffPWM+0x6c>
		#endif
		#if defined(TCCR3A) && defined(COM3C1)
		case  TIMER3C:  cbi(TCCR3A, COM3C1);    break;
     e2a:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
     e2e:	87 7f       	andi	r24, 0xF7	; 247
     e30:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
     e34:	08 95       	ret
		#endif

		#if defined(TCCR4A) && defined(COM4A1)
		case  TIMER4A:  cbi(TCCR4A, COM4A1);    break;
     e36:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
     e3a:	8f 77       	andi	r24, 0x7F	; 127
     e3c:	07 c0       	rjmp	.+14     	; 0xe4c <turnOffPWM+0x88>
		#endif					
		#if defined(TCCR4A) && defined(COM4B1)
		case  TIMER4B:  cbi(TCCR4A, COM4B1);    break;
     e3e:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
     e42:	8f 7d       	andi	r24, 0xDF	; 223
     e44:	03 c0       	rjmp	.+6      	; 0xe4c <turnOffPWM+0x88>
		#endif
		#if defined(TCCR4A) && defined(COM4C1)
		case  TIMER4C:  cbi(TCCR4A, COM4C1);    break;
     e46:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
     e4a:	87 7f       	andi	r24, 0xF7	; 247
     e4c:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
     e50:	08 95       	ret
		#if defined(TCCR4C) && defined(COM4D1)
		case TIMER4D:	cbi(TCCR4C, COM4D1);	break;
		#endif			
			
		#if defined(TCCR5A)
		case  TIMER5A:  cbi(TCCR5A, COM5A1);    break;
     e52:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
     e56:	8f 77       	andi	r24, 0x7F	; 127
     e58:	07 c0       	rjmp	.+14     	; 0xe68 <turnOffPWM+0xa4>
		case  TIMER5B:  cbi(TCCR5A, COM5B1);    break;
     e5a:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
     e5e:	8f 7d       	andi	r24, 0xDF	; 223
     e60:	03 c0       	rjmp	.+6      	; 0xe68 <turnOffPWM+0xa4>
		case  TIMER5C:  cbi(TCCR5A, COM5C1);    break;
     e62:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
     e66:	87 7f       	andi	r24, 0xF7	; 247
     e68:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
     e6c:	08 95       	ret

00000e6e <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
     e6e:	cf 93       	push	r28
     e70:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
     e72:	90 e0       	ldi	r25, 0x00	; 0
     e74:	fc 01       	movw	r30, r24
     e76:	e7 57       	subi	r30, 0x77	; 119
     e78:	fe 4f       	sbci	r31, 0xFE	; 254
     e7a:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
     e7c:	fc 01       	movw	r30, r24
     e7e:	e1 53       	subi	r30, 0x31	; 49
     e80:	fe 4f       	sbci	r31, 0xFE	; 254
     e82:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
     e84:	88 23       	and	r24, r24
     e86:	61 f1       	breq	.+88     	; 0xee0 <pinMode+0x72>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
     e88:	90 e0       	ldi	r25, 0x00	; 0
     e8a:	88 0f       	add	r24, r24
     e8c:	99 1f       	adc	r25, r25
     e8e:	fc 01       	movw	r30, r24
     e90:	e7 5b       	subi	r30, 0xB7	; 183
     e92:	fd 4f       	sbci	r31, 0xFD	; 253
     e94:	c5 91       	lpm	r28, Z+
     e96:	d4 91       	lpm	r29, Z
	out = portOutputRegister(port);
     e98:	fc 01       	movw	r30, r24
     e9a:	e1 5d       	subi	r30, 0xD1	; 209
     e9c:	fd 4f       	sbci	r31, 0xFD	; 253
     e9e:	a5 91       	lpm	r26, Z+
     ea0:	b4 91       	lpm	r27, Z

	if (mode == INPUT) { 
     ea2:	61 11       	cpse	r22, r1
     ea4:	09 c0       	rjmp	.+18     	; 0xeb8 <pinMode+0x4a>
		uint8_t oldSREG = SREG;
     ea6:	9f b7       	in	r25, 0x3f	; 63
                cli();
     ea8:	f8 94       	cli
		*reg &= ~bit;
     eaa:	88 81       	ld	r24, Y
     eac:	20 95       	com	r18
     eae:	82 23       	and	r24, r18
     eb0:	88 83       	st	Y, r24
		*out &= ~bit;
     eb2:	ec 91       	ld	r30, X
     eb4:	2e 23       	and	r18, r30
     eb6:	0b c0       	rjmp	.+22     	; 0xece <pinMode+0x60>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
     eb8:	62 30       	cpi	r22, 0x02	; 2
     eba:	61 f4       	brne	.+24     	; 0xed4 <pinMode+0x66>
		uint8_t oldSREG = SREG;
     ebc:	9f b7       	in	r25, 0x3f	; 63
                cli();
     ebe:	f8 94       	cli
		*reg &= ~bit;
     ec0:	88 81       	ld	r24, Y
     ec2:	32 2f       	mov	r19, r18
     ec4:	30 95       	com	r19
     ec6:	83 23       	and	r24, r19
     ec8:	88 83       	st	Y, r24
		*out |= bit;
     eca:	ec 91       	ld	r30, X
     ecc:	2e 2b       	or	r18, r30
     ece:	2c 93       	st	X, r18
		SREG = oldSREG;
     ed0:	9f bf       	out	0x3f, r25	; 63
     ed2:	06 c0       	rjmp	.+12     	; 0xee0 <pinMode+0x72>
	} else {
		uint8_t oldSREG = SREG;
     ed4:	8f b7       	in	r24, 0x3f	; 63
                cli();
     ed6:	f8 94       	cli
		*reg |= bit;
     ed8:	e8 81       	ld	r30, Y
     eda:	2e 2b       	or	r18, r30
     edc:	28 83       	st	Y, r18
		SREG = oldSREG;
     ede:	8f bf       	out	0x3f, r24	; 63
	}
}
     ee0:	df 91       	pop	r29
     ee2:	cf 91       	pop	r28
     ee4:	08 95       	ret

00000ee6 <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
     ee6:	1f 93       	push	r17
     ee8:	cf 93       	push	r28
     eea:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
     eec:	28 2f       	mov	r18, r24
     eee:	30 e0       	ldi	r19, 0x00	; 0
     ef0:	f9 01       	movw	r30, r18
     ef2:	ed 5b       	subi	r30, 0xBD	; 189
     ef4:	fe 4f       	sbci	r31, 0xFE	; 254
     ef6:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
     ef8:	f9 01       	movw	r30, r18
     efa:	e7 57       	subi	r30, 0x77	; 119
     efc:	fe 4f       	sbci	r31, 0xFE	; 254
     efe:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
     f00:	f9 01       	movw	r30, r18
     f02:	e1 53       	subi	r30, 0x31	; 49
     f04:	fe 4f       	sbci	r31, 0xFE	; 254
     f06:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
     f08:	cc 23       	and	r28, r28
     f0a:	b9 f0       	breq	.+46     	; 0xf3a <digitalWrite+0x54>
     f0c:	16 2f       	mov	r17, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
     f0e:	81 11       	cpse	r24, r1

	out = portOutputRegister(port);
     f10:	59 df       	rcall	.-334    	; 0xdc4 <turnOffPWM>
     f12:	ec 2f       	mov	r30, r28
     f14:	f0 e0       	ldi	r31, 0x00	; 0
     f16:	ee 0f       	add	r30, r30
     f18:	ff 1f       	adc	r31, r31
     f1a:	e1 5d       	subi	r30, 0xD1	; 209
     f1c:	fd 4f       	sbci	r31, 0xFD	; 253
     f1e:	a5 91       	lpm	r26, Z+

	uint8_t oldSREG = SREG;
     f20:	b4 91       	lpm	r27, Z
	cli();
     f22:	9f b7       	in	r25, 0x3f	; 63

	if (val == LOW) {
     f24:	f8 94       	cli
     f26:	11 11       	cpse	r17, r1
		*out &= ~bit;
     f28:	04 c0       	rjmp	.+8      	; 0xf32 <digitalWrite+0x4c>
     f2a:	8c 91       	ld	r24, X
     f2c:	d0 95       	com	r29
     f2e:	d8 23       	and	r29, r24
	} else {
		*out |= bit;
     f30:	02 c0       	rjmp	.+4      	; 0xf36 <digitalWrite+0x50>
     f32:	ec 91       	ld	r30, X
     f34:	de 2b       	or	r29, r30
	}

	SREG = oldSREG;
     f36:	dc 93       	st	X, r29
}
     f38:	9f bf       	out	0x3f, r25	; 63
     f3a:	df 91       	pop	r29
     f3c:	cf 91       	pop	r28
     f3e:	1f 91       	pop	r17
     f40:	08 95       	ret

00000f42 <digitalRead>:

int digitalRead(uint8_t pin)
{
     f42:	cf 93       	push	r28
     f44:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
     f46:	28 2f       	mov	r18, r24
     f48:	30 e0       	ldi	r19, 0x00	; 0
     f4a:	f9 01       	movw	r30, r18
     f4c:	ed 5b       	subi	r30, 0xBD	; 189
     f4e:	fe 4f       	sbci	r31, 0xFE	; 254
     f50:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
     f52:	f9 01       	movw	r30, r18
     f54:	e7 57       	subi	r30, 0x77	; 119
     f56:	fe 4f       	sbci	r31, 0xFE	; 254
     f58:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
     f5a:	f9 01       	movw	r30, r18
     f5c:	e1 53       	subi	r30, 0x31	; 49
     f5e:	fe 4f       	sbci	r31, 0xFE	; 254
     f60:	c4 91       	lpm	r28, Z

	if (port == NOT_A_PIN) return LOW;
     f62:	cc 23       	and	r28, r28
     f64:	89 f0       	breq	.+34     	; 0xf88 <digitalRead+0x46>

	// If the pin that support PWM output, we need to turn it off
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
     f66:	81 11       	cpse	r24, r1

	if (*portInputRegister(port) & bit) return HIGH;
     f68:	2d df       	rcall	.-422    	; 0xdc4 <turnOffPWM>
     f6a:	ec 2f       	mov	r30, r28
     f6c:	f0 e0       	ldi	r31, 0x00	; 0
     f6e:	ee 0f       	add	r30, r30
     f70:	ff 1f       	adc	r31, r31
     f72:	eb 5e       	subi	r30, 0xEB	; 235
     f74:	fd 4f       	sbci	r31, 0xFD	; 253
     f76:	a5 91       	lpm	r26, Z+
     f78:	b4 91       	lpm	r27, Z
{
	uint8_t timer = digitalPinToTimer(pin);
	uint8_t bit = digitalPinToBitMask(pin);
	uint8_t port = digitalPinToPort(pin);

	if (port == NOT_A_PIN) return LOW;
     f7a:	ec 91       	ld	r30, X
     f7c:	ed 23       	and	r30, r29
     f7e:	81 e0       	ldi	r24, 0x01	; 1
     f80:	90 e0       	ldi	r25, 0x00	; 0
     f82:	21 f4       	brne	.+8      	; 0xf8c <digitalRead+0x4a>
     f84:	80 e0       	ldi	r24, 0x00	; 0
     f86:	02 c0       	rjmp	.+4      	; 0xf8c <digitalRead+0x4a>
     f88:	80 e0       	ldi	r24, 0x00	; 0
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);

	if (*portInputRegister(port) & bit) return HIGH;
	return LOW;
}
     f8a:	90 e0       	ldi	r25, 0x00	; 0
     f8c:	df 91       	pop	r29
     f8e:	cf 91       	pop	r28
     f90:	08 95       	ret

00000f92 <_ZN6StringD1Ev>:
/*  Character Access                         */
/*********************************************/

char String::charAt(unsigned int loc) const
{
	return operator[](loc);
     f92:	fc 01       	movw	r30, r24
     f94:	80 81       	ld	r24, Z
     f96:	91 81       	ldd	r25, Z+1	; 0x01
     f98:	b0 c2       	rjmp	.+1376   	; 0x14fa <free>

00000f9a <_ZN6String10invalidateEv>:
     f9a:	cf 93       	push	r28
     f9c:	df 93       	push	r29
     f9e:	ec 01       	movw	r28, r24
     fa0:	88 81       	ld	r24, Y
     fa2:	99 81       	ldd	r25, Y+1	; 0x01
     fa4:	00 97       	sbiw	r24, 0x00	; 0
     fa6:	09 f0       	breq	.+2      	; 0xfaa <_ZN6String10invalidateEv+0x10>
     fa8:	a8 d2       	rcall	.+1360   	; 0x14fa <free>
     faa:	19 82       	std	Y+1, r1	; 0x01
     fac:	18 82       	st	Y, r1
     fae:	1d 82       	std	Y+5, r1	; 0x05
     fb0:	1c 82       	std	Y+4, r1	; 0x04
     fb2:	1b 82       	std	Y+3, r1	; 0x03
     fb4:	1a 82       	std	Y+2, r1	; 0x02
     fb6:	df 91       	pop	r29
     fb8:	cf 91       	pop	r28
     fba:	08 95       	ret

00000fbc <_ZN6String12changeBufferEj>:
     fbc:	0f 93       	push	r16
     fbe:	1f 93       	push	r17
     fc0:	cf 93       	push	r28
     fc2:	df 93       	push	r29
     fc4:	ec 01       	movw	r28, r24
     fc6:	8b 01       	movw	r16, r22
     fc8:	6f 5f       	subi	r22, 0xFF	; 255
     fca:	7f 4f       	sbci	r23, 0xFF	; 255
     fcc:	88 81       	ld	r24, Y
     fce:	99 81       	ldd	r25, Y+1	; 0x01
     fd0:	1d d3       	rcall	.+1594   	; 0x160c <realloc>
     fd2:	00 97       	sbiw	r24, 0x00	; 0
     fd4:	31 f0       	breq	.+12     	; 0xfe2 <_ZN6String12changeBufferEj+0x26>
     fd6:	99 83       	std	Y+1, r25	; 0x01
     fd8:	88 83       	st	Y, r24
     fda:	1b 83       	std	Y+3, r17	; 0x03
     fdc:	0a 83       	std	Y+2, r16	; 0x02
     fde:	81 e0       	ldi	r24, 0x01	; 1
     fe0:	01 c0       	rjmp	.+2      	; 0xfe4 <_ZN6String12changeBufferEj+0x28>
     fe2:	80 e0       	ldi	r24, 0x00	; 0
     fe4:	df 91       	pop	r29
     fe6:	cf 91       	pop	r28
     fe8:	1f 91       	pop	r17
     fea:	0f 91       	pop	r16
     fec:	08 95       	ret

00000fee <_ZN6String7reserveEj>:
     fee:	cf 93       	push	r28
     ff0:	df 93       	push	r29
     ff2:	ec 01       	movw	r28, r24
     ff4:	88 81       	ld	r24, Y
     ff6:	99 81       	ldd	r25, Y+1	; 0x01
     ff8:	89 2b       	or	r24, r25
     ffa:	29 f0       	breq	.+10     	; 0x1006 <_ZN6String7reserveEj+0x18>
     ffc:	8a 81       	ldd	r24, Y+2	; 0x02
     ffe:	9b 81       	ldd	r25, Y+3	; 0x03
    1000:	86 17       	cp	r24, r22
    1002:	97 07       	cpc	r25, r23
    1004:	58 f4       	brcc	.+22     	; 0x101c <_ZN6String7reserveEj+0x2e>
    1006:	ce 01       	movw	r24, r28
    1008:	d9 df       	rcall	.-78     	; 0xfbc <_ZN6String12changeBufferEj>
    100a:	88 23       	and	r24, r24
    100c:	41 f0       	breq	.+16     	; 0x101e <_ZN6String7reserveEj+0x30>
    100e:	8c 81       	ldd	r24, Y+4	; 0x04
    1010:	9d 81       	ldd	r25, Y+5	; 0x05
    1012:	89 2b       	or	r24, r25
    1014:	19 f4       	brne	.+6      	; 0x101c <_ZN6String7reserveEj+0x2e>
    1016:	e8 81       	ld	r30, Y
    1018:	f9 81       	ldd	r31, Y+1	; 0x01
    101a:	10 82       	st	Z, r1
    101c:	81 e0       	ldi	r24, 0x01	; 1
    101e:	df 91       	pop	r29
    1020:	cf 91       	pop	r28
    1022:	08 95       	ret

00001024 <_ZN6String4copyEPKcj>:
    1024:	ef 92       	push	r14
    1026:	ff 92       	push	r15
    1028:	0f 93       	push	r16
    102a:	1f 93       	push	r17
    102c:	cf 93       	push	r28
    102e:	df 93       	push	r29
    1030:	ec 01       	movw	r28, r24
    1032:	7b 01       	movw	r14, r22
    1034:	8a 01       	movw	r16, r20
    1036:	ba 01       	movw	r22, r20
    1038:	da df       	rcall	.-76     	; 0xfee <_ZN6String7reserveEj>
    103a:	81 11       	cpse	r24, r1
    103c:	03 c0       	rjmp	.+6      	; 0x1044 <_ZN6String4copyEPKcj+0x20>
    103e:	ce 01       	movw	r24, r28
    1040:	ac df       	rcall	.-168    	; 0xf9a <_ZN6String10invalidateEv>
    1042:	06 c0       	rjmp	.+12     	; 0x1050 <_ZN6String4copyEPKcj+0x2c>
    1044:	1d 83       	std	Y+5, r17	; 0x05
    1046:	0c 83       	std	Y+4, r16	; 0x04
    1048:	b7 01       	movw	r22, r14
    104a:	88 81       	ld	r24, Y
    104c:	99 81       	ldd	r25, Y+1	; 0x01
    104e:	3a d5       	rcall	.+2676   	; 0x1ac4 <strcpy>
    1050:	ce 01       	movw	r24, r28
    1052:	df 91       	pop	r29
    1054:	cf 91       	pop	r28
    1056:	1f 91       	pop	r17
    1058:	0f 91       	pop	r16
    105a:	ff 90       	pop	r15
    105c:	ef 90       	pop	r14
    105e:	08 95       	ret

00001060 <_ZN6StringC1EPKc>:
    1060:	fc 01       	movw	r30, r24
    1062:	11 82       	std	Z+1, r1	; 0x01
    1064:	10 82       	st	Z, r1
    1066:	13 82       	std	Z+3, r1	; 0x03
    1068:	12 82       	std	Z+2, r1	; 0x02
    106a:	15 82       	std	Z+5, r1	; 0x05
    106c:	14 82       	std	Z+4, r1	; 0x04
    106e:	61 15       	cp	r22, r1
    1070:	71 05       	cpc	r23, r1
    1072:	49 f0       	breq	.+18     	; 0x1086 <_ZN6StringC1EPKc+0x26>
    1074:	fb 01       	movw	r30, r22
    1076:	01 90       	ld	r0, Z+
    1078:	00 20       	and	r0, r0
    107a:	e9 f7       	brne	.-6      	; 0x1076 <_ZN6StringC1EPKc+0x16>
    107c:	31 97       	sbiw	r30, 0x01	; 1
    107e:	af 01       	movw	r20, r30
    1080:	46 1b       	sub	r20, r22
    1082:	57 0b       	sbc	r21, r23
    1084:	cf cf       	rjmp	.-98     	; 0x1024 <_ZN6String4copyEPKcj>
    1086:	08 95       	ret

00001088 <_ZN6String6concatEPKcj>:
    1088:	ef 92       	push	r14
    108a:	ff 92       	push	r15
    108c:	0f 93       	push	r16
    108e:	1f 93       	push	r17
    1090:	cf 93       	push	r28
    1092:	df 93       	push	r29
    1094:	61 15       	cp	r22, r1
    1096:	71 05       	cpc	r23, r1
    1098:	11 f4       	brne	.+4      	; 0x109e <_ZN6String6concatEPKcj+0x16>
    109a:	80 e0       	ldi	r24, 0x00	; 0
    109c:	1a c0       	rjmp	.+52     	; 0x10d2 <_ZN6String6concatEPKcj+0x4a>
    109e:	41 15       	cp	r20, r1
    10a0:	51 05       	cpc	r21, r1
    10a2:	b1 f0       	breq	.+44     	; 0x10d0 <_ZN6String6concatEPKcj+0x48>
    10a4:	7b 01       	movw	r14, r22
    10a6:	ec 01       	movw	r28, r24
    10a8:	8c 81       	ldd	r24, Y+4	; 0x04
    10aa:	9d 81       	ldd	r25, Y+5	; 0x05
    10ac:	8a 01       	movw	r16, r20
    10ae:	08 0f       	add	r16, r24
    10b0:	19 1f       	adc	r17, r25
    10b2:	b8 01       	movw	r22, r16
    10b4:	ce 01       	movw	r24, r28
    10b6:	9b df       	rcall	.-202    	; 0xfee <_ZN6String7reserveEj>
    10b8:	88 23       	and	r24, r24
    10ba:	79 f3       	breq	.-34     	; 0x109a <_ZN6String6concatEPKcj+0x12>
    10bc:	28 81       	ld	r18, Y
    10be:	39 81       	ldd	r19, Y+1	; 0x01
    10c0:	8c 81       	ldd	r24, Y+4	; 0x04
    10c2:	9d 81       	ldd	r25, Y+5	; 0x05
    10c4:	b7 01       	movw	r22, r14
    10c6:	82 0f       	add	r24, r18
    10c8:	93 1f       	adc	r25, r19
    10ca:	fc d4       	rcall	.+2552   	; 0x1ac4 <strcpy>
    10cc:	1d 83       	std	Y+5, r17	; 0x05
    10ce:	0c 83       	std	Y+4, r16	; 0x04
    10d0:	81 e0       	ldi	r24, 0x01	; 1
    10d2:	df 91       	pop	r29
    10d4:	cf 91       	pop	r28
    10d6:	1f 91       	pop	r17
    10d8:	0f 91       	pop	r16
    10da:	ff 90       	pop	r15
    10dc:	ef 90       	pop	r14
    10de:	08 95       	ret

000010e0 <_ZN6String6concatEc>:
    10e0:	cf 93       	push	r28
    10e2:	df 93       	push	r29
    10e4:	1f 92       	push	r1
    10e6:	1f 92       	push	r1
    10e8:	cd b7       	in	r28, 0x3d	; 61
    10ea:	de b7       	in	r29, 0x3e	; 62
    10ec:	69 83       	std	Y+1, r22	; 0x01
    10ee:	1a 82       	std	Y+2, r1	; 0x02
    10f0:	41 e0       	ldi	r20, 0x01	; 1
    10f2:	50 e0       	ldi	r21, 0x00	; 0
    10f4:	be 01       	movw	r22, r28
    10f6:	6f 5f       	subi	r22, 0xFF	; 255
    10f8:	7f 4f       	sbci	r23, 0xFF	; 255
    10fa:	c6 df       	rcall	.-116    	; 0x1088 <_ZN6String6concatEPKcj>
    10fc:	0f 90       	pop	r0
    10fe:	0f 90       	pop	r0
    1100:	df 91       	pop	r29
    1102:	cf 91       	pop	r28
    1104:	08 95       	ret

00001106 <_ZNK6String8getBytesEPhjj>:
	if (index >= len || !buffer) return 0;
	return buffer[index];
}

void String::getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index) const
{
    1106:	0f 93       	push	r16
    1108:	1f 93       	push	r17
    110a:	cf 93       	push	r28
    110c:	df 93       	push	r29
	if (!bufsize || !buf) return;
    110e:	41 15       	cp	r20, r1
    1110:	51 05       	cpc	r21, r1
    1112:	11 f1       	breq	.+68     	; 0x1158 <_ZNK6String8getBytesEPhjj+0x52>
    1114:	61 15       	cp	r22, r1
    1116:	71 05       	cpc	r23, r1
    1118:	f9 f0       	breq	.+62     	; 0x1158 <_ZNK6String8getBytesEPhjj+0x52>
	if (index >= len) {
    111a:	dc 01       	movw	r26, r24
    111c:	14 96       	adiw	r26, 0x04	; 4
    111e:	ed 91       	ld	r30, X+
    1120:	fc 91       	ld	r31, X
    1122:	15 97       	sbiw	r26, 0x05	; 5
    1124:	2e 17       	cp	r18, r30
    1126:	3f 07       	cpc	r19, r31
    1128:	18 f0       	brcs	.+6      	; 0x1130 <_ZNK6String8getBytesEPhjj+0x2a>
		buf[0] = 0;
    112a:	fb 01       	movw	r30, r22
    112c:	10 82       	st	Z, r1
		return;
    112e:	14 c0       	rjmp	.+40     	; 0x1158 <_ZNK6String8getBytesEPhjj+0x52>
	}
	unsigned int n = bufsize - 1;
	if (n > len - index) n = len - index;
    1130:	e2 1b       	sub	r30, r18
    1132:	f3 0b       	sbc	r31, r19
    1134:	ea 01       	movw	r28, r20
    1136:	21 97       	sbiw	r28, 0x01	; 1
    1138:	ec 17       	cp	r30, r28
    113a:	fd 07       	cpc	r31, r29
    113c:	08 f4       	brcc	.+2      	; 0x1140 <_ZNK6String8getBytesEPhjj+0x3a>
    113e:	ef 01       	movw	r28, r30
    1140:	8b 01       	movw	r16, r22
    1142:	fc 01       	movw	r30, r24
	strncpy((char *)buf, buffer + index, n);
    1144:	60 81       	ld	r22, Z
    1146:	71 81       	ldd	r23, Z+1	; 0x01
    1148:	62 0f       	add	r22, r18
    114a:	73 1f       	adc	r23, r19
    114c:	ae 01       	movw	r20, r28
    114e:	c8 01       	movw	r24, r16
    1150:	ca d4       	rcall	.+2452   	; 0x1ae6 <strncpy>
	buf[n] = 0;
    1152:	c0 0f       	add	r28, r16
    1154:	d1 1f       	adc	r29, r17
    1156:	18 82       	st	Y, r1
}
    1158:	df 91       	pop	r29
    115a:	cf 91       	pop	r28
    115c:	1f 91       	pop	r17
    115e:	0f 91       	pop	r16
    1160:	08 95       	ret

00001162 <yield>:
 * libraries or sketches that supports cooperative threads.
 *
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
    1162:	08 95       	ret

00001164 <__cmpsf2>:
    1164:	40 d0       	rcall	.+128    	; 0x11e6 <__fp_cmp>
    1166:	08 f4       	brcc	.+2      	; 0x116a <__cmpsf2+0x6>
    1168:	81 e0       	ldi	r24, 0x01	; 1
    116a:	08 95       	ret

0000116c <__floatunsisf>:
    116c:	e8 94       	clt
    116e:	09 c0       	rjmp	.+18     	; 0x1182 <__floatsisf+0x12>

00001170 <__floatsisf>:
    1170:	97 fb       	bst	r25, 7
    1172:	3e f4       	brtc	.+14     	; 0x1182 <__floatsisf+0x12>
    1174:	90 95       	com	r25
    1176:	80 95       	com	r24
    1178:	70 95       	com	r23
    117a:	61 95       	neg	r22
    117c:	7f 4f       	sbci	r23, 0xFF	; 255
    117e:	8f 4f       	sbci	r24, 0xFF	; 255
    1180:	9f 4f       	sbci	r25, 0xFF	; 255
    1182:	99 23       	and	r25, r25
    1184:	a9 f0       	breq	.+42     	; 0x11b0 <__floatsisf+0x40>
    1186:	f9 2f       	mov	r31, r25
    1188:	96 e9       	ldi	r25, 0x96	; 150
    118a:	bb 27       	eor	r27, r27
    118c:	93 95       	inc	r25
    118e:	f6 95       	lsr	r31
    1190:	87 95       	ror	r24
    1192:	77 95       	ror	r23
    1194:	67 95       	ror	r22
    1196:	b7 95       	ror	r27
    1198:	f1 11       	cpse	r31, r1
    119a:	f8 cf       	rjmp	.-16     	; 0x118c <__floatsisf+0x1c>
    119c:	fa f4       	brpl	.+62     	; 0x11dc <__floatsisf+0x6c>
    119e:	bb 0f       	add	r27, r27
    11a0:	11 f4       	brne	.+4      	; 0x11a6 <__floatsisf+0x36>
    11a2:	60 ff       	sbrs	r22, 0
    11a4:	1b c0       	rjmp	.+54     	; 0x11dc <__floatsisf+0x6c>
    11a6:	6f 5f       	subi	r22, 0xFF	; 255
    11a8:	7f 4f       	sbci	r23, 0xFF	; 255
    11aa:	8f 4f       	sbci	r24, 0xFF	; 255
    11ac:	9f 4f       	sbci	r25, 0xFF	; 255
    11ae:	16 c0       	rjmp	.+44     	; 0x11dc <__floatsisf+0x6c>
    11b0:	88 23       	and	r24, r24
    11b2:	11 f0       	breq	.+4      	; 0x11b8 <__floatsisf+0x48>
    11b4:	96 e9       	ldi	r25, 0x96	; 150
    11b6:	11 c0       	rjmp	.+34     	; 0x11da <__floatsisf+0x6a>
    11b8:	77 23       	and	r23, r23
    11ba:	21 f0       	breq	.+8      	; 0x11c4 <__floatsisf+0x54>
    11bc:	9e e8       	ldi	r25, 0x8E	; 142
    11be:	87 2f       	mov	r24, r23
    11c0:	76 2f       	mov	r23, r22
    11c2:	05 c0       	rjmp	.+10     	; 0x11ce <__floatsisf+0x5e>
    11c4:	66 23       	and	r22, r22
    11c6:	71 f0       	breq	.+28     	; 0x11e4 <__floatsisf+0x74>
    11c8:	96 e8       	ldi	r25, 0x86	; 134
    11ca:	86 2f       	mov	r24, r22
    11cc:	70 e0       	ldi	r23, 0x00	; 0
    11ce:	60 e0       	ldi	r22, 0x00	; 0
    11d0:	2a f0       	brmi	.+10     	; 0x11dc <__floatsisf+0x6c>
    11d2:	9a 95       	dec	r25
    11d4:	66 0f       	add	r22, r22
    11d6:	77 1f       	adc	r23, r23
    11d8:	88 1f       	adc	r24, r24
    11da:	da f7       	brpl	.-10     	; 0x11d2 <__floatsisf+0x62>
    11dc:	88 0f       	add	r24, r24
    11de:	96 95       	lsr	r25
    11e0:	87 95       	ror	r24
    11e2:	97 f9       	bld	r25, 7
    11e4:	08 95       	ret

000011e6 <__fp_cmp>:
    11e6:	99 0f       	add	r25, r25
    11e8:	00 08       	sbc	r0, r0
    11ea:	55 0f       	add	r21, r21
    11ec:	aa 0b       	sbc	r26, r26
    11ee:	e0 e8       	ldi	r30, 0x80	; 128
    11f0:	fe ef       	ldi	r31, 0xFE	; 254
    11f2:	16 16       	cp	r1, r22
    11f4:	17 06       	cpc	r1, r23
    11f6:	e8 07       	cpc	r30, r24
    11f8:	f9 07       	cpc	r31, r25
    11fa:	c0 f0       	brcs	.+48     	; 0x122c <__fp_cmp+0x46>
    11fc:	12 16       	cp	r1, r18
    11fe:	13 06       	cpc	r1, r19
    1200:	e4 07       	cpc	r30, r20
    1202:	f5 07       	cpc	r31, r21
    1204:	98 f0       	brcs	.+38     	; 0x122c <__fp_cmp+0x46>
    1206:	62 1b       	sub	r22, r18
    1208:	73 0b       	sbc	r23, r19
    120a:	84 0b       	sbc	r24, r20
    120c:	95 0b       	sbc	r25, r21
    120e:	39 f4       	brne	.+14     	; 0x121e <__fp_cmp+0x38>
    1210:	0a 26       	eor	r0, r26
    1212:	61 f0       	breq	.+24     	; 0x122c <__fp_cmp+0x46>
    1214:	23 2b       	or	r18, r19
    1216:	24 2b       	or	r18, r20
    1218:	25 2b       	or	r18, r21
    121a:	21 f4       	brne	.+8      	; 0x1224 <__fp_cmp+0x3e>
    121c:	08 95       	ret
    121e:	0a 26       	eor	r0, r26
    1220:	09 f4       	brne	.+2      	; 0x1224 <__fp_cmp+0x3e>
    1222:	a1 40       	sbci	r26, 0x01	; 1
    1224:	a6 95       	lsr	r26
    1226:	8f ef       	ldi	r24, 0xFF	; 255
    1228:	81 1d       	adc	r24, r1
    122a:	81 1d       	adc	r24, r1
    122c:	08 95       	ret

0000122e <__fp_inf>:
    122e:	97 f9       	bld	r25, 7
    1230:	9f 67       	ori	r25, 0x7F	; 127
    1232:	80 e8       	ldi	r24, 0x80	; 128
    1234:	70 e0       	ldi	r23, 0x00	; 0
    1236:	60 e0       	ldi	r22, 0x00	; 0
    1238:	08 95       	ret

0000123a <__fp_nan>:
    123a:	9f ef       	ldi	r25, 0xFF	; 255
    123c:	80 ec       	ldi	r24, 0xC0	; 192
    123e:	08 95       	ret

00001240 <__fp_pscA>:
    1240:	00 24       	eor	r0, r0
    1242:	0a 94       	dec	r0
    1244:	16 16       	cp	r1, r22
    1246:	17 06       	cpc	r1, r23
    1248:	18 06       	cpc	r1, r24
    124a:	09 06       	cpc	r0, r25
    124c:	08 95       	ret

0000124e <__fp_pscB>:
    124e:	00 24       	eor	r0, r0
    1250:	0a 94       	dec	r0
    1252:	12 16       	cp	r1, r18
    1254:	13 06       	cpc	r1, r19
    1256:	14 06       	cpc	r1, r20
    1258:	05 06       	cpc	r0, r21
    125a:	08 95       	ret

0000125c <__fp_round>:
    125c:	09 2e       	mov	r0, r25
    125e:	03 94       	inc	r0
    1260:	00 0c       	add	r0, r0
    1262:	11 f4       	brne	.+4      	; 0x1268 <__fp_round+0xc>
    1264:	88 23       	and	r24, r24
    1266:	52 f0       	brmi	.+20     	; 0x127c <__fp_round+0x20>
    1268:	bb 0f       	add	r27, r27
    126a:	40 f4       	brcc	.+16     	; 0x127c <__fp_round+0x20>
    126c:	bf 2b       	or	r27, r31
    126e:	11 f4       	brne	.+4      	; 0x1274 <__fp_round+0x18>
    1270:	60 ff       	sbrs	r22, 0
    1272:	04 c0       	rjmp	.+8      	; 0x127c <__fp_round+0x20>
    1274:	6f 5f       	subi	r22, 0xFF	; 255
    1276:	7f 4f       	sbci	r23, 0xFF	; 255
    1278:	8f 4f       	sbci	r24, 0xFF	; 255
    127a:	9f 4f       	sbci	r25, 0xFF	; 255
    127c:	08 95       	ret

0000127e <__mulsf3>:
    127e:	0b d0       	rcall	.+22     	; 0x1296 <__mulsf3x>
    1280:	ed cf       	rjmp	.-38     	; 0x125c <__fp_round>
    1282:	de df       	rcall	.-68     	; 0x1240 <__fp_pscA>
    1284:	28 f0       	brcs	.+10     	; 0x1290 <__mulsf3+0x12>
    1286:	e3 df       	rcall	.-58     	; 0x124e <__fp_pscB>
    1288:	18 f0       	brcs	.+6      	; 0x1290 <__mulsf3+0x12>
    128a:	95 23       	and	r25, r21
    128c:	09 f0       	breq	.+2      	; 0x1290 <__mulsf3+0x12>
    128e:	cf cf       	rjmp	.-98     	; 0x122e <__fp_inf>
    1290:	d4 cf       	rjmp	.-88     	; 0x123a <__fp_nan>
    1292:	11 24       	eor	r1, r1
    1294:	e0 c9       	rjmp	.-3136   	; 0x656 <__fp_szero>

00001296 <__mulsf3x>:
    1296:	bc d9       	rcall	.-3208   	; 0x610 <__fp_split3>
    1298:	a0 f3       	brcs	.-24     	; 0x1282 <__mulsf3+0x4>

0000129a <__mulsf3_pse>:
    129a:	95 9f       	mul	r25, r21
    129c:	d1 f3       	breq	.-12     	; 0x1292 <__mulsf3+0x14>
    129e:	95 0f       	add	r25, r21
    12a0:	50 e0       	ldi	r21, 0x00	; 0
    12a2:	55 1f       	adc	r21, r21
    12a4:	62 9f       	mul	r22, r18
    12a6:	f0 01       	movw	r30, r0
    12a8:	72 9f       	mul	r23, r18
    12aa:	bb 27       	eor	r27, r27
    12ac:	f0 0d       	add	r31, r0
    12ae:	b1 1d       	adc	r27, r1
    12b0:	63 9f       	mul	r22, r19
    12b2:	aa 27       	eor	r26, r26
    12b4:	f0 0d       	add	r31, r0
    12b6:	b1 1d       	adc	r27, r1
    12b8:	aa 1f       	adc	r26, r26
    12ba:	64 9f       	mul	r22, r20
    12bc:	66 27       	eor	r22, r22
    12be:	b0 0d       	add	r27, r0
    12c0:	a1 1d       	adc	r26, r1
    12c2:	66 1f       	adc	r22, r22
    12c4:	82 9f       	mul	r24, r18
    12c6:	22 27       	eor	r18, r18
    12c8:	b0 0d       	add	r27, r0
    12ca:	a1 1d       	adc	r26, r1
    12cc:	62 1f       	adc	r22, r18
    12ce:	73 9f       	mul	r23, r19
    12d0:	b0 0d       	add	r27, r0
    12d2:	a1 1d       	adc	r26, r1
    12d4:	62 1f       	adc	r22, r18
    12d6:	83 9f       	mul	r24, r19
    12d8:	a0 0d       	add	r26, r0
    12da:	61 1d       	adc	r22, r1
    12dc:	22 1f       	adc	r18, r18
    12de:	74 9f       	mul	r23, r20
    12e0:	33 27       	eor	r19, r19
    12e2:	a0 0d       	add	r26, r0
    12e4:	61 1d       	adc	r22, r1
    12e6:	23 1f       	adc	r18, r19
    12e8:	84 9f       	mul	r24, r20
    12ea:	60 0d       	add	r22, r0
    12ec:	21 1d       	adc	r18, r1
    12ee:	82 2f       	mov	r24, r18
    12f0:	76 2f       	mov	r23, r22
    12f2:	6a 2f       	mov	r22, r26
    12f4:	11 24       	eor	r1, r1
    12f6:	9f 57       	subi	r25, 0x7F	; 127
    12f8:	50 40       	sbci	r21, 0x00	; 0
    12fa:	8a f0       	brmi	.+34     	; 0x131e <__mulsf3_pse+0x84>
    12fc:	e1 f0       	breq	.+56     	; 0x1336 <__mulsf3_pse+0x9c>
    12fe:	88 23       	and	r24, r24
    1300:	4a f0       	brmi	.+18     	; 0x1314 <__mulsf3_pse+0x7a>
    1302:	ee 0f       	add	r30, r30
    1304:	ff 1f       	adc	r31, r31
    1306:	bb 1f       	adc	r27, r27
    1308:	66 1f       	adc	r22, r22
    130a:	77 1f       	adc	r23, r23
    130c:	88 1f       	adc	r24, r24
    130e:	91 50       	subi	r25, 0x01	; 1
    1310:	50 40       	sbci	r21, 0x00	; 0
    1312:	a9 f7       	brne	.-22     	; 0x12fe <__mulsf3_pse+0x64>
    1314:	9e 3f       	cpi	r25, 0xFE	; 254
    1316:	51 05       	cpc	r21, r1
    1318:	70 f0       	brcs	.+28     	; 0x1336 <__mulsf3_pse+0x9c>
    131a:	89 cf       	rjmp	.-238    	; 0x122e <__fp_inf>
    131c:	9c c9       	rjmp	.-3272   	; 0x656 <__fp_szero>
    131e:	5f 3f       	cpi	r21, 0xFF	; 255
    1320:	ec f3       	brlt	.-6      	; 0x131c <__mulsf3_pse+0x82>
    1322:	98 3e       	cpi	r25, 0xE8	; 232
    1324:	dc f3       	brlt	.-10     	; 0x131c <__mulsf3_pse+0x82>
    1326:	86 95       	lsr	r24
    1328:	77 95       	ror	r23
    132a:	67 95       	ror	r22
    132c:	b7 95       	ror	r27
    132e:	f7 95       	ror	r31
    1330:	e7 95       	ror	r30
    1332:	9f 5f       	subi	r25, 0xFF	; 255
    1334:	c1 f7       	brne	.-16     	; 0x1326 <__mulsf3_pse+0x8c>
    1336:	fe 2b       	or	r31, r30
    1338:	88 0f       	add	r24, r24
    133a:	91 1d       	adc	r25, r1
    133c:	96 95       	lsr	r25
    133e:	87 95       	ror	r24
    1340:	97 f9       	bld	r25, 7
    1342:	08 95       	ret

00001344 <__udivmodsi4>:
    1344:	a1 e2       	ldi	r26, 0x21	; 33
    1346:	1a 2e       	mov	r1, r26
    1348:	aa 1b       	sub	r26, r26
    134a:	bb 1b       	sub	r27, r27
    134c:	fd 01       	movw	r30, r26
    134e:	0d c0       	rjmp	.+26     	; 0x136a <__udivmodsi4_ep>

00001350 <__udivmodsi4_loop>:
    1350:	aa 1f       	adc	r26, r26
    1352:	bb 1f       	adc	r27, r27
    1354:	ee 1f       	adc	r30, r30
    1356:	ff 1f       	adc	r31, r31
    1358:	a2 17       	cp	r26, r18
    135a:	b3 07       	cpc	r27, r19
    135c:	e4 07       	cpc	r30, r20
    135e:	f5 07       	cpc	r31, r21
    1360:	20 f0       	brcs	.+8      	; 0x136a <__udivmodsi4_ep>
    1362:	a2 1b       	sub	r26, r18
    1364:	b3 0b       	sbc	r27, r19
    1366:	e4 0b       	sbc	r30, r20
    1368:	f5 0b       	sbc	r31, r21

0000136a <__udivmodsi4_ep>:
    136a:	66 1f       	adc	r22, r22
    136c:	77 1f       	adc	r23, r23
    136e:	88 1f       	adc	r24, r24
    1370:	99 1f       	adc	r25, r25
    1372:	1a 94       	dec	r1
    1374:	69 f7       	brne	.-38     	; 0x1350 <__udivmodsi4_loop>
    1376:	60 95       	com	r22
    1378:	70 95       	com	r23
    137a:	80 95       	com	r24
    137c:	90 95       	com	r25
    137e:	9b 01       	movw	r18, r22
    1380:	ac 01       	movw	r20, r24
    1382:	bd 01       	movw	r22, r26
    1384:	cf 01       	movw	r24, r30
    1386:	08 95       	ret

00001388 <__tablejump2__>:
    1388:	ee 0f       	add	r30, r30
    138a:	ff 1f       	adc	r31, r31
    138c:	88 1f       	adc	r24, r24
    138e:	8b bf       	out	0x3b, r24	; 59
    1390:	07 90       	elpm	r0, Z+
    1392:	f6 91       	elpm	r31, Z
    1394:	e0 2d       	mov	r30, r0
    1396:	19 94       	eijmp

00001398 <__muluhisi3>:
    1398:	09 d0       	rcall	.+18     	; 0x13ac <__umulhisi3>
    139a:	a5 9f       	mul	r26, r21
    139c:	90 0d       	add	r25, r0
    139e:	b4 9f       	mul	r27, r20
    13a0:	90 0d       	add	r25, r0
    13a2:	a4 9f       	mul	r26, r20
    13a4:	80 0d       	add	r24, r0
    13a6:	91 1d       	adc	r25, r1
    13a8:	11 24       	eor	r1, r1
    13aa:	08 95       	ret

000013ac <__umulhisi3>:
    13ac:	a2 9f       	mul	r26, r18
    13ae:	b0 01       	movw	r22, r0
    13b0:	b3 9f       	mul	r27, r19
    13b2:	c0 01       	movw	r24, r0
    13b4:	a3 9f       	mul	r26, r19
    13b6:	70 0d       	add	r23, r0
    13b8:	81 1d       	adc	r24, r1
    13ba:	11 24       	eor	r1, r1
    13bc:	91 1d       	adc	r25, r1
    13be:	b2 9f       	mul	r27, r18
    13c0:	70 0d       	add	r23, r0
    13c2:	81 1d       	adc	r24, r1
    13c4:	11 24       	eor	r1, r1
    13c6:	91 1d       	adc	r25, r1
    13c8:	08 95       	ret

000013ca <malloc>:
    13ca:	0f 93       	push	r16
    13cc:	1f 93       	push	r17
    13ce:	cf 93       	push	r28
    13d0:	df 93       	push	r29
    13d2:	82 30       	cpi	r24, 0x02	; 2
    13d4:	91 05       	cpc	r25, r1
    13d6:	10 f4       	brcc	.+4      	; 0x13dc <malloc+0x12>
    13d8:	82 e0       	ldi	r24, 0x02	; 2
    13da:	90 e0       	ldi	r25, 0x00	; 0
    13dc:	e0 91 ee 02 	lds	r30, 0x02EE	; 0x8002ee <__flp>
    13e0:	f0 91 ef 02 	lds	r31, 0x02EF	; 0x8002ef <__flp+0x1>
    13e4:	20 e0       	ldi	r18, 0x00	; 0
    13e6:	30 e0       	ldi	r19, 0x00	; 0
    13e8:	a0 e0       	ldi	r26, 0x00	; 0
    13ea:	b0 e0       	ldi	r27, 0x00	; 0
    13ec:	30 97       	sbiw	r30, 0x00	; 0
    13ee:	19 f1       	breq	.+70     	; 0x1436 <malloc+0x6c>
    13f0:	40 81       	ld	r20, Z
    13f2:	51 81       	ldd	r21, Z+1	; 0x01
    13f4:	02 81       	ldd	r16, Z+2	; 0x02
    13f6:	13 81       	ldd	r17, Z+3	; 0x03
    13f8:	48 17       	cp	r20, r24
    13fa:	59 07       	cpc	r21, r25
    13fc:	c8 f0       	brcs	.+50     	; 0x1430 <malloc+0x66>
    13fe:	84 17       	cp	r24, r20
    1400:	95 07       	cpc	r25, r21
    1402:	69 f4       	brne	.+26     	; 0x141e <malloc+0x54>
    1404:	10 97       	sbiw	r26, 0x00	; 0
    1406:	31 f0       	breq	.+12     	; 0x1414 <malloc+0x4a>
    1408:	12 96       	adiw	r26, 0x02	; 2
    140a:	0c 93       	st	X, r16
    140c:	12 97       	sbiw	r26, 0x02	; 2
    140e:	13 96       	adiw	r26, 0x03	; 3
    1410:	1c 93       	st	X, r17
    1412:	27 c0       	rjmp	.+78     	; 0x1462 <malloc+0x98>
    1414:	00 93 ee 02 	sts	0x02EE, r16	; 0x8002ee <__flp>
    1418:	10 93 ef 02 	sts	0x02EF, r17	; 0x8002ef <__flp+0x1>
    141c:	22 c0       	rjmp	.+68     	; 0x1462 <malloc+0x98>
    141e:	21 15       	cp	r18, r1
    1420:	31 05       	cpc	r19, r1
    1422:	19 f0       	breq	.+6      	; 0x142a <malloc+0x60>
    1424:	42 17       	cp	r20, r18
    1426:	53 07       	cpc	r21, r19
    1428:	18 f4       	brcc	.+6      	; 0x1430 <malloc+0x66>
    142a:	9a 01       	movw	r18, r20
    142c:	bd 01       	movw	r22, r26
    142e:	ef 01       	movw	r28, r30
    1430:	df 01       	movw	r26, r30
    1432:	f8 01       	movw	r30, r16
    1434:	db cf       	rjmp	.-74     	; 0x13ec <malloc+0x22>
    1436:	21 15       	cp	r18, r1
    1438:	31 05       	cpc	r19, r1
    143a:	f9 f0       	breq	.+62     	; 0x147a <malloc+0xb0>
    143c:	28 1b       	sub	r18, r24
    143e:	39 0b       	sbc	r19, r25
    1440:	24 30       	cpi	r18, 0x04	; 4
    1442:	31 05       	cpc	r19, r1
    1444:	80 f4       	brcc	.+32     	; 0x1466 <malloc+0x9c>
    1446:	8a 81       	ldd	r24, Y+2	; 0x02
    1448:	9b 81       	ldd	r25, Y+3	; 0x03
    144a:	61 15       	cp	r22, r1
    144c:	71 05       	cpc	r23, r1
    144e:	21 f0       	breq	.+8      	; 0x1458 <malloc+0x8e>
    1450:	fb 01       	movw	r30, r22
    1452:	93 83       	std	Z+3, r25	; 0x03
    1454:	82 83       	std	Z+2, r24	; 0x02
    1456:	04 c0       	rjmp	.+8      	; 0x1460 <malloc+0x96>
    1458:	90 93 ef 02 	sts	0x02EF, r25	; 0x8002ef <__flp+0x1>
    145c:	80 93 ee 02 	sts	0x02EE, r24	; 0x8002ee <__flp>
    1460:	fe 01       	movw	r30, r28
    1462:	32 96       	adiw	r30, 0x02	; 2
    1464:	44 c0       	rjmp	.+136    	; 0x14ee <malloc+0x124>
    1466:	fe 01       	movw	r30, r28
    1468:	e2 0f       	add	r30, r18
    146a:	f3 1f       	adc	r31, r19
    146c:	81 93       	st	Z+, r24
    146e:	91 93       	st	Z+, r25
    1470:	22 50       	subi	r18, 0x02	; 2
    1472:	31 09       	sbc	r19, r1
    1474:	39 83       	std	Y+1, r19	; 0x01
    1476:	28 83       	st	Y, r18
    1478:	3a c0       	rjmp	.+116    	; 0x14ee <malloc+0x124>
    147a:	20 91 ec 02 	lds	r18, 0x02EC	; 0x8002ec <__brkval>
    147e:	30 91 ed 02 	lds	r19, 0x02ED	; 0x8002ed <__brkval+0x1>
    1482:	23 2b       	or	r18, r19
    1484:	41 f4       	brne	.+16     	; 0x1496 <malloc+0xcc>
    1486:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <__malloc_heap_start>
    148a:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <__malloc_heap_start+0x1>
    148e:	30 93 ed 02 	sts	0x02ED, r19	; 0x8002ed <__brkval+0x1>
    1492:	20 93 ec 02 	sts	0x02EC, r18	; 0x8002ec <__brkval>
    1496:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__data_start>
    149a:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__data_start+0x1>
    149e:	21 15       	cp	r18, r1
    14a0:	31 05       	cpc	r19, r1
    14a2:	41 f4       	brne	.+16     	; 0x14b4 <malloc+0xea>
    14a4:	2d b7       	in	r18, 0x3d	; 61
    14a6:	3e b7       	in	r19, 0x3e	; 62
    14a8:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
    14ac:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
    14b0:	24 1b       	sub	r18, r20
    14b2:	35 0b       	sbc	r19, r21
    14b4:	e0 91 ec 02 	lds	r30, 0x02EC	; 0x8002ec <__brkval>
    14b8:	f0 91 ed 02 	lds	r31, 0x02ED	; 0x8002ed <__brkval+0x1>
    14bc:	e2 17       	cp	r30, r18
    14be:	f3 07       	cpc	r31, r19
    14c0:	a0 f4       	brcc	.+40     	; 0x14ea <malloc+0x120>
    14c2:	2e 1b       	sub	r18, r30
    14c4:	3f 0b       	sbc	r19, r31
    14c6:	28 17       	cp	r18, r24
    14c8:	39 07       	cpc	r19, r25
    14ca:	78 f0       	brcs	.+30     	; 0x14ea <malloc+0x120>
    14cc:	ac 01       	movw	r20, r24
    14ce:	4e 5f       	subi	r20, 0xFE	; 254
    14d0:	5f 4f       	sbci	r21, 0xFF	; 255
    14d2:	24 17       	cp	r18, r20
    14d4:	35 07       	cpc	r19, r21
    14d6:	48 f0       	brcs	.+18     	; 0x14ea <malloc+0x120>
    14d8:	4e 0f       	add	r20, r30
    14da:	5f 1f       	adc	r21, r31
    14dc:	50 93 ed 02 	sts	0x02ED, r21	; 0x8002ed <__brkval+0x1>
    14e0:	40 93 ec 02 	sts	0x02EC, r20	; 0x8002ec <__brkval>
    14e4:	81 93       	st	Z+, r24
    14e6:	91 93       	st	Z+, r25
    14e8:	02 c0       	rjmp	.+4      	; 0x14ee <malloc+0x124>
    14ea:	e0 e0       	ldi	r30, 0x00	; 0
    14ec:	f0 e0       	ldi	r31, 0x00	; 0
    14ee:	cf 01       	movw	r24, r30
    14f0:	df 91       	pop	r29
    14f2:	cf 91       	pop	r28
    14f4:	1f 91       	pop	r17
    14f6:	0f 91       	pop	r16
    14f8:	08 95       	ret

000014fa <free>:
    14fa:	cf 93       	push	r28
    14fc:	df 93       	push	r29
    14fe:	00 97       	sbiw	r24, 0x00	; 0
    1500:	09 f4       	brne	.+2      	; 0x1504 <free+0xa>
    1502:	81 c0       	rjmp	.+258    	; 0x1606 <free+0x10c>
    1504:	fc 01       	movw	r30, r24
    1506:	32 97       	sbiw	r30, 0x02	; 2
    1508:	13 82       	std	Z+3, r1	; 0x03
    150a:	12 82       	std	Z+2, r1	; 0x02
    150c:	a0 91 ee 02 	lds	r26, 0x02EE	; 0x8002ee <__flp>
    1510:	b0 91 ef 02 	lds	r27, 0x02EF	; 0x8002ef <__flp+0x1>
    1514:	10 97       	sbiw	r26, 0x00	; 0
    1516:	81 f4       	brne	.+32     	; 0x1538 <free+0x3e>
    1518:	20 81       	ld	r18, Z
    151a:	31 81       	ldd	r19, Z+1	; 0x01
    151c:	82 0f       	add	r24, r18
    151e:	93 1f       	adc	r25, r19
    1520:	20 91 ec 02 	lds	r18, 0x02EC	; 0x8002ec <__brkval>
    1524:	30 91 ed 02 	lds	r19, 0x02ED	; 0x8002ed <__brkval+0x1>
    1528:	28 17       	cp	r18, r24
    152a:	39 07       	cpc	r19, r25
    152c:	51 f5       	brne	.+84     	; 0x1582 <free+0x88>
    152e:	f0 93 ed 02 	sts	0x02ED, r31	; 0x8002ed <__brkval+0x1>
    1532:	e0 93 ec 02 	sts	0x02EC, r30	; 0x8002ec <__brkval>
    1536:	67 c0       	rjmp	.+206    	; 0x1606 <free+0x10c>
    1538:	ed 01       	movw	r28, r26
    153a:	20 e0       	ldi	r18, 0x00	; 0
    153c:	30 e0       	ldi	r19, 0x00	; 0
    153e:	ce 17       	cp	r28, r30
    1540:	df 07       	cpc	r29, r31
    1542:	40 f4       	brcc	.+16     	; 0x1554 <free+0x5a>
    1544:	4a 81       	ldd	r20, Y+2	; 0x02
    1546:	5b 81       	ldd	r21, Y+3	; 0x03
    1548:	9e 01       	movw	r18, r28
    154a:	41 15       	cp	r20, r1
    154c:	51 05       	cpc	r21, r1
    154e:	f1 f0       	breq	.+60     	; 0x158c <free+0x92>
    1550:	ea 01       	movw	r28, r20
    1552:	f5 cf       	rjmp	.-22     	; 0x153e <free+0x44>
    1554:	d3 83       	std	Z+3, r29	; 0x03
    1556:	c2 83       	std	Z+2, r28	; 0x02
    1558:	40 81       	ld	r20, Z
    155a:	51 81       	ldd	r21, Z+1	; 0x01
    155c:	84 0f       	add	r24, r20
    155e:	95 1f       	adc	r25, r21
    1560:	c8 17       	cp	r28, r24
    1562:	d9 07       	cpc	r29, r25
    1564:	59 f4       	brne	.+22     	; 0x157c <free+0x82>
    1566:	88 81       	ld	r24, Y
    1568:	99 81       	ldd	r25, Y+1	; 0x01
    156a:	84 0f       	add	r24, r20
    156c:	95 1f       	adc	r25, r21
    156e:	02 96       	adiw	r24, 0x02	; 2
    1570:	91 83       	std	Z+1, r25	; 0x01
    1572:	80 83       	st	Z, r24
    1574:	8a 81       	ldd	r24, Y+2	; 0x02
    1576:	9b 81       	ldd	r25, Y+3	; 0x03
    1578:	93 83       	std	Z+3, r25	; 0x03
    157a:	82 83       	std	Z+2, r24	; 0x02
    157c:	21 15       	cp	r18, r1
    157e:	31 05       	cpc	r19, r1
    1580:	29 f4       	brne	.+10     	; 0x158c <free+0x92>
    1582:	f0 93 ef 02 	sts	0x02EF, r31	; 0x8002ef <__flp+0x1>
    1586:	e0 93 ee 02 	sts	0x02EE, r30	; 0x8002ee <__flp>
    158a:	3d c0       	rjmp	.+122    	; 0x1606 <free+0x10c>
    158c:	e9 01       	movw	r28, r18
    158e:	fb 83       	std	Y+3, r31	; 0x03
    1590:	ea 83       	std	Y+2, r30	; 0x02
    1592:	49 91       	ld	r20, Y+
    1594:	59 91       	ld	r21, Y+
    1596:	c4 0f       	add	r28, r20
    1598:	d5 1f       	adc	r29, r21
    159a:	ec 17       	cp	r30, r28
    159c:	fd 07       	cpc	r31, r29
    159e:	61 f4       	brne	.+24     	; 0x15b8 <free+0xbe>
    15a0:	80 81       	ld	r24, Z
    15a2:	91 81       	ldd	r25, Z+1	; 0x01
    15a4:	84 0f       	add	r24, r20
    15a6:	95 1f       	adc	r25, r21
    15a8:	02 96       	adiw	r24, 0x02	; 2
    15aa:	e9 01       	movw	r28, r18
    15ac:	99 83       	std	Y+1, r25	; 0x01
    15ae:	88 83       	st	Y, r24
    15b0:	82 81       	ldd	r24, Z+2	; 0x02
    15b2:	93 81       	ldd	r25, Z+3	; 0x03
    15b4:	9b 83       	std	Y+3, r25	; 0x03
    15b6:	8a 83       	std	Y+2, r24	; 0x02
    15b8:	e0 e0       	ldi	r30, 0x00	; 0
    15ba:	f0 e0       	ldi	r31, 0x00	; 0
    15bc:	12 96       	adiw	r26, 0x02	; 2
    15be:	8d 91       	ld	r24, X+
    15c0:	9c 91       	ld	r25, X
    15c2:	13 97       	sbiw	r26, 0x03	; 3
    15c4:	00 97       	sbiw	r24, 0x00	; 0
    15c6:	19 f0       	breq	.+6      	; 0x15ce <free+0xd4>
    15c8:	fd 01       	movw	r30, r26
    15ca:	dc 01       	movw	r26, r24
    15cc:	f7 cf       	rjmp	.-18     	; 0x15bc <free+0xc2>
    15ce:	8d 91       	ld	r24, X+
    15d0:	9c 91       	ld	r25, X
    15d2:	11 97       	sbiw	r26, 0x01	; 1
    15d4:	9d 01       	movw	r18, r26
    15d6:	2e 5f       	subi	r18, 0xFE	; 254
    15d8:	3f 4f       	sbci	r19, 0xFF	; 255
    15da:	82 0f       	add	r24, r18
    15dc:	93 1f       	adc	r25, r19
    15de:	20 91 ec 02 	lds	r18, 0x02EC	; 0x8002ec <__brkval>
    15e2:	30 91 ed 02 	lds	r19, 0x02ED	; 0x8002ed <__brkval+0x1>
    15e6:	28 17       	cp	r18, r24
    15e8:	39 07       	cpc	r19, r25
    15ea:	69 f4       	brne	.+26     	; 0x1606 <free+0x10c>
    15ec:	30 97       	sbiw	r30, 0x00	; 0
    15ee:	29 f4       	brne	.+10     	; 0x15fa <free+0x100>
    15f0:	10 92 ef 02 	sts	0x02EF, r1	; 0x8002ef <__flp+0x1>
    15f4:	10 92 ee 02 	sts	0x02EE, r1	; 0x8002ee <__flp>
    15f8:	02 c0       	rjmp	.+4      	; 0x15fe <free+0x104>
    15fa:	13 82       	std	Z+3, r1	; 0x03
    15fc:	12 82       	std	Z+2, r1	; 0x02
    15fe:	b0 93 ed 02 	sts	0x02ED, r27	; 0x8002ed <__brkval+0x1>
    1602:	a0 93 ec 02 	sts	0x02EC, r26	; 0x8002ec <__brkval>
    1606:	df 91       	pop	r29
    1608:	cf 91       	pop	r28
    160a:	08 95       	ret

0000160c <realloc>:
    160c:	6f 92       	push	r6
    160e:	7f 92       	push	r7
    1610:	8f 92       	push	r8
    1612:	9f 92       	push	r9
    1614:	af 92       	push	r10
    1616:	bf 92       	push	r11
    1618:	cf 92       	push	r12
    161a:	df 92       	push	r13
    161c:	ef 92       	push	r14
    161e:	ff 92       	push	r15
    1620:	0f 93       	push	r16
    1622:	1f 93       	push	r17
    1624:	cf 93       	push	r28
    1626:	df 93       	push	r29
    1628:	00 97       	sbiw	r24, 0x00	; 0
    162a:	81 f4       	brne	.+32     	; 0x164c <realloc+0x40>
    162c:	cb 01       	movw	r24, r22
    162e:	df 91       	pop	r29
    1630:	cf 91       	pop	r28
    1632:	1f 91       	pop	r17
    1634:	0f 91       	pop	r16
    1636:	ff 90       	pop	r15
    1638:	ef 90       	pop	r14
    163a:	df 90       	pop	r13
    163c:	cf 90       	pop	r12
    163e:	bf 90       	pop	r11
    1640:	af 90       	pop	r10
    1642:	9f 90       	pop	r9
    1644:	8f 90       	pop	r8
    1646:	7f 90       	pop	r7
    1648:	6f 90       	pop	r6
    164a:	bf ce       	rjmp	.-642    	; 0x13ca <malloc>
    164c:	fc 01       	movw	r30, r24
    164e:	e6 0f       	add	r30, r22
    1650:	f7 1f       	adc	r31, r23
    1652:	9c 01       	movw	r18, r24
    1654:	22 50       	subi	r18, 0x02	; 2
    1656:	31 09       	sbc	r19, r1
    1658:	e2 17       	cp	r30, r18
    165a:	f3 07       	cpc	r31, r19
    165c:	08 f4       	brcc	.+2      	; 0x1660 <realloc+0x54>
    165e:	a5 c0       	rjmp	.+330    	; 0x17aa <realloc+0x19e>
    1660:	ec 01       	movw	r28, r24
    1662:	d9 01       	movw	r26, r18
    1664:	0d 91       	ld	r16, X+
    1666:	1c 91       	ld	r17, X
    1668:	11 97       	sbiw	r26, 0x01	; 1
    166a:	06 17       	cp	r16, r22
    166c:	17 07       	cpc	r17, r23
    166e:	a8 f0       	brcs	.+42     	; 0x169a <realloc+0x8e>
    1670:	05 30       	cpi	r16, 0x05	; 5
    1672:	11 05       	cpc	r17, r1
    1674:	08 f4       	brcc	.+2      	; 0x1678 <realloc+0x6c>
    1676:	97 c0       	rjmp	.+302    	; 0x17a6 <realloc+0x19a>
    1678:	c8 01       	movw	r24, r16
    167a:	04 97       	sbiw	r24, 0x04	; 4
    167c:	86 17       	cp	r24, r22
    167e:	97 07       	cpc	r25, r23
    1680:	08 f4       	brcc	.+2      	; 0x1684 <realloc+0x78>
    1682:	91 c0       	rjmp	.+290    	; 0x17a6 <realloc+0x19a>
    1684:	02 50       	subi	r16, 0x02	; 2
    1686:	11 09       	sbc	r17, r1
    1688:	06 1b       	sub	r16, r22
    168a:	17 0b       	sbc	r17, r23
    168c:	01 93       	st	Z+, r16
    168e:	11 93       	st	Z+, r17
    1690:	6d 93       	st	X+, r22
    1692:	7c 93       	st	X, r23
    1694:	cf 01       	movw	r24, r30
    1696:	31 df       	rcall	.-414    	; 0x14fa <free>
    1698:	86 c0       	rjmp	.+268    	; 0x17a6 <realloc+0x19a>
    169a:	5b 01       	movw	r10, r22
    169c:	a0 1a       	sub	r10, r16
    169e:	b1 0a       	sbc	r11, r17
    16a0:	4c 01       	movw	r8, r24
    16a2:	80 0e       	add	r8, r16
    16a4:	91 1e       	adc	r9, r17
    16a6:	a0 91 ee 02 	lds	r26, 0x02EE	; 0x8002ee <__flp>
    16aa:	b0 91 ef 02 	lds	r27, 0x02EF	; 0x8002ef <__flp+0x1>
    16ae:	61 2c       	mov	r6, r1
    16b0:	71 2c       	mov	r7, r1
    16b2:	e1 2c       	mov	r14, r1
    16b4:	f1 2c       	mov	r15, r1
    16b6:	10 97       	sbiw	r26, 0x00	; 0
    16b8:	09 f4       	brne	.+2      	; 0x16bc <realloc+0xb0>
    16ba:	46 c0       	rjmp	.+140    	; 0x1748 <realloc+0x13c>
    16bc:	8d 91       	ld	r24, X+
    16be:	9c 91       	ld	r25, X
    16c0:	11 97       	sbiw	r26, 0x01	; 1
    16c2:	a8 15       	cp	r26, r8
    16c4:	b9 05       	cpc	r27, r9
    16c6:	b1 f5       	brne	.+108    	; 0x1734 <realloc+0x128>
    16c8:	6c 01       	movw	r12, r24
    16ca:	42 e0       	ldi	r20, 0x02	; 2
    16cc:	c4 0e       	add	r12, r20
    16ce:	d1 1c       	adc	r13, r1
    16d0:	ca 14       	cp	r12, r10
    16d2:	db 04       	cpc	r13, r11
    16d4:	78 f1       	brcs	.+94     	; 0x1734 <realloc+0x128>
    16d6:	4c 01       	movw	r8, r24
    16d8:	8a 18       	sub	r8, r10
    16da:	9b 08       	sbc	r9, r11
    16dc:	64 01       	movw	r12, r8
    16de:	42 e0       	ldi	r20, 0x02	; 2
    16e0:	c4 0e       	add	r12, r20
    16e2:	d1 1c       	adc	r13, r1
    16e4:	12 96       	adiw	r26, 0x02	; 2
    16e6:	bc 90       	ld	r11, X
    16e8:	12 97       	sbiw	r26, 0x02	; 2
    16ea:	13 96       	adiw	r26, 0x03	; 3
    16ec:	ac 91       	ld	r26, X
    16ee:	b5 e0       	ldi	r27, 0x05	; 5
    16f0:	cb 16       	cp	r12, r27
    16f2:	d1 04       	cpc	r13, r1
    16f4:	40 f0       	brcs	.+16     	; 0x1706 <realloc+0xfa>
    16f6:	b2 82       	std	Z+2, r11	; 0x02
    16f8:	a3 83       	std	Z+3, r26	; 0x03
    16fa:	91 82       	std	Z+1, r9	; 0x01
    16fc:	80 82       	st	Z, r8
    16fe:	d9 01       	movw	r26, r18
    1700:	6d 93       	st	X+, r22
    1702:	7c 93       	st	X, r23
    1704:	09 c0       	rjmp	.+18     	; 0x1718 <realloc+0x10c>
    1706:	0e 5f       	subi	r16, 0xFE	; 254
    1708:	1f 4f       	sbci	r17, 0xFF	; 255
    170a:	80 0f       	add	r24, r16
    170c:	91 1f       	adc	r25, r17
    170e:	f9 01       	movw	r30, r18
    1710:	91 83       	std	Z+1, r25	; 0x01
    1712:	80 83       	st	Z, r24
    1714:	eb 2d       	mov	r30, r11
    1716:	fa 2f       	mov	r31, r26
    1718:	e1 14       	cp	r14, r1
    171a:	f1 04       	cpc	r15, r1
    171c:	31 f0       	breq	.+12     	; 0x172a <realloc+0x11e>
    171e:	d7 01       	movw	r26, r14
    1720:	13 96       	adiw	r26, 0x03	; 3
    1722:	fc 93       	st	X, r31
    1724:	ee 93       	st	-X, r30
    1726:	12 97       	sbiw	r26, 0x02	; 2
    1728:	3e c0       	rjmp	.+124    	; 0x17a6 <realloc+0x19a>
    172a:	f0 93 ef 02 	sts	0x02EF, r31	; 0x8002ef <__flp+0x1>
    172e:	e0 93 ee 02 	sts	0x02EE, r30	; 0x8002ee <__flp>
    1732:	39 c0       	rjmp	.+114    	; 0x17a6 <realloc+0x19a>
    1734:	68 16       	cp	r6, r24
    1736:	79 06       	cpc	r7, r25
    1738:	08 f4       	brcc	.+2      	; 0x173c <realloc+0x130>
    173a:	3c 01       	movw	r6, r24
    173c:	7d 01       	movw	r14, r26
    173e:	12 96       	adiw	r26, 0x02	; 2
    1740:	0d 90       	ld	r0, X+
    1742:	bc 91       	ld	r27, X
    1744:	a0 2d       	mov	r26, r0
    1746:	b7 cf       	rjmp	.-146    	; 0x16b6 <realloc+0xaa>
    1748:	80 91 ec 02 	lds	r24, 0x02EC	; 0x8002ec <__brkval>
    174c:	90 91 ed 02 	lds	r25, 0x02ED	; 0x8002ed <__brkval+0x1>
    1750:	88 16       	cp	r8, r24
    1752:	99 06       	cpc	r9, r25
    1754:	e1 f4       	brne	.+56     	; 0x178e <realloc+0x182>
    1756:	66 16       	cp	r6, r22
    1758:	77 06       	cpc	r7, r23
    175a:	c8 f4       	brcc	.+50     	; 0x178e <realloc+0x182>
    175c:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__data_start>
    1760:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <__data_start+0x1>
    1764:	00 97       	sbiw	r24, 0x00	; 0
    1766:	41 f4       	brne	.+16     	; 0x1778 <realloc+0x16c>
    1768:	8d b7       	in	r24, 0x3d	; 61
    176a:	9e b7       	in	r25, 0x3e	; 62
    176c:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
    1770:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
    1774:	84 1b       	sub	r24, r20
    1776:	95 0b       	sbc	r25, r21
    1778:	e8 17       	cp	r30, r24
    177a:	f9 07       	cpc	r31, r25
    177c:	b0 f4       	brcc	.+44     	; 0x17aa <realloc+0x19e>
    177e:	f0 93 ed 02 	sts	0x02ED, r31	; 0x8002ed <__brkval+0x1>
    1782:	e0 93 ec 02 	sts	0x02EC, r30	; 0x8002ec <__brkval>
    1786:	f9 01       	movw	r30, r18
    1788:	71 83       	std	Z+1, r23	; 0x01
    178a:	60 83       	st	Z, r22
    178c:	0c c0       	rjmp	.+24     	; 0x17a6 <realloc+0x19a>
    178e:	cb 01       	movw	r24, r22
    1790:	1c de       	rcall	.-968    	; 0x13ca <malloc>
    1792:	7c 01       	movw	r14, r24
    1794:	00 97       	sbiw	r24, 0x00	; 0
    1796:	49 f0       	breq	.+18     	; 0x17aa <realloc+0x19e>
    1798:	a8 01       	movw	r20, r16
    179a:	be 01       	movw	r22, r28
    179c:	8a d1       	rcall	.+788    	; 0x1ab2 <memcpy>
    179e:	ce 01       	movw	r24, r28
    17a0:	ac de       	rcall	.-680    	; 0x14fa <free>
    17a2:	c7 01       	movw	r24, r14
    17a4:	04 c0       	rjmp	.+8      	; 0x17ae <realloc+0x1a2>
    17a6:	ce 01       	movw	r24, r28
    17a8:	02 c0       	rjmp	.+4      	; 0x17ae <realloc+0x1a2>
    17aa:	80 e0       	ldi	r24, 0x00	; 0
    17ac:	90 e0       	ldi	r25, 0x00	; 0
    17ae:	df 91       	pop	r29
    17b0:	cf 91       	pop	r28
    17b2:	1f 91       	pop	r17
    17b4:	0f 91       	pop	r16
    17b6:	ff 90       	pop	r15
    17b8:	ef 90       	pop	r14
    17ba:	df 90       	pop	r13
    17bc:	cf 90       	pop	r12
    17be:	bf 90       	pop	r11
    17c0:	af 90       	pop	r10
    17c2:	9f 90       	pop	r9
    17c4:	8f 90       	pop	r8
    17c6:	7f 90       	pop	r7
    17c8:	6f 90       	pop	r6
    17ca:	08 95       	ret

000017cc <strtod>:
    17cc:	8f 92       	push	r8
    17ce:	9f 92       	push	r9
    17d0:	af 92       	push	r10
    17d2:	bf 92       	push	r11
    17d4:	cf 92       	push	r12
    17d6:	df 92       	push	r13
    17d8:	ef 92       	push	r14
    17da:	ff 92       	push	r15
    17dc:	0f 93       	push	r16
    17de:	1f 93       	push	r17
    17e0:	cf 93       	push	r28
    17e2:	df 93       	push	r29
    17e4:	ec 01       	movw	r28, r24
    17e6:	6b 01       	movw	r12, r22
    17e8:	61 15       	cp	r22, r1
    17ea:	71 05       	cpc	r23, r1
    17ec:	19 f0       	breq	.+6      	; 0x17f4 <strtod+0x28>
    17ee:	fb 01       	movw	r30, r22
    17f0:	91 83       	std	Z+1, r25	; 0x01
    17f2:	80 83       	st	Z, r24
    17f4:	7e 01       	movw	r14, r28
    17f6:	ff ef       	ldi	r31, 0xFF	; 255
    17f8:	ef 1a       	sub	r14, r31
    17fa:	ff 0a       	sbc	r15, r31
    17fc:	08 81       	ld	r16, Y
    17fe:	80 2f       	mov	r24, r16
    1800:	90 e0       	ldi	r25, 0x00	; 0
    1802:	37 d1       	rcall	.+622    	; 0x1a72 <isspace>
    1804:	89 2b       	or	r24, r25
    1806:	11 f0       	breq	.+4      	; 0x180c <strtod+0x40>
    1808:	e7 01       	movw	r28, r14
    180a:	f4 cf       	rjmp	.-24     	; 0x17f4 <strtod+0x28>
    180c:	0d 32       	cpi	r16, 0x2D	; 45
    180e:	39 f4       	brne	.+14     	; 0x181e <strtod+0x52>
    1810:	7e 01       	movw	r14, r28
    1812:	82 e0       	ldi	r24, 0x02	; 2
    1814:	e8 0e       	add	r14, r24
    1816:	f1 1c       	adc	r15, r1
    1818:	09 81       	ldd	r16, Y+1	; 0x01
    181a:	11 e0       	ldi	r17, 0x01	; 1
    181c:	08 c0       	rjmp	.+16     	; 0x182e <strtod+0x62>
    181e:	0b 32       	cpi	r16, 0x2B	; 43
    1820:	29 f4       	brne	.+10     	; 0x182c <strtod+0x60>
    1822:	7e 01       	movw	r14, r28
    1824:	92 e0       	ldi	r25, 0x02	; 2
    1826:	e9 0e       	add	r14, r25
    1828:	f1 1c       	adc	r15, r1
    182a:	09 81       	ldd	r16, Y+1	; 0x01
    182c:	10 e0       	ldi	r17, 0x00	; 0
    182e:	e7 01       	movw	r28, r14
    1830:	21 97       	sbiw	r28, 0x01	; 1
    1832:	43 e0       	ldi	r20, 0x03	; 3
    1834:	50 e0       	ldi	r21, 0x00	; 0
    1836:	60 e1       	ldi	r22, 0x10	; 16
    1838:	71 e0       	ldi	r23, 0x01	; 1
    183a:	ce 01       	movw	r24, r28
    183c:	22 d1       	rcall	.+580    	; 0x1a82 <strncasecmp_P>
    183e:	89 2b       	or	r24, r25
    1840:	b9 f4       	brne	.+46     	; 0x1870 <strtod+0xa4>
    1842:	23 96       	adiw	r28, 0x03	; 3
    1844:	45 e0       	ldi	r20, 0x05	; 5
    1846:	50 e0       	ldi	r21, 0x00	; 0
    1848:	6b e0       	ldi	r22, 0x0B	; 11
    184a:	71 e0       	ldi	r23, 0x01	; 1
    184c:	ce 01       	movw	r24, r28
    184e:	19 d1       	rcall	.+562    	; 0x1a82 <strncasecmp_P>
    1850:	89 2b       	or	r24, r25
    1852:	09 f4       	brne	.+2      	; 0x1856 <strtod+0x8a>
    1854:	25 96       	adiw	r28, 0x05	; 5
    1856:	c1 14       	cp	r12, r1
    1858:	d1 04       	cpc	r13, r1
    185a:	19 f0       	breq	.+6      	; 0x1862 <strtod+0x96>
    185c:	f6 01       	movw	r30, r12
    185e:	d1 83       	std	Z+1, r29	; 0x01
    1860:	c0 83       	st	Z, r28
    1862:	11 11       	cpse	r17, r1
    1864:	f0 c0       	rjmp	.+480    	; 0x1a46 <strtod+0x27a>
    1866:	60 e0       	ldi	r22, 0x00	; 0
    1868:	70 e0       	ldi	r23, 0x00	; 0
    186a:	80 e8       	ldi	r24, 0x80	; 128
    186c:	9f e7       	ldi	r25, 0x7F	; 127
    186e:	f4 c0       	rjmp	.+488    	; 0x1a58 <strtod+0x28c>
    1870:	43 e0       	ldi	r20, 0x03	; 3
    1872:	50 e0       	ldi	r21, 0x00	; 0
    1874:	68 e0       	ldi	r22, 0x08	; 8
    1876:	71 e0       	ldi	r23, 0x01	; 1
    1878:	ce 01       	movw	r24, r28
    187a:	03 d1       	rcall	.+518    	; 0x1a82 <strncasecmp_P>
    187c:	89 2b       	or	r24, r25
    187e:	59 f4       	brne	.+22     	; 0x1896 <strtod+0xca>
    1880:	c1 14       	cp	r12, r1
    1882:	d1 04       	cpc	r13, r1
    1884:	09 f4       	brne	.+2      	; 0x1888 <strtod+0xbc>
    1886:	e4 c0       	rjmp	.+456    	; 0x1a50 <strtod+0x284>
    1888:	f2 e0       	ldi	r31, 0x02	; 2
    188a:	ef 0e       	add	r14, r31
    188c:	f1 1c       	adc	r15, r1
    188e:	f6 01       	movw	r30, r12
    1890:	f1 82       	std	Z+1, r15	; 0x01
    1892:	e0 82       	st	Z, r14
    1894:	dd c0       	rjmp	.+442    	; 0x1a50 <strtod+0x284>
    1896:	20 e0       	ldi	r18, 0x00	; 0
    1898:	30 e0       	ldi	r19, 0x00	; 0
    189a:	a9 01       	movw	r20, r18
    189c:	c0 e0       	ldi	r28, 0x00	; 0
    189e:	d0 e0       	ldi	r29, 0x00	; 0
    18a0:	f7 01       	movw	r30, r14
    18a2:	60 ed       	ldi	r22, 0xD0	; 208
    18a4:	a6 2e       	mov	r10, r22
    18a6:	a0 0e       	add	r10, r16
    18a8:	89 e0       	ldi	r24, 0x09	; 9
    18aa:	8a 15       	cp	r24, r10
    18ac:	28 f1       	brcs	.+74     	; 0x18f8 <strtod+0x12c>
    18ae:	91 2f       	mov	r25, r17
    18b0:	92 60       	ori	r25, 0x02	; 2
    18b2:	b9 2e       	mov	r11, r25
    18b4:	81 2f       	mov	r24, r17
    18b6:	88 70       	andi	r24, 0x08	; 8
    18b8:	12 ff       	sbrs	r17, 2
    18ba:	04 c0       	rjmp	.+8      	; 0x18c4 <strtod+0xf8>
    18bc:	81 11       	cpse	r24, r1
    18be:	23 c0       	rjmp	.+70     	; 0x1906 <strtod+0x13a>
    18c0:	21 96       	adiw	r28, 0x01	; 1
    18c2:	21 c0       	rjmp	.+66     	; 0x1906 <strtod+0x13a>
    18c4:	81 11       	cpse	r24, r1
    18c6:	21 97       	sbiw	r28, 0x01	; 1
    18c8:	a5 e0       	ldi	r26, 0x05	; 5
    18ca:	b0 e0       	ldi	r27, 0x00	; 0
    18cc:	65 dd       	rcall	.-1334   	; 0x1398 <__muluhisi3>
    18ce:	dc 01       	movw	r26, r24
    18d0:	cb 01       	movw	r24, r22
    18d2:	88 0f       	add	r24, r24
    18d4:	99 1f       	adc	r25, r25
    18d6:	aa 1f       	adc	r26, r26
    18d8:	bb 1f       	adc	r27, r27
    18da:	9c 01       	movw	r18, r24
    18dc:	ad 01       	movw	r20, r26
    18de:	2a 0d       	add	r18, r10
    18e0:	31 1d       	adc	r19, r1
    18e2:	41 1d       	adc	r20, r1
    18e4:	51 1d       	adc	r21, r1
    18e6:	28 39       	cpi	r18, 0x98	; 152
    18e8:	89 e9       	ldi	r24, 0x99	; 153
    18ea:	38 07       	cpc	r19, r24
    18ec:	48 07       	cpc	r20, r24
    18ee:	89 e1       	ldi	r24, 0x19	; 25
    18f0:	58 07       	cpc	r21, r24
    18f2:	48 f0       	brcs	.+18     	; 0x1906 <strtod+0x13a>
    18f4:	16 60       	ori	r17, 0x06	; 6
    18f6:	06 c0       	rjmp	.+12     	; 0x1904 <strtod+0x138>
    18f8:	9e ef       	ldi	r25, 0xFE	; 254
    18fa:	a9 12       	cpse	r10, r25
    18fc:	0a c0       	rjmp	.+20     	; 0x1912 <strtod+0x146>
    18fe:	13 fd       	sbrc	r17, 3
    1900:	40 c0       	rjmp	.+128    	; 0x1982 <strtod+0x1b6>
    1902:	18 60       	ori	r17, 0x08	; 8
    1904:	b1 2e       	mov	r11, r17
    1906:	8f ef       	ldi	r24, 0xFF	; 255
    1908:	e8 1a       	sub	r14, r24
    190a:	f8 0a       	sbc	r15, r24
    190c:	00 81       	ld	r16, Z
    190e:	1b 2d       	mov	r17, r11
    1910:	c7 cf       	rjmp	.-114    	; 0x18a0 <strtod+0xd4>
    1912:	80 2f       	mov	r24, r16
    1914:	8f 7d       	andi	r24, 0xDF	; 223
    1916:	85 34       	cpi	r24, 0x45	; 69
    1918:	a1 f5       	brne	.+104    	; 0x1982 <strtod+0x1b6>
    191a:	80 81       	ld	r24, Z
    191c:	8d 32       	cpi	r24, 0x2D	; 45
    191e:	11 f4       	brne	.+4      	; 0x1924 <strtod+0x158>
    1920:	10 61       	ori	r17, 0x10	; 16
    1922:	06 c0       	rjmp	.+12     	; 0x1930 <strtod+0x164>
    1924:	8b 32       	cpi	r24, 0x2B	; 43
    1926:	21 f0       	breq	.+8      	; 0x1930 <strtod+0x164>
    1928:	31 96       	adiw	r30, 0x01	; 1
    192a:	61 e0       	ldi	r22, 0x01	; 1
    192c:	70 e0       	ldi	r23, 0x00	; 0
    192e:	04 c0       	rjmp	.+8      	; 0x1938 <strtod+0x16c>
    1930:	81 81       	ldd	r24, Z+1	; 0x01
    1932:	32 96       	adiw	r30, 0x02	; 2
    1934:	62 e0       	ldi	r22, 0x02	; 2
    1936:	70 e0       	ldi	r23, 0x00	; 0
    1938:	80 53       	subi	r24, 0x30	; 48
    193a:	8a 30       	cpi	r24, 0x0A	; 10
    193c:	18 f0       	brcs	.+6      	; 0x1944 <strtod+0x178>
    193e:	e6 1b       	sub	r30, r22
    1940:	f7 0b       	sbc	r31, r23
    1942:	1f c0       	rjmp	.+62     	; 0x1982 <strtod+0x1b6>
    1944:	60 e0       	ldi	r22, 0x00	; 0
    1946:	70 e0       	ldi	r23, 0x00	; 0
    1948:	60 38       	cpi	r22, 0x80	; 128
    194a:	9c e0       	ldi	r25, 0x0C	; 12
    194c:	79 07       	cpc	r23, r25
    194e:	5c f4       	brge	.+22     	; 0x1966 <strtod+0x19a>
    1950:	db 01       	movw	r26, r22
    1952:	aa 0f       	add	r26, r26
    1954:	bb 1f       	adc	r27, r27
    1956:	aa 0f       	add	r26, r26
    1958:	bb 1f       	adc	r27, r27
    195a:	6a 0f       	add	r22, r26
    195c:	7b 1f       	adc	r23, r27
    195e:	66 0f       	add	r22, r22
    1960:	77 1f       	adc	r23, r23
    1962:	68 0f       	add	r22, r24
    1964:	71 1d       	adc	r23, r1
    1966:	31 96       	adiw	r30, 0x01	; 1
    1968:	df 01       	movw	r26, r30
    196a:	11 97       	sbiw	r26, 0x01	; 1
    196c:	8c 91       	ld	r24, X
    196e:	80 53       	subi	r24, 0x30	; 48
    1970:	8a 30       	cpi	r24, 0x0A	; 10
    1972:	50 f3       	brcs	.-44     	; 0x1948 <strtod+0x17c>
    1974:	14 ff       	sbrs	r17, 4
    1976:	03 c0       	rjmp	.+6      	; 0x197e <strtod+0x1b2>
    1978:	71 95       	neg	r23
    197a:	61 95       	neg	r22
    197c:	71 09       	sbc	r23, r1
    197e:	c6 0f       	add	r28, r22
    1980:	d7 1f       	adc	r29, r23
    1982:	11 ff       	sbrs	r17, 1
    1984:	08 c0       	rjmp	.+16     	; 0x1996 <strtod+0x1ca>
    1986:	c1 14       	cp	r12, r1
    1988:	d1 04       	cpc	r13, r1
    198a:	29 f0       	breq	.+10     	; 0x1996 <strtod+0x1ca>
    198c:	cf 01       	movw	r24, r30
    198e:	01 97       	sbiw	r24, 0x01	; 1
    1990:	f6 01       	movw	r30, r12
    1992:	91 83       	std	Z+1, r25	; 0x01
    1994:	80 83       	st	Z, r24
    1996:	ca 01       	movw	r24, r20
    1998:	b9 01       	movw	r22, r18
    199a:	e8 db       	rcall	.-2096   	; 0x116c <__floatunsisf>
    199c:	21 2f       	mov	r18, r17
    199e:	23 70       	andi	r18, 0x03	; 3
    19a0:	23 30       	cpi	r18, 0x03	; 3
    19a2:	19 f0       	breq	.+6      	; 0x19aa <strtod+0x1de>
    19a4:	4b 01       	movw	r8, r22
    19a6:	5c 01       	movw	r10, r24
    19a8:	06 c0       	rjmp	.+12     	; 0x19b6 <strtod+0x1ea>
    19aa:	4b 01       	movw	r8, r22
    19ac:	5c 01       	movw	r10, r24
    19ae:	b7 fa       	bst	r11, 7
    19b0:	b0 94       	com	r11
    19b2:	b7 f8       	bld	r11, 7
    19b4:	b0 94       	com	r11
    19b6:	20 e0       	ldi	r18, 0x00	; 0
    19b8:	30 e0       	ldi	r19, 0x00	; 0
    19ba:	a9 01       	movw	r20, r18
    19bc:	c5 01       	movw	r24, r10
    19be:	b4 01       	movw	r22, r8
    19c0:	d1 db       	rcall	.-2142   	; 0x1164 <__cmpsf2>
    19c2:	88 23       	and	r24, r24
    19c4:	09 f4       	brne	.+2      	; 0x19c8 <strtod+0x1fc>
    19c6:	3c c0       	rjmp	.+120    	; 0x1a40 <strtod+0x274>
    19c8:	d7 ff       	sbrs	r29, 7
    19ca:	06 c0       	rjmp	.+12     	; 0x19d8 <strtod+0x20c>
    19cc:	d1 95       	neg	r29
    19ce:	c1 95       	neg	r28
    19d0:	d1 09       	sbc	r29, r1
    19d2:	07 e2       	ldi	r16, 0x27	; 39
    19d4:	11 e0       	ldi	r17, 0x01	; 1
    19d6:	02 c0       	rjmp	.+4      	; 0x19dc <strtod+0x210>
    19d8:	0f e3       	ldi	r16, 0x3F	; 63
    19da:	11 e0       	ldi	r17, 0x01	; 1
    19dc:	68 01       	movw	r12, r16
    19de:	f8 e1       	ldi	r31, 0x18	; 24
    19e0:	cf 1a       	sub	r12, r31
    19e2:	d1 08       	sbc	r13, r1
    19e4:	90 e2       	ldi	r25, 0x20	; 32
    19e6:	e9 2e       	mov	r14, r25
    19e8:	f1 2c       	mov	r15, r1
    19ea:	ce 15       	cp	r28, r14
    19ec:	df 05       	cpc	r29, r15
    19ee:	6c f0       	brlt	.+26     	; 0x1a0a <strtod+0x23e>
    19f0:	f8 01       	movw	r30, r16
    19f2:	25 91       	lpm	r18, Z+
    19f4:	35 91       	lpm	r19, Z+
    19f6:	45 91       	lpm	r20, Z+
    19f8:	54 91       	lpm	r21, Z
    19fa:	c5 01       	movw	r24, r10
    19fc:	b4 01       	movw	r22, r8
    19fe:	3f dc       	rcall	.-1922   	; 0x127e <__mulsf3>
    1a00:	4b 01       	movw	r8, r22
    1a02:	5c 01       	movw	r10, r24
    1a04:	ce 19       	sub	r28, r14
    1a06:	df 09       	sbc	r29, r15
    1a08:	f0 cf       	rjmp	.-32     	; 0x19ea <strtod+0x21e>
    1a0a:	04 50       	subi	r16, 0x04	; 4
    1a0c:	11 09       	sbc	r17, r1
    1a0e:	f5 94       	asr	r15
    1a10:	e7 94       	ror	r14
    1a12:	0c 15       	cp	r16, r12
    1a14:	1d 05       	cpc	r17, r13
    1a16:	49 f7       	brne	.-46     	; 0x19ea <strtod+0x21e>
    1a18:	8a 2d       	mov	r24, r10
    1a1a:	88 0f       	add	r24, r24
    1a1c:	8b 2d       	mov	r24, r11
    1a1e:	88 1f       	adc	r24, r24
    1a20:	8f 3f       	cpi	r24, 0xFF	; 255
    1a22:	41 f0       	breq	.+16     	; 0x1a34 <strtod+0x268>
    1a24:	20 e0       	ldi	r18, 0x00	; 0
    1a26:	30 e0       	ldi	r19, 0x00	; 0
    1a28:	a9 01       	movw	r20, r18
    1a2a:	c5 01       	movw	r24, r10
    1a2c:	b4 01       	movw	r22, r8
    1a2e:	9a db       	rcall	.-2252   	; 0x1164 <__cmpsf2>
    1a30:	81 11       	cpse	r24, r1
    1a32:	06 c0       	rjmp	.+12     	; 0x1a40 <strtod+0x274>
    1a34:	82 e2       	ldi	r24, 0x22	; 34
    1a36:	90 e0       	ldi	r25, 0x00	; 0
    1a38:	90 93 f1 02 	sts	0x02F1, r25	; 0x8002f1 <errno+0x1>
    1a3c:	80 93 f0 02 	sts	0x02F0, r24	; 0x8002f0 <errno>
    1a40:	c5 01       	movw	r24, r10
    1a42:	b4 01       	movw	r22, r8
    1a44:	09 c0       	rjmp	.+18     	; 0x1a58 <strtod+0x28c>
    1a46:	60 e0       	ldi	r22, 0x00	; 0
    1a48:	70 e0       	ldi	r23, 0x00	; 0
    1a4a:	80 e8       	ldi	r24, 0x80	; 128
    1a4c:	9f ef       	ldi	r25, 0xFF	; 255
    1a4e:	04 c0       	rjmp	.+8      	; 0x1a58 <strtod+0x28c>
    1a50:	60 e0       	ldi	r22, 0x00	; 0
    1a52:	70 e0       	ldi	r23, 0x00	; 0
    1a54:	80 ec       	ldi	r24, 0xC0	; 192
    1a56:	9f e7       	ldi	r25, 0x7F	; 127
    1a58:	df 91       	pop	r29
    1a5a:	cf 91       	pop	r28
    1a5c:	1f 91       	pop	r17
    1a5e:	0f 91       	pop	r16
    1a60:	ff 90       	pop	r15
    1a62:	ef 90       	pop	r14
    1a64:	df 90       	pop	r13
    1a66:	cf 90       	pop	r12
    1a68:	bf 90       	pop	r11
    1a6a:	af 90       	pop	r10
    1a6c:	9f 90       	pop	r9
    1a6e:	8f 90       	pop	r8
    1a70:	08 95       	ret

00001a72 <isspace>:
    1a72:	91 11       	cpse	r25, r1
    1a74:	47 c0       	rjmp	.+142    	; 0x1b04 <__ctype_isfalse>
    1a76:	80 32       	cpi	r24, 0x20	; 32
    1a78:	19 f0       	breq	.+6      	; 0x1a80 <isspace+0xe>
    1a7a:	89 50       	subi	r24, 0x09	; 9
    1a7c:	85 50       	subi	r24, 0x05	; 5
    1a7e:	d0 f7       	brcc	.-12     	; 0x1a74 <isspace+0x2>
    1a80:	08 95       	ret

00001a82 <strncasecmp_P>:
    1a82:	fb 01       	movw	r30, r22
    1a84:	dc 01       	movw	r26, r24
    1a86:	41 50       	subi	r20, 0x01	; 1
    1a88:	50 40       	sbci	r21, 0x00	; 0
    1a8a:	88 f0       	brcs	.+34     	; 0x1aae <strncasecmp_P+0x2c>
    1a8c:	8d 91       	ld	r24, X+
    1a8e:	81 34       	cpi	r24, 0x41	; 65
    1a90:	1c f0       	brlt	.+6      	; 0x1a98 <strncasecmp_P+0x16>
    1a92:	8b 35       	cpi	r24, 0x5B	; 91
    1a94:	0c f4       	brge	.+2      	; 0x1a98 <strncasecmp_P+0x16>
    1a96:	80 5e       	subi	r24, 0xE0	; 224
    1a98:	65 91       	lpm	r22, Z+
    1a9a:	61 34       	cpi	r22, 0x41	; 65
    1a9c:	1c f0       	brlt	.+6      	; 0x1aa4 <strncasecmp_P+0x22>
    1a9e:	6b 35       	cpi	r22, 0x5B	; 91
    1aa0:	0c f4       	brge	.+2      	; 0x1aa4 <strncasecmp_P+0x22>
    1aa2:	60 5e       	subi	r22, 0xE0	; 224
    1aa4:	86 1b       	sub	r24, r22
    1aa6:	61 11       	cpse	r22, r1
    1aa8:	71 f3       	breq	.-36     	; 0x1a86 <strncasecmp_P+0x4>
    1aaa:	99 0b       	sbc	r25, r25
    1aac:	08 95       	ret
    1aae:	88 1b       	sub	r24, r24
    1ab0:	fc cf       	rjmp	.-8      	; 0x1aaa <strncasecmp_P+0x28>

00001ab2 <memcpy>:
    1ab2:	fb 01       	movw	r30, r22
    1ab4:	dc 01       	movw	r26, r24
    1ab6:	02 c0       	rjmp	.+4      	; 0x1abc <memcpy+0xa>
    1ab8:	01 90       	ld	r0, Z+
    1aba:	0d 92       	st	X+, r0
    1abc:	41 50       	subi	r20, 0x01	; 1
    1abe:	50 40       	sbci	r21, 0x00	; 0
    1ac0:	d8 f7       	brcc	.-10     	; 0x1ab8 <memcpy+0x6>
    1ac2:	08 95       	ret

00001ac4 <strcpy>:
    1ac4:	fb 01       	movw	r30, r22
    1ac6:	dc 01       	movw	r26, r24
    1ac8:	01 90       	ld	r0, Z+
    1aca:	0d 92       	st	X+, r0
    1acc:	00 20       	and	r0, r0
    1ace:	e1 f7       	brne	.-8      	; 0x1ac8 <strcpy+0x4>
    1ad0:	08 95       	ret

00001ad2 <strlwr>:
    1ad2:	dc 01       	movw	r26, r24
    1ad4:	6c 91       	ld	r22, X
    1ad6:	61 54       	subi	r22, 0x41	; 65
    1ad8:	6a 31       	cpi	r22, 0x1A	; 26
    1ada:	08 f0       	brcs	.+2      	; 0x1ade <strlwr+0xc>
    1adc:	60 52       	subi	r22, 0x20	; 32
    1ade:	6f 59       	subi	r22, 0x9F	; 159
    1ae0:	6d 93       	st	X+, r22
    1ae2:	c1 f7       	brne	.-16     	; 0x1ad4 <strlwr+0x2>
    1ae4:	08 95       	ret

00001ae6 <strncpy>:
    1ae6:	fb 01       	movw	r30, r22
    1ae8:	dc 01       	movw	r26, r24
    1aea:	41 50       	subi	r20, 0x01	; 1
    1aec:	50 40       	sbci	r21, 0x00	; 0
    1aee:	48 f0       	brcs	.+18     	; 0x1b02 <strncpy+0x1c>
    1af0:	01 90       	ld	r0, Z+
    1af2:	0d 92       	st	X+, r0
    1af4:	00 20       	and	r0, r0
    1af6:	c9 f7       	brne	.-14     	; 0x1aea <strncpy+0x4>
    1af8:	01 c0       	rjmp	.+2      	; 0x1afc <strncpy+0x16>
    1afa:	1d 92       	st	X+, r1
    1afc:	41 50       	subi	r20, 0x01	; 1
    1afe:	50 40       	sbci	r21, 0x00	; 0
    1b00:	e0 f7       	brcc	.-8      	; 0x1afa <strncpy+0x14>
    1b02:	08 95       	ret

00001b04 <__ctype_isfalse>:
    1b04:	99 27       	eor	r25, r25
    1b06:	88 27       	eor	r24, r24

00001b08 <__ctype_istrue>:
    1b08:	08 95       	ret

00001b0a <_exit>:
    1b0a:	f8 94       	cli

00001b0c <__stop_program>:
    1b0c:	ff cf       	rjmp	.-2      	; 0x1b0c <__stop_program>
