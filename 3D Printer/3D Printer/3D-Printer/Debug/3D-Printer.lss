
3D-Printer.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000032  00800200  0000211e  000021b2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000211e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000b8  00800232  00800232  000021e4  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000021e4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002240  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000680  00000000  00000000  00002280  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00011a6b  00000000  00000000  00002900  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002dfa  00000000  00000000  0001436b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000037d7  00000000  00000000  00017165  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000163c  00000000  00000000  0001a93c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00002901  00000000  00000000  0001bf78  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000087db  00000000  00000000  0001e879  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000670  00000000  00000000  00027054  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	32 c1       	rjmp	.+612    	; 0x266 <__ctors_end>
       2:	00 00       	nop
       4:	60 c1       	rjmp	.+704    	; 0x2c6 <__bad_interrupt>
       6:	00 00       	nop
       8:	5e c1       	rjmp	.+700    	; 0x2c6 <__bad_interrupt>
       a:	00 00       	nop
       c:	5c c1       	rjmp	.+696    	; 0x2c6 <__bad_interrupt>
       e:	00 00       	nop
      10:	5a c1       	rjmp	.+692    	; 0x2c6 <__bad_interrupt>
      12:	00 00       	nop
      14:	58 c1       	rjmp	.+688    	; 0x2c6 <__bad_interrupt>
      16:	00 00       	nop
      18:	56 c1       	rjmp	.+684    	; 0x2c6 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	54 c1       	rjmp	.+680    	; 0x2c6 <__bad_interrupt>
      1e:	00 00       	nop
      20:	52 c1       	rjmp	.+676    	; 0x2c6 <__bad_interrupt>
      22:	00 00       	nop
      24:	50 c1       	rjmp	.+672    	; 0x2c6 <__bad_interrupt>
      26:	00 00       	nop
      28:	4e c1       	rjmp	.+668    	; 0x2c6 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	4c c1       	rjmp	.+664    	; 0x2c6 <__bad_interrupt>
      2e:	00 00       	nop
      30:	4a c1       	rjmp	.+660    	; 0x2c6 <__bad_interrupt>
      32:	00 00       	nop
      34:	48 c1       	rjmp	.+656    	; 0x2c6 <__bad_interrupt>
      36:	00 00       	nop
      38:	46 c1       	rjmp	.+652    	; 0x2c6 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	44 c1       	rjmp	.+648    	; 0x2c6 <__bad_interrupt>
      3e:	00 00       	nop
      40:	42 c1       	rjmp	.+644    	; 0x2c6 <__bad_interrupt>
      42:	00 00       	nop
      44:	40 c1       	rjmp	.+640    	; 0x2c6 <__bad_interrupt>
      46:	00 00       	nop
      48:	3e c1       	rjmp	.+636    	; 0x2c6 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	3c c1       	rjmp	.+632    	; 0x2c6 <__bad_interrupt>
      4e:	00 00       	nop
      50:	3a c1       	rjmp	.+628    	; 0x2c6 <__bad_interrupt>
      52:	00 00       	nop
      54:	38 c1       	rjmp	.+624    	; 0x2c6 <__bad_interrupt>
      56:	00 00       	nop
      58:	36 c1       	rjmp	.+620    	; 0x2c6 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	0c 94 44 09 	jmp	0x1288	; 0x1288 <__vector_23>
      60:	32 c1       	rjmp	.+612    	; 0x2c6 <__bad_interrupt>
      62:	00 00       	nop
      64:	a4 c6       	rjmp	.+3400   	; 0xdae <__vector_25>
      66:	00 00       	nop
      68:	d8 c6       	rjmp	.+3504   	; 0xe1a <__vector_26>
      6a:	00 00       	nop
      6c:	2c c1       	rjmp	.+600    	; 0x2c6 <__bad_interrupt>
      6e:	00 00       	nop
      70:	2a c1       	rjmp	.+596    	; 0x2c6 <__bad_interrupt>
      72:	00 00       	nop
      74:	28 c1       	rjmp	.+592    	; 0x2c6 <__bad_interrupt>
      76:	00 00       	nop
      78:	26 c1       	rjmp	.+588    	; 0x2c6 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	24 c1       	rjmp	.+584    	; 0x2c6 <__bad_interrupt>
      7e:	00 00       	nop
      80:	22 c1       	rjmp	.+580    	; 0x2c6 <__bad_interrupt>
      82:	00 00       	nop
      84:	20 c1       	rjmp	.+576    	; 0x2c6 <__bad_interrupt>
      86:	00 00       	nop
      88:	1e c1       	rjmp	.+572    	; 0x2c6 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	1c c1       	rjmp	.+568    	; 0x2c6 <__bad_interrupt>
      8e:	00 00       	nop
      90:	1a c1       	rjmp	.+564    	; 0x2c6 <__bad_interrupt>
      92:	00 00       	nop
      94:	18 c1       	rjmp	.+560    	; 0x2c6 <__bad_interrupt>
      96:	00 00       	nop
      98:	16 c1       	rjmp	.+556    	; 0x2c6 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	14 c1       	rjmp	.+552    	; 0x2c6 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	12 c1       	rjmp	.+548    	; 0x2c6 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	10 c1       	rjmp	.+544    	; 0x2c6 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	0e c1       	rjmp	.+540    	; 0x2c6 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	0c c1       	rjmp	.+536    	; 0x2c6 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	0a c1       	rjmp	.+532    	; 0x2c6 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	08 c1       	rjmp	.+528    	; 0x2c6 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	06 c1       	rjmp	.+524    	; 0x2c6 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	04 c1       	rjmp	.+520    	; 0x2c6 <__bad_interrupt>
      be:	00 00       	nop
      c0:	02 c1       	rjmp	.+516    	; 0x2c6 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	00 c1       	rjmp	.+512    	; 0x2c6 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	fe c0       	rjmp	.+508    	; 0x2c6 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	fc c0       	rjmp	.+504    	; 0x2c6 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	fa c0       	rjmp	.+500    	; 0x2c6 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	f8 c0       	rjmp	.+496    	; 0x2c6 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	f6 c0       	rjmp	.+492    	; 0x2c6 <__bad_interrupt>
      da:	00 00       	nop
      dc:	f4 c0       	rjmp	.+488    	; 0x2c6 <__bad_interrupt>
      de:	00 00       	nop
      e0:	f2 c0       	rjmp	.+484    	; 0x2c6 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	21 0a       	sbc	r2, r17
      e6:	24 0a       	sbc	r2, r20
      e8:	13 0a       	sbc	r1, r19
      ea:	17 0a       	sbc	r1, r23
      ec:	1d 0a       	sbc	r1, r29
      ee:	5b 0a       	sbc	r5, r27
      f0:	28 0a       	sbc	r2, r24
      f2:	2c 0a       	sbc	r2, r28
      f4:	32 0a       	sbc	r3, r18
      f6:	36 0a       	sbc	r3, r22
      f8:	3a 0a       	sbc	r3, r26
      fa:	40 0a       	sbc	r4, r16
      fc:	44 0a       	sbc	r4, r20
      fe:	48 0a       	sbc	r4, r24
     100:	5b 0a       	sbc	r5, r27
     102:	4e 0a       	sbc	r4, r30
     104:	52 0a       	sbc	r5, r18
     106:	56 0a       	sbc	r5, r22

00000108 <__trampolines_end>:
     108:	4e 41       	sbci	r20, 0x1E	; 30
     10a:	4e 49       	Address 0x0000010a is out of bounds.
.word	0xffff	; ????

0000010b <pstr_inity>:
     10b:	49 4e 49 54 59                                      INITY

00000110 <pstr_inf>:
     110:	49 4e 46                                            INF

00000113 <pwr_m10>:
     113:	cd cc cc 3d 0a d7 23 3c 17 b7 d1 38 77 cc 2b 32     ...=..#<...8w.+2
     123:	95 95 e6 24 1f b1 4f 0a                             ...$..O.

0000012b <pwr_p10>:
     12b:	00 00 20 41 00 00 c8 42 00 40 1c 46 20 bc be 4c     .. A...B.@.F ..L
     13b:	ca 1b 0e 5a ae c5 9d 74                             ...Z...t

00000143 <digital_pin_to_timer_PGM>:
     143:	00 00 0a 0b 02 09 0c 0d 0e 08 07 03 04 01 00 00     ................
	...
     16f:	12 11 10 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...

00000189 <digital_pin_to_bit_mask_PGM>:
     189:	01 02 10 20 20 08 08 10 20 40 10 20 40 80 02 01     ...  ... @. @...
     199:	02 01 08 04 02 01 01 02 04 08 10 20 40 80 80 40     ........... @..@
     1a9:	20 10 08 04 02 01 80 04 02 01 80 40 20 10 08 04      ..........@ ...
     1b9:	02 01 08 04 02 01 01 02 04 08 10 20 40 80 01 02     ........... @...
     1c9:	04 08 10 20 40 80                                   ... @.

000001cf <digital_pin_to_port_PGM>:
     1cf:	05 05 05 05 07 05 08 08 08 08 02 02 02 02 0a 0a     ................
     1df:	08 08 04 04 04 04 01 01 01 01 01 01 01 01 03 03     ................
     1ef:	03 03 03 03 03 03 04 07 07 07 0c 0c 0c 0c 0c 0c     ................
     1ff:	0c 0c 02 02 02 02 06 06 06 06 06 06 06 06 0b 0b     ................
     20f:	0b 0b 0b 0b 0b 0b                                   ......

00000215 <port_to_input_PGM>:
     215:	00 00 20 00 23 00 26 00 29 00 2c 00 2f 00 32 00     .. .#.&.).,./.2.
     225:	00 01 00 00 03 01 06 01 09 01                       ..........

0000022f <port_to_output_PGM>:
     22f:	00 00 22 00 25 00 28 00 2b 00 2e 00 31 00 34 00     ..".%.(.+...1.4.
     23f:	02 01 00 00 05 01 08 01 0b 01                       ..........

00000249 <port_to_mode_PGM>:
     249:	00 00 21 00 24 00 27 00 2a 00 2d 00 30 00 33 00     ..!.$.'.*.-.0.3.
     259:	01 01 00 00 04 01 07 01 0a 01 00                    ...........

00000264 <__ctors_start>:
     264:	3f 07       	cpc	r19, r31

00000266 <__ctors_end>:
     266:	11 24       	eor	r1, r1
     268:	1f be       	out	0x3f, r1	; 63
     26a:	cf ef       	ldi	r28, 0xFF	; 255
     26c:	d1 e2       	ldi	r29, 0x21	; 33
     26e:	de bf       	out	0x3e, r29	; 62
     270:	cd bf       	out	0x3d, r28	; 61
     272:	00 e0       	ldi	r16, 0x00	; 0
     274:	0c bf       	out	0x3c, r16	; 60

00000276 <__do_copy_data>:
     276:	12 e0       	ldi	r17, 0x02	; 2
     278:	a0 e0       	ldi	r26, 0x00	; 0
     27a:	b2 e0       	ldi	r27, 0x02	; 2
     27c:	ee e1       	ldi	r30, 0x1E	; 30
     27e:	f1 e2       	ldi	r31, 0x21	; 33
     280:	00 e0       	ldi	r16, 0x00	; 0
     282:	0b bf       	out	0x3b, r16	; 59
     284:	02 c0       	rjmp	.+4      	; 0x28a <__do_copy_data+0x14>
     286:	07 90       	elpm	r0, Z+
     288:	0d 92       	st	X+, r0
     28a:	a2 33       	cpi	r26, 0x32	; 50
     28c:	b1 07       	cpc	r27, r17
     28e:	d9 f7       	brne	.-10     	; 0x286 <__do_copy_data+0x10>

00000290 <__do_clear_bss>:
     290:	22 e0       	ldi	r18, 0x02	; 2
     292:	a2 e3       	ldi	r26, 0x32	; 50
     294:	b2 e0       	ldi	r27, 0x02	; 2
     296:	01 c0       	rjmp	.+2      	; 0x29a <.do_clear_bss_start>

00000298 <.do_clear_bss_loop>:
     298:	1d 92       	st	X+, r1

0000029a <.do_clear_bss_start>:
     29a:	aa 3e       	cpi	r26, 0xEA	; 234
     29c:	b2 07       	cpc	r27, r18
     29e:	e1 f7       	brne	.-8      	; 0x298 <.do_clear_bss_loop>

000002a0 <__do_global_ctors>:
     2a0:	11 e0       	ldi	r17, 0x01	; 1
     2a2:	c3 e3       	ldi	r28, 0x33	; 51
     2a4:	d1 e0       	ldi	r29, 0x01	; 1
     2a6:	00 e0       	ldi	r16, 0x00	; 0
     2a8:	06 c0       	rjmp	.+12     	; 0x2b6 <__do_global_ctors+0x16>
     2aa:	21 97       	sbiw	r28, 0x01	; 1
     2ac:	01 09       	sbc	r16, r1
     2ae:	80 2f       	mov	r24, r16
     2b0:	fe 01       	movw	r30, r28
     2b2:	0e 94 cb 0c 	call	0x1996	; 0x1996 <__tablejump2__>
     2b6:	c2 33       	cpi	r28, 0x32	; 50
     2b8:	d1 07       	cpc	r29, r17
     2ba:	80 e0       	ldi	r24, 0x00	; 0
     2bc:	08 07       	cpc	r16, r24
     2be:	a9 f7       	brne	.-22     	; 0x2aa <__do_global_ctors+0xa>
     2c0:	0c d6       	rcall	.+3096   	; 0xeda <main>
     2c2:	0c 94 8d 10 	jmp	0x211a	; 0x211a <_exit>

000002c6 <__bad_interrupt>:
     2c6:	9c ce       	rjmp	.-712    	; 0x0 <__vectors>

000002c8 <setup>:

Steps steps = {0,0,0};

///CREDIT: Adam Baniuszewicz, Bartosz Flis, Jakub Sybidlo
void setup()
{
     2c8:	03 d1       	rcall	.+518    	; 0x4d0 <_Z11StepperInitv>
     2ca:	26 e0       	ldi	r18, 0x06	; 6
     2cc:	40 e0       	ldi	r20, 0x00	; 0
     2ce:	51 ee       	ldi	r21, 0xE1	; 225
     2d0:	60 e0       	ldi	r22, 0x00	; 0
     2d2:	70 e0       	ldi	r23, 0x00	; 0
     2d4:	8e e3       	ldi	r24, 0x3E	; 62
     2d6:	92 e0       	ldi	r25, 0x02	; 2
     2d8:	07 d5       	rcall	.+2574   	; 0xce8 <_ZN14HardwareSerial5beginEmh>
     2da:	66 e0       	ldi	r22, 0x06	; 6
     2dc:	72 e0       	ldi	r23, 0x02	; 2
     2de:	8e e3       	ldi	r24, 0x3E	; 62
     2e0:	92 e0       	ldi	r25, 0x02	; 2
     2e2:	4e c6       	rjmp	.+3228   	; 0xf80 <_ZN5Print7printlnEPKc>

000002e4 <loop>:
     2e4:	cf 93       	push	r28
     2e6:	df 93       	push	r29
     2e8:	cd b7       	in	r28, 0x3d	; 61
     2ea:	de b7       	in	r29, 0x3e	; 62
     2ec:	62 97       	sbiw	r28, 0x12	; 18
     2ee:	0f b6       	in	r0, 0x3f	; 63
     2f0:	f8 94       	cli
     2f2:	de bf       	out	0x3e, r29	; 62
     2f4:	0f be       	out	0x3f, r0	; 63
     2f6:	cd bf       	out	0x3d, r28	; 61
     2f8:	8e e3       	ldi	r24, 0x3E	; 62
     2fa:	92 e0       	ldi	r25, 0x02	; 2
     2fc:	f4 d3       	rcall	.+2024   	; 0xae6 <_ZN14HardwareSerial9availableEv>
     2fe:	89 2b       	or	r24, r25
     300:	09 f4       	brne	.+2      	; 0x304 <loop+0x20>
     302:	43 c0       	rjmp	.+134    	; 0x38a <loop+0xa6>
     304:	6e e3       	ldi	r22, 0x3E	; 62
     306:	72 e0       	ldi	r23, 0x02	; 2
     308:	ce 01       	movw	r24, r28
     30a:	01 96       	adiw	r24, 0x01	; 1
     30c:	a6 d7       	rcall	.+3916   	; 0x125a <_ZN6Stream10readStringEv>
     30e:	be 01       	movw	r22, r28
     310:	6f 5f       	subi	r22, 0xFF	; 255
     312:	7f 4f       	sbci	r23, 0xFF	; 255
     314:	ce 01       	movw	r24, r28
     316:	07 96       	adiw	r24, 0x07	; 7
     318:	78 d0       	rcall	.+240    	; 0x40a <_Z11DecodeFrame6String>
     31a:	8c e0       	ldi	r24, 0x0C	; 12
     31c:	fe 01       	movw	r30, r28
     31e:	37 96       	adiw	r30, 0x07	; 7
     320:	a2 e3       	ldi	r26, 0x32	; 50
     322:	b2 e0       	ldi	r27, 0x02	; 2
     324:	01 90       	ld	r0, Z+
     326:	0d 92       	st	X+, r0
     328:	8a 95       	dec	r24
     32a:	e1 f7       	brne	.-8      	; 0x324 <loop+0x40>
     32c:	ce 01       	movw	r24, r28
     32e:	01 96       	adiw	r24, 0x01	; 1
     330:	0e 94 ee 0a 	call	0x15dc	; 0x15dc <_ZN6StringD1Ev>
     334:	40 91 32 02 	lds	r20, 0x0232	; 0x800232 <__data_end>
     338:	50 91 33 02 	lds	r21, 0x0233	; 0x800233 <__data_end+0x1>
     33c:	60 91 34 02 	lds	r22, 0x0234	; 0x800234 <__data_end+0x2>
     340:	70 91 35 02 	lds	r23, 0x0235	; 0x800235 <__data_end+0x3>
     344:	22 e0       	ldi	r18, 0x02	; 2
     346:	30 e0       	ldi	r19, 0x00	; 0
     348:	8e e3       	ldi	r24, 0x3E	; 62
     34a:	92 e0       	ldi	r25, 0x02	; 2
     34c:	48 d7       	rcall	.+3728   	; 0x11de <_ZN5Print7printlnEdi>
     34e:	40 91 36 02 	lds	r20, 0x0236	; 0x800236 <__data_end+0x4>
     352:	50 91 37 02 	lds	r21, 0x0237	; 0x800237 <__data_end+0x5>
     356:	60 91 38 02 	lds	r22, 0x0238	; 0x800238 <__data_end+0x6>
     35a:	70 91 39 02 	lds	r23, 0x0239	; 0x800239 <__data_end+0x7>
     35e:	22 e0       	ldi	r18, 0x02	; 2
     360:	30 e0       	ldi	r19, 0x00	; 0
     362:	8e e3       	ldi	r24, 0x3E	; 62
     364:	92 e0       	ldi	r25, 0x02	; 2
     366:	3b d7       	rcall	.+3702   	; 0x11de <_ZN5Print7printlnEdi>
     368:	40 91 3a 02 	lds	r20, 0x023A	; 0x80023a <__data_end+0x8>
     36c:	50 91 3b 02 	lds	r21, 0x023B	; 0x80023b <__data_end+0x9>
     370:	60 91 3c 02 	lds	r22, 0x023C	; 0x80023c <__data_end+0xa>
     374:	70 91 3d 02 	lds	r23, 0x023D	; 0x80023d <__data_end+0xb>
     378:	22 e0       	ldi	r18, 0x02	; 2
     37a:	30 e0       	ldi	r19, 0x00	; 0
     37c:	8e e3       	ldi	r24, 0x3E	; 62
     37e:	92 e0       	ldi	r25, 0x02	; 2
     380:	2e d7       	rcall	.+3676   	; 0x11de <_ZN5Print7printlnEdi>
     382:	82 e3       	ldi	r24, 0x32	; 50
     384:	92 e0       	ldi	r25, 0x02	; 2
     386:	08 d1       	rcall	.+528    	; 0x598 <_Z17ChangeSteppersDirP5Steps>
     388:	b7 cf       	rjmp	.-146    	; 0x2f8 <loop+0x14>
     38a:	82 e3       	ldi	r24, 0x32	; 50
     38c:	92 e0       	ldi	r25, 0x02	; 2
     38e:	83 d1       	rcall	.+774    	; 0x696 <_Z11MovementXYZP5Steps>
     390:	62 96       	adiw	r28, 0x12	; 18
     392:	0f b6       	in	r0, 0x3f	; 63
     394:	f8 94       	cli
     396:	de bf       	out	0x3e, r29	; 62
     398:	0f be       	out	0x3f, r0	; 63
     39a:	cd bf       	out	0x3d, r28	; 61
     39c:	df 91       	pop	r29
     39e:	cf 91       	pop	r28
     3a0:	08 95       	ret

000003a2 <_Z18LimitSwitchPinInitv>:
#include "..\Header Files\LimitSwitch.h"

///CREDIT: Adam Baniuszewicz, Bartosz Flis, Jakub Sybidlo
void LimitSwitchPinInit()
{
	pinMode(pinLimitSwitchX, INPUT);
     3a2:	60 e0       	ldi	r22, 0x00	; 0
     3a4:	82 e0       	ldi	r24, 0x02	; 2
     3a6:	0e 94 5c 0a 	call	0x14b8	; 0x14b8 <pinMode>
	pinMode(pinLimitSwitchY, INPUT);
     3aa:	60 e0       	ldi	r22, 0x00	; 0
     3ac:	8f e0       	ldi	r24, 0x0F	; 15
     3ae:	0e 94 5c 0a 	call	0x14b8	; 0x14b8 <pinMode>
	pinMode(pinLimitSwitchZ, INPUT);
     3b2:	60 e0       	ldi	r22, 0x00	; 0
     3b4:	83 e1       	ldi	r24, 0x13	; 19
     3b6:	0e 94 5c 0a 	call	0x14b8	; 0x14b8 <pinMode>
	digitalWrite(pinLimitSwitchX, HIGH);
     3ba:	61 e0       	ldi	r22, 0x01	; 1
     3bc:	82 e0       	ldi	r24, 0x02	; 2
     3be:	0e 94 98 0a 	call	0x1530	; 0x1530 <digitalWrite>
	digitalWrite(pinLimitSwitchY, HIGH);
     3c2:	61 e0       	ldi	r22, 0x01	; 1
     3c4:	8f e0       	ldi	r24, 0x0F	; 15
     3c6:	0e 94 98 0a 	call	0x1530	; 0x1530 <digitalWrite>
	digitalWrite(pinLimitSwitchZ, HIGH);
     3ca:	61 e0       	ldi	r22, 0x01	; 1
     3cc:	83 e1       	ldi	r24, 0x13	; 19
     3ce:	0c 94 98 0a 	jmp	0x1530	; 0x1530 <digitalWrite>

000003d2 <_Z12RemoveSpacesPc>:
#include "stdlib.h"


///CREDIT: Adam Baniuszewicz, Bartosz Flis, Jakub Sybidlo
void RemoveSpaces(char* source)
{
     3d2:	fc 01       	movw	r30, r24
	char* i = source;
	char* j = source;

	while(*j != '\0')
     3d4:	21 91       	ld	r18, Z+
     3d6:	22 23       	and	r18, r18
     3d8:	31 f0       	breq	.+12     	; 0x3e6 <_Z12RemoveSpacesPc+0x14>
	{
		*i = *j++;
     3da:	dc 01       	movw	r26, r24
     3dc:	2c 93       	st	X, r18
		if(*i != ' ')
     3de:	20 32       	cpi	r18, 0x20	; 32
     3e0:	c9 f3       	breq	.-14     	; 0x3d4 <_Z12RemoveSpacesPc+0x2>
		i++;
     3e2:	01 96       	adiw	r24, 0x01	; 1
     3e4:	f7 cf       	rjmp	.-18     	; 0x3d4 <_Z12RemoveSpacesPc+0x2>
	}
	*i = 0;
     3e6:	fc 01       	movw	r30, r24
     3e8:	10 82       	st	Z, r1
     3ea:	08 95       	ret

000003ec <_Z23GetNumberAfterCharacterPcc>:
}

///CREDIT: Adam Baniuszewicz, Bartosz Flis, Jakub Sybidlo
double GetNumberAfterCharacter(char* source, char character)
{
	while (*source != '\0')
     3ec:	fc 01       	movw	r30, r24
     3ee:	21 91       	ld	r18, Z+
     3f0:	cf 01       	movw	r24, r30
     3f2:	22 23       	and	r18, r18
     3f4:	31 f0       	breq	.+12     	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
	{
		if (*source++ == character)
     3f6:	26 13       	cpse	r18, r22
     3f8:	f9 cf       	rjmp	.-14     	; 0x3ec <_Z23GetNumberAfterCharacterPcc>
		{
			//extract all digits after desired character
			return strtod(source, NULL);
     3fa:	60 e0       	ldi	r22, 0x00	; 0
     3fc:	70 e0       	ldi	r23, 0x00	; 0
     3fe:	0c 94 ed 0e 	jmp	0x1dda	; 0x1dda <strtod>
		}
	}
	return 0; //returning '0' won't cause any movement
}
     402:	60 e0       	ldi	r22, 0x00	; 0
     404:	70 e0       	ldi	r23, 0x00	; 0
     406:	cb 01       	movw	r24, r22
     408:	08 95       	ret

0000040a <_Z11DecodeFrame6String>:

///CREDIT: Adam Baniuszewicz, Bartosz Flis, Jakub Sybidlo
Steps DecodeFrame(String frame)
{
     40a:	cf 92       	push	r12
     40c:	df 92       	push	r13
     40e:	ef 92       	push	r14
     410:	ff 92       	push	r15
     412:	0f 93       	push	r16
     414:	1f 93       	push	r17
     416:	cf 93       	push	r28
     418:	df 93       	push	r29
     41a:	cd b7       	in	r28, 0x3d	; 61
     41c:	de b7       	in	r29, 0x3e	; 62
     41e:	7c 01       	movw	r14, r24
     420:	cb 01       	movw	r24, r22
	steps.x = (int)GetNumberAfterCharacter(readDataChar, 'x');
	steps.y = (int)GetNumberAfterCharacter(readDataChar, 'y');
	steps.z = (int)GetNumberAfterCharacter(readDataChar, 'z');

	return steps;
     422:	cd b6       	in	r12, 0x3d	; 61
     424:	de b6       	in	r13, 0x3e	; 62
Steps DecodeFrame(String frame)
{
	Steps steps;

	//convert string to char
	char readDataChar[frame.length() + 1];
     426:	fb 01       	movw	r30, r22
     428:	44 81       	ldd	r20, Z+4	; 0x04
     42a:	55 81       	ldd	r21, Z+5	; 0x05
     42c:	4f 5f       	subi	r20, 0xFF	; 255
     42e:	5f 4f       	sbci	r21, 0xFF	; 255
     430:	2d b7       	in	r18, 0x3d	; 61
     432:	3e b7       	in	r19, 0x3e	; 62
     434:	24 1b       	sub	r18, r20
     436:	35 0b       	sbc	r19, r21
     438:	0f b6       	in	r0, 0x3f	; 63
     43a:	f8 94       	cli
     43c:	3e bf       	out	0x3e, r19	; 62
     43e:	0f be       	out	0x3f, r0	; 63
     440:	2d bf       	out	0x3d, r18	; 61
     442:	0d b7       	in	r16, 0x3d	; 61
     444:	1e b7       	in	r17, 0x3e	; 62
     446:	0f 5f       	subi	r16, 0xFF	; 255
     448:	1f 4f       	sbci	r17, 0xFF	; 255
	void setCharAt(unsigned int index, char c);
	char operator [] (unsigned int index) const;
	char& operator [] (unsigned int index);
	void getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index=0) const;
	void toCharArray(char *buf, unsigned int bufsize, unsigned int index=0) const
		{ getBytes((unsigned char *)buf, bufsize, index); }
     44a:	20 e0       	ldi	r18, 0x00	; 0
     44c:	30 e0       	ldi	r19, 0x00	; 0
     44e:	b8 01       	movw	r22, r16
     450:	0e 94 a8 0b 	call	0x1750	; 0x1750 <_ZNK6String8getBytesEPhjj>
	frame.toCharArray(readDataChar, frame.length() + 1);
			
	RemoveSpaces(readDataChar);
     454:	c8 01       	movw	r24, r16
     456:	bd df       	rcall	.-134    	; 0x3d2 <_Z12RemoveSpacesPc>
	strlwr(readDataChar); //convert data to lowercase
     458:	c8 01       	movw	r24, r16
     45a:	0e 94 71 10 	call	0x20e2	; 0x20e2 <strlwr>

	steps.x = (int)GetNumberAfterCharacter(readDataChar, 'x');
     45e:	68 e7       	ldi	r22, 0x78	; 120
     460:	c8 01       	movw	r24, r16
     462:	c4 df       	rcall	.-120    	; 0x3ec <_Z23GetNumberAfterCharacterPcc>
     464:	59 d2       	rcall	.+1202   	; 0x918 <__fixsfsi>
     466:	07 2e       	mov	r0, r23
     468:	00 0c       	add	r0, r0
     46a:	88 0b       	sbc	r24, r24
     46c:	99 0b       	sbc	r25, r25
     46e:	87 d2       	rcall	.+1294   	; 0x97e <__floatsisf>
     470:	f7 01       	movw	r30, r14
     472:	60 83       	st	Z, r22
     474:	71 83       	std	Z+1, r23	; 0x01
	steps.y = (int)GetNumberAfterCharacter(readDataChar, 'y');
     476:	82 83       	std	Z+2, r24	; 0x02
     478:	93 83       	std	Z+3, r25	; 0x03
     47a:	69 e7       	ldi	r22, 0x79	; 121
     47c:	c8 01       	movw	r24, r16
     47e:	b6 df       	rcall	.-148    	; 0x3ec <_Z23GetNumberAfterCharacterPcc>
     480:	4b d2       	rcall	.+1174   	; 0x918 <__fixsfsi>
     482:	07 2e       	mov	r0, r23
     484:	00 0c       	add	r0, r0
     486:	88 0b       	sbc	r24, r24
     488:	99 0b       	sbc	r25, r25
     48a:	79 d2       	rcall	.+1266   	; 0x97e <__floatsisf>
     48c:	f7 01       	movw	r30, r14
     48e:	64 83       	std	Z+4, r22	; 0x04
     490:	75 83       	std	Z+5, r23	; 0x05
	steps.z = (int)GetNumberAfterCharacter(readDataChar, 'z');
     492:	86 83       	std	Z+6, r24	; 0x06
     494:	97 83       	std	Z+7, r25	; 0x07
     496:	6a e7       	ldi	r22, 0x7A	; 122
     498:	c8 01       	movw	r24, r16
     49a:	a8 df       	rcall	.-176    	; 0x3ec <_Z23GetNumberAfterCharacterPcc>
     49c:	3d d2       	rcall	.+1146   	; 0x918 <__fixsfsi>
     49e:	07 2e       	mov	r0, r23
     4a0:	00 0c       	add	r0, r0
     4a2:	88 0b       	sbc	r24, r24
     4a4:	99 0b       	sbc	r25, r25
     4a6:	6b d2       	rcall	.+1238   	; 0x97e <__floatsisf>
     4a8:	f7 01       	movw	r30, r14
     4aa:	60 87       	std	Z+8, r22	; 0x08
     4ac:	71 87       	std	Z+9, r23	; 0x09
     4ae:	82 87       	std	Z+10, r24	; 0x0a
     4b0:	93 87       	std	Z+11, r25	; 0x0b

	return steps;
     4b2:	c7 01       	movw	r24, r14
     4b4:	0f b6       	in	r0, 0x3f	; 63
     4b6:	f8 94       	cli
     4b8:	de be       	out	0x3e, r13	; 62
     4ba:	0f be       	out	0x3f, r0	; 63
     4bc:	cd be       	out	0x3d, r12	; 61
     4be:	df 91       	pop	r29
     4c0:	cf 91       	pop	r28
     4c2:	1f 91       	pop	r17
     4c4:	0f 91       	pop	r16
     4c6:	ff 90       	pop	r15
     4c8:	ef 90       	pop	r14
     4ca:	df 90       	pop	r13
     4cc:	cf 90       	pop	r12
     4ce:	08 95       	ret

000004d0 <_Z11StepperInitv>:
}

boolean GetDirection()
{

}
     4d0:	68 df       	rcall	.-304    	; 0x3a2 <_Z18LimitSwitchPinInitv>
     4d2:	61 e0       	ldi	r22, 0x01	; 1
     4d4:	87 e3       	ldi	r24, 0x37	; 55
     4d6:	f0 d7       	rcall	.+4064   	; 0x14b8 <pinMode>
     4d8:	61 e0       	ldi	r22, 0x01	; 1
     4da:	8d e3       	ldi	r24, 0x3D	; 61
     4dc:	ed d7       	rcall	.+4058   	; 0x14b8 <pinMode>
     4de:	61 e0       	ldi	r22, 0x01	; 1
     4e0:	80 e3       	ldi	r24, 0x30	; 48
     4e2:	ea d7       	rcall	.+4052   	; 0x14b8 <pinMode>
     4e4:	61 e0       	ldi	r22, 0x01	; 1
     4e6:	86 e2       	ldi	r24, 0x26	; 38
     4e8:	e7 d7       	rcall	.+4046   	; 0x14b8 <pinMode>
     4ea:	61 e0       	ldi	r22, 0x01	; 1
     4ec:	88 e3       	ldi	r24, 0x38	; 56
     4ee:	e4 d7       	rcall	.+4040   	; 0x14b8 <pinMode>
     4f0:	61 e0       	ldi	r22, 0x01	; 1
     4f2:	8e e3       	ldi	r24, 0x3E	; 62
     4f4:	e1 d7       	rcall	.+4034   	; 0x14b8 <pinMode>
     4f6:	61 e0       	ldi	r22, 0x01	; 1
     4f8:	85 e3       	ldi	r24, 0x35	; 53
     4fa:	de d7       	rcall	.+4028   	; 0x14b8 <pinMode>
     4fc:	61 e0       	ldi	r22, 0x01	; 1
     4fe:	81 e3       	ldi	r24, 0x31	; 49
     500:	db d7       	rcall	.+4022   	; 0x14b8 <pinMode>
     502:	61 e0       	ldi	r22, 0x01	; 1
     504:	88 e2       	ldi	r24, 0x28	; 40
     506:	d8 d7       	rcall	.+4016   	; 0x14b8 <pinMode>
     508:	61 e0       	ldi	r22, 0x01	; 1
     50a:	86 e3       	ldi	r24, 0x36	; 54
     50c:	d5 d7       	rcall	.+4010   	; 0x14b8 <pinMode>
     50e:	61 e0       	ldi	r22, 0x01	; 1
     510:	8c e3       	ldi	r24, 0x3C	; 60
     512:	d2 d7       	rcall	.+4004   	; 0x14b8 <pinMode>
     514:	61 e0       	ldi	r22, 0x01	; 1
     516:	8e e2       	ldi	r24, 0x2E	; 46
     518:	cf c7       	rjmp	.+3998   	; 0x14b8 <pinMode>

0000051a <_Z15ReadLimitSwitchPbS_S_>:
     51a:	ef 92       	push	r14
     51c:	ff 92       	push	r15
     51e:	0f 93       	push	r16
     520:	1f 93       	push	r17
     522:	cf 93       	push	r28
     524:	df 93       	push	r29
     526:	7c 01       	movw	r14, r24
     528:	8b 01       	movw	r16, r22
     52a:	ea 01       	movw	r28, r20
     52c:	82 e0       	ldi	r24, 0x02	; 2
     52e:	0e 94 c6 0a 	call	0x158c	; 0x158c <digitalRead>
     532:	21 e0       	ldi	r18, 0x01	; 1
     534:	89 2b       	or	r24, r25
     536:	09 f4       	brne	.+2      	; 0x53a <_Z15ReadLimitSwitchPbS_S_+0x20>
     538:	20 e0       	ldi	r18, 0x00	; 0
     53a:	f7 01       	movw	r30, r14
     53c:	20 83       	st	Z, r18
     53e:	8f e0       	ldi	r24, 0x0F	; 15
     540:	0e 94 c6 0a 	call	0x158c	; 0x158c <digitalRead>
     544:	21 e0       	ldi	r18, 0x01	; 1
     546:	89 2b       	or	r24, r25
     548:	09 f4       	brne	.+2      	; 0x54c <_Z15ReadLimitSwitchPbS_S_+0x32>
     54a:	20 e0       	ldi	r18, 0x00	; 0
     54c:	f8 01       	movw	r30, r16
     54e:	20 83       	st	Z, r18
     550:	83 e1       	ldi	r24, 0x13	; 19
     552:	0e 94 c6 0a 	call	0x158c	; 0x158c <digitalRead>
     556:	21 e0       	ldi	r18, 0x01	; 1
     558:	89 2b       	or	r24, r25
     55a:	09 f4       	brne	.+2      	; 0x55e <_Z15ReadLimitSwitchPbS_S_+0x44>
     55c:	20 e0       	ldi	r18, 0x00	; 0
     55e:	28 83       	st	Y, r18
     560:	df 91       	pop	r29
     562:	cf 91       	pop	r28
     564:	1f 91       	pop	r17
     566:	0f 91       	pop	r16
     568:	ff 90       	pop	r15
     56a:	ef 90       	pop	r14
     56c:	08 95       	ret

0000056e <_Z17ChangeStepperXDirb>:
     56e:	88 23       	and	r24, r24
     570:	11 f0       	breq	.+4      	; 0x576 <_Z17ChangeStepperXDirb+0x8>
     572:	61 e0       	ldi	r22, 0x01	; 1
     574:	01 c0       	rjmp	.+2      	; 0x578 <_Z17ChangeStepperXDirb+0xa>
     576:	60 e0       	ldi	r22, 0x00	; 0
     578:	87 e3       	ldi	r24, 0x37	; 55
     57a:	da c7       	rjmp	.+4020   	; 0x1530 <digitalWrite>

0000057c <_Z17ChangeStepperYDirb>:
     57c:	88 23       	and	r24, r24
     57e:	11 f0       	breq	.+4      	; 0x584 <_Z17ChangeStepperYDirb+0x8>
     580:	61 e0       	ldi	r22, 0x01	; 1
     582:	01 c0       	rjmp	.+2      	; 0x586 <_Z17ChangeStepperYDirb+0xa>
     584:	60 e0       	ldi	r22, 0x00	; 0
     586:	8d e3       	ldi	r24, 0x3D	; 61
     588:	d3 c7       	rjmp	.+4006   	; 0x1530 <digitalWrite>

0000058a <_Z17ChangeStepperZDirb>:
     58a:	88 23       	and	r24, r24
     58c:	11 f0       	breq	.+4      	; 0x592 <_Z17ChangeStepperZDirb+0x8>
     58e:	61 e0       	ldi	r22, 0x01	; 1
     590:	01 c0       	rjmp	.+2      	; 0x594 <_Z17ChangeStepperZDirb+0xa>
     592:	60 e0       	ldi	r22, 0x00	; 0
     594:	80 e3       	ldi	r24, 0x30	; 48
     596:	cc c7       	rjmp	.+3992   	; 0x1530 <digitalWrite>

00000598 <_Z17ChangeSteppersDirP5Steps>:
     598:	cf 92       	push	r12
     59a:	df 92       	push	r13
     59c:	ef 92       	push	r14
     59e:	ff 92       	push	r15
     5a0:	cf 93       	push	r28
     5a2:	df 93       	push	r29
     5a4:	ec 01       	movw	r28, r24
     5a6:	20 e0       	ldi	r18, 0x00	; 0
     5a8:	30 e0       	ldi	r19, 0x00	; 0
     5aa:	a9 01       	movw	r20, r18
     5ac:	68 81       	ld	r22, Y
     5ae:	79 81       	ldd	r23, Y+1	; 0x01
     5b0:	8a 81       	ldd	r24, Y+2	; 0x02
     5b2:	9b 81       	ldd	r25, Y+3	; 0x03
     5b4:	70 d2       	rcall	.+1248   	; 0xa96 <__gesf2>
     5b6:	18 16       	cp	r1, r24
     5b8:	1c f4       	brge	.+6      	; 0x5c0 <_Z17ChangeSteppersDirP5Steps+0x28>
     5ba:	80 e0       	ldi	r24, 0x00	; 0
     5bc:	d8 df       	rcall	.-80     	; 0x56e <_Z17ChangeStepperXDirb>
     5be:	17 c0       	rjmp	.+46     	; 0x5ee <_Z17ChangeSteppersDirP5Steps+0x56>
     5c0:	61 e0       	ldi	r22, 0x01	; 1
     5c2:	87 e3       	ldi	r24, 0x37	; 55
     5c4:	b5 d7       	rcall	.+3946   	; 0x1530 <digitalWrite>
     5c6:	c8 80       	ld	r12, Y
     5c8:	d9 80       	ldd	r13, Y+1	; 0x01
     5ca:	ea 80       	ldd	r14, Y+2	; 0x02
     5cc:	fb 80       	ldd	r15, Y+3	; 0x03
     5ce:	20 e0       	ldi	r18, 0x00	; 0
     5d0:	30 e0       	ldi	r19, 0x00	; 0
     5d2:	a9 01       	movw	r20, r18
     5d4:	c7 01       	movw	r24, r14
     5d6:	b6 01       	movw	r22, r12
     5d8:	5e d2       	rcall	.+1212   	; 0xa96 <__gesf2>
     5da:	18 16       	cp	r1, r24
     5dc:	24 f0       	brlt	.+8      	; 0x5e6 <_Z17ChangeSteppersDirP5Steps+0x4e>
     5de:	f7 fa       	bst	r15, 7
     5e0:	f0 94       	com	r15
     5e2:	f7 f8       	bld	r15, 7
     5e4:	f0 94       	com	r15
     5e6:	c8 82       	st	Y, r12
     5e8:	d9 82       	std	Y+1, r13	; 0x01
     5ea:	ea 82       	std	Y+2, r14	; 0x02
     5ec:	fb 82       	std	Y+3, r15	; 0x03
     5ee:	20 e0       	ldi	r18, 0x00	; 0
     5f0:	30 e0       	ldi	r19, 0x00	; 0
     5f2:	a9 01       	movw	r20, r18
     5f4:	6c 81       	ldd	r22, Y+4	; 0x04
     5f6:	7d 81       	ldd	r23, Y+5	; 0x05
     5f8:	8e 81       	ldd	r24, Y+6	; 0x06
     5fa:	9f 81       	ldd	r25, Y+7	; 0x07
     5fc:	4c d2       	rcall	.+1176   	; 0xa96 <__gesf2>
     5fe:	18 16       	cp	r1, r24
     600:	1c f4       	brge	.+6      	; 0x608 <_Z17ChangeSteppersDirP5Steps+0x70>
     602:	80 e0       	ldi	r24, 0x00	; 0
     604:	bb df       	rcall	.-138    	; 0x57c <_Z17ChangeStepperYDirb>
     606:	17 c0       	rjmp	.+46     	; 0x636 <_Z17ChangeSteppersDirP5Steps+0x9e>
     608:	61 e0       	ldi	r22, 0x01	; 1
     60a:	8d e3       	ldi	r24, 0x3D	; 61
     60c:	91 d7       	rcall	.+3874   	; 0x1530 <digitalWrite>
     60e:	cc 80       	ldd	r12, Y+4	; 0x04
     610:	dd 80       	ldd	r13, Y+5	; 0x05
     612:	ee 80       	ldd	r14, Y+6	; 0x06
     614:	ff 80       	ldd	r15, Y+7	; 0x07
     616:	20 e0       	ldi	r18, 0x00	; 0
     618:	30 e0       	ldi	r19, 0x00	; 0
     61a:	a9 01       	movw	r20, r18
     61c:	c7 01       	movw	r24, r14
     61e:	b6 01       	movw	r22, r12
     620:	3a d2       	rcall	.+1140   	; 0xa96 <__gesf2>
     622:	18 16       	cp	r1, r24
     624:	24 f0       	brlt	.+8      	; 0x62e <_Z17ChangeSteppersDirP5Steps+0x96>
     626:	f7 fa       	bst	r15, 7
     628:	f0 94       	com	r15
     62a:	f7 f8       	bld	r15, 7
     62c:	f0 94       	com	r15
     62e:	cc 82       	std	Y+4, r12	; 0x04
     630:	dd 82       	std	Y+5, r13	; 0x05
     632:	ee 82       	std	Y+6, r14	; 0x06
     634:	ff 82       	std	Y+7, r15	; 0x07
     636:	20 e0       	ldi	r18, 0x00	; 0
     638:	30 e0       	ldi	r19, 0x00	; 0
     63a:	a9 01       	movw	r20, r18
     63c:	68 85       	ldd	r22, Y+8	; 0x08
     63e:	79 85       	ldd	r23, Y+9	; 0x09
     640:	8a 85       	ldd	r24, Y+10	; 0x0a
     642:	9b 85       	ldd	r25, Y+11	; 0x0b
     644:	28 d2       	rcall	.+1104   	; 0xa96 <__gesf2>
     646:	18 16       	cp	r1, r24
     648:	44 f4       	brge	.+16     	; 0x65a <_Z17ChangeSteppersDirP5Steps+0xc2>
     64a:	80 e0       	ldi	r24, 0x00	; 0
     64c:	df 91       	pop	r29
     64e:	cf 91       	pop	r28
     650:	ff 90       	pop	r15
     652:	ef 90       	pop	r14
     654:	df 90       	pop	r13
     656:	cf 90       	pop	r12
     658:	98 cf       	rjmp	.-208    	; 0x58a <_Z17ChangeStepperZDirb>
     65a:	61 e0       	ldi	r22, 0x01	; 1
     65c:	80 e3       	ldi	r24, 0x30	; 48
     65e:	68 d7       	rcall	.+3792   	; 0x1530 <digitalWrite>
     660:	c8 84       	ldd	r12, Y+8	; 0x08
     662:	d9 84       	ldd	r13, Y+9	; 0x09
     664:	ea 84       	ldd	r14, Y+10	; 0x0a
     666:	fb 84       	ldd	r15, Y+11	; 0x0b
     668:	20 e0       	ldi	r18, 0x00	; 0
     66a:	30 e0       	ldi	r19, 0x00	; 0
     66c:	a9 01       	movw	r20, r18
     66e:	c7 01       	movw	r24, r14
     670:	b6 01       	movw	r22, r12
     672:	11 d2       	rcall	.+1058   	; 0xa96 <__gesf2>
     674:	18 16       	cp	r1, r24
     676:	24 f0       	brlt	.+8      	; 0x680 <_Z17ChangeSteppersDirP5Steps+0xe8>
     678:	f7 fa       	bst	r15, 7
     67a:	f0 94       	com	r15
     67c:	f7 f8       	bld	r15, 7
     67e:	f0 94       	com	r15
     680:	c8 86       	std	Y+8, r12	; 0x08
     682:	d9 86       	std	Y+9, r13	; 0x09
     684:	ea 86       	std	Y+10, r14	; 0x0a
     686:	fb 86       	std	Y+11, r15	; 0x0b
     688:	df 91       	pop	r29
     68a:	cf 91       	pop	r28
     68c:	ff 90       	pop	r15
     68e:	ef 90       	pop	r14
     690:	df 90       	pop	r13
     692:	cf 90       	pop	r12
     694:	08 95       	ret

00000696 <_Z11MovementXYZP5Steps>:

///CREDIT: Adam Baniuszewicz, Bartosz Flis, Jakub Sybidlo
void MovementXYZ(Steps *steps)
{
     696:	0f 93       	push	r16
     698:	1f 93       	push	r17
     69a:	cf 93       	push	r28
     69c:	df 93       	push	r29
     69e:	00 d0       	rcall	.+0      	; 0x6a0 <_Z11MovementXYZP5Steps+0xa>
     6a0:	cd b7       	in	r28, 0x3d	; 61
     6a2:	de b7       	in	r29, 0x3e	; 62
     6a4:	8c 01       	movw	r16, r24
	bool switchX, switchY, switchZ;
	ReadLimitSwitch(&switchX, &switchY, &switchZ);
     6a6:	ae 01       	movw	r20, r28
     6a8:	4f 5f       	subi	r20, 0xFF	; 255
     6aa:	5f 4f       	sbci	r21, 0xFF	; 255
     6ac:	be 01       	movw	r22, r28
     6ae:	6e 5f       	subi	r22, 0xFE	; 254
     6b0:	7f 4f       	sbci	r23, 0xFF	; 255
     6b2:	ce 01       	movw	r24, r28
     6b4:	03 96       	adiw	r24, 0x03	; 3
     6b6:	31 df       	rcall	.-414    	; 0x51a <_Z15ReadLimitSwitchPbS_S_>

	if ((*steps).x > 0 && (!(switchX) || digitalRead(pinDirX)))
     6b8:	20 e0       	ldi	r18, 0x00	; 0
     6ba:	30 e0       	ldi	r19, 0x00	; 0
     6bc:	a9 01       	movw	r20, r18
     6be:	f8 01       	movw	r30, r16
     6c0:	60 81       	ld	r22, Z
     6c2:	71 81       	ldd	r23, Z+1	; 0x01
     6c4:	82 81       	ldd	r24, Z+2	; 0x02
     6c6:	93 81       	ldd	r25, Z+3	; 0x03
     6c8:	e6 d1       	rcall	.+972    	; 0xa96 <__gesf2>
     6ca:	18 16       	cp	r1, r24
     6cc:	4c f4       	brge	.+18     	; 0x6e0 <_Z11MovementXYZP5Steps+0x4a>
     6ce:	8b 81       	ldd	r24, Y+3	; 0x03
     6d0:	88 23       	and	r24, r24
     6d2:	09 f4       	brne	.+2      	; 0x6d6 <_Z11MovementXYZP5Steps+0x40>
     6d4:	77 c0       	rjmp	.+238    	; 0x7c4 <_Z11MovementXYZP5Steps+0x12e>
     6d6:	87 e3       	ldi	r24, 0x37	; 55
     6d8:	59 d7       	rcall	.+3762   	; 0x158c <digitalRead>
     6da:	89 2b       	or	r24, r25
     6dc:	09 f0       	breq	.+2      	; 0x6e0 <_Z11MovementXYZP5Steps+0x4a>
     6de:	72 c0       	rjmp	.+228    	; 0x7c4 <_Z11MovementXYZP5Steps+0x12e>
		digitalWrite(pinStepX, LOW);
	if ((*steps).y > 0 && (!(switchY) || digitalRead(pinDirY)))
     6e0:	20 e0       	ldi	r18, 0x00	; 0
     6e2:	30 e0       	ldi	r19, 0x00	; 0
     6e4:	a9 01       	movw	r20, r18
     6e6:	f8 01       	movw	r30, r16
     6e8:	64 81       	ldd	r22, Z+4	; 0x04
     6ea:	75 81       	ldd	r23, Z+5	; 0x05
     6ec:	86 81       	ldd	r24, Z+6	; 0x06
     6ee:	97 81       	ldd	r25, Z+7	; 0x07
     6f0:	d2 d1       	rcall	.+932    	; 0xa96 <__gesf2>
     6f2:	18 16       	cp	r1, r24
     6f4:	4c f4       	brge	.+18     	; 0x708 <_Z11MovementXYZP5Steps+0x72>
     6f6:	8a 81       	ldd	r24, Y+2	; 0x02
     6f8:	88 23       	and	r24, r24
     6fa:	09 f4       	brne	.+2      	; 0x6fe <_Z11MovementXYZP5Steps+0x68>
     6fc:	67 c0       	rjmp	.+206    	; 0x7cc <_Z11MovementXYZP5Steps+0x136>
     6fe:	8d e3       	ldi	r24, 0x3D	; 61
     700:	45 d7       	rcall	.+3722   	; 0x158c <digitalRead>
     702:	89 2b       	or	r24, r25
     704:	09 f0       	breq	.+2      	; 0x708 <_Z11MovementXYZP5Steps+0x72>
     706:	62 c0       	rjmp	.+196    	; 0x7cc <_Z11MovementXYZP5Steps+0x136>
		digitalWrite(pinStepY, LOW);
	if ((*steps).z > 0 && (!(switchZ) || digitalRead(pinDirZ)))
     708:	20 e0       	ldi	r18, 0x00	; 0
     70a:	30 e0       	ldi	r19, 0x00	; 0
     70c:	a9 01       	movw	r20, r18
     70e:	f8 01       	movw	r30, r16
     710:	60 85       	ldd	r22, Z+8	; 0x08
     712:	71 85       	ldd	r23, Z+9	; 0x09
     714:	82 85       	ldd	r24, Z+10	; 0x0a
     716:	93 85       	ldd	r25, Z+11	; 0x0b
     718:	be d1       	rcall	.+892    	; 0xa96 <__gesf2>
     71a:	18 16       	cp	r1, r24
     71c:	4c f4       	brge	.+18     	; 0x730 <_Z11MovementXYZP5Steps+0x9a>
     71e:	89 81       	ldd	r24, Y+1	; 0x01
     720:	88 23       	and	r24, r24
     722:	09 f4       	brne	.+2      	; 0x726 <_Z11MovementXYZP5Steps+0x90>
     724:	57 c0       	rjmp	.+174    	; 0x7d4 <_Z11MovementXYZP5Steps+0x13e>
     726:	80 e3       	ldi	r24, 0x30	; 48
     728:	31 d7       	rcall	.+3682   	; 0x158c <digitalRead>
     72a:	89 2b       	or	r24, r25
     72c:	09 f0       	breq	.+2      	; 0x730 <_Z11MovementXYZP5Steps+0x9a>
		digitalWrite(pinStepZ, LOW);
	delayMicroseconds(500);
     72e:	52 c0       	rjmp	.+164    	; 0x7d4 <_Z11MovementXYZP5Steps+0x13e>
     730:	84 ef       	ldi	r24, 0xF4	; 244
     732:	91 e0       	ldi	r25, 0x01	; 1

	if ((*steps).x > 0 && (!(switchX) || digitalRead(pinDirX)))
     734:	ff d5       	rcall	.+3070   	; 0x1334 <delayMicroseconds>
     736:	20 e0       	ldi	r18, 0x00	; 0
     738:	30 e0       	ldi	r19, 0x00	; 0
     73a:	a9 01       	movw	r20, r18
     73c:	f8 01       	movw	r30, r16
     73e:	60 81       	ld	r22, Z
     740:	71 81       	ldd	r23, Z+1	; 0x01
     742:	82 81       	ldd	r24, Z+2	; 0x02
     744:	93 81       	ldd	r25, Z+3	; 0x03
     746:	a7 d1       	rcall	.+846    	; 0xa96 <__gesf2>
     748:	18 16       	cp	r1, r24
     74a:	4c f4       	brge	.+18     	; 0x75e <_Z11MovementXYZP5Steps+0xc8>
     74c:	8b 81       	ldd	r24, Y+3	; 0x03
     74e:	88 23       	and	r24, r24
     750:	09 f4       	brne	.+2      	; 0x754 <_Z11MovementXYZP5Steps+0xbe>
     752:	44 c0       	rjmp	.+136    	; 0x7dc <_Z11MovementXYZP5Steps+0x146>
     754:	87 e3       	ldi	r24, 0x37	; 55
     756:	1a d7       	rcall	.+3636   	; 0x158c <digitalRead>
     758:	89 2b       	or	r24, r25
	{
		digitalWrite(pinStepX, HIGH);
		(*steps).x--;
	}
	if ((*steps).y > 0 && (!(switchY) || digitalRead(pinDirY)))
     75a:	09 f0       	breq	.+2      	; 0x75e <_Z11MovementXYZP5Steps+0xc8>
     75c:	3f c0       	rjmp	.+126    	; 0x7dc <_Z11MovementXYZP5Steps+0x146>
     75e:	20 e0       	ldi	r18, 0x00	; 0
     760:	30 e0       	ldi	r19, 0x00	; 0
     762:	a9 01       	movw	r20, r18
     764:	f8 01       	movw	r30, r16
     766:	64 81       	ldd	r22, Z+4	; 0x04
     768:	75 81       	ldd	r23, Z+5	; 0x05
     76a:	86 81       	ldd	r24, Z+6	; 0x06
     76c:	97 81       	ldd	r25, Z+7	; 0x07
     76e:	93 d1       	rcall	.+806    	; 0xa96 <__gesf2>
     770:	18 16       	cp	r1, r24
     772:	4c f4       	brge	.+18     	; 0x786 <_Z11MovementXYZP5Steps+0xf0>
     774:	8a 81       	ldd	r24, Y+2	; 0x02
     776:	88 23       	and	r24, r24
     778:	09 f4       	brne	.+2      	; 0x77c <_Z11MovementXYZP5Steps+0xe6>
     77a:	43 c0       	rjmp	.+134    	; 0x802 <_Z11MovementXYZP5Steps+0x16c>
     77c:	8d e3       	ldi	r24, 0x3D	; 61
     77e:	06 d7       	rcall	.+3596   	; 0x158c <digitalRead>
     780:	89 2b       	or	r24, r25
	{
		digitalWrite(pinStepY, HIGH);
		(*steps).y--;
	}
	if ((*steps).z > 0 && (!(switchZ) || digitalRead(pinDirZ)))
     782:	09 f0       	breq	.+2      	; 0x786 <_Z11MovementXYZP5Steps+0xf0>
     784:	3e c0       	rjmp	.+124    	; 0x802 <_Z11MovementXYZP5Steps+0x16c>
     786:	20 e0       	ldi	r18, 0x00	; 0
     788:	30 e0       	ldi	r19, 0x00	; 0
     78a:	a9 01       	movw	r20, r18
     78c:	f8 01       	movw	r30, r16
     78e:	60 85       	ldd	r22, Z+8	; 0x08
     790:	71 85       	ldd	r23, Z+9	; 0x09
     792:	82 85       	ldd	r24, Z+10	; 0x0a
     794:	93 85       	ldd	r25, Z+11	; 0x0b
     796:	7f d1       	rcall	.+766    	; 0xa96 <__gesf2>
     798:	18 16       	cp	r1, r24
     79a:	4c f4       	brge	.+18     	; 0x7ae <_Z11MovementXYZP5Steps+0x118>
     79c:	89 81       	ldd	r24, Y+1	; 0x01
     79e:	88 23       	and	r24, r24
     7a0:	09 f4       	brne	.+2      	; 0x7a4 <_Z11MovementXYZP5Steps+0x10e>
     7a2:	42 c0       	rjmp	.+132    	; 0x828 <_Z11MovementXYZP5Steps+0x192>
     7a4:	80 e3       	ldi	r24, 0x30	; 48
     7a6:	f2 d6       	rcall	.+3556   	; 0x158c <digitalRead>
	{
		digitalWrite(pinStepZ, HIGH);
		(*steps).z--;
	}
	delayMicroseconds(500);
     7a8:	89 2b       	or	r24, r25
     7aa:	09 f0       	breq	.+2      	; 0x7ae <_Z11MovementXYZP5Steps+0x118>
     7ac:	3d c0       	rjmp	.+122    	; 0x828 <_Z11MovementXYZP5Steps+0x192>
     7ae:	84 ef       	ldi	r24, 0xF4	; 244
     7b0:	91 e0       	ldi	r25, 0x01	; 1
     7b2:	c0 d5       	rcall	.+2944   	; 0x1334 <delayMicroseconds>
     7b4:	0f 90       	pop	r0
     7b6:	0f 90       	pop	r0
     7b8:	0f 90       	pop	r0
{
	bool switchX, switchY, switchZ;
	ReadLimitSwitch(&switchX, &switchY, &switchZ);

	if ((*steps).x > 0 && (!(switchX) || digitalRead(pinDirX)))
		digitalWrite(pinStepX, LOW);
     7ba:	df 91       	pop	r29
     7bc:	cf 91       	pop	r28
     7be:	1f 91       	pop	r17
     7c0:	0f 91       	pop	r16
     7c2:	08 95       	ret
	if ((*steps).y > 0 && (!(switchY) || digitalRead(pinDirY)))
		digitalWrite(pinStepY, LOW);
     7c4:	60 e0       	ldi	r22, 0x00	; 0
     7c6:	86 e3       	ldi	r24, 0x36	; 54
     7c8:	b3 d6       	rcall	.+3430   	; 0x1530 <digitalWrite>
     7ca:	8a cf       	rjmp	.-236    	; 0x6e0 <_Z11MovementXYZP5Steps+0x4a>
	if ((*steps).z > 0 && (!(switchZ) || digitalRead(pinDirZ)))
		digitalWrite(pinStepZ, LOW);
     7cc:	60 e0       	ldi	r22, 0x00	; 0
     7ce:	8c e3       	ldi	r24, 0x3C	; 60
     7d0:	af d6       	rcall	.+3422   	; 0x1530 <digitalWrite>
     7d2:	9a cf       	rjmp	.-204    	; 0x708 <_Z11MovementXYZP5Steps+0x72>
     7d4:	60 e0       	ldi	r22, 0x00	; 0
	delayMicroseconds(500);

	if ((*steps).x > 0 && (!(switchX) || digitalRead(pinDirX)))
	{
		digitalWrite(pinStepX, HIGH);
     7d6:	8e e2       	ldi	r24, 0x2E	; 46
     7d8:	ab d6       	rcall	.+3414   	; 0x1530 <digitalWrite>
     7da:	aa cf       	rjmp	.-172    	; 0x730 <_Z11MovementXYZP5Steps+0x9a>
		(*steps).x--;
     7dc:	61 e0       	ldi	r22, 0x01	; 1
     7de:	86 e3       	ldi	r24, 0x36	; 54
     7e0:	a7 d6       	rcall	.+3406   	; 0x1530 <digitalWrite>
     7e2:	20 e0       	ldi	r18, 0x00	; 0
     7e4:	30 e0       	ldi	r19, 0x00	; 0
     7e6:	40 e8       	ldi	r20, 0x80	; 128
     7e8:	5f e3       	ldi	r21, 0x3F	; 63
     7ea:	f8 01       	movw	r30, r16
     7ec:	60 81       	ld	r22, Z
     7ee:	71 81       	ldd	r23, Z+1	; 0x01
     7f0:	82 81       	ldd	r24, Z+2	; 0x02
     7f2:	93 81       	ldd	r25, Z+3	; 0x03
     7f4:	2c d0       	rcall	.+88     	; 0x84e <__subsf3>
     7f6:	f8 01       	movw	r30, r16
     7f8:	60 83       	st	Z, r22
     7fa:	71 83       	std	Z+1, r23	; 0x01
	}
	if ((*steps).y > 0 && (!(switchY) || digitalRead(pinDirY)))
	{
		digitalWrite(pinStepY, HIGH);
     7fc:	82 83       	std	Z+2, r24	; 0x02
     7fe:	93 83       	std	Z+3, r25	; 0x03
     800:	ae cf       	rjmp	.-164    	; 0x75e <_Z11MovementXYZP5Steps+0xc8>
		(*steps).y--;
     802:	61 e0       	ldi	r22, 0x01	; 1
     804:	8c e3       	ldi	r24, 0x3C	; 60
     806:	94 d6       	rcall	.+3368   	; 0x1530 <digitalWrite>
     808:	20 e0       	ldi	r18, 0x00	; 0
     80a:	30 e0       	ldi	r19, 0x00	; 0
     80c:	40 e8       	ldi	r20, 0x80	; 128
     80e:	5f e3       	ldi	r21, 0x3F	; 63
     810:	f8 01       	movw	r30, r16
     812:	64 81       	ldd	r22, Z+4	; 0x04
     814:	75 81       	ldd	r23, Z+5	; 0x05
     816:	86 81       	ldd	r24, Z+6	; 0x06
     818:	97 81       	ldd	r25, Z+7	; 0x07
     81a:	19 d0       	rcall	.+50     	; 0x84e <__subsf3>
     81c:	f8 01       	movw	r30, r16
     81e:	64 83       	std	Z+4, r22	; 0x04
     820:	75 83       	std	Z+5, r23	; 0x05
	}
	if ((*steps).z > 0 && (!(switchZ) || digitalRead(pinDirZ)))
	{
		digitalWrite(pinStepZ, HIGH);
     822:	86 83       	std	Z+6, r24	; 0x06
     824:	97 83       	std	Z+7, r25	; 0x07
     826:	af cf       	rjmp	.-162    	; 0x786 <_Z11MovementXYZP5Steps+0xf0>
     828:	61 e0       	ldi	r22, 0x01	; 1
		(*steps).z--;
     82a:	8e e2       	ldi	r24, 0x2E	; 46
     82c:	81 d6       	rcall	.+3330   	; 0x1530 <digitalWrite>
     82e:	20 e0       	ldi	r18, 0x00	; 0
     830:	30 e0       	ldi	r19, 0x00	; 0
     832:	40 e8       	ldi	r20, 0x80	; 128
     834:	5f e3       	ldi	r21, 0x3F	; 63
     836:	f8 01       	movw	r30, r16
     838:	60 85       	ldd	r22, Z+8	; 0x08
     83a:	71 85       	ldd	r23, Z+9	; 0x09
     83c:	82 85       	ldd	r24, Z+10	; 0x0a
     83e:	93 85       	ldd	r25, Z+11	; 0x0b
     840:	06 d0       	rcall	.+12     	; 0x84e <__subsf3>
     842:	f8 01       	movw	r30, r16
     844:	60 87       	std	Z+8, r22	; 0x08
     846:	71 87       	std	Z+9, r23	; 0x09
     848:	82 87       	std	Z+10, r24	; 0x0a
     84a:	93 87       	std	Z+11, r25	; 0x0b
#include "..\Header files\StepperMotor.h"
#include "..\Header files\LimitSwitch.h"

///CREDIT: Adam Baniuszewicz, Bartosz Flis, Jakub Sybidlo
void StepperInit()
{
     84c:	b0 cf       	rjmp	.-160    	; 0x7ae <_Z11MovementXYZP5Steps+0x118>

0000084e <__subsf3>:
     84e:	50 58       	subi	r21, 0x80	; 128

00000850 <__addsf3>:
     850:	bb 27       	eor	r27, r27
     852:	aa 27       	eor	r26, r26
     854:	0e d0       	rcall	.+28     	; 0x872 <__addsf3x>
     856:	e5 c0       	rjmp	.+458    	; 0xa22 <__fp_round>
     858:	d6 d0       	rcall	.+428    	; 0xa06 <__fp_pscA>
     85a:	30 f0       	brcs	.+12     	; 0x868 <__addsf3+0x18>
     85c:	db d0       	rcall	.+438    	; 0xa14 <__fp_pscB>
     85e:	20 f0       	brcs	.+8      	; 0x868 <__addsf3+0x18>
     860:	31 f4       	brne	.+12     	; 0x86e <__addsf3+0x1e>
     862:	9f 3f       	cpi	r25, 0xFF	; 255
     864:	11 f4       	brne	.+4      	; 0x86a <__addsf3+0x1a>
     866:	1e f4       	brtc	.+6      	; 0x86e <__addsf3+0x1e>
     868:	cb c0       	rjmp	.+406    	; 0xa00 <__fp_nan>
     86a:	0e f4       	brtc	.+2      	; 0x86e <__addsf3+0x1e>
     86c:	e0 95       	com	r30
     86e:	e7 fb       	bst	r30, 7
     870:	c1 c0       	rjmp	.+386    	; 0x9f4 <__fp_inf>

00000872 <__addsf3x>:
     872:	e9 2f       	mov	r30, r25
     874:	e7 d0       	rcall	.+462    	; 0xa44 <__fp_split3>
     876:	80 f3       	brcs	.-32     	; 0x858 <__addsf3+0x8>
     878:	ba 17       	cp	r27, r26
     87a:	62 07       	cpc	r22, r18
     87c:	73 07       	cpc	r23, r19
     87e:	84 07       	cpc	r24, r20
     880:	95 07       	cpc	r25, r21
     882:	18 f0       	brcs	.+6      	; 0x88a <__addsf3x+0x18>
     884:	71 f4       	brne	.+28     	; 0x8a2 <__addsf3x+0x30>
     886:	9e f5       	brtc	.+102    	; 0x8ee <__addsf3x+0x7c>
     888:	ff c0       	rjmp	.+510    	; 0xa88 <__fp_zero>
     88a:	0e f4       	brtc	.+2      	; 0x88e <__addsf3x+0x1c>
     88c:	e0 95       	com	r30
     88e:	0b 2e       	mov	r0, r27
     890:	ba 2f       	mov	r27, r26
     892:	a0 2d       	mov	r26, r0
     894:	0b 01       	movw	r0, r22
     896:	b9 01       	movw	r22, r18
     898:	90 01       	movw	r18, r0
     89a:	0c 01       	movw	r0, r24
     89c:	ca 01       	movw	r24, r20
     89e:	a0 01       	movw	r20, r0
     8a0:	11 24       	eor	r1, r1
     8a2:	ff 27       	eor	r31, r31
     8a4:	59 1b       	sub	r21, r25
     8a6:	99 f0       	breq	.+38     	; 0x8ce <__addsf3x+0x5c>
     8a8:	59 3f       	cpi	r21, 0xF9	; 249
     8aa:	50 f4       	brcc	.+20     	; 0x8c0 <__addsf3x+0x4e>
     8ac:	50 3e       	cpi	r21, 0xE0	; 224
     8ae:	68 f1       	brcs	.+90     	; 0x90a <__addsf3x+0x98>
     8b0:	1a 16       	cp	r1, r26
     8b2:	f0 40       	sbci	r31, 0x00	; 0
     8b4:	a2 2f       	mov	r26, r18
     8b6:	23 2f       	mov	r18, r19
     8b8:	34 2f       	mov	r19, r20
     8ba:	44 27       	eor	r20, r20
     8bc:	58 5f       	subi	r21, 0xF8	; 248
     8be:	f3 cf       	rjmp	.-26     	; 0x8a6 <__addsf3x+0x34>
     8c0:	46 95       	lsr	r20
     8c2:	37 95       	ror	r19
     8c4:	27 95       	ror	r18
     8c6:	a7 95       	ror	r26
     8c8:	f0 40       	sbci	r31, 0x00	; 0
     8ca:	53 95       	inc	r21
     8cc:	c9 f7       	brne	.-14     	; 0x8c0 <__addsf3x+0x4e>
     8ce:	7e f4       	brtc	.+30     	; 0x8ee <__addsf3x+0x7c>
     8d0:	1f 16       	cp	r1, r31
     8d2:	ba 0b       	sbc	r27, r26
     8d4:	62 0b       	sbc	r22, r18
     8d6:	73 0b       	sbc	r23, r19
     8d8:	84 0b       	sbc	r24, r20
     8da:	ba f0       	brmi	.+46     	; 0x90a <__addsf3x+0x98>
     8dc:	91 50       	subi	r25, 0x01	; 1
     8de:	a1 f0       	breq	.+40     	; 0x908 <__addsf3x+0x96>
     8e0:	ff 0f       	add	r31, r31
     8e2:	bb 1f       	adc	r27, r27
     8e4:	66 1f       	adc	r22, r22
     8e6:	77 1f       	adc	r23, r23
     8e8:	88 1f       	adc	r24, r24
     8ea:	c2 f7       	brpl	.-16     	; 0x8dc <__addsf3x+0x6a>
     8ec:	0e c0       	rjmp	.+28     	; 0x90a <__addsf3x+0x98>
     8ee:	ba 0f       	add	r27, r26
     8f0:	62 1f       	adc	r22, r18
     8f2:	73 1f       	adc	r23, r19
     8f4:	84 1f       	adc	r24, r20
     8f6:	48 f4       	brcc	.+18     	; 0x90a <__addsf3x+0x98>
     8f8:	87 95       	ror	r24
     8fa:	77 95       	ror	r23
     8fc:	67 95       	ror	r22
     8fe:	b7 95       	ror	r27
     900:	f7 95       	ror	r31
     902:	9e 3f       	cpi	r25, 0xFE	; 254
     904:	08 f0       	brcs	.+2      	; 0x908 <__addsf3x+0x96>
     906:	b3 cf       	rjmp	.-154    	; 0x86e <__addsf3+0x1e>
     908:	93 95       	inc	r25
     90a:	88 0f       	add	r24, r24
     90c:	08 f0       	brcs	.+2      	; 0x910 <__addsf3x+0x9e>
     90e:	99 27       	eor	r25, r25
     910:	ee 0f       	add	r30, r30
     912:	97 95       	ror	r25
     914:	87 95       	ror	r24
     916:	08 95       	ret

00000918 <__fixsfsi>:
     918:	04 d0       	rcall	.+8      	; 0x922 <__fixunssfsi>
     91a:	68 94       	set
     91c:	b1 11       	cpse	r27, r1
     91e:	b5 c0       	rjmp	.+362    	; 0xa8a <__fp_szero>
     920:	08 95       	ret

00000922 <__fixunssfsi>:
     922:	98 d0       	rcall	.+304    	; 0xa54 <__fp_splitA>
     924:	88 f0       	brcs	.+34     	; 0x948 <__fixunssfsi+0x26>
     926:	9f 57       	subi	r25, 0x7F	; 127
     928:	90 f0       	brcs	.+36     	; 0x94e <__fixunssfsi+0x2c>
     92a:	b9 2f       	mov	r27, r25
     92c:	99 27       	eor	r25, r25
     92e:	b7 51       	subi	r27, 0x17	; 23
     930:	a0 f0       	brcs	.+40     	; 0x95a <__fixunssfsi+0x38>
     932:	d1 f0       	breq	.+52     	; 0x968 <__fixunssfsi+0x46>
     934:	66 0f       	add	r22, r22
     936:	77 1f       	adc	r23, r23
     938:	88 1f       	adc	r24, r24
     93a:	99 1f       	adc	r25, r25
     93c:	1a f0       	brmi	.+6      	; 0x944 <__fixunssfsi+0x22>
     93e:	ba 95       	dec	r27
     940:	c9 f7       	brne	.-14     	; 0x934 <__fixunssfsi+0x12>
     942:	12 c0       	rjmp	.+36     	; 0x968 <__fixunssfsi+0x46>
     944:	b1 30       	cpi	r27, 0x01	; 1
     946:	81 f0       	breq	.+32     	; 0x968 <__fixunssfsi+0x46>
     948:	9f d0       	rcall	.+318    	; 0xa88 <__fp_zero>
     94a:	b1 e0       	ldi	r27, 0x01	; 1
     94c:	08 95       	ret
     94e:	9c c0       	rjmp	.+312    	; 0xa88 <__fp_zero>
     950:	67 2f       	mov	r22, r23
     952:	78 2f       	mov	r23, r24
     954:	88 27       	eor	r24, r24
     956:	b8 5f       	subi	r27, 0xF8	; 248
     958:	39 f0       	breq	.+14     	; 0x968 <__fixunssfsi+0x46>
     95a:	b9 3f       	cpi	r27, 0xF9	; 249
     95c:	cc f3       	brlt	.-14     	; 0x950 <__fixunssfsi+0x2e>
     95e:	86 95       	lsr	r24
     960:	77 95       	ror	r23
     962:	67 95       	ror	r22
     964:	b3 95       	inc	r27
     966:	d9 f7       	brne	.-10     	; 0x95e <__fixunssfsi+0x3c>
     968:	3e f4       	brtc	.+14     	; 0x978 <__fixunssfsi+0x56>
     96a:	90 95       	com	r25
     96c:	80 95       	com	r24
     96e:	70 95       	com	r23
     970:	61 95       	neg	r22
     972:	7f 4f       	sbci	r23, 0xFF	; 255
     974:	8f 4f       	sbci	r24, 0xFF	; 255
     976:	9f 4f       	sbci	r25, 0xFF	; 255
     978:	08 95       	ret

0000097a <__floatunsisf>:
     97a:	e8 94       	clt
     97c:	09 c0       	rjmp	.+18     	; 0x990 <__floatsisf+0x12>

0000097e <__floatsisf>:
     97e:	97 fb       	bst	r25, 7
     980:	3e f4       	brtc	.+14     	; 0x990 <__floatsisf+0x12>
     982:	90 95       	com	r25
     984:	80 95       	com	r24
     986:	70 95       	com	r23
     988:	61 95       	neg	r22
     98a:	7f 4f       	sbci	r23, 0xFF	; 255
     98c:	8f 4f       	sbci	r24, 0xFF	; 255
     98e:	9f 4f       	sbci	r25, 0xFF	; 255
     990:	99 23       	and	r25, r25
     992:	a9 f0       	breq	.+42     	; 0x9be <__floatsisf+0x40>
     994:	f9 2f       	mov	r31, r25
     996:	96 e9       	ldi	r25, 0x96	; 150
     998:	bb 27       	eor	r27, r27
     99a:	93 95       	inc	r25
     99c:	f6 95       	lsr	r31
     99e:	87 95       	ror	r24
     9a0:	77 95       	ror	r23
     9a2:	67 95       	ror	r22
     9a4:	b7 95       	ror	r27
     9a6:	f1 11       	cpse	r31, r1
     9a8:	f8 cf       	rjmp	.-16     	; 0x99a <__floatsisf+0x1c>
     9aa:	fa f4       	brpl	.+62     	; 0x9ea <__floatsisf+0x6c>
     9ac:	bb 0f       	add	r27, r27
     9ae:	11 f4       	brne	.+4      	; 0x9b4 <__floatsisf+0x36>
     9b0:	60 ff       	sbrs	r22, 0
     9b2:	1b c0       	rjmp	.+54     	; 0x9ea <__floatsisf+0x6c>
     9b4:	6f 5f       	subi	r22, 0xFF	; 255
     9b6:	7f 4f       	sbci	r23, 0xFF	; 255
     9b8:	8f 4f       	sbci	r24, 0xFF	; 255
     9ba:	9f 4f       	sbci	r25, 0xFF	; 255
     9bc:	16 c0       	rjmp	.+44     	; 0x9ea <__floatsisf+0x6c>
     9be:	88 23       	and	r24, r24
     9c0:	11 f0       	breq	.+4      	; 0x9c6 <__floatsisf+0x48>
     9c2:	96 e9       	ldi	r25, 0x96	; 150
     9c4:	11 c0       	rjmp	.+34     	; 0x9e8 <__floatsisf+0x6a>
     9c6:	77 23       	and	r23, r23
     9c8:	21 f0       	breq	.+8      	; 0x9d2 <__floatsisf+0x54>
     9ca:	9e e8       	ldi	r25, 0x8E	; 142
     9cc:	87 2f       	mov	r24, r23
     9ce:	76 2f       	mov	r23, r22
     9d0:	05 c0       	rjmp	.+10     	; 0x9dc <__floatsisf+0x5e>
     9d2:	66 23       	and	r22, r22
     9d4:	71 f0       	breq	.+28     	; 0x9f2 <__floatsisf+0x74>
     9d6:	96 e8       	ldi	r25, 0x86	; 134
     9d8:	86 2f       	mov	r24, r22
     9da:	70 e0       	ldi	r23, 0x00	; 0
     9dc:	60 e0       	ldi	r22, 0x00	; 0
     9de:	2a f0       	brmi	.+10     	; 0x9ea <__floatsisf+0x6c>
     9e0:	9a 95       	dec	r25
     9e2:	66 0f       	add	r22, r22
     9e4:	77 1f       	adc	r23, r23
     9e6:	88 1f       	adc	r24, r24
     9e8:	da f7       	brpl	.-10     	; 0x9e0 <__floatsisf+0x62>
     9ea:	88 0f       	add	r24, r24
     9ec:	96 95       	lsr	r25
     9ee:	87 95       	ror	r24
     9f0:	97 f9       	bld	r25, 7
     9f2:	08 95       	ret

000009f4 <__fp_inf>:
     9f4:	97 f9       	bld	r25, 7
     9f6:	9f 67       	ori	r25, 0x7F	; 127
     9f8:	80 e8       	ldi	r24, 0x80	; 128
     9fa:	70 e0       	ldi	r23, 0x00	; 0
     9fc:	60 e0       	ldi	r22, 0x00	; 0
     9fe:	08 95       	ret

00000a00 <__fp_nan>:
     a00:	9f ef       	ldi	r25, 0xFF	; 255
     a02:	80 ec       	ldi	r24, 0xC0	; 192
     a04:	08 95       	ret

00000a06 <__fp_pscA>:
     a06:	00 24       	eor	r0, r0
     a08:	0a 94       	dec	r0
     a0a:	16 16       	cp	r1, r22
     a0c:	17 06       	cpc	r1, r23
     a0e:	18 06       	cpc	r1, r24
     a10:	09 06       	cpc	r0, r25
     a12:	08 95       	ret

00000a14 <__fp_pscB>:
     a14:	00 24       	eor	r0, r0
     a16:	0a 94       	dec	r0
     a18:	12 16       	cp	r1, r18
     a1a:	13 06       	cpc	r1, r19
     a1c:	14 06       	cpc	r1, r20
     a1e:	05 06       	cpc	r0, r21
     a20:	08 95       	ret

00000a22 <__fp_round>:
     a22:	09 2e       	mov	r0, r25
     a24:	03 94       	inc	r0
     a26:	00 0c       	add	r0, r0
     a28:	11 f4       	brne	.+4      	; 0xa2e <__fp_round+0xc>
     a2a:	88 23       	and	r24, r24
     a2c:	52 f0       	brmi	.+20     	; 0xa42 <__fp_round+0x20>
     a2e:	bb 0f       	add	r27, r27
     a30:	40 f4       	brcc	.+16     	; 0xa42 <__fp_round+0x20>
     a32:	bf 2b       	or	r27, r31
     a34:	11 f4       	brne	.+4      	; 0xa3a <__fp_round+0x18>
     a36:	60 ff       	sbrs	r22, 0
     a38:	04 c0       	rjmp	.+8      	; 0xa42 <__fp_round+0x20>
     a3a:	6f 5f       	subi	r22, 0xFF	; 255
     a3c:	7f 4f       	sbci	r23, 0xFF	; 255
     a3e:	8f 4f       	sbci	r24, 0xFF	; 255
     a40:	9f 4f       	sbci	r25, 0xFF	; 255
     a42:	08 95       	ret

00000a44 <__fp_split3>:
     a44:	57 fd       	sbrc	r21, 7
     a46:	90 58       	subi	r25, 0x80	; 128
     a48:	44 0f       	add	r20, r20
     a4a:	55 1f       	adc	r21, r21
     a4c:	59 f0       	breq	.+22     	; 0xa64 <__fp_splitA+0x10>
     a4e:	5f 3f       	cpi	r21, 0xFF	; 255
     a50:	71 f0       	breq	.+28     	; 0xa6e <__fp_splitA+0x1a>
     a52:	47 95       	ror	r20

00000a54 <__fp_splitA>:
     a54:	88 0f       	add	r24, r24
     a56:	97 fb       	bst	r25, 7
     a58:	99 1f       	adc	r25, r25
     a5a:	61 f0       	breq	.+24     	; 0xa74 <__fp_splitA+0x20>
     a5c:	9f 3f       	cpi	r25, 0xFF	; 255
     a5e:	79 f0       	breq	.+30     	; 0xa7e <__fp_splitA+0x2a>
     a60:	87 95       	ror	r24
     a62:	08 95       	ret
     a64:	12 16       	cp	r1, r18
     a66:	13 06       	cpc	r1, r19
     a68:	14 06       	cpc	r1, r20
     a6a:	55 1f       	adc	r21, r21
     a6c:	f2 cf       	rjmp	.-28     	; 0xa52 <__fp_split3+0xe>
     a6e:	46 95       	lsr	r20
     a70:	f1 df       	rcall	.-30     	; 0xa54 <__fp_splitA>
     a72:	08 c0       	rjmp	.+16     	; 0xa84 <__fp_splitA+0x30>
     a74:	16 16       	cp	r1, r22
     a76:	17 06       	cpc	r1, r23
     a78:	18 06       	cpc	r1, r24
     a7a:	99 1f       	adc	r25, r25
     a7c:	f1 cf       	rjmp	.-30     	; 0xa60 <__fp_splitA+0xc>
     a7e:	86 95       	lsr	r24
     a80:	71 05       	cpc	r23, r1
     a82:	61 05       	cpc	r22, r1
     a84:	08 94       	sec
     a86:	08 95       	ret

00000a88 <__fp_zero>:
     a88:	e8 94       	clt

00000a8a <__fp_szero>:
     a8a:	bb 27       	eor	r27, r27
     a8c:	66 27       	eor	r22, r22
     a8e:	77 27       	eor	r23, r23
     a90:	cb 01       	movw	r24, r22
     a92:	97 f9       	bld	r25, 7
     a94:	08 95       	ret

00000a96 <__gesf2>:
     a96:	03 d0       	rcall	.+6      	; 0xa9e <__fp_cmp>
     a98:	08 f4       	brcc	.+2      	; 0xa9c <__gesf2+0x6>
     a9a:	8f ef       	ldi	r24, 0xFF	; 255
     a9c:	08 95       	ret

00000a9e <__fp_cmp>:
     a9e:	99 0f       	add	r25, r25
     aa0:	00 08       	sbc	r0, r0
     aa2:	55 0f       	add	r21, r21
     aa4:	aa 0b       	sbc	r26, r26
     aa6:	e0 e8       	ldi	r30, 0x80	; 128
     aa8:	fe ef       	ldi	r31, 0xFE	; 254
     aaa:	16 16       	cp	r1, r22
     aac:	17 06       	cpc	r1, r23
     aae:	e8 07       	cpc	r30, r24
     ab0:	f9 07       	cpc	r31, r25
     ab2:	c0 f0       	brcs	.+48     	; 0xae4 <__fp_cmp+0x46>
     ab4:	12 16       	cp	r1, r18
     ab6:	13 06       	cpc	r1, r19
     ab8:	e4 07       	cpc	r30, r20
     aba:	f5 07       	cpc	r31, r21
     abc:	98 f0       	brcs	.+38     	; 0xae4 <__fp_cmp+0x46>
     abe:	62 1b       	sub	r22, r18
     ac0:	73 0b       	sbc	r23, r19
     ac2:	84 0b       	sbc	r24, r20
     ac4:	95 0b       	sbc	r25, r21
     ac6:	39 f4       	brne	.+14     	; 0xad6 <__fp_cmp+0x38>
     ac8:	0a 26       	eor	r0, r26
     aca:	61 f0       	breq	.+24     	; 0xae4 <__fp_cmp+0x46>
     acc:	23 2b       	or	r18, r19
     ace:	24 2b       	or	r18, r20
     ad0:	25 2b       	or	r18, r21
     ad2:	21 f4       	brne	.+8      	; 0xadc <__fp_cmp+0x3e>
     ad4:	08 95       	ret
     ad6:	0a 26       	eor	r0, r26
     ad8:	09 f4       	brne	.+2      	; 0xadc <__fp_cmp+0x3e>
     ada:	a1 40       	sbci	r26, 0x01	; 1
     adc:	a6 95       	lsr	r26
     ade:	8f ef       	ldi	r24, 0xFF	; 255
     ae0:	81 1d       	adc	r24, r1
     ae2:	81 1d       	adc	r24, r1
     ae4:	08 95       	ret

00000ae6 <_ZN14HardwareSerial9availableEv>:
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
     ae6:	fc 01       	movw	r30, r24
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
     ae8:	91 8d       	ldd	r25, Z+25	; 0x19
     aea:	22 8d       	ldd	r18, Z+26	; 0x1a
     aec:	89 2f       	mov	r24, r25
     aee:	90 e0       	ldi	r25, 0x00	; 0
     af0:	80 5c       	subi	r24, 0xC0	; 192
     af2:	9f 4f       	sbci	r25, 0xFF	; 255
     af4:	82 1b       	sub	r24, r18
     af6:	91 09       	sbc	r25, r1
}
     af8:	8f 73       	andi	r24, 0x3F	; 63
     afa:	99 27       	eor	r25, r25
     afc:	08 95       	ret

00000afe <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
     afe:	fc 01       	movw	r30, r24
  if (_rx_buffer_head == _rx_buffer_tail) {
     b00:	91 8d       	ldd	r25, Z+25	; 0x19
     b02:	82 8d       	ldd	r24, Z+26	; 0x1a
     b04:	98 17       	cp	r25, r24
     b06:	31 f0       	breq	.+12     	; 0xb14 <_ZN14HardwareSerial4peekEv+0x16>
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
     b08:	82 8d       	ldd	r24, Z+26	; 0x1a
     b0a:	e8 0f       	add	r30, r24
     b0c:	f1 1d       	adc	r31, r1
     b0e:	85 8d       	ldd	r24, Z+29	; 0x1d
     b10:	90 e0       	ldi	r25, 0x00	; 0
     b12:	08 95       	ret
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
     b14:	8f ef       	ldi	r24, 0xFF	; 255
     b16:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
     b18:	08 95       	ret

00000b1a <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
     b1a:	fc 01       	movw	r30, r24
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
     b1c:	91 8d       	ldd	r25, Z+25	; 0x19
     b1e:	82 8d       	ldd	r24, Z+26	; 0x1a
     b20:	98 17       	cp	r25, r24
     b22:	61 f0       	breq	.+24     	; 0xb3c <_ZN14HardwareSerial4readEv+0x22>
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
     b24:	82 8d       	ldd	r24, Z+26	; 0x1a
     b26:	df 01       	movw	r26, r30
     b28:	a8 0f       	add	r26, r24
     b2a:	b1 1d       	adc	r27, r1
     b2c:	5d 96       	adiw	r26, 0x1d	; 29
     b2e:	8c 91       	ld	r24, X
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
     b30:	92 8d       	ldd	r25, Z+26	; 0x1a
     b32:	9f 5f       	subi	r25, 0xFF	; 255
     b34:	9f 73       	andi	r25, 0x3F	; 63
     b36:	92 8f       	std	Z+26, r25	; 0x1a
    return c;
     b38:	90 e0       	ldi	r25, 0x00	; 0
     b3a:	08 95       	ret

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
     b3c:	8f ef       	ldi	r24, 0xFF	; 255
     b3e:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
     b40:	08 95       	ret

00000b42 <_ZN14HardwareSerial17availableForWriteEv>:
{
#if (SERIAL_TX_BUFFER_SIZE>256)
  uint8_t oldSREG = SREG;
  cli();
#endif
  tx_buffer_index_t head = _tx_buffer_head;
     b42:	fc 01       	movw	r30, r24
     b44:	53 8d       	ldd	r21, Z+27	; 0x1b
  tx_buffer_index_t tail = _tx_buffer_tail;
     b46:	44 8d       	ldd	r20, Z+28	; 0x1c
     b48:	25 2f       	mov	r18, r21
     b4a:	30 e0       	ldi	r19, 0x00	; 0
     b4c:	84 2f       	mov	r24, r20
     b4e:	90 e0       	ldi	r25, 0x00	; 0
#if (SERIAL_TX_BUFFER_SIZE>256)
  SREG = oldSREG;
#endif
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
     b50:	82 1b       	sub	r24, r18
     b52:	93 0b       	sbc	r25, r19
     b54:	54 17       	cp	r21, r20
     b56:	10 f0       	brcs	.+4      	; 0xb5c <_ZN14HardwareSerial17availableForWriteEv+0x1a>
     b58:	cf 96       	adiw	r24, 0x3f	; 63
     b5a:	08 95       	ret
  return tail - head - 1;
     b5c:	01 97       	sbiw	r24, 0x01	; 1
}
     b5e:	08 95       	ret

00000b60 <_Z14serialEventRunv>:
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
     b60:	86 e3       	ldi	r24, 0x36	; 54
     b62:	97 e0       	ldi	r25, 0x07	; 7
     b64:	89 2b       	or	r24, r25
     b66:	39 f0       	breq	.+14     	; 0xb76 <_Z14serialEventRunv+0x16>
     b68:	80 e0       	ldi	r24, 0x00	; 0
     b6a:	90 e0       	ldi	r25, 0x00	; 0
     b6c:	89 2b       	or	r24, r25
     b6e:	19 f0       	breq	.+6      	; 0xb76 <_Z14serialEventRunv+0x16>
     b70:	7d d1       	rcall	.+762    	; 0xe6c <_Z17Serial0_availablev>
     b72:	81 11       	cpse	r24, r1
#endif
#if defined(HAVE_HWSERIAL1)
  if (Serial1_available && serialEvent1 && Serial1_available()) serialEvent1();
     b74:	25 c0       	rjmp	.+74     	; 0xbc0 <_Z14serialEventRunv+0x60>
     b76:	80 e0       	ldi	r24, 0x00	; 0
     b78:	90 e0       	ldi	r25, 0x00	; 0
     b7a:	89 2b       	or	r24, r25
     b7c:	41 f0       	breq	.+16     	; 0xb8e <_Z14serialEventRunv+0x2e>
     b7e:	80 e0       	ldi	r24, 0x00	; 0
     b80:	90 e0       	ldi	r25, 0x00	; 0
     b82:	89 2b       	or	r24, r25
     b84:	21 f0       	breq	.+8      	; 0xb8e <_Z14serialEventRunv+0x2e>
     b86:	0e 94 00 00 	call	0	; 0x0 <__vectors>
     b8a:	81 11       	cpse	r24, r1
#endif
#if defined(HAVE_HWSERIAL2)
  if (Serial2_available && serialEvent2 && Serial2_available()) serialEvent2();
     b8c:	1c c0       	rjmp	.+56     	; 0xbc6 <_Z14serialEventRunv+0x66>
     b8e:	80 e0       	ldi	r24, 0x00	; 0
     b90:	90 e0       	ldi	r25, 0x00	; 0
     b92:	89 2b       	or	r24, r25
     b94:	41 f0       	breq	.+16     	; 0xba6 <_Z14serialEventRunv+0x46>
     b96:	80 e0       	ldi	r24, 0x00	; 0
     b98:	90 e0       	ldi	r25, 0x00	; 0
     b9a:	89 2b       	or	r24, r25
     b9c:	21 f0       	breq	.+8      	; 0xba6 <_Z14serialEventRunv+0x46>
     b9e:	0e 94 00 00 	call	0	; 0x0 <__vectors>
     ba2:	81 11       	cpse	r24, r1
#endif
#if defined(HAVE_HWSERIAL3)
  if (Serial3_available && serialEvent3 && Serial3_available()) serialEvent3();
     ba4:	13 c0       	rjmp	.+38     	; 0xbcc <_Z14serialEventRunv+0x6c>
     ba6:	80 e0       	ldi	r24, 0x00	; 0
     ba8:	90 e0       	ldi	r25, 0x00	; 0
     baa:	89 2b       	or	r24, r25
     bac:	a1 f0       	breq	.+40     	; 0xbd6 <_Z14serialEventRunv+0x76>
     bae:	80 e0       	ldi	r24, 0x00	; 0
     bb0:	90 e0       	ldi	r25, 0x00	; 0
     bb2:	89 2b       	or	r24, r25
     bb4:	81 f0       	breq	.+32     	; 0xbd6 <_Z14serialEventRunv+0x76>
     bb6:	0e 94 00 00 	call	0	; 0x0 <__vectors>
     bba:	81 11       	cpse	r24, r1
     bbc:	0a c0       	rjmp	.+20     	; 0xbd2 <_Z14serialEventRunv+0x72>
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
     bbe:	08 95       	ret
     bc0:	0e 94 00 00 	call	0	; 0x0 <__vectors>
#endif
#if defined(HAVE_HWSERIAL1)
  if (Serial1_available && serialEvent1 && Serial1_available()) serialEvent1();
     bc4:	d8 cf       	rjmp	.-80     	; 0xb76 <_Z14serialEventRunv+0x16>
     bc6:	0e 94 00 00 	call	0	; 0x0 <__vectors>
#endif
#if defined(HAVE_HWSERIAL2)
  if (Serial2_available && serialEvent2 && Serial2_available()) serialEvent2();
     bca:	e1 cf       	rjmp	.-62     	; 0xb8e <_Z14serialEventRunv+0x2e>
     bcc:	0e 94 00 00 	call	0	; 0x0 <__vectors>
#endif
#if defined(HAVE_HWSERIAL3)
  if (Serial3_available && serialEvent3 && Serial3_available()) serialEvent3();
     bd0:	ea cf       	rjmp	.-44     	; 0xba6 <_Z14serialEventRunv+0x46>
     bd2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
     bd6:	08 95       	ret

00000bd8 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
}

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
     bd8:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
     bda:	84 8d       	ldd	r24, Z+28	; 0x1c
     bdc:	df 01       	movw	r26, r30
     bde:	a8 0f       	add	r26, r24
     be0:	b1 1d       	adc	r27, r1
     be2:	a3 5a       	subi	r26, 0xA3	; 163
     be4:	bf 4f       	sbci	r27, 0xFF	; 255
     be6:	2c 91       	ld	r18, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
     be8:	84 8d       	ldd	r24, Z+28	; 0x1c
     bea:	90 e0       	ldi	r25, 0x00	; 0
     bec:	01 96       	adiw	r24, 0x01	; 1
     bee:	8f 73       	andi	r24, 0x3F	; 63
     bf0:	99 27       	eor	r25, r25
     bf2:	84 8f       	std	Z+28, r24	; 0x1c

  *_udr = c;
     bf4:	a6 89       	ldd	r26, Z+22	; 0x16
     bf6:	b7 89       	ldd	r27, Z+23	; 0x17
     bf8:	2c 93       	st	X, r18

  // clear the TXC bit -- "can be cleared by writing a one to its bit
  // location". This makes sure flush() won't return until the bytes
  // actually got written
  sbi(*_ucsra, TXC0);
     bfa:	a0 89       	ldd	r26, Z+16	; 0x10
     bfc:	b1 89       	ldd	r27, Z+17	; 0x11
     bfe:	8c 91       	ld	r24, X
     c00:	80 64       	ori	r24, 0x40	; 64
     c02:	8c 93       	st	X, r24

  if (_tx_buffer_head == _tx_buffer_tail) {
     c04:	93 8d       	ldd	r25, Z+27	; 0x1b
     c06:	84 8d       	ldd	r24, Z+28	; 0x1c
     c08:	98 13       	cpse	r25, r24
     c0a:	06 c0       	rjmp	.+12     	; 0xc18 <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x40>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
     c0c:	02 88       	ldd	r0, Z+18	; 0x12
     c0e:	f3 89       	ldd	r31, Z+19	; 0x13
     c10:	e0 2d       	mov	r30, r0
     c12:	80 81       	ld	r24, Z
     c14:	8f 7d       	andi	r24, 0xDF	; 223
     c16:	80 83       	st	Z, r24
     c18:	08 95       	ret

00000c1a <_ZN14HardwareSerial5writeEh>:
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}

size_t HardwareSerial::write(uint8_t c)
{
     c1a:	ef 92       	push	r14
     c1c:	ff 92       	push	r15
     c1e:	0f 93       	push	r16
     c20:	1f 93       	push	r17
     c22:	cf 93       	push	r28
     c24:	df 93       	push	r29
     c26:	ec 01       	movw	r28, r24
  _written = true;
     c28:	81 e0       	ldi	r24, 0x01	; 1
     c2a:	88 8f       	std	Y+24, r24	; 0x18
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
     c2c:	9b 8d       	ldd	r25, Y+27	; 0x1b
     c2e:	8c 8d       	ldd	r24, Y+28	; 0x1c
     c30:	98 13       	cpse	r25, r24
     c32:	05 c0       	rjmp	.+10     	; 0xc3e <_ZN14HardwareSerial5writeEh+0x24>
     c34:	e8 89       	ldd	r30, Y+16	; 0x10
     c36:	f9 89       	ldd	r31, Y+17	; 0x11
     c38:	80 81       	ld	r24, Z
     c3a:	85 fd       	sbrc	r24, 5
     c3c:	23 c0       	rjmp	.+70     	; 0xc84 <_ZN14HardwareSerial5writeEh+0x6a>
     c3e:	f6 2e       	mov	r15, r22
    *_udr = c;
    sbi(*_ucsra, TXC0);
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
     c40:	0b 8d       	ldd	r16, Y+27	; 0x1b
     c42:	10 e0       	ldi	r17, 0x00	; 0
     c44:	0f 5f       	subi	r16, 0xFF	; 255
     c46:	1f 4f       	sbci	r17, 0xFF	; 255
     c48:	0f 73       	andi	r16, 0x3F	; 63
     c4a:	11 27       	eor	r17, r17
     c4c:	e0 2e       	mov	r14, r16
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
     c4e:	8c 8d       	ldd	r24, Y+28	; 0x1c
     c50:	e8 12       	cpse	r14, r24
     c52:	0b c0       	rjmp	.+22     	; 0xc6a <_ZN14HardwareSerial5writeEh+0x50>
    if (bit_is_clear(SREG, SREG_I)) {
     c54:	0f b6       	in	r0, 0x3f	; 63
     c56:	07 fc       	sbrc	r0, 7
     c58:	fa cf       	rjmp	.-12     	; 0xc4e <_ZN14HardwareSerial5writeEh+0x34>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
     c5a:	e8 89       	ldd	r30, Y+16	; 0x10
     c5c:	f9 89       	ldd	r31, Y+17	; 0x11
     c5e:	80 81       	ld	r24, Z
     c60:	85 ff       	sbrs	r24, 5
     c62:	f5 cf       	rjmp	.-22     	; 0xc4e <_ZN14HardwareSerial5writeEh+0x34>
	_tx_udr_empty_irq();
     c64:	ce 01       	movw	r24, r28
     c66:	b8 df       	rcall	.-144    	; 0xbd8 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
     c68:	f2 cf       	rjmp	.-28     	; 0xc4e <_ZN14HardwareSerial5writeEh+0x34>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
     c6a:	8b 8d       	ldd	r24, Y+27	; 0x1b
     c6c:	fe 01       	movw	r30, r28
     c6e:	e8 0f       	add	r30, r24
     c70:	f1 1d       	adc	r31, r1
     c72:	e3 5a       	subi	r30, 0xA3	; 163
     c74:	ff 4f       	sbci	r31, 0xFF	; 255
     c76:	f0 82       	st	Z, r15
  _tx_buffer_head = i;
     c78:	0b 8f       	std	Y+27, r16	; 0x1b
	
  sbi(*_ucsrb, UDRIE0);
     c7a:	ea 89       	ldd	r30, Y+18	; 0x12
     c7c:	fb 89       	ldd	r31, Y+19	; 0x13
     c7e:	80 81       	ld	r24, Z
     c80:	80 62       	ori	r24, 0x20	; 32
     c82:	07 c0       	rjmp	.+14     	; 0xc92 <_ZN14HardwareSerial5writeEh+0x78>
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    *_udr = c;
     c84:	ee 89       	ldd	r30, Y+22	; 0x16
     c86:	ff 89       	ldd	r31, Y+23	; 0x17
     c88:	60 83       	st	Z, r22
    sbi(*_ucsra, TXC0);
     c8a:	e8 89       	ldd	r30, Y+16	; 0x10
     c8c:	f9 89       	ldd	r31, Y+17	; 0x11
     c8e:	80 81       	ld	r24, Z
     c90:	80 64       	ori	r24, 0x40	; 64
     c92:	80 83       	st	Z, r24
  _tx_buffer_head = i;
	
  sbi(*_ucsrb, UDRIE0);
  
  return 1;
}
     c94:	81 e0       	ldi	r24, 0x01	; 1
     c96:	90 e0       	ldi	r25, 0x00	; 0
     c98:	df 91       	pop	r29
     c9a:	cf 91       	pop	r28
     c9c:	1f 91       	pop	r17
     c9e:	0f 91       	pop	r16
     ca0:	ff 90       	pop	r15
     ca2:	ef 90       	pop	r14
     ca4:	08 95       	ret

00000ca6 <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
     ca6:	cf 93       	push	r28
     ca8:	df 93       	push	r29
     caa:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
     cac:	88 8d       	ldd	r24, Y+24	; 0x18
     cae:	88 23       	and	r24, r24
     cb0:	c1 f0       	breq	.+48     	; 0xce2 <_ZN14HardwareSerial5flushEv+0x3c>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
     cb2:	ea 89       	ldd	r30, Y+18	; 0x12
     cb4:	fb 89       	ldd	r31, Y+19	; 0x13
     cb6:	80 81       	ld	r24, Z
     cb8:	85 fd       	sbrc	r24, 5
     cba:	05 c0       	rjmp	.+10     	; 0xcc6 <_ZN14HardwareSerial5flushEv+0x20>
     cbc:	a8 89       	ldd	r26, Y+16	; 0x10
     cbe:	b9 89       	ldd	r27, Y+17	; 0x11
     cc0:	8c 91       	ld	r24, X
     cc2:	86 fd       	sbrc	r24, 6
     cc4:	0e c0       	rjmp	.+28     	; 0xce2 <_ZN14HardwareSerial5flushEv+0x3c>
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
     cc6:	0f b6       	in	r0, 0x3f	; 63
     cc8:	07 fc       	sbrc	r0, 7
     cca:	f5 cf       	rjmp	.-22     	; 0xcb6 <_ZN14HardwareSerial5flushEv+0x10>
     ccc:	80 81       	ld	r24, Z
     cce:	85 ff       	sbrs	r24, 5
     cd0:	f2 cf       	rjmp	.-28     	; 0xcb6 <_ZN14HardwareSerial5flushEv+0x10>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
     cd2:	a8 89       	ldd	r26, Y+16	; 0x10
     cd4:	b9 89       	ldd	r27, Y+17	; 0x11
     cd6:	8c 91       	ld	r24, X
     cd8:	85 ff       	sbrs	r24, 5
     cda:	ed cf       	rjmp	.-38     	; 0xcb6 <_ZN14HardwareSerial5flushEv+0x10>
	  _tx_udr_empty_irq();
     cdc:	ce 01       	movw	r24, r28
     cde:	7c df       	rcall	.-264    	; 0xbd8 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
     ce0:	e8 cf       	rjmp	.-48     	; 0xcb2 <_ZN14HardwareSerial5flushEv+0xc>
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
     ce2:	df 91       	pop	r29
     ce4:	cf 91       	pop	r28
     ce6:	08 95       	ret

00000ce8 <_ZN14HardwareSerial5beginEmh>:
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
     ce8:	cf 92       	push	r12
     cea:	df 92       	push	r13
     cec:	ef 92       	push	r14
     cee:	ff 92       	push	r15
     cf0:	1f 93       	push	r17
     cf2:	cf 93       	push	r28
     cf4:	df 93       	push	r29
     cf6:	ec 01       	movw	r28, r24
     cf8:	6a 01       	movw	r12, r20
     cfa:	7b 01       	movw	r14, r22
     cfc:	12 2f       	mov	r17, r18
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
     cfe:	e8 89       	ldd	r30, Y+16	; 0x10
     d00:	f9 89       	ldd	r31, Y+17	; 0x11
     d02:	82 e0       	ldi	r24, 0x02	; 2
     d04:	80 83       	st	Z, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
     d06:	41 15       	cp	r20, r1
     d08:	51 4e       	sbci	r21, 0xE1	; 225
     d0a:	61 05       	cpc	r22, r1
     d0c:	71 05       	cpc	r23, r1
     d0e:	a9 f0       	breq	.+42     	; 0xd3a <_ZN14HardwareSerial5beginEmh+0x52>
// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
     d10:	60 e0       	ldi	r22, 0x00	; 0
     d12:	79 e0       	ldi	r23, 0x09	; 9
     d14:	8d e3       	ldi	r24, 0x3D	; 61
     d16:	90 e0       	ldi	r25, 0x00	; 0
     d18:	a7 01       	movw	r20, r14
     d1a:	96 01       	movw	r18, r12
     d1c:	1a d6       	rcall	.+3124   	; 0x1952 <__udivmodsi4>
     d1e:	da 01       	movw	r26, r20
     d20:	c9 01       	movw	r24, r18
     d22:	01 97       	sbiw	r24, 0x01	; 1
     d24:	a1 09       	sbc	r26, r1
     d26:	b1 09       	sbc	r27, r1
     d28:	b6 95       	lsr	r27
     d2a:	a7 95       	ror	r26
     d2c:	97 95       	ror	r25
     d2e:	87 95       	ror	r24
     d30:	9c 01       	movw	r18, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
     d32:	21 15       	cp	r18, r1
     d34:	80 e1       	ldi	r24, 0x10	; 16
     d36:	38 07       	cpc	r19, r24
     d38:	a0 f0       	brcs	.+40     	; 0xd62 <_ZN14HardwareSerial5beginEmh+0x7a>
  {
    *_ucsra = 0;
     d3a:	e8 89       	ldd	r30, Y+16	; 0x10
     d3c:	f9 89       	ldd	r31, Y+17	; 0x11
     d3e:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
     d40:	60 e8       	ldi	r22, 0x80	; 128
     d42:	74 e8       	ldi	r23, 0x84	; 132
     d44:	8e e1       	ldi	r24, 0x1E	; 30
     d46:	90 e0       	ldi	r25, 0x00	; 0
     d48:	a7 01       	movw	r20, r14
     d4a:	96 01       	movw	r18, r12
     d4c:	02 d6       	rcall	.+3076   	; 0x1952 <__udivmodsi4>
     d4e:	da 01       	movw	r26, r20
     d50:	c9 01       	movw	r24, r18
     d52:	01 97       	sbiw	r24, 0x01	; 1
     d54:	a1 09       	sbc	r26, r1
     d56:	b1 09       	sbc	r27, r1
     d58:	b6 95       	lsr	r27
     d5a:	a7 95       	ror	r26
     d5c:	97 95       	ror	r25
     d5e:	87 95       	ror	r24
     d60:	9c 01       	movw	r18, r24
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
     d62:	ec 85       	ldd	r30, Y+12	; 0x0c
     d64:	fd 85       	ldd	r31, Y+13	; 0x0d
     d66:	30 83       	st	Z, r19
  *_ubrrl = baud_setting;
     d68:	ee 85       	ldd	r30, Y+14	; 0x0e
     d6a:	ff 85       	ldd	r31, Y+15	; 0x0f
     d6c:	20 83       	st	Z, r18

  _written = false;
     d6e:	18 8e       	std	Y+24, r1	; 0x18

  //set the data bits, parity, and stop bits
#if defined(__AVR_ATmega8__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
     d70:	ec 89       	ldd	r30, Y+20	; 0x14
     d72:	fd 89       	ldd	r31, Y+21	; 0x15
     d74:	10 83       	st	Z, r17
  
  sbi(*_ucsrb, RXEN0);
     d76:	ea 89       	ldd	r30, Y+18	; 0x12
     d78:	fb 89       	ldd	r31, Y+19	; 0x13
     d7a:	80 81       	ld	r24, Z
     d7c:	80 61       	ori	r24, 0x10	; 16
     d7e:	80 83       	st	Z, r24
  sbi(*_ucsrb, TXEN0);
     d80:	ea 89       	ldd	r30, Y+18	; 0x12
     d82:	fb 89       	ldd	r31, Y+19	; 0x13
     d84:	80 81       	ld	r24, Z
     d86:	88 60       	ori	r24, 0x08	; 8
     d88:	80 83       	st	Z, r24
  sbi(*_ucsrb, RXCIE0);
     d8a:	ea 89       	ldd	r30, Y+18	; 0x12
     d8c:	fb 89       	ldd	r31, Y+19	; 0x13
     d8e:	80 81       	ld	r24, Z
     d90:	80 68       	ori	r24, 0x80	; 128
     d92:	80 83       	st	Z, r24
  cbi(*_ucsrb, UDRIE0);
     d94:	ea 89       	ldd	r30, Y+18	; 0x12
     d96:	fb 89       	ldd	r31, Y+19	; 0x13
     d98:	80 81       	ld	r24, Z
     d9a:	8f 7d       	andi	r24, 0xDF	; 223
     d9c:	80 83       	st	Z, r24
}
     d9e:	df 91       	pop	r29
     da0:	cf 91       	pop	r28
     da2:	1f 91       	pop	r17
     da4:	ff 90       	pop	r15
     da6:	ef 90       	pop	r14
     da8:	df 90       	pop	r13
     daa:	cf 90       	pop	r12
     dac:	08 95       	ret

00000dae <__vector_25>:
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
     dae:	1f 92       	push	r1
     db0:	0f 92       	push	r0
     db2:	0f b6       	in	r0, 0x3f	; 63
     db4:	0f 92       	push	r0
     db6:	11 24       	eor	r1, r1
     db8:	0b b6       	in	r0, 0x3b	; 59
     dba:	0f 92       	push	r0
     dbc:	2f 93       	push	r18
     dbe:	8f 93       	push	r24
     dc0:	9f 93       	push	r25
     dc2:	ef 93       	push	r30
     dc4:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
     dc6:	e0 91 4e 02 	lds	r30, 0x024E	; 0x80024e <Serial+0x10>
     dca:	f0 91 4f 02 	lds	r31, 0x024F	; 0x80024f <Serial+0x11>
     dce:	80 81       	ld	r24, Z
     dd0:	e0 91 54 02 	lds	r30, 0x0254	; 0x800254 <Serial+0x16>
     dd4:	f0 91 55 02 	lds	r31, 0x0255	; 0x800255 <Serial+0x17>
     dd8:	82 fd       	sbrc	r24, 2
     dda:	12 c0       	rjmp	.+36     	; 0xe00 <__vector_25+0x52>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
     ddc:	90 81       	ld	r25, Z
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
     dde:	80 91 57 02 	lds	r24, 0x0257	; 0x800257 <Serial+0x19>
     de2:	8f 5f       	subi	r24, 0xFF	; 255
     de4:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
     de6:	20 91 58 02 	lds	r18, 0x0258	; 0x800258 <Serial+0x1a>
     dea:	82 17       	cp	r24, r18
     dec:	51 f0       	breq	.+20     	; 0xe02 <__vector_25+0x54>
      _rx_buffer[_rx_buffer_head] = c;
     dee:	e0 91 57 02 	lds	r30, 0x0257	; 0x800257 <Serial+0x19>
     df2:	f0 e0       	ldi	r31, 0x00	; 0
     df4:	e2 5c       	subi	r30, 0xC2	; 194
     df6:	fd 4f       	sbci	r31, 0xFD	; 253
     df8:	95 8f       	std	Z+29, r25	; 0x1d
      _rx_buffer_head = i;
     dfa:	80 93 57 02 	sts	0x0257, r24	; 0x800257 <Serial+0x19>
     dfe:	01 c0       	rjmp	.+2      	; 0xe02 <__vector_25+0x54>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
     e00:	80 81       	ld	r24, Z
    Serial._rx_complete_irq();
  }
     e02:	ff 91       	pop	r31
     e04:	ef 91       	pop	r30
     e06:	9f 91       	pop	r25
     e08:	8f 91       	pop	r24
     e0a:	2f 91       	pop	r18
     e0c:	0f 90       	pop	r0
     e0e:	0b be       	out	0x3b, r0	; 59
     e10:	0f 90       	pop	r0
     e12:	0f be       	out	0x3f, r0	; 63
     e14:	0f 90       	pop	r0
     e16:	1f 90       	pop	r1
     e18:	18 95       	reti

00000e1a <__vector_26>:
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
     e1a:	1f 92       	push	r1
     e1c:	0f 92       	push	r0
     e1e:	0f b6       	in	r0, 0x3f	; 63
     e20:	0f 92       	push	r0
     e22:	11 24       	eor	r1, r1
     e24:	0b b6       	in	r0, 0x3b	; 59
     e26:	0f 92       	push	r0
     e28:	2f 93       	push	r18
     e2a:	3f 93       	push	r19
     e2c:	4f 93       	push	r20
     e2e:	5f 93       	push	r21
     e30:	6f 93       	push	r22
     e32:	7f 93       	push	r23
     e34:	8f 93       	push	r24
     e36:	9f 93       	push	r25
     e38:	af 93       	push	r26
     e3a:	bf 93       	push	r27
     e3c:	ef 93       	push	r30
     e3e:	ff 93       	push	r31
  Serial._tx_udr_empty_irq();
     e40:	8e e3       	ldi	r24, 0x3E	; 62
     e42:	92 e0       	ldi	r25, 0x02	; 2
     e44:	c9 de       	rcall	.-622    	; 0xbd8 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
     e46:	ff 91       	pop	r31
     e48:	ef 91       	pop	r30
     e4a:	bf 91       	pop	r27
     e4c:	af 91       	pop	r26
     e4e:	9f 91       	pop	r25
     e50:	8f 91       	pop	r24
     e52:	7f 91       	pop	r23
     e54:	6f 91       	pop	r22
     e56:	5f 91       	pop	r21
     e58:	4f 91       	pop	r20
     e5a:	3f 91       	pop	r19
     e5c:	2f 91       	pop	r18
     e5e:	0f 90       	pop	r0
     e60:	0b be       	out	0x3b, r0	; 59
     e62:	0f 90       	pop	r0
     e64:	0f be       	out	0x3f, r0	; 63
     e66:	0f 90       	pop	r0
     e68:	1f 90       	pop	r1
     e6a:	18 95       	reti

00000e6c <_Z17Serial0_availablev>:
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
     e6c:	8e e3       	ldi	r24, 0x3E	; 62
     e6e:	92 e0       	ldi	r25, 0x02	; 2
     e70:	3a de       	rcall	.-908    	; 0xae6 <_ZN14HardwareSerial9availableEv>
     e72:	21 e0       	ldi	r18, 0x01	; 1
     e74:	89 2b       	or	r24, r25
     e76:	09 f4       	brne	.+2      	; 0xe7a <_Z17Serial0_availablev+0xe>
     e78:	20 e0       	ldi	r18, 0x00	; 0
}
     e7a:	82 2f       	mov	r24, r18
     e7c:	08 95       	ret

00000e7e <_GLOBAL__sub_I___vector_25>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
     e7e:	ee e3       	ldi	r30, 0x3E	; 62
     e80:	f2 e0       	ldi	r31, 0x02	; 2
     e82:	13 82       	std	Z+3, r1	; 0x03
     e84:	12 82       	std	Z+2, r1	; 0x02
  public:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;

    Stream() {_timeout=1000;}
     e86:	88 ee       	ldi	r24, 0xE8	; 232
     e88:	93 e0       	ldi	r25, 0x03	; 3
     e8a:	a0 e0       	ldi	r26, 0x00	; 0
     e8c:	b0 e0       	ldi	r27, 0x00	; 0
     e8e:	84 83       	std	Z+4, r24	; 0x04
     e90:	95 83       	std	Z+5, r25	; 0x05
     e92:	a6 83       	std	Z+6, r26	; 0x06
     e94:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
     e96:	85 e1       	ldi	r24, 0x15	; 21
     e98:	92 e0       	ldi	r25, 0x02	; 2
     e9a:	91 83       	std	Z+1, r25	; 0x01
     e9c:	80 83       	st	Z, r24
     e9e:	85 ec       	ldi	r24, 0xC5	; 197
     ea0:	90 e0       	ldi	r25, 0x00	; 0
     ea2:	95 87       	std	Z+13, r25	; 0x0d
     ea4:	84 87       	std	Z+12, r24	; 0x0c
     ea6:	84 ec       	ldi	r24, 0xC4	; 196
     ea8:	90 e0       	ldi	r25, 0x00	; 0
     eaa:	97 87       	std	Z+15, r25	; 0x0f
     eac:	86 87       	std	Z+14, r24	; 0x0e
     eae:	80 ec       	ldi	r24, 0xC0	; 192
     eb0:	90 e0       	ldi	r25, 0x00	; 0
     eb2:	91 8b       	std	Z+17, r25	; 0x11
     eb4:	80 8b       	std	Z+16, r24	; 0x10
     eb6:	81 ec       	ldi	r24, 0xC1	; 193
     eb8:	90 e0       	ldi	r25, 0x00	; 0
     eba:	93 8b       	std	Z+19, r25	; 0x13
     ebc:	82 8b       	std	Z+18, r24	; 0x12
     ebe:	82 ec       	ldi	r24, 0xC2	; 194
     ec0:	90 e0       	ldi	r25, 0x00	; 0
     ec2:	95 8b       	std	Z+21, r25	; 0x15
     ec4:	84 8b       	std	Z+20, r24	; 0x14
     ec6:	86 ec       	ldi	r24, 0xC6	; 198
     ec8:	90 e0       	ldi	r25, 0x00	; 0
     eca:	97 8b       	std	Z+23, r25	; 0x17
     ecc:	86 8b       	std	Z+22, r24	; 0x16
     ece:	11 8e       	std	Z+25, r1	; 0x19
     ed0:	12 8e       	std	Z+26, r1	; 0x1a
     ed2:	13 8e       	std	Z+27, r1	; 0x1b
     ed4:	14 8e       	std	Z+28, r1	; 0x1c
     ed6:	08 95       	ret

00000ed8 <initVariant>:
     ed8:	08 95       	ret

00000eda <main>:
     eda:	37 d2       	rcall	.+1134   	; 0x134a <init>
     edc:	fd df       	rcall	.-6      	; 0xed8 <initVariant>
     ede:	f4 d9       	rcall	.-3096   	; 0x2c8 <setup>
     ee0:	c0 eb       	ldi	r28, 0xB0	; 176
     ee2:	d5 e0       	ldi	r29, 0x05	; 5
     ee4:	ff d9       	rcall	.-3074   	; 0x2e4 <loop>
     ee6:	20 97       	sbiw	r28, 0x00	; 0
     ee8:	e9 f3       	breq	.-6      	; 0xee4 <main+0xa>
     eea:	3a de       	rcall	.-908    	; 0xb60 <_Z14serialEventRunv>
     eec:	fb cf       	rjmp	.-10     	; 0xee4 <main+0xa>

00000eee <_ZN5Print5writeEPKhj>:
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
     eee:	cf 92       	push	r12
     ef0:	df 92       	push	r13
     ef2:	ef 92       	push	r14
     ef4:	ff 92       	push	r15
     ef6:	0f 93       	push	r16
     ef8:	1f 93       	push	r17
     efa:	cf 93       	push	r28
     efc:	df 93       	push	r29
     efe:	6c 01       	movw	r12, r24
     f00:	7a 01       	movw	r14, r20
     f02:	8b 01       	movw	r16, r22
     f04:	c0 e0       	ldi	r28, 0x00	; 0
     f06:	d0 e0       	ldi	r29, 0x00	; 0
     f08:	ce 15       	cp	r28, r14
     f0a:	df 05       	cpc	r29, r15
     f0c:	81 f0       	breq	.+32     	; 0xf2e <_ZN5Print5writeEPKhj+0x40>
     f0e:	d8 01       	movw	r26, r16
     f10:	6d 91       	ld	r22, X+
     f12:	8d 01       	movw	r16, r26
     f14:	d6 01       	movw	r26, r12
     f16:	ed 91       	ld	r30, X+
     f18:	fc 91       	ld	r31, X
     f1a:	01 90       	ld	r0, Z+
     f1c:	f0 81       	ld	r31, Z
     f1e:	e0 2d       	mov	r30, r0
     f20:	c6 01       	movw	r24, r12
     f22:	19 95       	eicall
     f24:	89 2b       	or	r24, r25
     f26:	11 f0       	breq	.+4      	; 0xf2c <_ZN5Print5writeEPKhj+0x3e>
     f28:	21 96       	adiw	r28, 0x01	; 1
     f2a:	ee cf       	rjmp	.-36     	; 0xf08 <_ZN5Print5writeEPKhj+0x1a>
     f2c:	7e 01       	movw	r14, r28
     f2e:	c7 01       	movw	r24, r14
     f30:	df 91       	pop	r29
     f32:	cf 91       	pop	r28
     f34:	1f 91       	pop	r17
     f36:	0f 91       	pop	r16
     f38:	ff 90       	pop	r15
     f3a:	ef 90       	pop	r14
     f3c:	df 90       	pop	r13
     f3e:	cf 90       	pop	r12
     f40:	08 95       	ret

00000f42 <_ZN5Print5writeEPKc>:
     f42:	61 15       	cp	r22, r1
     f44:	71 05       	cpc	r23, r1
     f46:	79 f0       	breq	.+30     	; 0xf66 <_ZN5Print5writeEPKc+0x24>
     f48:	fb 01       	movw	r30, r22
     f4a:	01 90       	ld	r0, Z+
     f4c:	00 20       	and	r0, r0
     f4e:	e9 f7       	brne	.-6      	; 0xf4a <_ZN5Print5writeEPKc+0x8>
     f50:	31 97       	sbiw	r30, 0x01	; 1
     f52:	af 01       	movw	r20, r30
     f54:	46 1b       	sub	r20, r22
     f56:	57 0b       	sbc	r21, r23
     f58:	dc 01       	movw	r26, r24
     f5a:	ed 91       	ld	r30, X+
     f5c:	fc 91       	ld	r31, X
     f5e:	02 80       	ldd	r0, Z+2	; 0x02
     f60:	f3 81       	ldd	r31, Z+3	; 0x03
     f62:	e0 2d       	mov	r30, r0
     f64:	19 94       	eijmp
     f66:	80 e0       	ldi	r24, 0x00	; 0
     f68:	90 e0       	ldi	r25, 0x00	; 0
     f6a:	08 95       	ret

00000f6c <_ZN5Print5printEc>:
     f6c:	dc 01       	movw	r26, r24
     f6e:	ed 91       	ld	r30, X+
     f70:	fc 91       	ld	r31, X
     f72:	01 90       	ld	r0, Z+
     f74:	f0 81       	ld	r31, Z
     f76:	e0 2d       	mov	r30, r0
     f78:	19 94       	eijmp

00000f7a <_ZN5Print7printlnEv>:
     f7a:	63 e2       	ldi	r22, 0x23	; 35
     f7c:	72 e0       	ldi	r23, 0x02	; 2
     f7e:	e1 cf       	rjmp	.-62     	; 0xf42 <_ZN5Print5writeEPKc>

00000f80 <_ZN5Print7printlnEPKc>:
     f80:	0f 93       	push	r16
     f82:	1f 93       	push	r17
     f84:	cf 93       	push	r28
     f86:	df 93       	push	r29
     f88:	ec 01       	movw	r28, r24
     f8a:	db df       	rcall	.-74     	; 0xf42 <_ZN5Print5writeEPKc>
     f8c:	8c 01       	movw	r16, r24
     f8e:	ce 01       	movw	r24, r28
     f90:	f4 df       	rcall	.-24     	; 0xf7a <_ZN5Print7printlnEv>
     f92:	80 0f       	add	r24, r16
     f94:	91 1f       	adc	r25, r17
     f96:	df 91       	pop	r29
     f98:	cf 91       	pop	r28
     f9a:	1f 91       	pop	r17
     f9c:	0f 91       	pop	r16
     f9e:	08 95       	ret

00000fa0 <_ZN5Print11printNumberEmh>:
     fa0:	8f 92       	push	r8
     fa2:	9f 92       	push	r9
     fa4:	af 92       	push	r10
     fa6:	bf 92       	push	r11
     fa8:	ef 92       	push	r14
     faa:	ff 92       	push	r15
     fac:	0f 93       	push	r16
     fae:	1f 93       	push	r17
     fb0:	cf 93       	push	r28
     fb2:	df 93       	push	r29
     fb4:	cd b7       	in	r28, 0x3d	; 61
     fb6:	de b7       	in	r29, 0x3e	; 62
     fb8:	a1 97       	sbiw	r28, 0x21	; 33
     fba:	0f b6       	in	r0, 0x3f	; 63
     fbc:	f8 94       	cli
     fbe:	de bf       	out	0x3e, r29	; 62
     fc0:	0f be       	out	0x3f, r0	; 63
     fc2:	cd bf       	out	0x3d, r28	; 61
     fc4:	7c 01       	movw	r14, r24
     fc6:	fa 01       	movw	r30, r20
     fc8:	cb 01       	movw	r24, r22
     fca:	19 a2       	std	Y+33, r1	; 0x21
     fcc:	22 30       	cpi	r18, 0x02	; 2
     fce:	08 f4       	brcc	.+2      	; 0xfd2 <_ZN5Print11printNumberEmh+0x32>
     fd0:	2a e0       	ldi	r18, 0x0A	; 10
     fd2:	8e 01       	movw	r16, r28
     fd4:	0f 5d       	subi	r16, 0xDF	; 223
     fd6:	1f 4f       	sbci	r17, 0xFF	; 255
     fd8:	82 2e       	mov	r8, r18
     fda:	91 2c       	mov	r9, r1
     fdc:	a1 2c       	mov	r10, r1
     fde:	b1 2c       	mov	r11, r1
     fe0:	bf 01       	movw	r22, r30
     fe2:	a5 01       	movw	r20, r10
     fe4:	94 01       	movw	r18, r8
     fe6:	b5 d4       	rcall	.+2410   	; 0x1952 <__udivmodsi4>
     fe8:	f9 01       	movw	r30, r18
     fea:	ca 01       	movw	r24, r20
     fec:	01 50       	subi	r16, 0x01	; 1
     fee:	11 09       	sbc	r17, r1
     ff0:	6a 30       	cpi	r22, 0x0A	; 10
     ff2:	10 f4       	brcc	.+4      	; 0xff8 <_ZN5Print11printNumberEmh+0x58>
     ff4:	60 5d       	subi	r22, 0xD0	; 208
     ff6:	01 c0       	rjmp	.+2      	; 0xffa <_ZN5Print11printNumberEmh+0x5a>
     ff8:	69 5c       	subi	r22, 0xC9	; 201
     ffa:	d8 01       	movw	r26, r16
     ffc:	6c 93       	st	X, r22
     ffe:	23 2b       	or	r18, r19
    1000:	24 2b       	or	r18, r20
    1002:	25 2b       	or	r18, r21
    1004:	69 f7       	brne	.-38     	; 0xfe0 <_ZN5Print11printNumberEmh+0x40>
    1006:	b8 01       	movw	r22, r16
    1008:	c7 01       	movw	r24, r14
    100a:	9b df       	rcall	.-202    	; 0xf42 <_ZN5Print5writeEPKc>
    100c:	a1 96       	adiw	r28, 0x21	; 33
    100e:	0f b6       	in	r0, 0x3f	; 63
    1010:	f8 94       	cli
    1012:	de bf       	out	0x3e, r29	; 62
    1014:	0f be       	out	0x3f, r0	; 63
    1016:	cd bf       	out	0x3d, r28	; 61
    1018:	df 91       	pop	r29
    101a:	cf 91       	pop	r28
    101c:	1f 91       	pop	r17
    101e:	0f 91       	pop	r16
    1020:	ff 90       	pop	r15
    1022:	ef 90       	pop	r14
    1024:	bf 90       	pop	r11
    1026:	af 90       	pop	r10
    1028:	9f 90       	pop	r9
    102a:	8f 90       	pop	r8
    102c:	08 95       	ret

0000102e <_ZN5Print5printEmi>:
    102e:	21 15       	cp	r18, r1
    1030:	31 05       	cpc	r19, r1
    1032:	41 f4       	brne	.+16     	; 0x1044 <_ZN5Print5printEmi+0x16>
    1034:	dc 01       	movw	r26, r24
    1036:	ed 91       	ld	r30, X+
    1038:	fc 91       	ld	r31, X
    103a:	01 90       	ld	r0, Z+
    103c:	f0 81       	ld	r31, Z
    103e:	e0 2d       	mov	r30, r0
    1040:	64 2f       	mov	r22, r20
    1042:	19 94       	eijmp
    1044:	ad cf       	rjmp	.-166    	; 0xfa0 <_ZN5Print11printNumberEmh>

00001046 <_ZN5Print5printEji>:
    1046:	9a 01       	movw	r18, r20
    1048:	ab 01       	movw	r20, r22
    104a:	60 e0       	ldi	r22, 0x00	; 0
    104c:	70 e0       	ldi	r23, 0x00	; 0
    104e:	ef cf       	rjmp	.-34     	; 0x102e <_ZN5Print5printEmi>

00001050 <_ZN5Print10printFloatEdh>:
    1050:	7f 92       	push	r7
    1052:	8f 92       	push	r8
    1054:	9f 92       	push	r9
    1056:	af 92       	push	r10
    1058:	bf 92       	push	r11
    105a:	cf 92       	push	r12
    105c:	df 92       	push	r13
    105e:	ef 92       	push	r14
    1060:	ff 92       	push	r15
    1062:	0f 93       	push	r16
    1064:	1f 93       	push	r17
    1066:	cf 93       	push	r28
    1068:	df 93       	push	r29
    106a:	8c 01       	movw	r16, r24
    106c:	6a 01       	movw	r12, r20
    106e:	7b 01       	movw	r14, r22
    1070:	72 2e       	mov	r7, r18
    1072:	9a 01       	movw	r18, r20
    1074:	ab 01       	movw	r20, r22
    1076:	c7 01       	movw	r24, r14
    1078:	b6 01       	movw	r22, r12
    107a:	67 d4       	rcall	.+2254   	; 0x194a <__unordsf2>
    107c:	88 23       	and	r24, r24
    107e:	19 f0       	breq	.+6      	; 0x1086 <_ZN5Print10printFloatEdh+0x36>
    1080:	66 e2       	ldi	r22, 0x26	; 38
    1082:	72 e0       	ldi	r23, 0x02	; 2
    1084:	24 c0       	rjmp	.+72     	; 0x10ce <_ZN5Print10printFloatEdh+0x7e>
    1086:	46 01       	movw	r8, r12
    1088:	57 01       	movw	r10, r14
    108a:	e8 94       	clt
    108c:	b7 f8       	bld	r11, 7
    108e:	2f ef       	ldi	r18, 0xFF	; 255
    1090:	3f ef       	ldi	r19, 0xFF	; 255
    1092:	4f e7       	ldi	r20, 0x7F	; 127
    1094:	5f e7       	ldi	r21, 0x7F	; 127
    1096:	c5 01       	movw	r24, r10
    1098:	b4 01       	movw	r22, r8
    109a:	57 d4       	rcall	.+2222   	; 0x194a <__unordsf2>
    109c:	81 11       	cpse	r24, r1
    109e:	0c c0       	rjmp	.+24     	; 0x10b8 <_ZN5Print10printFloatEdh+0x68>
    10a0:	2f ef       	ldi	r18, 0xFF	; 255
    10a2:	3f ef       	ldi	r19, 0xFF	; 255
    10a4:	4f e7       	ldi	r20, 0x7F	; 127
    10a6:	5f e7       	ldi	r21, 0x7F	; 127
    10a8:	c5 01       	movw	r24, r10
    10aa:	b4 01       	movw	r22, r8
    10ac:	7f d3       	rcall	.+1790   	; 0x17ac <__cmpsf2>
    10ae:	18 16       	cp	r1, r24
    10b0:	1c f4       	brge	.+6      	; 0x10b8 <_ZN5Print10printFloatEdh+0x68>
    10b2:	6a e2       	ldi	r22, 0x2A	; 42
    10b4:	72 e0       	ldi	r23, 0x02	; 2
    10b6:	0b c0       	rjmp	.+22     	; 0x10ce <_ZN5Print10printFloatEdh+0x7e>
    10b8:	2f ef       	ldi	r18, 0xFF	; 255
    10ba:	3f ef       	ldi	r19, 0xFF	; 255
    10bc:	4f e7       	ldi	r20, 0x7F	; 127
    10be:	5f e4       	ldi	r21, 0x4F	; 79
    10c0:	c7 01       	movw	r24, r14
    10c2:	b6 01       	movw	r22, r12
    10c4:	e8 dc       	rcall	.-1584   	; 0xa96 <__gesf2>
    10c6:	18 16       	cp	r1, r24
    10c8:	8c f4       	brge	.+34     	; 0x10ec <_ZN5Print10printFloatEdh+0x9c>
    10ca:	6e e2       	ldi	r22, 0x2E	; 46
    10cc:	72 e0       	ldi	r23, 0x02	; 2
    10ce:	c8 01       	movw	r24, r16
    10d0:	df 91       	pop	r29
    10d2:	cf 91       	pop	r28
    10d4:	1f 91       	pop	r17
    10d6:	0f 91       	pop	r16
    10d8:	ff 90       	pop	r15
    10da:	ef 90       	pop	r14
    10dc:	df 90       	pop	r13
    10de:	cf 90       	pop	r12
    10e0:	bf 90       	pop	r11
    10e2:	af 90       	pop	r10
    10e4:	9f 90       	pop	r9
    10e6:	8f 90       	pop	r8
    10e8:	7f 90       	pop	r7
    10ea:	2b cf       	rjmp	.-426    	; 0xf42 <_ZN5Print5writeEPKc>
    10ec:	2f ef       	ldi	r18, 0xFF	; 255
    10ee:	3f ef       	ldi	r19, 0xFF	; 255
    10f0:	4f e7       	ldi	r20, 0x7F	; 127
    10f2:	5f ec       	ldi	r21, 0xCF	; 207
    10f4:	c7 01       	movw	r24, r14
    10f6:	b6 01       	movw	r22, r12
    10f8:	59 d3       	rcall	.+1714   	; 0x17ac <__cmpsf2>
    10fa:	87 fd       	sbrc	r24, 7
    10fc:	e6 cf       	rjmp	.-52     	; 0x10ca <_ZN5Print10printFloatEdh+0x7a>
    10fe:	20 e0       	ldi	r18, 0x00	; 0
    1100:	30 e0       	ldi	r19, 0x00	; 0
    1102:	a9 01       	movw	r20, r18
    1104:	c7 01       	movw	r24, r14
    1106:	b6 01       	movw	r22, r12
    1108:	51 d3       	rcall	.+1698   	; 0x17ac <__cmpsf2>
    110a:	87 ff       	sbrs	r24, 7
    110c:	09 c0       	rjmp	.+18     	; 0x1120 <_ZN5Print10printFloatEdh+0xd0>
    110e:	6d e2       	ldi	r22, 0x2D	; 45
    1110:	c8 01       	movw	r24, r16
    1112:	2c df       	rcall	.-424    	; 0xf6c <_ZN5Print5printEc>
    1114:	ec 01       	movw	r28, r24
    1116:	f7 fa       	bst	r15, 7
    1118:	f0 94       	com	r15
    111a:	f7 f8       	bld	r15, 7
    111c:	f0 94       	com	r15
    111e:	02 c0       	rjmp	.+4      	; 0x1124 <_ZN5Print10printFloatEdh+0xd4>
    1120:	c0 e0       	ldi	r28, 0x00	; 0
    1122:	d0 e0       	ldi	r29, 0x00	; 0
    1124:	b1 2c       	mov	r11, r1
    1126:	60 e0       	ldi	r22, 0x00	; 0
    1128:	70 e0       	ldi	r23, 0x00	; 0
    112a:	80 e0       	ldi	r24, 0x00	; 0
    112c:	9f e3       	ldi	r25, 0x3F	; 63
    112e:	7b 14       	cp	r7, r11
    1130:	39 f0       	breq	.+14     	; 0x1140 <_ZN5Print10printFloatEdh+0xf0>
    1132:	20 e0       	ldi	r18, 0x00	; 0
    1134:	30 e0       	ldi	r19, 0x00	; 0
    1136:	40 e2       	ldi	r20, 0x20	; 32
    1138:	51 e4       	ldi	r21, 0x41	; 65
    113a:	3c d3       	rcall	.+1656   	; 0x17b4 <__divsf3>
    113c:	b3 94       	inc	r11
    113e:	f7 cf       	rjmp	.-18     	; 0x112e <_ZN5Print10printFloatEdh+0xde>
    1140:	a7 01       	movw	r20, r14
    1142:	96 01       	movw	r18, r12
    1144:	85 db       	rcall	.-2294   	; 0x850 <__addsf3>
    1146:	6b 01       	movw	r12, r22
    1148:	7c 01       	movw	r14, r24
    114a:	eb db       	rcall	.-2090   	; 0x922 <__fixunssfsi>
    114c:	4b 01       	movw	r8, r22
    114e:	5c 01       	movw	r10, r24
    1150:	2a e0       	ldi	r18, 0x0A	; 10
    1152:	ab 01       	movw	r20, r22
    1154:	bc 01       	movw	r22, r24
    1156:	c8 01       	movw	r24, r16
    1158:	23 df       	rcall	.-442    	; 0xfa0 <_ZN5Print11printNumberEmh>
    115a:	c8 0f       	add	r28, r24
    115c:	d9 1f       	adc	r29, r25
    115e:	77 20       	and	r7, r7
    1160:	79 f1       	breq	.+94     	; 0x11c0 <_ZN5Print10printFloatEdh+0x170>
    1162:	c5 01       	movw	r24, r10
    1164:	b4 01       	movw	r22, r8
    1166:	09 dc       	rcall	.-2030   	; 0x97a <__floatunsisf>
    1168:	9b 01       	movw	r18, r22
    116a:	ac 01       	movw	r20, r24
    116c:	c7 01       	movw	r24, r14
    116e:	b6 01       	movw	r22, r12
    1170:	6e db       	rcall	.-2340   	; 0x84e <__subsf3>
    1172:	6b 01       	movw	r12, r22
    1174:	7c 01       	movw	r14, r24
    1176:	6e e2       	ldi	r22, 0x2E	; 46
    1178:	c8 01       	movw	r24, r16
    117a:	f8 de       	rcall	.-528    	; 0xf6c <_ZN5Print5printEc>
    117c:	c8 0f       	add	r28, r24
    117e:	d9 1f       	adc	r29, r25
    1180:	20 e0       	ldi	r18, 0x00	; 0
    1182:	30 e0       	ldi	r19, 0x00	; 0
    1184:	40 e2       	ldi	r20, 0x20	; 32
    1186:	51 e4       	ldi	r21, 0x41	; 65
    1188:	c7 01       	movw	r24, r14
    118a:	b6 01       	movw	r22, r12
    118c:	7b d3       	rcall	.+1782   	; 0x1884 <__mulsf3>
    118e:	4b 01       	movw	r8, r22
    1190:	5c 01       	movw	r10, r24
    1192:	c7 db       	rcall	.-2162   	; 0x922 <__fixunssfsi>
    1194:	6b 01       	movw	r12, r22
    1196:	7c 01       	movw	r14, r24
    1198:	4a e0       	ldi	r20, 0x0A	; 10
    119a:	50 e0       	ldi	r21, 0x00	; 0
    119c:	c8 01       	movw	r24, r16
    119e:	53 df       	rcall	.-346    	; 0x1046 <_ZN5Print5printEji>
    11a0:	c8 0f       	add	r28, r24
    11a2:	d9 1f       	adc	r29, r25
    11a4:	b6 01       	movw	r22, r12
    11a6:	80 e0       	ldi	r24, 0x00	; 0
    11a8:	90 e0       	ldi	r25, 0x00	; 0
    11aa:	e7 db       	rcall	.-2098   	; 0x97a <__floatunsisf>
    11ac:	9b 01       	movw	r18, r22
    11ae:	ac 01       	movw	r20, r24
    11b0:	c5 01       	movw	r24, r10
    11b2:	b4 01       	movw	r22, r8
    11b4:	4c db       	rcall	.-2408   	; 0x84e <__subsf3>
    11b6:	6b 01       	movw	r12, r22
    11b8:	7c 01       	movw	r14, r24
    11ba:	7a 94       	dec	r7
    11bc:	71 10       	cpse	r7, r1
    11be:	e0 cf       	rjmp	.-64     	; 0x1180 <_ZN5Print10printFloatEdh+0x130>
    11c0:	ce 01       	movw	r24, r28
    11c2:	df 91       	pop	r29
    11c4:	cf 91       	pop	r28
    11c6:	1f 91       	pop	r17
    11c8:	0f 91       	pop	r16
    11ca:	ff 90       	pop	r15
    11cc:	ef 90       	pop	r14
    11ce:	df 90       	pop	r13
    11d0:	cf 90       	pop	r12
    11d2:	bf 90       	pop	r11
    11d4:	af 90       	pop	r10
    11d6:	9f 90       	pop	r9
    11d8:	8f 90       	pop	r8
    11da:	7f 90       	pop	r7
    11dc:	08 95       	ret

000011de <_ZN5Print7printlnEdi>:
  n += println();
  return n;
}

size_t Print::println(double num, int digits)
{
    11de:	0f 93       	push	r16
    11e0:	1f 93       	push	r17
    11e2:	cf 93       	push	r28
    11e4:	df 93       	push	r29
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
    11e6:	ec 01       	movw	r28, r24
}

size_t Print::println(double num, int digits)
{
  size_t n = print(num, digits);
  n += println();
    11e8:	33 df       	rcall	.-410    	; 0x1050 <_ZN5Print10printFloatEdh>
    11ea:	8c 01       	movw	r16, r24
  return n;
}
    11ec:	ce 01       	movw	r24, r28
    11ee:	c5 de       	rcall	.-630    	; 0xf7a <_ZN5Print7printlnEv>
    11f0:	80 0f       	add	r24, r16
    11f2:	91 1f       	adc	r25, r17
    11f4:	df 91       	pop	r29
    11f6:	cf 91       	pop	r28
    11f8:	1f 91       	pop	r17
    11fa:	0f 91       	pop	r16
    11fc:	08 95       	ret

000011fe <_ZN6Stream9timedReadEv>:
    if (c < 0 || c == terminator) break;
    *buffer++ = (char)c;
    index++;
  }
  return index; // return number of characters, not including null terminator
}
    11fe:	0f 93       	push	r16
    1200:	1f 93       	push	r17
    1202:	cf 93       	push	r28
    1204:	df 93       	push	r29
    1206:	ec 01       	movw	r28, r24
    1208:	89 d0       	rcall	.+274    	; 0x131c <millis>
    120a:	68 87       	std	Y+8, r22	; 0x08
    120c:	79 87       	std	Y+9, r23	; 0x09
    120e:	8a 87       	std	Y+10, r24	; 0x0a
    1210:	9b 87       	std	Y+11, r25	; 0x0b
    1212:	e8 81       	ld	r30, Y
    1214:	f9 81       	ldd	r31, Y+1	; 0x01
    1216:	02 84       	ldd	r0, Z+10	; 0x0a
    1218:	f3 85       	ldd	r31, Z+11	; 0x0b
    121a:	e0 2d       	mov	r30, r0
    121c:	ce 01       	movw	r24, r28
    121e:	19 95       	eicall
    1220:	97 ff       	sbrs	r25, 7
    1222:	16 c0       	rjmp	.+44     	; 0x1250 <_ZN6Stream9timedReadEv+0x52>
    1224:	7b d0       	rcall	.+246    	; 0x131c <millis>
    1226:	08 85       	ldd	r16, Y+8	; 0x08
    1228:	19 85       	ldd	r17, Y+9	; 0x09
    122a:	2a 85       	ldd	r18, Y+10	; 0x0a
    122c:	3b 85       	ldd	r19, Y+11	; 0x0b
    122e:	dc 01       	movw	r26, r24
    1230:	cb 01       	movw	r24, r22
    1232:	80 1b       	sub	r24, r16
    1234:	91 0b       	sbc	r25, r17
    1236:	a2 0b       	sbc	r26, r18
    1238:	b3 0b       	sbc	r27, r19
    123a:	0c 81       	ldd	r16, Y+4	; 0x04
    123c:	1d 81       	ldd	r17, Y+5	; 0x05
    123e:	2e 81       	ldd	r18, Y+6	; 0x06
    1240:	3f 81       	ldd	r19, Y+7	; 0x07
    1242:	80 17       	cp	r24, r16
    1244:	91 07       	cpc	r25, r17
    1246:	a2 07       	cpc	r26, r18
    1248:	b3 07       	cpc	r27, r19
    124a:	18 f3       	brcs	.-58     	; 0x1212 <_ZN6Stream9timedReadEv+0x14>
    124c:	8f ef       	ldi	r24, 0xFF	; 255
    124e:	9f ef       	ldi	r25, 0xFF	; 255
    1250:	df 91       	pop	r29
    1252:	cf 91       	pop	r28
    1254:	1f 91       	pop	r17
    1256:	0f 91       	pop	r16
    1258:	08 95       	ret

0000125a <_ZN6Stream10readStringEv>:

String Stream::readString()
{
    125a:	0f 93       	push	r16
    125c:	1f 93       	push	r17
    125e:	cf 93       	push	r28
    1260:	df 93       	push	r29
    1262:	ec 01       	movw	r28, r24
    1264:	8b 01       	movw	r16, r22
  String ret;
    1266:	65 e2       	ldi	r22, 0x25	; 37
    1268:	72 e0       	ldi	r23, 0x02	; 2
  int c = timedRead();
    126a:	1f d2       	rcall	.+1086   	; 0x16aa <_ZN6StringC1EPKc>
    126c:	c8 01       	movw	r24, r16
  while (c >= 0)
    126e:	c7 df       	rcall	.-114    	; 0x11fe <_ZN6Stream9timedReadEv>

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
	String & operator += (char c)			{concat(c); return (*this);}
    1270:	97 fd       	sbrc	r25, 7
    1272:	04 c0       	rjmp	.+8      	; 0x127c <_ZN6Stream10readStringEv+0x22>
    1274:	68 2f       	mov	r22, r24
    1276:	ce 01       	movw	r24, r28
  {
    ret += (char)c;
    c = timedRead();
  }
  return ret;
}
    1278:	58 d2       	rcall	.+1200   	; 0x172a <_ZN6String6concatEc>
    127a:	f8 cf       	rjmp	.-16     	; 0x126c <_ZN6Stream10readStringEv+0x12>
    127c:	ce 01       	movw	r24, r28
    127e:	df 91       	pop	r29
    1280:	cf 91       	pop	r28
    1282:	1f 91       	pop	r17
    1284:	0f 91       	pop	r16
    1286:	08 95       	ret

00001288 <__vector_23>:
		while ( ms > 0 && (micros() - start) >= 1000) {
			ms--;
			start += 1000;
		}
	}
}
    1288:	1f 92       	push	r1
    128a:	0f 92       	push	r0
    128c:	0f b6       	in	r0, 0x3f	; 63
    128e:	0f 92       	push	r0
    1290:	11 24       	eor	r1, r1
    1292:	2f 93       	push	r18
    1294:	3f 93       	push	r19
    1296:	8f 93       	push	r24
    1298:	9f 93       	push	r25
    129a:	af 93       	push	r26
    129c:	bf 93       	push	r27
    129e:	80 91 dc 02 	lds	r24, 0x02DC	; 0x8002dc <timer0_millis>
    12a2:	90 91 dd 02 	lds	r25, 0x02DD	; 0x8002dd <timer0_millis+0x1>
    12a6:	a0 91 de 02 	lds	r26, 0x02DE	; 0x8002de <timer0_millis+0x2>
    12aa:	b0 91 df 02 	lds	r27, 0x02DF	; 0x8002df <timer0_millis+0x3>
    12ae:	30 91 db 02 	lds	r19, 0x02DB	; 0x8002db <timer0_fract>
    12b2:	23 e0       	ldi	r18, 0x03	; 3
    12b4:	23 0f       	add	r18, r19
    12b6:	2d 37       	cpi	r18, 0x7D	; 125
    12b8:	20 f4       	brcc	.+8      	; 0x12c2 <__vector_23+0x3a>
    12ba:	01 96       	adiw	r24, 0x01	; 1
    12bc:	a1 1d       	adc	r26, r1
    12be:	b1 1d       	adc	r27, r1
    12c0:	05 c0       	rjmp	.+10     	; 0x12cc <__vector_23+0x44>
    12c2:	26 e8       	ldi	r18, 0x86	; 134
    12c4:	23 0f       	add	r18, r19
    12c6:	02 96       	adiw	r24, 0x02	; 2
    12c8:	a1 1d       	adc	r26, r1
    12ca:	b1 1d       	adc	r27, r1
    12cc:	20 93 db 02 	sts	0x02DB, r18	; 0x8002db <timer0_fract>
    12d0:	80 93 dc 02 	sts	0x02DC, r24	; 0x8002dc <timer0_millis>
    12d4:	90 93 dd 02 	sts	0x02DD, r25	; 0x8002dd <timer0_millis+0x1>
    12d8:	a0 93 de 02 	sts	0x02DE, r26	; 0x8002de <timer0_millis+0x2>
    12dc:	b0 93 df 02 	sts	0x02DF, r27	; 0x8002df <timer0_millis+0x3>
    12e0:	80 91 e0 02 	lds	r24, 0x02E0	; 0x8002e0 <timer0_overflow_count>
    12e4:	90 91 e1 02 	lds	r25, 0x02E1	; 0x8002e1 <timer0_overflow_count+0x1>
    12e8:	a0 91 e2 02 	lds	r26, 0x02E2	; 0x8002e2 <timer0_overflow_count+0x2>
    12ec:	b0 91 e3 02 	lds	r27, 0x02E3	; 0x8002e3 <timer0_overflow_count+0x3>
    12f0:	01 96       	adiw	r24, 0x01	; 1
    12f2:	a1 1d       	adc	r26, r1
    12f4:	b1 1d       	adc	r27, r1
    12f6:	80 93 e0 02 	sts	0x02E0, r24	; 0x8002e0 <timer0_overflow_count>
    12fa:	90 93 e1 02 	sts	0x02E1, r25	; 0x8002e1 <timer0_overflow_count+0x1>
    12fe:	a0 93 e2 02 	sts	0x02E2, r26	; 0x8002e2 <timer0_overflow_count+0x2>
    1302:	b0 93 e3 02 	sts	0x02E3, r27	; 0x8002e3 <timer0_overflow_count+0x3>
    1306:	bf 91       	pop	r27
    1308:	af 91       	pop	r26
    130a:	9f 91       	pop	r25
    130c:	8f 91       	pop	r24
    130e:	3f 91       	pop	r19
    1310:	2f 91       	pop	r18
    1312:	0f 90       	pop	r0
    1314:	0f be       	out	0x3f, r0	; 63
    1316:	0f 90       	pop	r0
    1318:	1f 90       	pop	r1
    131a:	18 95       	reti

0000131c <millis>:
    131c:	2f b7       	in	r18, 0x3f	; 63
    131e:	f8 94       	cli
    1320:	60 91 dc 02 	lds	r22, 0x02DC	; 0x8002dc <timer0_millis>
    1324:	70 91 dd 02 	lds	r23, 0x02DD	; 0x8002dd <timer0_millis+0x1>
    1328:	80 91 de 02 	lds	r24, 0x02DE	; 0x8002de <timer0_millis+0x2>
    132c:	90 91 df 02 	lds	r25, 0x02DF	; 0x8002df <timer0_millis+0x3>
    1330:	2f bf       	out	0x3f, r18	; 63
    1332:	08 95       	ret

00001334 <delayMicroseconds>:
#elif F_CPU >= 16000000L
	// for the 16 MHz clock on most Arduino boards

	// for a one-microsecond delay, simply return.  the overhead
	// of the function call takes 14 (16) cycles, which is 1us
	if (us <= 1) return; //  = 3 cycles, (4 when true)
    1334:	82 30       	cpi	r24, 0x02	; 2
    1336:	91 05       	cpc	r25, r1
    1338:	38 f0       	brcs	.+14     	; 0x1348 <delayMicroseconds+0x14>

	// the following loop takes 1/4 of a microsecond (4 cycles)
	// per iteration, so execute it four times for each microsecond of
	// delay requested.
	us <<= 2; // x4 us, = 4 cycles
    133a:	88 0f       	add	r24, r24
    133c:	99 1f       	adc	r25, r25
    133e:	88 0f       	add	r24, r24
    1340:	99 1f       	adc	r25, r25

	// account for the time taken in the preceeding commands.
	// we just burned 19 (21) cycles above, remove 5, (5*4=20)
	// us is at least 8 so we can substract 5
	us -= 5; // = 2 cycles,
    1342:	05 97       	sbiw	r24, 0x05	; 5
	

#endif

	// busy wait
	__asm__ __volatile__ (
    1344:	01 97       	sbiw	r24, 0x01	; 1
    1346:	f1 f7       	brne	.-4      	; 0x1344 <delayMicroseconds+0x10>
    1348:	08 95       	ret

0000134a <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
    134a:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
    134c:	84 b5       	in	r24, 0x24	; 36
    134e:	82 60       	ori	r24, 0x02	; 2
    1350:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
    1352:	84 b5       	in	r24, 0x24	; 36
    1354:	81 60       	ori	r24, 0x01	; 1
    1356:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
    1358:	85 b5       	in	r24, 0x25	; 37
    135a:	82 60       	ori	r24, 0x02	; 2
    135c:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
    135e:	85 b5       	in	r24, 0x25	; 37
    1360:	81 60       	ori	r24, 0x01	; 1
    1362:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
    1364:	ee e6       	ldi	r30, 0x6E	; 110
    1366:	f0 e0       	ldi	r31, 0x00	; 0
    1368:	80 81       	ld	r24, Z
    136a:	81 60       	ori	r24, 0x01	; 1
    136c:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
    136e:	e1 e8       	ldi	r30, 0x81	; 129
    1370:	f0 e0       	ldi	r31, 0x00	; 0
    1372:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
    1374:	80 81       	ld	r24, Z
    1376:	82 60       	ori	r24, 0x02	; 2
    1378:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
    137a:	80 81       	ld	r24, Z
    137c:	81 60       	ori	r24, 0x01	; 1
    137e:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
    1380:	e0 e8       	ldi	r30, 0x80	; 128
    1382:	f0 e0       	ldi	r31, 0x00	; 0
    1384:	80 81       	ld	r24, Z
    1386:	81 60       	ori	r24, 0x01	; 1
    1388:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
    138a:	e1 eb       	ldi	r30, 0xB1	; 177
    138c:	f0 e0       	ldi	r31, 0x00	; 0
    138e:	80 81       	ld	r24, Z
    1390:	84 60       	ori	r24, 0x04	; 4
    1392:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
    1394:	e0 eb       	ldi	r30, 0xB0	; 176
    1396:	f0 e0       	ldi	r31, 0x00	; 0
    1398:	80 81       	ld	r24, Z
    139a:	81 60       	ori	r24, 0x01	; 1
    139c:	80 83       	st	Z, r24
//#else
	// Timer 2 not finished (may not be present on this CPU)
#endif

#if defined(TCCR3B) && defined(CS31) && defined(WGM30)
	sbi(TCCR3B, CS31);		// set timer 3 prescale factor to 64
    139e:	e1 e9       	ldi	r30, 0x91	; 145
    13a0:	f0 e0       	ldi	r31, 0x00	; 0
    13a2:	80 81       	ld	r24, Z
    13a4:	82 60       	ori	r24, 0x02	; 2
    13a6:	80 83       	st	Z, r24
	sbi(TCCR3B, CS30);
    13a8:	80 81       	ld	r24, Z
    13aa:	81 60       	ori	r24, 0x01	; 1
    13ac:	80 83       	st	Z, r24
	sbi(TCCR3A, WGM30);		// put timer 3 in 8-bit phase correct pwm mode
    13ae:	e0 e9       	ldi	r30, 0x90	; 144
    13b0:	f0 e0       	ldi	r31, 0x00	; 0
    13b2:	80 81       	ld	r24, Z
    13b4:	81 60       	ori	r24, 0x01	; 1
    13b6:	80 83       	st	Z, r24
	sbi(TCCR4D, WGM40);		// put timer 4 in phase- and frequency-correct PWM mode	
	sbi(TCCR4A, PWM4A);		// enable PWM mode for comparator OCR4A
	sbi(TCCR4C, PWM4D);		// enable PWM mode for comparator OCR4D
#else /* beginning of timer4 block for ATMEGA1280 and ATMEGA2560 */
#if defined(TCCR4B) && defined(CS41) && defined(WGM40)
	sbi(TCCR4B, CS41);		// set timer 4 prescale factor to 64
    13b8:	e1 ea       	ldi	r30, 0xA1	; 161
    13ba:	f0 e0       	ldi	r31, 0x00	; 0
    13bc:	80 81       	ld	r24, Z
    13be:	82 60       	ori	r24, 0x02	; 2
    13c0:	80 83       	st	Z, r24
	sbi(TCCR4B, CS40);
    13c2:	80 81       	ld	r24, Z
    13c4:	81 60       	ori	r24, 0x01	; 1
    13c6:	80 83       	st	Z, r24
	sbi(TCCR4A, WGM40);		// put timer 4 in 8-bit phase correct pwm mode
    13c8:	e0 ea       	ldi	r30, 0xA0	; 160
    13ca:	f0 e0       	ldi	r31, 0x00	; 0
    13cc:	80 81       	ld	r24, Z
    13ce:	81 60       	ori	r24, 0x01	; 1
    13d0:	80 83       	st	Z, r24
#endif
#endif /* end timer4 block for ATMEGA1280/2560 and similar */	

#if defined(TCCR5B) && defined(CS51) && defined(WGM50)
	sbi(TCCR5B, CS51);		// set timer 5 prescale factor to 64
    13d2:	e1 e2       	ldi	r30, 0x21	; 33
    13d4:	f1 e0       	ldi	r31, 0x01	; 1
    13d6:	80 81       	ld	r24, Z
    13d8:	82 60       	ori	r24, 0x02	; 2
    13da:	80 83       	st	Z, r24
	sbi(TCCR5B, CS50);
    13dc:	80 81       	ld	r24, Z
    13de:	81 60       	ori	r24, 0x01	; 1
    13e0:	80 83       	st	Z, r24
	sbi(TCCR5A, WGM50);		// put timer 5 in 8-bit phase correct pwm mode
    13e2:	e0 e2       	ldi	r30, 0x20	; 32
    13e4:	f1 e0       	ldi	r31, 0x01	; 1
    13e6:	80 81       	ld	r24, Z
    13e8:	81 60       	ori	r24, 0x01	; 1
    13ea:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
    13ec:	ea e7       	ldi	r30, 0x7A	; 122
    13ee:	f0 e0       	ldi	r31, 0x00	; 0
    13f0:	80 81       	ld	r24, Z
    13f2:	84 60       	ori	r24, 0x04	; 4
    13f4:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
    13f6:	80 81       	ld	r24, Z
    13f8:	82 60       	ori	r24, 0x02	; 2
    13fa:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
    13fc:	80 81       	ld	r24, Z
    13fe:	81 60       	ori	r24, 0x01	; 1
    1400:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    1402:	80 81       	ld	r24, Z
    1404:	80 68       	ori	r24, 0x80	; 128
    1406:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
    1408:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7000c1>
    140c:	08 95       	ret

0000140e <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    140e:	90 e0       	ldi	r25, 0x00	; 0
    1410:	fc 01       	movw	r30, r24
    1412:	31 97       	sbiw	r30, 0x01	; 1
    1414:	e2 31       	cpi	r30, 0x12	; 18
    1416:	f1 05       	cpc	r31, r1
    1418:	08 f0       	brcs	.+2      	; 0x141c <turnOffPWM+0xe>
    141a:	4d c0       	rjmp	.+154    	; 0x14b6 <turnOffPWM+0xa8>
    141c:	88 27       	eor	r24, r24
    141e:	ee 58       	subi	r30, 0x8E	; 142
    1420:	ff 4f       	sbci	r31, 0xFF	; 255
    1422:	8f 4f       	sbci	r24, 0xFF	; 255
    1424:	b8 c2       	rjmp	.+1392   	; 0x1996 <__tablejump2__>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    1426:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
    142a:	8f 77       	andi	r24, 0x7F	; 127
    142c:	03 c0       	rjmp	.+6      	; 0x1434 <turnOffPWM+0x26>
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    142e:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
    1432:	8f 7d       	andi	r24, 0xDF	; 223
    1434:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
    1438:	08 95       	ret
		#endif
		#if defined(TCCR1A) && defined(COM1C1)
		case TIMER1C:   cbi(TCCR1A, COM1C1);    break;
    143a:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
    143e:	87 7f       	andi	r24, 0xF7	; 247
    1440:	f9 cf       	rjmp	.-14     	; 0x1434 <turnOffPWM+0x26>
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    1442:	84 b5       	in	r24, 0x24	; 36
    1444:	8f 77       	andi	r24, 0x7F	; 127
    1446:	02 c0       	rjmp	.+4      	; 0x144c <turnOffPWM+0x3e>
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    1448:	84 b5       	in	r24, 0x24	; 36
    144a:	8f 7d       	andi	r24, 0xDF	; 223
    144c:	84 bd       	out	0x24, r24	; 36
    144e:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
    1450:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7000b0>
    1454:	8f 77       	andi	r24, 0x7F	; 127
    1456:	03 c0       	rjmp	.+6      	; 0x145e <turnOffPWM+0x50>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
    1458:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7000b0>
    145c:	8f 7d       	andi	r24, 0xDF	; 223
    145e:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7000b0>
    1462:	08 95       	ret
		#endif
		
		#if defined(TCCR3A) && defined(COM3A1)
		case  TIMER3A:  cbi(TCCR3A, COM3A1);    break;
    1464:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
    1468:	8f 77       	andi	r24, 0x7F	; 127
    146a:	07 c0       	rjmp	.+14     	; 0x147a <turnOffPWM+0x6c>
		#endif
		#if defined(TCCR3A) && defined(COM3B1)
		case  TIMER3B:  cbi(TCCR3A, COM3B1);    break;
    146c:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
    1470:	8f 7d       	andi	r24, 0xDF	; 223
    1472:	03 c0       	rjmp	.+6      	; 0x147a <turnOffPWM+0x6c>
		#endif
		#if defined(TCCR3A) && defined(COM3C1)
		case  TIMER3C:  cbi(TCCR3A, COM3C1);    break;
    1474:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
    1478:	87 7f       	andi	r24, 0xF7	; 247
    147a:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
    147e:	08 95       	ret
		#endif

		#if defined(TCCR4A) && defined(COM4A1)
		case  TIMER4A:  cbi(TCCR4A, COM4A1);    break;
    1480:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
    1484:	8f 77       	andi	r24, 0x7F	; 127
    1486:	07 c0       	rjmp	.+14     	; 0x1496 <turnOffPWM+0x88>
		#endif					
		#if defined(TCCR4A) && defined(COM4B1)
		case  TIMER4B:  cbi(TCCR4A, COM4B1);    break;
    1488:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
    148c:	8f 7d       	andi	r24, 0xDF	; 223
    148e:	03 c0       	rjmp	.+6      	; 0x1496 <turnOffPWM+0x88>
		#endif
		#if defined(TCCR4A) && defined(COM4C1)
		case  TIMER4C:  cbi(TCCR4A, COM4C1);    break;
    1490:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
    1494:	87 7f       	andi	r24, 0xF7	; 247
    1496:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
    149a:	08 95       	ret
		#if defined(TCCR4C) && defined(COM4D1)
		case TIMER4D:	cbi(TCCR4C, COM4D1);	break;
		#endif			
			
		#if defined(TCCR5A)
		case  TIMER5A:  cbi(TCCR5A, COM5A1);    break;
    149c:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
    14a0:	8f 77       	andi	r24, 0x7F	; 127
    14a2:	07 c0       	rjmp	.+14     	; 0x14b2 <turnOffPWM+0xa4>
		case  TIMER5B:  cbi(TCCR5A, COM5B1);    break;
    14a4:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
    14a8:	8f 7d       	andi	r24, 0xDF	; 223
    14aa:	03 c0       	rjmp	.+6      	; 0x14b2 <turnOffPWM+0xa4>
		case  TIMER5C:  cbi(TCCR5A, COM5C1);    break;
    14ac:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
    14b0:	87 7f       	andi	r24, 0xF7	; 247
    14b2:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
    14b6:	08 95       	ret

000014b8 <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    14b8:	cf 93       	push	r28
    14ba:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
    14bc:	90 e0       	ldi	r25, 0x00	; 0
    14be:	fc 01       	movw	r30, r24
    14c0:	e7 57       	subi	r30, 0x77	; 119
    14c2:	fe 4f       	sbci	r31, 0xFE	; 254
    14c4:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
    14c6:	fc 01       	movw	r30, r24
    14c8:	e1 53       	subi	r30, 0x31	; 49
    14ca:	fe 4f       	sbci	r31, 0xFE	; 254
    14cc:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
    14ce:	88 23       	and	r24, r24
    14d0:	61 f1       	breq	.+88     	; 0x152a <pinMode+0x72>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
    14d2:	90 e0       	ldi	r25, 0x00	; 0
    14d4:	88 0f       	add	r24, r24
    14d6:	99 1f       	adc	r25, r25
    14d8:	fc 01       	movw	r30, r24
    14da:	e7 5b       	subi	r30, 0xB7	; 183
    14dc:	fd 4f       	sbci	r31, 0xFD	; 253
    14de:	c5 91       	lpm	r28, Z+
    14e0:	d4 91       	lpm	r29, Z
	out = portOutputRegister(port);
    14e2:	fc 01       	movw	r30, r24
    14e4:	e1 5d       	subi	r30, 0xD1	; 209
    14e6:	fd 4f       	sbci	r31, 0xFD	; 253
    14e8:	a5 91       	lpm	r26, Z+
    14ea:	b4 91       	lpm	r27, Z

	if (mode == INPUT) { 
    14ec:	61 11       	cpse	r22, r1
    14ee:	09 c0       	rjmp	.+18     	; 0x1502 <pinMode+0x4a>
		uint8_t oldSREG = SREG;
    14f0:	9f b7       	in	r25, 0x3f	; 63
                cli();
    14f2:	f8 94       	cli
		*reg &= ~bit;
    14f4:	88 81       	ld	r24, Y
    14f6:	20 95       	com	r18
    14f8:	82 23       	and	r24, r18
    14fa:	88 83       	st	Y, r24
		*out &= ~bit;
    14fc:	ec 91       	ld	r30, X
    14fe:	2e 23       	and	r18, r30
    1500:	0b c0       	rjmp	.+22     	; 0x1518 <pinMode+0x60>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
    1502:	62 30       	cpi	r22, 0x02	; 2
    1504:	61 f4       	brne	.+24     	; 0x151e <pinMode+0x66>
		uint8_t oldSREG = SREG;
    1506:	9f b7       	in	r25, 0x3f	; 63
                cli();
    1508:	f8 94       	cli
		*reg &= ~bit;
    150a:	88 81       	ld	r24, Y
    150c:	32 2f       	mov	r19, r18
    150e:	30 95       	com	r19
    1510:	83 23       	and	r24, r19
    1512:	88 83       	st	Y, r24
		*out |= bit;
    1514:	ec 91       	ld	r30, X
    1516:	2e 2b       	or	r18, r30
    1518:	2c 93       	st	X, r18
		SREG = oldSREG;
    151a:	9f bf       	out	0x3f, r25	; 63
    151c:	06 c0       	rjmp	.+12     	; 0x152a <pinMode+0x72>
	} else {
		uint8_t oldSREG = SREG;
    151e:	8f b7       	in	r24, 0x3f	; 63
                cli();
    1520:	f8 94       	cli
		*reg |= bit;
    1522:	e8 81       	ld	r30, Y
    1524:	2e 2b       	or	r18, r30
    1526:	28 83       	st	Y, r18
		SREG = oldSREG;
    1528:	8f bf       	out	0x3f, r24	; 63
	}
}
    152a:	df 91       	pop	r29
    152c:	cf 91       	pop	r28
    152e:	08 95       	ret

00001530 <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
    1530:	1f 93       	push	r17
    1532:	cf 93       	push	r28
    1534:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    1536:	28 2f       	mov	r18, r24
    1538:	30 e0       	ldi	r19, 0x00	; 0
    153a:	f9 01       	movw	r30, r18
    153c:	ed 5b       	subi	r30, 0xBD	; 189
    153e:	fe 4f       	sbci	r31, 0xFE	; 254
    1540:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    1542:	f9 01       	movw	r30, r18
    1544:	e7 57       	subi	r30, 0x77	; 119
    1546:	fe 4f       	sbci	r31, 0xFE	; 254
    1548:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    154a:	f9 01       	movw	r30, r18
    154c:	e1 53       	subi	r30, 0x31	; 49
    154e:	fe 4f       	sbci	r31, 0xFE	; 254
    1550:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    1552:	cc 23       	and	r28, r28
    1554:	b9 f0       	breq	.+46     	; 0x1584 <digitalWrite+0x54>
    1556:	16 2f       	mov	r17, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    1558:	81 11       	cpse	r24, r1

	out = portOutputRegister(port);
    155a:	59 df       	rcall	.-334    	; 0x140e <turnOffPWM>
    155c:	ec 2f       	mov	r30, r28
    155e:	f0 e0       	ldi	r31, 0x00	; 0
    1560:	ee 0f       	add	r30, r30
    1562:	ff 1f       	adc	r31, r31
    1564:	e1 5d       	subi	r30, 0xD1	; 209
    1566:	fd 4f       	sbci	r31, 0xFD	; 253
    1568:	a5 91       	lpm	r26, Z+

	uint8_t oldSREG = SREG;
    156a:	b4 91       	lpm	r27, Z
	cli();
    156c:	9f b7       	in	r25, 0x3f	; 63

	if (val == LOW) {
    156e:	f8 94       	cli
    1570:	11 11       	cpse	r17, r1
		*out &= ~bit;
    1572:	04 c0       	rjmp	.+8      	; 0x157c <digitalWrite+0x4c>
    1574:	8c 91       	ld	r24, X
    1576:	d0 95       	com	r29
    1578:	d8 23       	and	r29, r24
	} else {
		*out |= bit;
    157a:	02 c0       	rjmp	.+4      	; 0x1580 <digitalWrite+0x50>
    157c:	ec 91       	ld	r30, X
    157e:	de 2b       	or	r29, r30
	}

	SREG = oldSREG;
    1580:	dc 93       	st	X, r29
}
    1582:	9f bf       	out	0x3f, r25	; 63
    1584:	df 91       	pop	r29
    1586:	cf 91       	pop	r28
    1588:	1f 91       	pop	r17
    158a:	08 95       	ret

0000158c <digitalRead>:

int digitalRead(uint8_t pin)
{
    158c:	cf 93       	push	r28
    158e:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    1590:	28 2f       	mov	r18, r24
    1592:	30 e0       	ldi	r19, 0x00	; 0
    1594:	f9 01       	movw	r30, r18
    1596:	ed 5b       	subi	r30, 0xBD	; 189
    1598:	fe 4f       	sbci	r31, 0xFE	; 254
    159a:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    159c:	f9 01       	movw	r30, r18
    159e:	e7 57       	subi	r30, 0x77	; 119
    15a0:	fe 4f       	sbci	r31, 0xFE	; 254
    15a2:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    15a4:	f9 01       	movw	r30, r18
    15a6:	e1 53       	subi	r30, 0x31	; 49
    15a8:	fe 4f       	sbci	r31, 0xFE	; 254
    15aa:	c4 91       	lpm	r28, Z

	if (port == NOT_A_PIN) return LOW;
    15ac:	cc 23       	and	r28, r28
    15ae:	89 f0       	breq	.+34     	; 0x15d2 <digitalRead+0x46>

	// If the pin that support PWM output, we need to turn it off
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    15b0:	81 11       	cpse	r24, r1

	if (*portInputRegister(port) & bit) return HIGH;
    15b2:	2d df       	rcall	.-422    	; 0x140e <turnOffPWM>
    15b4:	ec 2f       	mov	r30, r28
    15b6:	f0 e0       	ldi	r31, 0x00	; 0
    15b8:	ee 0f       	add	r30, r30
    15ba:	ff 1f       	adc	r31, r31
    15bc:	eb 5e       	subi	r30, 0xEB	; 235
    15be:	fd 4f       	sbci	r31, 0xFD	; 253
    15c0:	a5 91       	lpm	r26, Z+
    15c2:	b4 91       	lpm	r27, Z
{
	uint8_t timer = digitalPinToTimer(pin);
	uint8_t bit = digitalPinToBitMask(pin);
	uint8_t port = digitalPinToPort(pin);

	if (port == NOT_A_PIN) return LOW;
    15c4:	ec 91       	ld	r30, X
    15c6:	ed 23       	and	r30, r29
    15c8:	81 e0       	ldi	r24, 0x01	; 1
    15ca:	90 e0       	ldi	r25, 0x00	; 0
    15cc:	21 f4       	brne	.+8      	; 0x15d6 <digitalRead+0x4a>
    15ce:	80 e0       	ldi	r24, 0x00	; 0
    15d0:	02 c0       	rjmp	.+4      	; 0x15d6 <digitalRead+0x4a>
    15d2:	80 e0       	ldi	r24, 0x00	; 0
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);

	if (*portInputRegister(port) & bit) return HIGH;
	return LOW;
}
    15d4:	90 e0       	ldi	r25, 0x00	; 0
    15d6:	df 91       	pop	r29
    15d8:	cf 91       	pop	r28
    15da:	08 95       	ret

000015dc <_ZN6StringD1Ev>:
/*  Character Access                         */
/*********************************************/

char String::charAt(unsigned int loc) const
{
	return operator[](loc);
    15dc:	fc 01       	movw	r30, r24
    15de:	80 81       	ld	r24, Z
    15e0:	91 81       	ldd	r25, Z+1	; 0x01
    15e2:	92 c2       	rjmp	.+1316   	; 0x1b08 <free>

000015e4 <_ZN6String10invalidateEv>:
    15e4:	cf 93       	push	r28
    15e6:	df 93       	push	r29
    15e8:	ec 01       	movw	r28, r24
    15ea:	88 81       	ld	r24, Y
    15ec:	99 81       	ldd	r25, Y+1	; 0x01
    15ee:	00 97       	sbiw	r24, 0x00	; 0
    15f0:	09 f0       	breq	.+2      	; 0x15f4 <_ZN6String10invalidateEv+0x10>
    15f2:	8a d2       	rcall	.+1300   	; 0x1b08 <free>
    15f4:	19 82       	std	Y+1, r1	; 0x01
    15f6:	18 82       	st	Y, r1
    15f8:	1d 82       	std	Y+5, r1	; 0x05
    15fa:	1c 82       	std	Y+4, r1	; 0x04
    15fc:	1b 82       	std	Y+3, r1	; 0x03
    15fe:	1a 82       	std	Y+2, r1	; 0x02
    1600:	df 91       	pop	r29
    1602:	cf 91       	pop	r28
    1604:	08 95       	ret

00001606 <_ZN6String12changeBufferEj>:
    1606:	0f 93       	push	r16
    1608:	1f 93       	push	r17
    160a:	cf 93       	push	r28
    160c:	df 93       	push	r29
    160e:	ec 01       	movw	r28, r24
    1610:	8b 01       	movw	r16, r22
    1612:	6f 5f       	subi	r22, 0xFF	; 255
    1614:	7f 4f       	sbci	r23, 0xFF	; 255
    1616:	88 81       	ld	r24, Y
    1618:	99 81       	ldd	r25, Y+1	; 0x01
    161a:	ff d2       	rcall	.+1534   	; 0x1c1a <realloc>
    161c:	00 97       	sbiw	r24, 0x00	; 0
    161e:	31 f0       	breq	.+12     	; 0x162c <_ZN6String12changeBufferEj+0x26>
    1620:	99 83       	std	Y+1, r25	; 0x01
    1622:	88 83       	st	Y, r24
    1624:	1b 83       	std	Y+3, r17	; 0x03
    1626:	0a 83       	std	Y+2, r16	; 0x02
    1628:	81 e0       	ldi	r24, 0x01	; 1
    162a:	01 c0       	rjmp	.+2      	; 0x162e <_ZN6String12changeBufferEj+0x28>
    162c:	80 e0       	ldi	r24, 0x00	; 0
    162e:	df 91       	pop	r29
    1630:	cf 91       	pop	r28
    1632:	1f 91       	pop	r17
    1634:	0f 91       	pop	r16
    1636:	08 95       	ret

00001638 <_ZN6String7reserveEj>:
    1638:	cf 93       	push	r28
    163a:	df 93       	push	r29
    163c:	ec 01       	movw	r28, r24
    163e:	88 81       	ld	r24, Y
    1640:	99 81       	ldd	r25, Y+1	; 0x01
    1642:	89 2b       	or	r24, r25
    1644:	29 f0       	breq	.+10     	; 0x1650 <_ZN6String7reserveEj+0x18>
    1646:	8a 81       	ldd	r24, Y+2	; 0x02
    1648:	9b 81       	ldd	r25, Y+3	; 0x03
    164a:	86 17       	cp	r24, r22
    164c:	97 07       	cpc	r25, r23
    164e:	58 f4       	brcc	.+22     	; 0x1666 <_ZN6String7reserveEj+0x2e>
    1650:	ce 01       	movw	r24, r28
    1652:	d9 df       	rcall	.-78     	; 0x1606 <_ZN6String12changeBufferEj>
    1654:	88 23       	and	r24, r24
    1656:	41 f0       	breq	.+16     	; 0x1668 <_ZN6String7reserveEj+0x30>
    1658:	8c 81       	ldd	r24, Y+4	; 0x04
    165a:	9d 81       	ldd	r25, Y+5	; 0x05
    165c:	89 2b       	or	r24, r25
    165e:	19 f4       	brne	.+6      	; 0x1666 <_ZN6String7reserveEj+0x2e>
    1660:	e8 81       	ld	r30, Y
    1662:	f9 81       	ldd	r31, Y+1	; 0x01
    1664:	10 82       	st	Z, r1
    1666:	81 e0       	ldi	r24, 0x01	; 1
    1668:	df 91       	pop	r29
    166a:	cf 91       	pop	r28
    166c:	08 95       	ret

0000166e <_ZN6String4copyEPKcj>:
    166e:	ef 92       	push	r14
    1670:	ff 92       	push	r15
    1672:	0f 93       	push	r16
    1674:	1f 93       	push	r17
    1676:	cf 93       	push	r28
    1678:	df 93       	push	r29
    167a:	ec 01       	movw	r28, r24
    167c:	7b 01       	movw	r14, r22
    167e:	8a 01       	movw	r16, r20
    1680:	ba 01       	movw	r22, r20
    1682:	da df       	rcall	.-76     	; 0x1638 <_ZN6String7reserveEj>
    1684:	81 11       	cpse	r24, r1
    1686:	03 c0       	rjmp	.+6      	; 0x168e <_ZN6String4copyEPKcj+0x20>
    1688:	ce 01       	movw	r24, r28
    168a:	ac df       	rcall	.-168    	; 0x15e4 <_ZN6String10invalidateEv>
    168c:	06 c0       	rjmp	.+12     	; 0x169a <_ZN6String4copyEPKcj+0x2c>
    168e:	1d 83       	std	Y+5, r17	; 0x05
    1690:	0c 83       	std	Y+4, r16	; 0x04
    1692:	b7 01       	movw	r22, r14
    1694:	88 81       	ld	r24, Y
    1696:	99 81       	ldd	r25, Y+1	; 0x01
    1698:	1d d5       	rcall	.+2618   	; 0x20d4 <strcpy>
    169a:	ce 01       	movw	r24, r28
    169c:	df 91       	pop	r29
    169e:	cf 91       	pop	r28
    16a0:	1f 91       	pop	r17
    16a2:	0f 91       	pop	r16
    16a4:	ff 90       	pop	r15
    16a6:	ef 90       	pop	r14
    16a8:	08 95       	ret

000016aa <_ZN6StringC1EPKc>:
    16aa:	fc 01       	movw	r30, r24
    16ac:	11 82       	std	Z+1, r1	; 0x01
    16ae:	10 82       	st	Z, r1
    16b0:	13 82       	std	Z+3, r1	; 0x03
    16b2:	12 82       	std	Z+2, r1	; 0x02
    16b4:	15 82       	std	Z+5, r1	; 0x05
    16b6:	14 82       	std	Z+4, r1	; 0x04
    16b8:	61 15       	cp	r22, r1
    16ba:	71 05       	cpc	r23, r1
    16bc:	49 f0       	breq	.+18     	; 0x16d0 <_ZN6StringC1EPKc+0x26>
    16be:	fb 01       	movw	r30, r22
    16c0:	01 90       	ld	r0, Z+
    16c2:	00 20       	and	r0, r0
    16c4:	e9 f7       	brne	.-6      	; 0x16c0 <_ZN6StringC1EPKc+0x16>
    16c6:	31 97       	sbiw	r30, 0x01	; 1
    16c8:	af 01       	movw	r20, r30
    16ca:	46 1b       	sub	r20, r22
    16cc:	57 0b       	sbc	r21, r23
    16ce:	cf cf       	rjmp	.-98     	; 0x166e <_ZN6String4copyEPKcj>
    16d0:	08 95       	ret

000016d2 <_ZN6String6concatEPKcj>:
    16d2:	ef 92       	push	r14
    16d4:	ff 92       	push	r15
    16d6:	0f 93       	push	r16
    16d8:	1f 93       	push	r17
    16da:	cf 93       	push	r28
    16dc:	df 93       	push	r29
    16de:	61 15       	cp	r22, r1
    16e0:	71 05       	cpc	r23, r1
    16e2:	11 f4       	brne	.+4      	; 0x16e8 <_ZN6String6concatEPKcj+0x16>
    16e4:	80 e0       	ldi	r24, 0x00	; 0
    16e6:	1a c0       	rjmp	.+52     	; 0x171c <_ZN6String6concatEPKcj+0x4a>
    16e8:	41 15       	cp	r20, r1
    16ea:	51 05       	cpc	r21, r1
    16ec:	b1 f0       	breq	.+44     	; 0x171a <_ZN6String6concatEPKcj+0x48>
    16ee:	7b 01       	movw	r14, r22
    16f0:	ec 01       	movw	r28, r24
    16f2:	8c 81       	ldd	r24, Y+4	; 0x04
    16f4:	9d 81       	ldd	r25, Y+5	; 0x05
    16f6:	8a 01       	movw	r16, r20
    16f8:	08 0f       	add	r16, r24
    16fa:	19 1f       	adc	r17, r25
    16fc:	b8 01       	movw	r22, r16
    16fe:	ce 01       	movw	r24, r28
    1700:	9b df       	rcall	.-202    	; 0x1638 <_ZN6String7reserveEj>
    1702:	88 23       	and	r24, r24
    1704:	79 f3       	breq	.-34     	; 0x16e4 <_ZN6String6concatEPKcj+0x12>
    1706:	28 81       	ld	r18, Y
    1708:	39 81       	ldd	r19, Y+1	; 0x01
    170a:	8c 81       	ldd	r24, Y+4	; 0x04
    170c:	9d 81       	ldd	r25, Y+5	; 0x05
    170e:	b7 01       	movw	r22, r14
    1710:	82 0f       	add	r24, r18
    1712:	93 1f       	adc	r25, r19
    1714:	df d4       	rcall	.+2494   	; 0x20d4 <strcpy>
    1716:	1d 83       	std	Y+5, r17	; 0x05
    1718:	0c 83       	std	Y+4, r16	; 0x04
    171a:	81 e0       	ldi	r24, 0x01	; 1
    171c:	df 91       	pop	r29
    171e:	cf 91       	pop	r28
    1720:	1f 91       	pop	r17
    1722:	0f 91       	pop	r16
    1724:	ff 90       	pop	r15
    1726:	ef 90       	pop	r14
    1728:	08 95       	ret

0000172a <_ZN6String6concatEc>:
    172a:	cf 93       	push	r28
    172c:	df 93       	push	r29
    172e:	1f 92       	push	r1
    1730:	1f 92       	push	r1
    1732:	cd b7       	in	r28, 0x3d	; 61
    1734:	de b7       	in	r29, 0x3e	; 62
    1736:	69 83       	std	Y+1, r22	; 0x01
    1738:	1a 82       	std	Y+2, r1	; 0x02
    173a:	41 e0       	ldi	r20, 0x01	; 1
    173c:	50 e0       	ldi	r21, 0x00	; 0
    173e:	be 01       	movw	r22, r28
    1740:	6f 5f       	subi	r22, 0xFF	; 255
    1742:	7f 4f       	sbci	r23, 0xFF	; 255
    1744:	c6 df       	rcall	.-116    	; 0x16d2 <_ZN6String6concatEPKcj>
    1746:	0f 90       	pop	r0
    1748:	0f 90       	pop	r0
    174a:	df 91       	pop	r29
    174c:	cf 91       	pop	r28
    174e:	08 95       	ret

00001750 <_ZNK6String8getBytesEPhjj>:
	if (index >= len || !buffer) return 0;
	return buffer[index];
}

void String::getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index) const
{
    1750:	0f 93       	push	r16
    1752:	1f 93       	push	r17
    1754:	cf 93       	push	r28
    1756:	df 93       	push	r29
	if (!bufsize || !buf) return;
    1758:	41 15       	cp	r20, r1
    175a:	51 05       	cpc	r21, r1
    175c:	11 f1       	breq	.+68     	; 0x17a2 <_ZNK6String8getBytesEPhjj+0x52>
    175e:	61 15       	cp	r22, r1
    1760:	71 05       	cpc	r23, r1
    1762:	f9 f0       	breq	.+62     	; 0x17a2 <_ZNK6String8getBytesEPhjj+0x52>
	if (index >= len) {
    1764:	dc 01       	movw	r26, r24
    1766:	14 96       	adiw	r26, 0x04	; 4
    1768:	ed 91       	ld	r30, X+
    176a:	fc 91       	ld	r31, X
    176c:	15 97       	sbiw	r26, 0x05	; 5
    176e:	2e 17       	cp	r18, r30
    1770:	3f 07       	cpc	r19, r31
    1772:	18 f0       	brcs	.+6      	; 0x177a <_ZNK6String8getBytesEPhjj+0x2a>
		buf[0] = 0;
    1774:	fb 01       	movw	r30, r22
    1776:	10 82       	st	Z, r1
		return;
    1778:	14 c0       	rjmp	.+40     	; 0x17a2 <_ZNK6String8getBytesEPhjj+0x52>
	}
	unsigned int n = bufsize - 1;
	if (n > len - index) n = len - index;
    177a:	e2 1b       	sub	r30, r18
    177c:	f3 0b       	sbc	r31, r19
    177e:	ea 01       	movw	r28, r20
    1780:	21 97       	sbiw	r28, 0x01	; 1
    1782:	ec 17       	cp	r30, r28
    1784:	fd 07       	cpc	r31, r29
    1786:	08 f4       	brcc	.+2      	; 0x178a <_ZNK6String8getBytesEPhjj+0x3a>
    1788:	ef 01       	movw	r28, r30
    178a:	8b 01       	movw	r16, r22
    178c:	fc 01       	movw	r30, r24
	strncpy((char *)buf, buffer + index, n);
    178e:	60 81       	ld	r22, Z
    1790:	71 81       	ldd	r23, Z+1	; 0x01
    1792:	62 0f       	add	r22, r18
    1794:	73 1f       	adc	r23, r19
    1796:	ae 01       	movw	r20, r28
    1798:	c8 01       	movw	r24, r16
    179a:	ad d4       	rcall	.+2394   	; 0x20f6 <strncpy>
	buf[n] = 0;
    179c:	c0 0f       	add	r28, r16
    179e:	d1 1f       	adc	r29, r17
    17a0:	18 82       	st	Y, r1
}
    17a2:	df 91       	pop	r29
    17a4:	cf 91       	pop	r28
    17a6:	1f 91       	pop	r17
    17a8:	0f 91       	pop	r16
    17aa:	08 95       	ret

000017ac <__cmpsf2>:
    17ac:	78 d9       	rcall	.-3344   	; 0xa9e <__fp_cmp>
    17ae:	08 f4       	brcc	.+2      	; 0x17b2 <__cmpsf2+0x6>
    17b0:	81 e0       	ldi	r24, 0x01	; 1
    17b2:	08 95       	ret

000017b4 <__divsf3>:
    17b4:	0c d0       	rcall	.+24     	; 0x17ce <__divsf3x>
    17b6:	35 c9       	rjmp	.-3478   	; 0xa22 <__fp_round>
    17b8:	2d d9       	rcall	.-3494   	; 0xa14 <__fp_pscB>
    17ba:	40 f0       	brcs	.+16     	; 0x17cc <__divsf3+0x18>
    17bc:	24 d9       	rcall	.-3512   	; 0xa06 <__fp_pscA>
    17be:	30 f0       	brcs	.+12     	; 0x17cc <__divsf3+0x18>
    17c0:	21 f4       	brne	.+8      	; 0x17ca <__divsf3+0x16>
    17c2:	5f 3f       	cpi	r21, 0xFF	; 255
    17c4:	19 f0       	breq	.+6      	; 0x17cc <__divsf3+0x18>
    17c6:	16 c9       	rjmp	.-3540   	; 0x9f4 <__fp_inf>
    17c8:	51 11       	cpse	r21, r1
    17ca:	5f c9       	rjmp	.-3394   	; 0xa8a <__fp_szero>
    17cc:	19 c9       	rjmp	.-3534   	; 0xa00 <__fp_nan>

000017ce <__divsf3x>:
    17ce:	3a d9       	rcall	.-3468   	; 0xa44 <__fp_split3>
    17d0:	98 f3       	brcs	.-26     	; 0x17b8 <__divsf3+0x4>

000017d2 <__divsf3_pse>:
    17d2:	99 23       	and	r25, r25
    17d4:	c9 f3       	breq	.-14     	; 0x17c8 <__divsf3+0x14>
    17d6:	55 23       	and	r21, r21
    17d8:	b1 f3       	breq	.-20     	; 0x17c6 <__divsf3+0x12>
    17da:	95 1b       	sub	r25, r21
    17dc:	55 0b       	sbc	r21, r21
    17de:	bb 27       	eor	r27, r27
    17e0:	aa 27       	eor	r26, r26
    17e2:	62 17       	cp	r22, r18
    17e4:	73 07       	cpc	r23, r19
    17e6:	84 07       	cpc	r24, r20
    17e8:	38 f0       	brcs	.+14     	; 0x17f8 <__divsf3_pse+0x26>
    17ea:	9f 5f       	subi	r25, 0xFF	; 255
    17ec:	5f 4f       	sbci	r21, 0xFF	; 255
    17ee:	22 0f       	add	r18, r18
    17f0:	33 1f       	adc	r19, r19
    17f2:	44 1f       	adc	r20, r20
    17f4:	aa 1f       	adc	r26, r26
    17f6:	a9 f3       	breq	.-22     	; 0x17e2 <__divsf3_pse+0x10>
    17f8:	33 d0       	rcall	.+102    	; 0x1860 <__divsf3_pse+0x8e>
    17fa:	0e 2e       	mov	r0, r30
    17fc:	3a f0       	brmi	.+14     	; 0x180c <__divsf3_pse+0x3a>
    17fe:	e0 e8       	ldi	r30, 0x80	; 128
    1800:	30 d0       	rcall	.+96     	; 0x1862 <__divsf3_pse+0x90>
    1802:	91 50       	subi	r25, 0x01	; 1
    1804:	50 40       	sbci	r21, 0x00	; 0
    1806:	e6 95       	lsr	r30
    1808:	00 1c       	adc	r0, r0
    180a:	ca f7       	brpl	.-14     	; 0x17fe <__divsf3_pse+0x2c>
    180c:	29 d0       	rcall	.+82     	; 0x1860 <__divsf3_pse+0x8e>
    180e:	fe 2f       	mov	r31, r30
    1810:	27 d0       	rcall	.+78     	; 0x1860 <__divsf3_pse+0x8e>
    1812:	66 0f       	add	r22, r22
    1814:	77 1f       	adc	r23, r23
    1816:	88 1f       	adc	r24, r24
    1818:	bb 1f       	adc	r27, r27
    181a:	26 17       	cp	r18, r22
    181c:	37 07       	cpc	r19, r23
    181e:	48 07       	cpc	r20, r24
    1820:	ab 07       	cpc	r26, r27
    1822:	b0 e8       	ldi	r27, 0x80	; 128
    1824:	09 f0       	breq	.+2      	; 0x1828 <__divsf3_pse+0x56>
    1826:	bb 0b       	sbc	r27, r27
    1828:	80 2d       	mov	r24, r0
    182a:	bf 01       	movw	r22, r30
    182c:	ff 27       	eor	r31, r31
    182e:	93 58       	subi	r25, 0x83	; 131
    1830:	5f 4f       	sbci	r21, 0xFF	; 255
    1832:	2a f0       	brmi	.+10     	; 0x183e <__divsf3_pse+0x6c>
    1834:	9e 3f       	cpi	r25, 0xFE	; 254
    1836:	51 05       	cpc	r21, r1
    1838:	68 f0       	brcs	.+26     	; 0x1854 <__divsf3_pse+0x82>
    183a:	dc c8       	rjmp	.-3656   	; 0x9f4 <__fp_inf>
    183c:	26 c9       	rjmp	.-3508   	; 0xa8a <__fp_szero>
    183e:	5f 3f       	cpi	r21, 0xFF	; 255
    1840:	ec f3       	brlt	.-6      	; 0x183c <__divsf3_pse+0x6a>
    1842:	98 3e       	cpi	r25, 0xE8	; 232
    1844:	dc f3       	brlt	.-10     	; 0x183c <__divsf3_pse+0x6a>
    1846:	86 95       	lsr	r24
    1848:	77 95       	ror	r23
    184a:	67 95       	ror	r22
    184c:	b7 95       	ror	r27
    184e:	f7 95       	ror	r31
    1850:	9f 5f       	subi	r25, 0xFF	; 255
    1852:	c9 f7       	brne	.-14     	; 0x1846 <__divsf3_pse+0x74>
    1854:	88 0f       	add	r24, r24
    1856:	91 1d       	adc	r25, r1
    1858:	96 95       	lsr	r25
    185a:	87 95       	ror	r24
    185c:	97 f9       	bld	r25, 7
    185e:	08 95       	ret
    1860:	e1 e0       	ldi	r30, 0x01	; 1
    1862:	66 0f       	add	r22, r22
    1864:	77 1f       	adc	r23, r23
    1866:	88 1f       	adc	r24, r24
    1868:	bb 1f       	adc	r27, r27
    186a:	62 17       	cp	r22, r18
    186c:	73 07       	cpc	r23, r19
    186e:	84 07       	cpc	r24, r20
    1870:	ba 07       	cpc	r27, r26
    1872:	20 f0       	brcs	.+8      	; 0x187c <__divsf3_pse+0xaa>
    1874:	62 1b       	sub	r22, r18
    1876:	73 0b       	sbc	r23, r19
    1878:	84 0b       	sbc	r24, r20
    187a:	ba 0b       	sbc	r27, r26
    187c:	ee 1f       	adc	r30, r30
    187e:	88 f7       	brcc	.-30     	; 0x1862 <__divsf3_pse+0x90>
    1880:	e0 95       	com	r30
    1882:	08 95       	ret

00001884 <__mulsf3>:
    1884:	0b d0       	rcall	.+22     	; 0x189c <__mulsf3x>
    1886:	cd c8       	rjmp	.-3686   	; 0xa22 <__fp_round>
    1888:	be d8       	rcall	.-3716   	; 0xa06 <__fp_pscA>
    188a:	28 f0       	brcs	.+10     	; 0x1896 <__mulsf3+0x12>
    188c:	c3 d8       	rcall	.-3706   	; 0xa14 <__fp_pscB>
    188e:	18 f0       	brcs	.+6      	; 0x1896 <__mulsf3+0x12>
    1890:	95 23       	and	r25, r21
    1892:	09 f0       	breq	.+2      	; 0x1896 <__mulsf3+0x12>
    1894:	af c8       	rjmp	.-3746   	; 0x9f4 <__fp_inf>
    1896:	b4 c8       	rjmp	.-3736   	; 0xa00 <__fp_nan>
    1898:	11 24       	eor	r1, r1
    189a:	f7 c8       	rjmp	.-3602   	; 0xa8a <__fp_szero>

0000189c <__mulsf3x>:
    189c:	d3 d8       	rcall	.-3674   	; 0xa44 <__fp_split3>
    189e:	a0 f3       	brcs	.-24     	; 0x1888 <__mulsf3+0x4>

000018a0 <__mulsf3_pse>:
    18a0:	95 9f       	mul	r25, r21
    18a2:	d1 f3       	breq	.-12     	; 0x1898 <__mulsf3+0x14>
    18a4:	95 0f       	add	r25, r21
    18a6:	50 e0       	ldi	r21, 0x00	; 0
    18a8:	55 1f       	adc	r21, r21
    18aa:	62 9f       	mul	r22, r18
    18ac:	f0 01       	movw	r30, r0
    18ae:	72 9f       	mul	r23, r18
    18b0:	bb 27       	eor	r27, r27
    18b2:	f0 0d       	add	r31, r0
    18b4:	b1 1d       	adc	r27, r1
    18b6:	63 9f       	mul	r22, r19
    18b8:	aa 27       	eor	r26, r26
    18ba:	f0 0d       	add	r31, r0
    18bc:	b1 1d       	adc	r27, r1
    18be:	aa 1f       	adc	r26, r26
    18c0:	64 9f       	mul	r22, r20
    18c2:	66 27       	eor	r22, r22
    18c4:	b0 0d       	add	r27, r0
    18c6:	a1 1d       	adc	r26, r1
    18c8:	66 1f       	adc	r22, r22
    18ca:	82 9f       	mul	r24, r18
    18cc:	22 27       	eor	r18, r18
    18ce:	b0 0d       	add	r27, r0
    18d0:	a1 1d       	adc	r26, r1
    18d2:	62 1f       	adc	r22, r18
    18d4:	73 9f       	mul	r23, r19
    18d6:	b0 0d       	add	r27, r0
    18d8:	a1 1d       	adc	r26, r1
    18da:	62 1f       	adc	r22, r18
    18dc:	83 9f       	mul	r24, r19
    18de:	a0 0d       	add	r26, r0
    18e0:	61 1d       	adc	r22, r1
    18e2:	22 1f       	adc	r18, r18
    18e4:	74 9f       	mul	r23, r20
    18e6:	33 27       	eor	r19, r19
    18e8:	a0 0d       	add	r26, r0
    18ea:	61 1d       	adc	r22, r1
    18ec:	23 1f       	adc	r18, r19
    18ee:	84 9f       	mul	r24, r20
    18f0:	60 0d       	add	r22, r0
    18f2:	21 1d       	adc	r18, r1
    18f4:	82 2f       	mov	r24, r18
    18f6:	76 2f       	mov	r23, r22
    18f8:	6a 2f       	mov	r22, r26
    18fa:	11 24       	eor	r1, r1
    18fc:	9f 57       	subi	r25, 0x7F	; 127
    18fe:	50 40       	sbci	r21, 0x00	; 0
    1900:	8a f0       	brmi	.+34     	; 0x1924 <__mulsf3_pse+0x84>
    1902:	e1 f0       	breq	.+56     	; 0x193c <__mulsf3_pse+0x9c>
    1904:	88 23       	and	r24, r24
    1906:	4a f0       	brmi	.+18     	; 0x191a <__mulsf3_pse+0x7a>
    1908:	ee 0f       	add	r30, r30
    190a:	ff 1f       	adc	r31, r31
    190c:	bb 1f       	adc	r27, r27
    190e:	66 1f       	adc	r22, r22
    1910:	77 1f       	adc	r23, r23
    1912:	88 1f       	adc	r24, r24
    1914:	91 50       	subi	r25, 0x01	; 1
    1916:	50 40       	sbci	r21, 0x00	; 0
    1918:	a9 f7       	brne	.-22     	; 0x1904 <__mulsf3_pse+0x64>
    191a:	9e 3f       	cpi	r25, 0xFE	; 254
    191c:	51 05       	cpc	r21, r1
    191e:	70 f0       	brcs	.+28     	; 0x193c <__mulsf3_pse+0x9c>
    1920:	69 c8       	rjmp	.-3886   	; 0x9f4 <__fp_inf>
    1922:	b3 c8       	rjmp	.-3738   	; 0xa8a <__fp_szero>
    1924:	5f 3f       	cpi	r21, 0xFF	; 255
    1926:	ec f3       	brlt	.-6      	; 0x1922 <__mulsf3_pse+0x82>
    1928:	98 3e       	cpi	r25, 0xE8	; 232
    192a:	dc f3       	brlt	.-10     	; 0x1922 <__mulsf3_pse+0x82>
    192c:	86 95       	lsr	r24
    192e:	77 95       	ror	r23
    1930:	67 95       	ror	r22
    1932:	b7 95       	ror	r27
    1934:	f7 95       	ror	r31
    1936:	e7 95       	ror	r30
    1938:	9f 5f       	subi	r25, 0xFF	; 255
    193a:	c1 f7       	brne	.-16     	; 0x192c <__mulsf3_pse+0x8c>
    193c:	fe 2b       	or	r31, r30
    193e:	88 0f       	add	r24, r24
    1940:	91 1d       	adc	r25, r1
    1942:	96 95       	lsr	r25
    1944:	87 95       	ror	r24
    1946:	97 f9       	bld	r25, 7
    1948:	08 95       	ret

0000194a <__unordsf2>:
    194a:	a9 d8       	rcall	.-3758   	; 0xa9e <__fp_cmp>
    194c:	88 0b       	sbc	r24, r24
    194e:	99 0b       	sbc	r25, r25
    1950:	08 95       	ret

00001952 <__udivmodsi4>:
    1952:	a1 e2       	ldi	r26, 0x21	; 33
    1954:	1a 2e       	mov	r1, r26
    1956:	aa 1b       	sub	r26, r26
    1958:	bb 1b       	sub	r27, r27
    195a:	fd 01       	movw	r30, r26
    195c:	0d c0       	rjmp	.+26     	; 0x1978 <__udivmodsi4_ep>

0000195e <__udivmodsi4_loop>:
    195e:	aa 1f       	adc	r26, r26
    1960:	bb 1f       	adc	r27, r27
    1962:	ee 1f       	adc	r30, r30
    1964:	ff 1f       	adc	r31, r31
    1966:	a2 17       	cp	r26, r18
    1968:	b3 07       	cpc	r27, r19
    196a:	e4 07       	cpc	r30, r20
    196c:	f5 07       	cpc	r31, r21
    196e:	20 f0       	brcs	.+8      	; 0x1978 <__udivmodsi4_ep>
    1970:	a2 1b       	sub	r26, r18
    1972:	b3 0b       	sbc	r27, r19
    1974:	e4 0b       	sbc	r30, r20
    1976:	f5 0b       	sbc	r31, r21

00001978 <__udivmodsi4_ep>:
    1978:	66 1f       	adc	r22, r22
    197a:	77 1f       	adc	r23, r23
    197c:	88 1f       	adc	r24, r24
    197e:	99 1f       	adc	r25, r25
    1980:	1a 94       	dec	r1
    1982:	69 f7       	brne	.-38     	; 0x195e <__udivmodsi4_loop>
    1984:	60 95       	com	r22
    1986:	70 95       	com	r23
    1988:	80 95       	com	r24
    198a:	90 95       	com	r25
    198c:	9b 01       	movw	r18, r22
    198e:	ac 01       	movw	r20, r24
    1990:	bd 01       	movw	r22, r26
    1992:	cf 01       	movw	r24, r30
    1994:	08 95       	ret

00001996 <__tablejump2__>:
    1996:	ee 0f       	add	r30, r30
    1998:	ff 1f       	adc	r31, r31
    199a:	88 1f       	adc	r24, r24
    199c:	8b bf       	out	0x3b, r24	; 59
    199e:	07 90       	elpm	r0, Z+
    19a0:	f6 91       	elpm	r31, Z
    19a2:	e0 2d       	mov	r30, r0
    19a4:	19 94       	eijmp

000019a6 <__muluhisi3>:
    19a6:	09 d0       	rcall	.+18     	; 0x19ba <__umulhisi3>
    19a8:	a5 9f       	mul	r26, r21
    19aa:	90 0d       	add	r25, r0
    19ac:	b4 9f       	mul	r27, r20
    19ae:	90 0d       	add	r25, r0
    19b0:	a4 9f       	mul	r26, r20
    19b2:	80 0d       	add	r24, r0
    19b4:	91 1d       	adc	r25, r1
    19b6:	11 24       	eor	r1, r1
    19b8:	08 95       	ret

000019ba <__umulhisi3>:
    19ba:	a2 9f       	mul	r26, r18
    19bc:	b0 01       	movw	r22, r0
    19be:	b3 9f       	mul	r27, r19
    19c0:	c0 01       	movw	r24, r0
    19c2:	a3 9f       	mul	r26, r19
    19c4:	70 0d       	add	r23, r0
    19c6:	81 1d       	adc	r24, r1
    19c8:	11 24       	eor	r1, r1
    19ca:	91 1d       	adc	r25, r1
    19cc:	b2 9f       	mul	r27, r18
    19ce:	70 0d       	add	r23, r0
    19d0:	81 1d       	adc	r24, r1
    19d2:	11 24       	eor	r1, r1
    19d4:	91 1d       	adc	r25, r1
    19d6:	08 95       	ret

000019d8 <malloc>:
    19d8:	0f 93       	push	r16
    19da:	1f 93       	push	r17
    19dc:	cf 93       	push	r28
    19de:	df 93       	push	r29
    19e0:	82 30       	cpi	r24, 0x02	; 2
    19e2:	91 05       	cpc	r25, r1
    19e4:	10 f4       	brcc	.+4      	; 0x19ea <malloc+0x12>
    19e6:	82 e0       	ldi	r24, 0x02	; 2
    19e8:	90 e0       	ldi	r25, 0x00	; 0
    19ea:	e0 91 e6 02 	lds	r30, 0x02E6	; 0x8002e6 <__flp>
    19ee:	f0 91 e7 02 	lds	r31, 0x02E7	; 0x8002e7 <__flp+0x1>
    19f2:	20 e0       	ldi	r18, 0x00	; 0
    19f4:	30 e0       	ldi	r19, 0x00	; 0
    19f6:	a0 e0       	ldi	r26, 0x00	; 0
    19f8:	b0 e0       	ldi	r27, 0x00	; 0
    19fa:	30 97       	sbiw	r30, 0x00	; 0
    19fc:	19 f1       	breq	.+70     	; 0x1a44 <malloc+0x6c>
    19fe:	40 81       	ld	r20, Z
    1a00:	51 81       	ldd	r21, Z+1	; 0x01
    1a02:	02 81       	ldd	r16, Z+2	; 0x02
    1a04:	13 81       	ldd	r17, Z+3	; 0x03
    1a06:	48 17       	cp	r20, r24
    1a08:	59 07       	cpc	r21, r25
    1a0a:	c8 f0       	brcs	.+50     	; 0x1a3e <malloc+0x66>
    1a0c:	84 17       	cp	r24, r20
    1a0e:	95 07       	cpc	r25, r21
    1a10:	69 f4       	brne	.+26     	; 0x1a2c <malloc+0x54>
    1a12:	10 97       	sbiw	r26, 0x00	; 0
    1a14:	31 f0       	breq	.+12     	; 0x1a22 <malloc+0x4a>
    1a16:	12 96       	adiw	r26, 0x02	; 2
    1a18:	0c 93       	st	X, r16
    1a1a:	12 97       	sbiw	r26, 0x02	; 2
    1a1c:	13 96       	adiw	r26, 0x03	; 3
    1a1e:	1c 93       	st	X, r17
    1a20:	27 c0       	rjmp	.+78     	; 0x1a70 <malloc+0x98>
    1a22:	00 93 e6 02 	sts	0x02E6, r16	; 0x8002e6 <__flp>
    1a26:	10 93 e7 02 	sts	0x02E7, r17	; 0x8002e7 <__flp+0x1>
    1a2a:	22 c0       	rjmp	.+68     	; 0x1a70 <malloc+0x98>
    1a2c:	21 15       	cp	r18, r1
    1a2e:	31 05       	cpc	r19, r1
    1a30:	19 f0       	breq	.+6      	; 0x1a38 <malloc+0x60>
    1a32:	42 17       	cp	r20, r18
    1a34:	53 07       	cpc	r21, r19
    1a36:	18 f4       	brcc	.+6      	; 0x1a3e <malloc+0x66>
    1a38:	9a 01       	movw	r18, r20
    1a3a:	bd 01       	movw	r22, r26
    1a3c:	ef 01       	movw	r28, r30
    1a3e:	df 01       	movw	r26, r30
    1a40:	f8 01       	movw	r30, r16
    1a42:	db cf       	rjmp	.-74     	; 0x19fa <malloc+0x22>
    1a44:	21 15       	cp	r18, r1
    1a46:	31 05       	cpc	r19, r1
    1a48:	f9 f0       	breq	.+62     	; 0x1a88 <malloc+0xb0>
    1a4a:	28 1b       	sub	r18, r24
    1a4c:	39 0b       	sbc	r19, r25
    1a4e:	24 30       	cpi	r18, 0x04	; 4
    1a50:	31 05       	cpc	r19, r1
    1a52:	80 f4       	brcc	.+32     	; 0x1a74 <malloc+0x9c>
    1a54:	8a 81       	ldd	r24, Y+2	; 0x02
    1a56:	9b 81       	ldd	r25, Y+3	; 0x03
    1a58:	61 15       	cp	r22, r1
    1a5a:	71 05       	cpc	r23, r1
    1a5c:	21 f0       	breq	.+8      	; 0x1a66 <malloc+0x8e>
    1a5e:	fb 01       	movw	r30, r22
    1a60:	93 83       	std	Z+3, r25	; 0x03
    1a62:	82 83       	std	Z+2, r24	; 0x02
    1a64:	04 c0       	rjmp	.+8      	; 0x1a6e <malloc+0x96>
    1a66:	90 93 e7 02 	sts	0x02E7, r25	; 0x8002e7 <__flp+0x1>
    1a6a:	80 93 e6 02 	sts	0x02E6, r24	; 0x8002e6 <__flp>
    1a6e:	fe 01       	movw	r30, r28
    1a70:	32 96       	adiw	r30, 0x02	; 2
    1a72:	44 c0       	rjmp	.+136    	; 0x1afc <malloc+0x124>
    1a74:	fe 01       	movw	r30, r28
    1a76:	e2 0f       	add	r30, r18
    1a78:	f3 1f       	adc	r31, r19
    1a7a:	81 93       	st	Z+, r24
    1a7c:	91 93       	st	Z+, r25
    1a7e:	22 50       	subi	r18, 0x02	; 2
    1a80:	31 09       	sbc	r19, r1
    1a82:	39 83       	std	Y+1, r19	; 0x01
    1a84:	28 83       	st	Y, r18
    1a86:	3a c0       	rjmp	.+116    	; 0x1afc <malloc+0x124>
    1a88:	20 91 e4 02 	lds	r18, 0x02E4	; 0x8002e4 <__brkval>
    1a8c:	30 91 e5 02 	lds	r19, 0x02E5	; 0x8002e5 <__brkval+0x1>
    1a90:	23 2b       	or	r18, r19
    1a92:	41 f4       	brne	.+16     	; 0x1aa4 <malloc+0xcc>
    1a94:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <__malloc_heap_start>
    1a98:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <__malloc_heap_start+0x1>
    1a9c:	30 93 e5 02 	sts	0x02E5, r19	; 0x8002e5 <__brkval+0x1>
    1aa0:	20 93 e4 02 	sts	0x02E4, r18	; 0x8002e4 <__brkval>
    1aa4:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__data_start>
    1aa8:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__data_start+0x1>
    1aac:	21 15       	cp	r18, r1
    1aae:	31 05       	cpc	r19, r1
    1ab0:	41 f4       	brne	.+16     	; 0x1ac2 <malloc+0xea>
    1ab2:	2d b7       	in	r18, 0x3d	; 61
    1ab4:	3e b7       	in	r19, 0x3e	; 62
    1ab6:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
    1aba:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
    1abe:	24 1b       	sub	r18, r20
    1ac0:	35 0b       	sbc	r19, r21
    1ac2:	e0 91 e4 02 	lds	r30, 0x02E4	; 0x8002e4 <__brkval>
    1ac6:	f0 91 e5 02 	lds	r31, 0x02E5	; 0x8002e5 <__brkval+0x1>
    1aca:	e2 17       	cp	r30, r18
    1acc:	f3 07       	cpc	r31, r19
    1ace:	a0 f4       	brcc	.+40     	; 0x1af8 <malloc+0x120>
    1ad0:	2e 1b       	sub	r18, r30
    1ad2:	3f 0b       	sbc	r19, r31
    1ad4:	28 17       	cp	r18, r24
    1ad6:	39 07       	cpc	r19, r25
    1ad8:	78 f0       	brcs	.+30     	; 0x1af8 <malloc+0x120>
    1ada:	ac 01       	movw	r20, r24
    1adc:	4e 5f       	subi	r20, 0xFE	; 254
    1ade:	5f 4f       	sbci	r21, 0xFF	; 255
    1ae0:	24 17       	cp	r18, r20
    1ae2:	35 07       	cpc	r19, r21
    1ae4:	48 f0       	brcs	.+18     	; 0x1af8 <malloc+0x120>
    1ae6:	4e 0f       	add	r20, r30
    1ae8:	5f 1f       	adc	r21, r31
    1aea:	50 93 e5 02 	sts	0x02E5, r21	; 0x8002e5 <__brkval+0x1>
    1aee:	40 93 e4 02 	sts	0x02E4, r20	; 0x8002e4 <__brkval>
    1af2:	81 93       	st	Z+, r24
    1af4:	91 93       	st	Z+, r25
    1af6:	02 c0       	rjmp	.+4      	; 0x1afc <malloc+0x124>
    1af8:	e0 e0       	ldi	r30, 0x00	; 0
    1afa:	f0 e0       	ldi	r31, 0x00	; 0
    1afc:	cf 01       	movw	r24, r30
    1afe:	df 91       	pop	r29
    1b00:	cf 91       	pop	r28
    1b02:	1f 91       	pop	r17
    1b04:	0f 91       	pop	r16
    1b06:	08 95       	ret

00001b08 <free>:
    1b08:	cf 93       	push	r28
    1b0a:	df 93       	push	r29
    1b0c:	00 97       	sbiw	r24, 0x00	; 0
    1b0e:	09 f4       	brne	.+2      	; 0x1b12 <free+0xa>
    1b10:	81 c0       	rjmp	.+258    	; 0x1c14 <free+0x10c>
    1b12:	fc 01       	movw	r30, r24
    1b14:	32 97       	sbiw	r30, 0x02	; 2
    1b16:	13 82       	std	Z+3, r1	; 0x03
    1b18:	12 82       	std	Z+2, r1	; 0x02
    1b1a:	a0 91 e6 02 	lds	r26, 0x02E6	; 0x8002e6 <__flp>
    1b1e:	b0 91 e7 02 	lds	r27, 0x02E7	; 0x8002e7 <__flp+0x1>
    1b22:	10 97       	sbiw	r26, 0x00	; 0
    1b24:	81 f4       	brne	.+32     	; 0x1b46 <free+0x3e>
    1b26:	20 81       	ld	r18, Z
    1b28:	31 81       	ldd	r19, Z+1	; 0x01
    1b2a:	82 0f       	add	r24, r18
    1b2c:	93 1f       	adc	r25, r19
    1b2e:	20 91 e4 02 	lds	r18, 0x02E4	; 0x8002e4 <__brkval>
    1b32:	30 91 e5 02 	lds	r19, 0x02E5	; 0x8002e5 <__brkval+0x1>
    1b36:	28 17       	cp	r18, r24
    1b38:	39 07       	cpc	r19, r25
    1b3a:	51 f5       	brne	.+84     	; 0x1b90 <free+0x88>
    1b3c:	f0 93 e5 02 	sts	0x02E5, r31	; 0x8002e5 <__brkval+0x1>
    1b40:	e0 93 e4 02 	sts	0x02E4, r30	; 0x8002e4 <__brkval>
    1b44:	67 c0       	rjmp	.+206    	; 0x1c14 <free+0x10c>
    1b46:	ed 01       	movw	r28, r26
    1b48:	20 e0       	ldi	r18, 0x00	; 0
    1b4a:	30 e0       	ldi	r19, 0x00	; 0
    1b4c:	ce 17       	cp	r28, r30
    1b4e:	df 07       	cpc	r29, r31
    1b50:	40 f4       	brcc	.+16     	; 0x1b62 <free+0x5a>
    1b52:	4a 81       	ldd	r20, Y+2	; 0x02
    1b54:	5b 81       	ldd	r21, Y+3	; 0x03
    1b56:	9e 01       	movw	r18, r28
    1b58:	41 15       	cp	r20, r1
    1b5a:	51 05       	cpc	r21, r1
    1b5c:	f1 f0       	breq	.+60     	; 0x1b9a <free+0x92>
    1b5e:	ea 01       	movw	r28, r20
    1b60:	f5 cf       	rjmp	.-22     	; 0x1b4c <free+0x44>
    1b62:	d3 83       	std	Z+3, r29	; 0x03
    1b64:	c2 83       	std	Z+2, r28	; 0x02
    1b66:	40 81       	ld	r20, Z
    1b68:	51 81       	ldd	r21, Z+1	; 0x01
    1b6a:	84 0f       	add	r24, r20
    1b6c:	95 1f       	adc	r25, r21
    1b6e:	c8 17       	cp	r28, r24
    1b70:	d9 07       	cpc	r29, r25
    1b72:	59 f4       	brne	.+22     	; 0x1b8a <free+0x82>
    1b74:	88 81       	ld	r24, Y
    1b76:	99 81       	ldd	r25, Y+1	; 0x01
    1b78:	84 0f       	add	r24, r20
    1b7a:	95 1f       	adc	r25, r21
    1b7c:	02 96       	adiw	r24, 0x02	; 2
    1b7e:	91 83       	std	Z+1, r25	; 0x01
    1b80:	80 83       	st	Z, r24
    1b82:	8a 81       	ldd	r24, Y+2	; 0x02
    1b84:	9b 81       	ldd	r25, Y+3	; 0x03
    1b86:	93 83       	std	Z+3, r25	; 0x03
    1b88:	82 83       	std	Z+2, r24	; 0x02
    1b8a:	21 15       	cp	r18, r1
    1b8c:	31 05       	cpc	r19, r1
    1b8e:	29 f4       	brne	.+10     	; 0x1b9a <free+0x92>
    1b90:	f0 93 e7 02 	sts	0x02E7, r31	; 0x8002e7 <__flp+0x1>
    1b94:	e0 93 e6 02 	sts	0x02E6, r30	; 0x8002e6 <__flp>
    1b98:	3d c0       	rjmp	.+122    	; 0x1c14 <free+0x10c>
    1b9a:	e9 01       	movw	r28, r18
    1b9c:	fb 83       	std	Y+3, r31	; 0x03
    1b9e:	ea 83       	std	Y+2, r30	; 0x02
    1ba0:	49 91       	ld	r20, Y+
    1ba2:	59 91       	ld	r21, Y+
    1ba4:	c4 0f       	add	r28, r20
    1ba6:	d5 1f       	adc	r29, r21
    1ba8:	ec 17       	cp	r30, r28
    1baa:	fd 07       	cpc	r31, r29
    1bac:	61 f4       	brne	.+24     	; 0x1bc6 <free+0xbe>
    1bae:	80 81       	ld	r24, Z
    1bb0:	91 81       	ldd	r25, Z+1	; 0x01
    1bb2:	84 0f       	add	r24, r20
    1bb4:	95 1f       	adc	r25, r21
    1bb6:	02 96       	adiw	r24, 0x02	; 2
    1bb8:	e9 01       	movw	r28, r18
    1bba:	99 83       	std	Y+1, r25	; 0x01
    1bbc:	88 83       	st	Y, r24
    1bbe:	82 81       	ldd	r24, Z+2	; 0x02
    1bc0:	93 81       	ldd	r25, Z+3	; 0x03
    1bc2:	9b 83       	std	Y+3, r25	; 0x03
    1bc4:	8a 83       	std	Y+2, r24	; 0x02
    1bc6:	e0 e0       	ldi	r30, 0x00	; 0
    1bc8:	f0 e0       	ldi	r31, 0x00	; 0
    1bca:	12 96       	adiw	r26, 0x02	; 2
    1bcc:	8d 91       	ld	r24, X+
    1bce:	9c 91       	ld	r25, X
    1bd0:	13 97       	sbiw	r26, 0x03	; 3
    1bd2:	00 97       	sbiw	r24, 0x00	; 0
    1bd4:	19 f0       	breq	.+6      	; 0x1bdc <free+0xd4>
    1bd6:	fd 01       	movw	r30, r26
    1bd8:	dc 01       	movw	r26, r24
    1bda:	f7 cf       	rjmp	.-18     	; 0x1bca <free+0xc2>
    1bdc:	8d 91       	ld	r24, X+
    1bde:	9c 91       	ld	r25, X
    1be0:	11 97       	sbiw	r26, 0x01	; 1
    1be2:	9d 01       	movw	r18, r26
    1be4:	2e 5f       	subi	r18, 0xFE	; 254
    1be6:	3f 4f       	sbci	r19, 0xFF	; 255
    1be8:	82 0f       	add	r24, r18
    1bea:	93 1f       	adc	r25, r19
    1bec:	20 91 e4 02 	lds	r18, 0x02E4	; 0x8002e4 <__brkval>
    1bf0:	30 91 e5 02 	lds	r19, 0x02E5	; 0x8002e5 <__brkval+0x1>
    1bf4:	28 17       	cp	r18, r24
    1bf6:	39 07       	cpc	r19, r25
    1bf8:	69 f4       	brne	.+26     	; 0x1c14 <free+0x10c>
    1bfa:	30 97       	sbiw	r30, 0x00	; 0
    1bfc:	29 f4       	brne	.+10     	; 0x1c08 <free+0x100>
    1bfe:	10 92 e7 02 	sts	0x02E7, r1	; 0x8002e7 <__flp+0x1>
    1c02:	10 92 e6 02 	sts	0x02E6, r1	; 0x8002e6 <__flp>
    1c06:	02 c0       	rjmp	.+4      	; 0x1c0c <free+0x104>
    1c08:	13 82       	std	Z+3, r1	; 0x03
    1c0a:	12 82       	std	Z+2, r1	; 0x02
    1c0c:	b0 93 e5 02 	sts	0x02E5, r27	; 0x8002e5 <__brkval+0x1>
    1c10:	a0 93 e4 02 	sts	0x02E4, r26	; 0x8002e4 <__brkval>
    1c14:	df 91       	pop	r29
    1c16:	cf 91       	pop	r28
    1c18:	08 95       	ret

00001c1a <realloc>:
    1c1a:	6f 92       	push	r6
    1c1c:	7f 92       	push	r7
    1c1e:	8f 92       	push	r8
    1c20:	9f 92       	push	r9
    1c22:	af 92       	push	r10
    1c24:	bf 92       	push	r11
    1c26:	cf 92       	push	r12
    1c28:	df 92       	push	r13
    1c2a:	ef 92       	push	r14
    1c2c:	ff 92       	push	r15
    1c2e:	0f 93       	push	r16
    1c30:	1f 93       	push	r17
    1c32:	cf 93       	push	r28
    1c34:	df 93       	push	r29
    1c36:	00 97       	sbiw	r24, 0x00	; 0
    1c38:	81 f4       	brne	.+32     	; 0x1c5a <realloc+0x40>
    1c3a:	cb 01       	movw	r24, r22
    1c3c:	df 91       	pop	r29
    1c3e:	cf 91       	pop	r28
    1c40:	1f 91       	pop	r17
    1c42:	0f 91       	pop	r16
    1c44:	ff 90       	pop	r15
    1c46:	ef 90       	pop	r14
    1c48:	df 90       	pop	r13
    1c4a:	cf 90       	pop	r12
    1c4c:	bf 90       	pop	r11
    1c4e:	af 90       	pop	r10
    1c50:	9f 90       	pop	r9
    1c52:	8f 90       	pop	r8
    1c54:	7f 90       	pop	r7
    1c56:	6f 90       	pop	r6
    1c58:	bf ce       	rjmp	.-642    	; 0x19d8 <malloc>
    1c5a:	fc 01       	movw	r30, r24
    1c5c:	e6 0f       	add	r30, r22
    1c5e:	f7 1f       	adc	r31, r23
    1c60:	9c 01       	movw	r18, r24
    1c62:	22 50       	subi	r18, 0x02	; 2
    1c64:	31 09       	sbc	r19, r1
    1c66:	e2 17       	cp	r30, r18
    1c68:	f3 07       	cpc	r31, r19
    1c6a:	08 f4       	brcc	.+2      	; 0x1c6e <realloc+0x54>
    1c6c:	a5 c0       	rjmp	.+330    	; 0x1db8 <realloc+0x19e>
    1c6e:	ec 01       	movw	r28, r24
    1c70:	d9 01       	movw	r26, r18
    1c72:	0d 91       	ld	r16, X+
    1c74:	1c 91       	ld	r17, X
    1c76:	11 97       	sbiw	r26, 0x01	; 1
    1c78:	06 17       	cp	r16, r22
    1c7a:	17 07       	cpc	r17, r23
    1c7c:	a8 f0       	brcs	.+42     	; 0x1ca8 <realloc+0x8e>
    1c7e:	05 30       	cpi	r16, 0x05	; 5
    1c80:	11 05       	cpc	r17, r1
    1c82:	08 f4       	brcc	.+2      	; 0x1c86 <realloc+0x6c>
    1c84:	97 c0       	rjmp	.+302    	; 0x1db4 <realloc+0x19a>
    1c86:	c8 01       	movw	r24, r16
    1c88:	04 97       	sbiw	r24, 0x04	; 4
    1c8a:	86 17       	cp	r24, r22
    1c8c:	97 07       	cpc	r25, r23
    1c8e:	08 f4       	brcc	.+2      	; 0x1c92 <realloc+0x78>
    1c90:	91 c0       	rjmp	.+290    	; 0x1db4 <realloc+0x19a>
    1c92:	02 50       	subi	r16, 0x02	; 2
    1c94:	11 09       	sbc	r17, r1
    1c96:	06 1b       	sub	r16, r22
    1c98:	17 0b       	sbc	r17, r23
    1c9a:	01 93       	st	Z+, r16
    1c9c:	11 93       	st	Z+, r17
    1c9e:	6d 93       	st	X+, r22
    1ca0:	7c 93       	st	X, r23
    1ca2:	cf 01       	movw	r24, r30
    1ca4:	31 df       	rcall	.-414    	; 0x1b08 <free>
    1ca6:	86 c0       	rjmp	.+268    	; 0x1db4 <realloc+0x19a>
    1ca8:	5b 01       	movw	r10, r22
    1caa:	a0 1a       	sub	r10, r16
    1cac:	b1 0a       	sbc	r11, r17
    1cae:	4c 01       	movw	r8, r24
    1cb0:	80 0e       	add	r8, r16
    1cb2:	91 1e       	adc	r9, r17
    1cb4:	a0 91 e6 02 	lds	r26, 0x02E6	; 0x8002e6 <__flp>
    1cb8:	b0 91 e7 02 	lds	r27, 0x02E7	; 0x8002e7 <__flp+0x1>
    1cbc:	61 2c       	mov	r6, r1
    1cbe:	71 2c       	mov	r7, r1
    1cc0:	e1 2c       	mov	r14, r1
    1cc2:	f1 2c       	mov	r15, r1
    1cc4:	10 97       	sbiw	r26, 0x00	; 0
    1cc6:	09 f4       	brne	.+2      	; 0x1cca <realloc+0xb0>
    1cc8:	46 c0       	rjmp	.+140    	; 0x1d56 <realloc+0x13c>
    1cca:	8d 91       	ld	r24, X+
    1ccc:	9c 91       	ld	r25, X
    1cce:	11 97       	sbiw	r26, 0x01	; 1
    1cd0:	a8 15       	cp	r26, r8
    1cd2:	b9 05       	cpc	r27, r9
    1cd4:	b1 f5       	brne	.+108    	; 0x1d42 <realloc+0x128>
    1cd6:	6c 01       	movw	r12, r24
    1cd8:	42 e0       	ldi	r20, 0x02	; 2
    1cda:	c4 0e       	add	r12, r20
    1cdc:	d1 1c       	adc	r13, r1
    1cde:	ca 14       	cp	r12, r10
    1ce0:	db 04       	cpc	r13, r11
    1ce2:	78 f1       	brcs	.+94     	; 0x1d42 <realloc+0x128>
    1ce4:	4c 01       	movw	r8, r24
    1ce6:	8a 18       	sub	r8, r10
    1ce8:	9b 08       	sbc	r9, r11
    1cea:	64 01       	movw	r12, r8
    1cec:	42 e0       	ldi	r20, 0x02	; 2
    1cee:	c4 0e       	add	r12, r20
    1cf0:	d1 1c       	adc	r13, r1
    1cf2:	12 96       	adiw	r26, 0x02	; 2
    1cf4:	bc 90       	ld	r11, X
    1cf6:	12 97       	sbiw	r26, 0x02	; 2
    1cf8:	13 96       	adiw	r26, 0x03	; 3
    1cfa:	ac 91       	ld	r26, X
    1cfc:	b5 e0       	ldi	r27, 0x05	; 5
    1cfe:	cb 16       	cp	r12, r27
    1d00:	d1 04       	cpc	r13, r1
    1d02:	40 f0       	brcs	.+16     	; 0x1d14 <realloc+0xfa>
    1d04:	b2 82       	std	Z+2, r11	; 0x02
    1d06:	a3 83       	std	Z+3, r26	; 0x03
    1d08:	91 82       	std	Z+1, r9	; 0x01
    1d0a:	80 82       	st	Z, r8
    1d0c:	d9 01       	movw	r26, r18
    1d0e:	6d 93       	st	X+, r22
    1d10:	7c 93       	st	X, r23
    1d12:	09 c0       	rjmp	.+18     	; 0x1d26 <realloc+0x10c>
    1d14:	0e 5f       	subi	r16, 0xFE	; 254
    1d16:	1f 4f       	sbci	r17, 0xFF	; 255
    1d18:	80 0f       	add	r24, r16
    1d1a:	91 1f       	adc	r25, r17
    1d1c:	f9 01       	movw	r30, r18
    1d1e:	91 83       	std	Z+1, r25	; 0x01
    1d20:	80 83       	st	Z, r24
    1d22:	eb 2d       	mov	r30, r11
    1d24:	fa 2f       	mov	r31, r26
    1d26:	e1 14       	cp	r14, r1
    1d28:	f1 04       	cpc	r15, r1
    1d2a:	31 f0       	breq	.+12     	; 0x1d38 <realloc+0x11e>
    1d2c:	d7 01       	movw	r26, r14
    1d2e:	13 96       	adiw	r26, 0x03	; 3
    1d30:	fc 93       	st	X, r31
    1d32:	ee 93       	st	-X, r30
    1d34:	12 97       	sbiw	r26, 0x02	; 2
    1d36:	3e c0       	rjmp	.+124    	; 0x1db4 <realloc+0x19a>
    1d38:	f0 93 e7 02 	sts	0x02E7, r31	; 0x8002e7 <__flp+0x1>
    1d3c:	e0 93 e6 02 	sts	0x02E6, r30	; 0x8002e6 <__flp>
    1d40:	39 c0       	rjmp	.+114    	; 0x1db4 <realloc+0x19a>
    1d42:	68 16       	cp	r6, r24
    1d44:	79 06       	cpc	r7, r25
    1d46:	08 f4       	brcc	.+2      	; 0x1d4a <realloc+0x130>
    1d48:	3c 01       	movw	r6, r24
    1d4a:	7d 01       	movw	r14, r26
    1d4c:	12 96       	adiw	r26, 0x02	; 2
    1d4e:	0d 90       	ld	r0, X+
    1d50:	bc 91       	ld	r27, X
    1d52:	a0 2d       	mov	r26, r0
    1d54:	b7 cf       	rjmp	.-146    	; 0x1cc4 <realloc+0xaa>
    1d56:	80 91 e4 02 	lds	r24, 0x02E4	; 0x8002e4 <__brkval>
    1d5a:	90 91 e5 02 	lds	r25, 0x02E5	; 0x8002e5 <__brkval+0x1>
    1d5e:	88 16       	cp	r8, r24
    1d60:	99 06       	cpc	r9, r25
    1d62:	e1 f4       	brne	.+56     	; 0x1d9c <realloc+0x182>
    1d64:	66 16       	cp	r6, r22
    1d66:	77 06       	cpc	r7, r23
    1d68:	c8 f4       	brcc	.+50     	; 0x1d9c <realloc+0x182>
    1d6a:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__data_start>
    1d6e:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <__data_start+0x1>
    1d72:	00 97       	sbiw	r24, 0x00	; 0
    1d74:	41 f4       	brne	.+16     	; 0x1d86 <realloc+0x16c>
    1d76:	8d b7       	in	r24, 0x3d	; 61
    1d78:	9e b7       	in	r25, 0x3e	; 62
    1d7a:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
    1d7e:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
    1d82:	84 1b       	sub	r24, r20
    1d84:	95 0b       	sbc	r25, r21
    1d86:	e8 17       	cp	r30, r24
    1d88:	f9 07       	cpc	r31, r25
    1d8a:	b0 f4       	brcc	.+44     	; 0x1db8 <realloc+0x19e>
    1d8c:	f0 93 e5 02 	sts	0x02E5, r31	; 0x8002e5 <__brkval+0x1>
    1d90:	e0 93 e4 02 	sts	0x02E4, r30	; 0x8002e4 <__brkval>
    1d94:	f9 01       	movw	r30, r18
    1d96:	71 83       	std	Z+1, r23	; 0x01
    1d98:	60 83       	st	Z, r22
    1d9a:	0c c0       	rjmp	.+24     	; 0x1db4 <realloc+0x19a>
    1d9c:	cb 01       	movw	r24, r22
    1d9e:	1c de       	rcall	.-968    	; 0x19d8 <malloc>
    1da0:	7c 01       	movw	r14, r24
    1da2:	00 97       	sbiw	r24, 0x00	; 0
    1da4:	49 f0       	breq	.+18     	; 0x1db8 <realloc+0x19e>
    1da6:	a8 01       	movw	r20, r16
    1da8:	be 01       	movw	r22, r28
    1daa:	8b d1       	rcall	.+790    	; 0x20c2 <memcpy>
    1dac:	ce 01       	movw	r24, r28
    1dae:	ac de       	rcall	.-680    	; 0x1b08 <free>
    1db0:	c7 01       	movw	r24, r14
    1db2:	04 c0       	rjmp	.+8      	; 0x1dbc <realloc+0x1a2>
    1db4:	ce 01       	movw	r24, r28
    1db6:	02 c0       	rjmp	.+4      	; 0x1dbc <realloc+0x1a2>
    1db8:	80 e0       	ldi	r24, 0x00	; 0
    1dba:	90 e0       	ldi	r25, 0x00	; 0
    1dbc:	df 91       	pop	r29
    1dbe:	cf 91       	pop	r28
    1dc0:	1f 91       	pop	r17
    1dc2:	0f 91       	pop	r16
    1dc4:	ff 90       	pop	r15
    1dc6:	ef 90       	pop	r14
    1dc8:	df 90       	pop	r13
    1dca:	cf 90       	pop	r12
    1dcc:	bf 90       	pop	r11
    1dce:	af 90       	pop	r10
    1dd0:	9f 90       	pop	r9
    1dd2:	8f 90       	pop	r8
    1dd4:	7f 90       	pop	r7
    1dd6:	6f 90       	pop	r6
    1dd8:	08 95       	ret

00001dda <strtod>:
    1dda:	8f 92       	push	r8
    1ddc:	9f 92       	push	r9
    1dde:	af 92       	push	r10
    1de0:	bf 92       	push	r11
    1de2:	cf 92       	push	r12
    1de4:	df 92       	push	r13
    1de6:	ef 92       	push	r14
    1de8:	ff 92       	push	r15
    1dea:	0f 93       	push	r16
    1dec:	1f 93       	push	r17
    1dee:	cf 93       	push	r28
    1df0:	df 93       	push	r29
    1df2:	ec 01       	movw	r28, r24
    1df4:	6b 01       	movw	r12, r22
    1df6:	61 15       	cp	r22, r1
    1df8:	71 05       	cpc	r23, r1
    1dfa:	19 f0       	breq	.+6      	; 0x1e02 <strtod+0x28>
    1dfc:	fb 01       	movw	r30, r22
    1dfe:	91 83       	std	Z+1, r25	; 0x01
    1e00:	80 83       	st	Z, r24
    1e02:	7e 01       	movw	r14, r28
    1e04:	ff ef       	ldi	r31, 0xFF	; 255
    1e06:	ef 1a       	sub	r14, r31
    1e08:	ff 0a       	sbc	r15, r31
    1e0a:	08 81       	ld	r16, Y
    1e0c:	80 2f       	mov	r24, r16
    1e0e:	90 e0       	ldi	r25, 0x00	; 0
    1e10:	38 d1       	rcall	.+624    	; 0x2082 <isspace>
    1e12:	89 2b       	or	r24, r25
    1e14:	11 f0       	breq	.+4      	; 0x1e1a <strtod+0x40>
    1e16:	e7 01       	movw	r28, r14
    1e18:	f4 cf       	rjmp	.-24     	; 0x1e02 <strtod+0x28>
    1e1a:	0d 32       	cpi	r16, 0x2D	; 45
    1e1c:	39 f4       	brne	.+14     	; 0x1e2c <strtod+0x52>
    1e1e:	7e 01       	movw	r14, r28
    1e20:	82 e0       	ldi	r24, 0x02	; 2
    1e22:	e8 0e       	add	r14, r24
    1e24:	f1 1c       	adc	r15, r1
    1e26:	09 81       	ldd	r16, Y+1	; 0x01
    1e28:	11 e0       	ldi	r17, 0x01	; 1
    1e2a:	08 c0       	rjmp	.+16     	; 0x1e3c <strtod+0x62>
    1e2c:	0b 32       	cpi	r16, 0x2B	; 43
    1e2e:	29 f4       	brne	.+10     	; 0x1e3a <strtod+0x60>
    1e30:	7e 01       	movw	r14, r28
    1e32:	92 e0       	ldi	r25, 0x02	; 2
    1e34:	e9 0e       	add	r14, r25
    1e36:	f1 1c       	adc	r15, r1
    1e38:	09 81       	ldd	r16, Y+1	; 0x01
    1e3a:	10 e0       	ldi	r17, 0x00	; 0
    1e3c:	e7 01       	movw	r28, r14
    1e3e:	21 97       	sbiw	r28, 0x01	; 1
    1e40:	43 e0       	ldi	r20, 0x03	; 3
    1e42:	50 e0       	ldi	r21, 0x00	; 0
    1e44:	60 e1       	ldi	r22, 0x10	; 16
    1e46:	71 e0       	ldi	r23, 0x01	; 1
    1e48:	ce 01       	movw	r24, r28
    1e4a:	23 d1       	rcall	.+582    	; 0x2092 <strncasecmp_P>
    1e4c:	89 2b       	or	r24, r25
    1e4e:	b9 f4       	brne	.+46     	; 0x1e7e <strtod+0xa4>
    1e50:	23 96       	adiw	r28, 0x03	; 3
    1e52:	45 e0       	ldi	r20, 0x05	; 5
    1e54:	50 e0       	ldi	r21, 0x00	; 0
    1e56:	6b e0       	ldi	r22, 0x0B	; 11
    1e58:	71 e0       	ldi	r23, 0x01	; 1
    1e5a:	ce 01       	movw	r24, r28
    1e5c:	1a d1       	rcall	.+564    	; 0x2092 <strncasecmp_P>
    1e5e:	89 2b       	or	r24, r25
    1e60:	09 f4       	brne	.+2      	; 0x1e64 <strtod+0x8a>
    1e62:	25 96       	adiw	r28, 0x05	; 5
    1e64:	c1 14       	cp	r12, r1
    1e66:	d1 04       	cpc	r13, r1
    1e68:	19 f0       	breq	.+6      	; 0x1e70 <strtod+0x96>
    1e6a:	f6 01       	movw	r30, r12
    1e6c:	d1 83       	std	Z+1, r29	; 0x01
    1e6e:	c0 83       	st	Z, r28
    1e70:	11 11       	cpse	r17, r1
    1e72:	f1 c0       	rjmp	.+482    	; 0x2056 <strtod+0x27c>
    1e74:	60 e0       	ldi	r22, 0x00	; 0
    1e76:	70 e0       	ldi	r23, 0x00	; 0
    1e78:	80 e8       	ldi	r24, 0x80	; 128
    1e7a:	9f e7       	ldi	r25, 0x7F	; 127
    1e7c:	f5 c0       	rjmp	.+490    	; 0x2068 <strtod+0x28e>
    1e7e:	43 e0       	ldi	r20, 0x03	; 3
    1e80:	50 e0       	ldi	r21, 0x00	; 0
    1e82:	68 e0       	ldi	r22, 0x08	; 8
    1e84:	71 e0       	ldi	r23, 0x01	; 1
    1e86:	ce 01       	movw	r24, r28
    1e88:	04 d1       	rcall	.+520    	; 0x2092 <strncasecmp_P>
    1e8a:	89 2b       	or	r24, r25
    1e8c:	59 f4       	brne	.+22     	; 0x1ea4 <strtod+0xca>
    1e8e:	c1 14       	cp	r12, r1
    1e90:	d1 04       	cpc	r13, r1
    1e92:	09 f4       	brne	.+2      	; 0x1e96 <strtod+0xbc>
    1e94:	e5 c0       	rjmp	.+458    	; 0x2060 <strtod+0x286>
    1e96:	f2 e0       	ldi	r31, 0x02	; 2
    1e98:	ef 0e       	add	r14, r31
    1e9a:	f1 1c       	adc	r15, r1
    1e9c:	f6 01       	movw	r30, r12
    1e9e:	f1 82       	std	Z+1, r15	; 0x01
    1ea0:	e0 82       	st	Z, r14
    1ea2:	de c0       	rjmp	.+444    	; 0x2060 <strtod+0x286>
    1ea4:	20 e0       	ldi	r18, 0x00	; 0
    1ea6:	30 e0       	ldi	r19, 0x00	; 0
    1ea8:	a9 01       	movw	r20, r18
    1eaa:	c0 e0       	ldi	r28, 0x00	; 0
    1eac:	d0 e0       	ldi	r29, 0x00	; 0
    1eae:	f7 01       	movw	r30, r14
    1eb0:	60 ed       	ldi	r22, 0xD0	; 208
    1eb2:	a6 2e       	mov	r10, r22
    1eb4:	a0 0e       	add	r10, r16
    1eb6:	89 e0       	ldi	r24, 0x09	; 9
    1eb8:	8a 15       	cp	r24, r10
    1eba:	28 f1       	brcs	.+74     	; 0x1f06 <strtod+0x12c>
    1ebc:	91 2f       	mov	r25, r17
    1ebe:	92 60       	ori	r25, 0x02	; 2
    1ec0:	b9 2e       	mov	r11, r25
    1ec2:	81 2f       	mov	r24, r17
    1ec4:	88 70       	andi	r24, 0x08	; 8
    1ec6:	12 ff       	sbrs	r17, 2
    1ec8:	04 c0       	rjmp	.+8      	; 0x1ed2 <strtod+0xf8>
    1eca:	81 11       	cpse	r24, r1
    1ecc:	23 c0       	rjmp	.+70     	; 0x1f14 <strtod+0x13a>
    1ece:	21 96       	adiw	r28, 0x01	; 1
    1ed0:	21 c0       	rjmp	.+66     	; 0x1f14 <strtod+0x13a>
    1ed2:	81 11       	cpse	r24, r1
    1ed4:	21 97       	sbiw	r28, 0x01	; 1
    1ed6:	a5 e0       	ldi	r26, 0x05	; 5
    1ed8:	b0 e0       	ldi	r27, 0x00	; 0
    1eda:	65 dd       	rcall	.-1334   	; 0x19a6 <__muluhisi3>
    1edc:	dc 01       	movw	r26, r24
    1ede:	cb 01       	movw	r24, r22
    1ee0:	88 0f       	add	r24, r24
    1ee2:	99 1f       	adc	r25, r25
    1ee4:	aa 1f       	adc	r26, r26
    1ee6:	bb 1f       	adc	r27, r27
    1ee8:	9c 01       	movw	r18, r24
    1eea:	ad 01       	movw	r20, r26
    1eec:	2a 0d       	add	r18, r10
    1eee:	31 1d       	adc	r19, r1
    1ef0:	41 1d       	adc	r20, r1
    1ef2:	51 1d       	adc	r21, r1
    1ef4:	28 39       	cpi	r18, 0x98	; 152
    1ef6:	89 e9       	ldi	r24, 0x99	; 153
    1ef8:	38 07       	cpc	r19, r24
    1efa:	48 07       	cpc	r20, r24
    1efc:	89 e1       	ldi	r24, 0x19	; 25
    1efe:	58 07       	cpc	r21, r24
    1f00:	48 f0       	brcs	.+18     	; 0x1f14 <strtod+0x13a>
    1f02:	16 60       	ori	r17, 0x06	; 6
    1f04:	06 c0       	rjmp	.+12     	; 0x1f12 <strtod+0x138>
    1f06:	9e ef       	ldi	r25, 0xFE	; 254
    1f08:	a9 12       	cpse	r10, r25
    1f0a:	0a c0       	rjmp	.+20     	; 0x1f20 <strtod+0x146>
    1f0c:	13 fd       	sbrc	r17, 3
    1f0e:	40 c0       	rjmp	.+128    	; 0x1f90 <strtod+0x1b6>
    1f10:	18 60       	ori	r17, 0x08	; 8
    1f12:	b1 2e       	mov	r11, r17
    1f14:	8f ef       	ldi	r24, 0xFF	; 255
    1f16:	e8 1a       	sub	r14, r24
    1f18:	f8 0a       	sbc	r15, r24
    1f1a:	00 81       	ld	r16, Z
    1f1c:	1b 2d       	mov	r17, r11
    1f1e:	c7 cf       	rjmp	.-114    	; 0x1eae <strtod+0xd4>
    1f20:	80 2f       	mov	r24, r16
    1f22:	8f 7d       	andi	r24, 0xDF	; 223
    1f24:	85 34       	cpi	r24, 0x45	; 69
    1f26:	a1 f5       	brne	.+104    	; 0x1f90 <strtod+0x1b6>
    1f28:	80 81       	ld	r24, Z
    1f2a:	8d 32       	cpi	r24, 0x2D	; 45
    1f2c:	11 f4       	brne	.+4      	; 0x1f32 <strtod+0x158>
    1f2e:	10 61       	ori	r17, 0x10	; 16
    1f30:	06 c0       	rjmp	.+12     	; 0x1f3e <strtod+0x164>
    1f32:	8b 32       	cpi	r24, 0x2B	; 43
    1f34:	21 f0       	breq	.+8      	; 0x1f3e <strtod+0x164>
    1f36:	31 96       	adiw	r30, 0x01	; 1
    1f38:	61 e0       	ldi	r22, 0x01	; 1
    1f3a:	70 e0       	ldi	r23, 0x00	; 0
    1f3c:	04 c0       	rjmp	.+8      	; 0x1f46 <strtod+0x16c>
    1f3e:	81 81       	ldd	r24, Z+1	; 0x01
    1f40:	32 96       	adiw	r30, 0x02	; 2
    1f42:	62 e0       	ldi	r22, 0x02	; 2
    1f44:	70 e0       	ldi	r23, 0x00	; 0
    1f46:	80 53       	subi	r24, 0x30	; 48
    1f48:	8a 30       	cpi	r24, 0x0A	; 10
    1f4a:	18 f0       	brcs	.+6      	; 0x1f52 <strtod+0x178>
    1f4c:	e6 1b       	sub	r30, r22
    1f4e:	f7 0b       	sbc	r31, r23
    1f50:	1f c0       	rjmp	.+62     	; 0x1f90 <strtod+0x1b6>
    1f52:	60 e0       	ldi	r22, 0x00	; 0
    1f54:	70 e0       	ldi	r23, 0x00	; 0
    1f56:	60 38       	cpi	r22, 0x80	; 128
    1f58:	9c e0       	ldi	r25, 0x0C	; 12
    1f5a:	79 07       	cpc	r23, r25
    1f5c:	5c f4       	brge	.+22     	; 0x1f74 <strtod+0x19a>
    1f5e:	db 01       	movw	r26, r22
    1f60:	aa 0f       	add	r26, r26
    1f62:	bb 1f       	adc	r27, r27
    1f64:	aa 0f       	add	r26, r26
    1f66:	bb 1f       	adc	r27, r27
    1f68:	6a 0f       	add	r22, r26
    1f6a:	7b 1f       	adc	r23, r27
    1f6c:	66 0f       	add	r22, r22
    1f6e:	77 1f       	adc	r23, r23
    1f70:	68 0f       	add	r22, r24
    1f72:	71 1d       	adc	r23, r1
    1f74:	31 96       	adiw	r30, 0x01	; 1
    1f76:	df 01       	movw	r26, r30
    1f78:	11 97       	sbiw	r26, 0x01	; 1
    1f7a:	8c 91       	ld	r24, X
    1f7c:	80 53       	subi	r24, 0x30	; 48
    1f7e:	8a 30       	cpi	r24, 0x0A	; 10
    1f80:	50 f3       	brcs	.-44     	; 0x1f56 <strtod+0x17c>
    1f82:	14 ff       	sbrs	r17, 4
    1f84:	03 c0       	rjmp	.+6      	; 0x1f8c <strtod+0x1b2>
    1f86:	71 95       	neg	r23
    1f88:	61 95       	neg	r22
    1f8a:	71 09       	sbc	r23, r1
    1f8c:	c6 0f       	add	r28, r22
    1f8e:	d7 1f       	adc	r29, r23
    1f90:	11 ff       	sbrs	r17, 1
    1f92:	08 c0       	rjmp	.+16     	; 0x1fa4 <strtod+0x1ca>
    1f94:	c1 14       	cp	r12, r1
    1f96:	d1 04       	cpc	r13, r1
    1f98:	29 f0       	breq	.+10     	; 0x1fa4 <strtod+0x1ca>
    1f9a:	cf 01       	movw	r24, r30
    1f9c:	01 97       	sbiw	r24, 0x01	; 1
    1f9e:	f6 01       	movw	r30, r12
    1fa0:	91 83       	std	Z+1, r25	; 0x01
    1fa2:	80 83       	st	Z, r24
    1fa4:	ca 01       	movw	r24, r20
    1fa6:	b9 01       	movw	r22, r18
    1fa8:	0e 94 bd 04 	call	0x97a	; 0x97a <__floatunsisf>
    1fac:	21 2f       	mov	r18, r17
    1fae:	23 70       	andi	r18, 0x03	; 3
    1fb0:	23 30       	cpi	r18, 0x03	; 3
    1fb2:	19 f0       	breq	.+6      	; 0x1fba <strtod+0x1e0>
    1fb4:	4b 01       	movw	r8, r22
    1fb6:	5c 01       	movw	r10, r24
    1fb8:	06 c0       	rjmp	.+12     	; 0x1fc6 <strtod+0x1ec>
    1fba:	4b 01       	movw	r8, r22
    1fbc:	5c 01       	movw	r10, r24
    1fbe:	b7 fa       	bst	r11, 7
    1fc0:	b0 94       	com	r11
    1fc2:	b7 f8       	bld	r11, 7
    1fc4:	b0 94       	com	r11
    1fc6:	20 e0       	ldi	r18, 0x00	; 0
    1fc8:	30 e0       	ldi	r19, 0x00	; 0
    1fca:	a9 01       	movw	r20, r18
    1fcc:	c5 01       	movw	r24, r10
    1fce:	b4 01       	movw	r22, r8
    1fd0:	ed db       	rcall	.-2086   	; 0x17ac <__cmpsf2>
    1fd2:	88 23       	and	r24, r24
    1fd4:	09 f4       	brne	.+2      	; 0x1fd8 <strtod+0x1fe>
    1fd6:	3c c0       	rjmp	.+120    	; 0x2050 <strtod+0x276>
    1fd8:	d7 ff       	sbrs	r29, 7
    1fda:	06 c0       	rjmp	.+12     	; 0x1fe8 <strtod+0x20e>
    1fdc:	d1 95       	neg	r29
    1fde:	c1 95       	neg	r28
    1fe0:	d1 09       	sbc	r29, r1
    1fe2:	07 e2       	ldi	r16, 0x27	; 39
    1fe4:	11 e0       	ldi	r17, 0x01	; 1
    1fe6:	02 c0       	rjmp	.+4      	; 0x1fec <strtod+0x212>
    1fe8:	0f e3       	ldi	r16, 0x3F	; 63
    1fea:	11 e0       	ldi	r17, 0x01	; 1
    1fec:	68 01       	movw	r12, r16
    1fee:	f8 e1       	ldi	r31, 0x18	; 24
    1ff0:	cf 1a       	sub	r12, r31
    1ff2:	d1 08       	sbc	r13, r1
    1ff4:	90 e2       	ldi	r25, 0x20	; 32
    1ff6:	e9 2e       	mov	r14, r25
    1ff8:	f1 2c       	mov	r15, r1
    1ffa:	ce 15       	cp	r28, r14
    1ffc:	df 05       	cpc	r29, r15
    1ffe:	6c f0       	brlt	.+26     	; 0x201a <strtod+0x240>
    2000:	f8 01       	movw	r30, r16
    2002:	25 91       	lpm	r18, Z+
    2004:	35 91       	lpm	r19, Z+
    2006:	45 91       	lpm	r20, Z+
    2008:	54 91       	lpm	r21, Z
    200a:	c5 01       	movw	r24, r10
    200c:	b4 01       	movw	r22, r8
    200e:	3a dc       	rcall	.-1932   	; 0x1884 <__mulsf3>
    2010:	4b 01       	movw	r8, r22
    2012:	5c 01       	movw	r10, r24
    2014:	ce 19       	sub	r28, r14
    2016:	df 09       	sbc	r29, r15
    2018:	f0 cf       	rjmp	.-32     	; 0x1ffa <strtod+0x220>
    201a:	04 50       	subi	r16, 0x04	; 4
    201c:	11 09       	sbc	r17, r1
    201e:	f5 94       	asr	r15
    2020:	e7 94       	ror	r14
    2022:	0c 15       	cp	r16, r12
    2024:	1d 05       	cpc	r17, r13
    2026:	49 f7       	brne	.-46     	; 0x1ffa <strtod+0x220>
    2028:	8a 2d       	mov	r24, r10
    202a:	88 0f       	add	r24, r24
    202c:	8b 2d       	mov	r24, r11
    202e:	88 1f       	adc	r24, r24
    2030:	8f 3f       	cpi	r24, 0xFF	; 255
    2032:	41 f0       	breq	.+16     	; 0x2044 <strtod+0x26a>
    2034:	20 e0       	ldi	r18, 0x00	; 0
    2036:	30 e0       	ldi	r19, 0x00	; 0
    2038:	a9 01       	movw	r20, r18
    203a:	c5 01       	movw	r24, r10
    203c:	b4 01       	movw	r22, r8
    203e:	b6 db       	rcall	.-2196   	; 0x17ac <__cmpsf2>
    2040:	81 11       	cpse	r24, r1
    2042:	06 c0       	rjmp	.+12     	; 0x2050 <strtod+0x276>
    2044:	82 e2       	ldi	r24, 0x22	; 34
    2046:	90 e0       	ldi	r25, 0x00	; 0
    2048:	90 93 e9 02 	sts	0x02E9, r25	; 0x8002e9 <errno+0x1>
    204c:	80 93 e8 02 	sts	0x02E8, r24	; 0x8002e8 <errno>
    2050:	c5 01       	movw	r24, r10
    2052:	b4 01       	movw	r22, r8
    2054:	09 c0       	rjmp	.+18     	; 0x2068 <strtod+0x28e>
    2056:	60 e0       	ldi	r22, 0x00	; 0
    2058:	70 e0       	ldi	r23, 0x00	; 0
    205a:	80 e8       	ldi	r24, 0x80	; 128
    205c:	9f ef       	ldi	r25, 0xFF	; 255
    205e:	04 c0       	rjmp	.+8      	; 0x2068 <strtod+0x28e>
    2060:	60 e0       	ldi	r22, 0x00	; 0
    2062:	70 e0       	ldi	r23, 0x00	; 0
    2064:	80 ec       	ldi	r24, 0xC0	; 192
    2066:	9f e7       	ldi	r25, 0x7F	; 127
    2068:	df 91       	pop	r29
    206a:	cf 91       	pop	r28
    206c:	1f 91       	pop	r17
    206e:	0f 91       	pop	r16
    2070:	ff 90       	pop	r15
    2072:	ef 90       	pop	r14
    2074:	df 90       	pop	r13
    2076:	cf 90       	pop	r12
    2078:	bf 90       	pop	r11
    207a:	af 90       	pop	r10
    207c:	9f 90       	pop	r9
    207e:	8f 90       	pop	r8
    2080:	08 95       	ret

00002082 <isspace>:
    2082:	91 11       	cpse	r25, r1
    2084:	47 c0       	rjmp	.+142    	; 0x2114 <__ctype_isfalse>
    2086:	80 32       	cpi	r24, 0x20	; 32
    2088:	19 f0       	breq	.+6      	; 0x2090 <isspace+0xe>
    208a:	89 50       	subi	r24, 0x09	; 9
    208c:	85 50       	subi	r24, 0x05	; 5
    208e:	d0 f7       	brcc	.-12     	; 0x2084 <isspace+0x2>
    2090:	08 95       	ret

00002092 <strncasecmp_P>:
    2092:	fb 01       	movw	r30, r22
    2094:	dc 01       	movw	r26, r24
    2096:	41 50       	subi	r20, 0x01	; 1
    2098:	50 40       	sbci	r21, 0x00	; 0
    209a:	88 f0       	brcs	.+34     	; 0x20be <strncasecmp_P+0x2c>
    209c:	8d 91       	ld	r24, X+
    209e:	81 34       	cpi	r24, 0x41	; 65
    20a0:	1c f0       	brlt	.+6      	; 0x20a8 <strncasecmp_P+0x16>
    20a2:	8b 35       	cpi	r24, 0x5B	; 91
    20a4:	0c f4       	brge	.+2      	; 0x20a8 <strncasecmp_P+0x16>
    20a6:	80 5e       	subi	r24, 0xE0	; 224
    20a8:	65 91       	lpm	r22, Z+
    20aa:	61 34       	cpi	r22, 0x41	; 65
    20ac:	1c f0       	brlt	.+6      	; 0x20b4 <strncasecmp_P+0x22>
    20ae:	6b 35       	cpi	r22, 0x5B	; 91
    20b0:	0c f4       	brge	.+2      	; 0x20b4 <strncasecmp_P+0x22>
    20b2:	60 5e       	subi	r22, 0xE0	; 224
    20b4:	86 1b       	sub	r24, r22
    20b6:	61 11       	cpse	r22, r1
    20b8:	71 f3       	breq	.-36     	; 0x2096 <strncasecmp_P+0x4>
    20ba:	99 0b       	sbc	r25, r25
    20bc:	08 95       	ret
    20be:	88 1b       	sub	r24, r24
    20c0:	fc cf       	rjmp	.-8      	; 0x20ba <strncasecmp_P+0x28>

000020c2 <memcpy>:
    20c2:	fb 01       	movw	r30, r22
    20c4:	dc 01       	movw	r26, r24
    20c6:	02 c0       	rjmp	.+4      	; 0x20cc <memcpy+0xa>
    20c8:	01 90       	ld	r0, Z+
    20ca:	0d 92       	st	X+, r0
    20cc:	41 50       	subi	r20, 0x01	; 1
    20ce:	50 40       	sbci	r21, 0x00	; 0
    20d0:	d8 f7       	brcc	.-10     	; 0x20c8 <memcpy+0x6>
    20d2:	08 95       	ret

000020d4 <strcpy>:
    20d4:	fb 01       	movw	r30, r22
    20d6:	dc 01       	movw	r26, r24
    20d8:	01 90       	ld	r0, Z+
    20da:	0d 92       	st	X+, r0
    20dc:	00 20       	and	r0, r0
    20de:	e1 f7       	brne	.-8      	; 0x20d8 <strcpy+0x4>
    20e0:	08 95       	ret

000020e2 <strlwr>:
    20e2:	dc 01       	movw	r26, r24
    20e4:	6c 91       	ld	r22, X
    20e6:	61 54       	subi	r22, 0x41	; 65
    20e8:	6a 31       	cpi	r22, 0x1A	; 26
    20ea:	08 f0       	brcs	.+2      	; 0x20ee <strlwr+0xc>
    20ec:	60 52       	subi	r22, 0x20	; 32
    20ee:	6f 59       	subi	r22, 0x9F	; 159
    20f0:	6d 93       	st	X+, r22
    20f2:	c1 f7       	brne	.-16     	; 0x20e4 <strlwr+0x2>
    20f4:	08 95       	ret

000020f6 <strncpy>:
    20f6:	fb 01       	movw	r30, r22
    20f8:	dc 01       	movw	r26, r24
    20fa:	41 50       	subi	r20, 0x01	; 1
    20fc:	50 40       	sbci	r21, 0x00	; 0
    20fe:	48 f0       	brcs	.+18     	; 0x2112 <strncpy+0x1c>
    2100:	01 90       	ld	r0, Z+
    2102:	0d 92       	st	X+, r0
    2104:	00 20       	and	r0, r0
    2106:	c9 f7       	brne	.-14     	; 0x20fa <strncpy+0x4>
    2108:	01 c0       	rjmp	.+2      	; 0x210c <strncpy+0x16>
    210a:	1d 92       	st	X+, r1
    210c:	41 50       	subi	r20, 0x01	; 1
    210e:	50 40       	sbci	r21, 0x00	; 0
    2110:	e0 f7       	brcc	.-8      	; 0x210a <strncpy+0x14>
    2112:	08 95       	ret

00002114 <__ctype_isfalse>:
    2114:	99 27       	eor	r25, r25
    2116:	88 27       	eor	r24, r24

00002118 <__ctype_istrue>:
    2118:	08 95       	ret

0000211a <_exit>:
    211a:	f8 94       	cli

0000211c <__stop_program>:
    211c:	ff cf       	rjmp	.-2      	; 0x211c <__stop_program>
