
3D-Printer.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000004c  00800200  0000174a  000017de  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000174a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000ab  0080024c  0080024c  0000182a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000182a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000185c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000658  00000000  00000000  0000189c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000107fd  00000000  00000000  00001ef4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002a4f  00000000  00000000  000126f1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000036e3  00000000  00000000  00015140  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000015b0  00000000  00000000  00018824  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00002822  00000000  00000000  00019dd4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00008560  00000000  00000000  0001c5f6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000648  00000000  00000000  00024b56  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	14 c1       	rjmp	.+552    	; 0x22a <__ctors_end>
       2:	00 00       	nop
       4:	42 c1       	rjmp	.+644    	; 0x28a <__bad_interrupt>
       6:	00 00       	nop
       8:	40 c1       	rjmp	.+640    	; 0x28a <__bad_interrupt>
       a:	00 00       	nop
       c:	3e c1       	rjmp	.+636    	; 0x28a <__bad_interrupt>
       e:	00 00       	nop
      10:	3c c1       	rjmp	.+632    	; 0x28a <__bad_interrupt>
      12:	00 00       	nop
      14:	3a c1       	rjmp	.+628    	; 0x28a <__bad_interrupt>
      16:	00 00       	nop
      18:	38 c1       	rjmp	.+624    	; 0x28a <__bad_interrupt>
      1a:	00 00       	nop
      1c:	36 c1       	rjmp	.+620    	; 0x28a <__bad_interrupt>
      1e:	00 00       	nop
      20:	34 c1       	rjmp	.+616    	; 0x28a <__bad_interrupt>
      22:	00 00       	nop
      24:	32 c1       	rjmp	.+612    	; 0x28a <__bad_interrupt>
      26:	00 00       	nop
      28:	30 c1       	rjmp	.+608    	; 0x28a <__bad_interrupt>
      2a:	00 00       	nop
      2c:	2e c1       	rjmp	.+604    	; 0x28a <__bad_interrupt>
      2e:	00 00       	nop
      30:	2c c1       	rjmp	.+600    	; 0x28a <__bad_interrupt>
      32:	00 00       	nop
      34:	2a c1       	rjmp	.+596    	; 0x28a <__bad_interrupt>
      36:	00 00       	nop
      38:	28 c1       	rjmp	.+592    	; 0x28a <__bad_interrupt>
      3a:	00 00       	nop
      3c:	26 c1       	rjmp	.+588    	; 0x28a <__bad_interrupt>
      3e:	00 00       	nop
      40:	24 c1       	rjmp	.+584    	; 0x28a <__bad_interrupt>
      42:	00 00       	nop
      44:	22 c1       	rjmp	.+580    	; 0x28a <__bad_interrupt>
      46:	00 00       	nop
      48:	20 c1       	rjmp	.+576    	; 0x28a <__bad_interrupt>
      4a:	00 00       	nop
      4c:	1e c1       	rjmp	.+572    	; 0x28a <__bad_interrupt>
      4e:	00 00       	nop
      50:	1c c1       	rjmp	.+568    	; 0x28a <__bad_interrupt>
      52:	00 00       	nop
      54:	1a c1       	rjmp	.+564    	; 0x28a <__bad_interrupt>
      56:	00 00       	nop
      58:	18 c1       	rjmp	.+560    	; 0x28a <__bad_interrupt>
      5a:	00 00       	nop
      5c:	9f c5       	rjmp	.+2878   	; 0xb9c <__vector_23>
      5e:	00 00       	nop
      60:	14 c1       	rjmp	.+552    	; 0x28a <__bad_interrupt>
      62:	00 00       	nop
      64:	64 c4       	rjmp	.+2248   	; 0x92e <__vector_25>
      66:	00 00       	nop
      68:	98 c4       	rjmp	.+2352   	; 0x99a <__vector_26>
      6a:	00 00       	nop
      6c:	0e c1       	rjmp	.+540    	; 0x28a <__bad_interrupt>
      6e:	00 00       	nop
      70:	0c c1       	rjmp	.+536    	; 0x28a <__bad_interrupt>
      72:	00 00       	nop
      74:	0a c1       	rjmp	.+532    	; 0x28a <__bad_interrupt>
      76:	00 00       	nop
      78:	08 c1       	rjmp	.+528    	; 0x28a <__bad_interrupt>
      7a:	00 00       	nop
      7c:	06 c1       	rjmp	.+524    	; 0x28a <__bad_interrupt>
      7e:	00 00       	nop
      80:	04 c1       	rjmp	.+520    	; 0x28a <__bad_interrupt>
      82:	00 00       	nop
      84:	02 c1       	rjmp	.+516    	; 0x28a <__bad_interrupt>
      86:	00 00       	nop
      88:	00 c1       	rjmp	.+512    	; 0x28a <__bad_interrupt>
      8a:	00 00       	nop
      8c:	fe c0       	rjmp	.+508    	; 0x28a <__bad_interrupt>
      8e:	00 00       	nop
      90:	fc c0       	rjmp	.+504    	; 0x28a <__bad_interrupt>
      92:	00 00       	nop
      94:	fa c0       	rjmp	.+500    	; 0x28a <__bad_interrupt>
      96:	00 00       	nop
      98:	f8 c0       	rjmp	.+496    	; 0x28a <__bad_interrupt>
      9a:	00 00       	nop
      9c:	f6 c0       	rjmp	.+492    	; 0x28a <__bad_interrupt>
      9e:	00 00       	nop
      a0:	f4 c0       	rjmp	.+488    	; 0x28a <__bad_interrupt>
      a2:	00 00       	nop
      a4:	f2 c0       	rjmp	.+484    	; 0x28a <__bad_interrupt>
      a6:	00 00       	nop
      a8:	f0 c0       	rjmp	.+480    	; 0x28a <__bad_interrupt>
      aa:	00 00       	nop
      ac:	ee c0       	rjmp	.+476    	; 0x28a <__bad_interrupt>
      ae:	00 00       	nop
      b0:	ec c0       	rjmp	.+472    	; 0x28a <__bad_interrupt>
      b2:	00 00       	nop
      b4:	ea c0       	rjmp	.+468    	; 0x28a <__bad_interrupt>
      b6:	00 00       	nop
      b8:	e8 c0       	rjmp	.+464    	; 0x28a <__bad_interrupt>
      ba:	00 00       	nop
      bc:	e6 c0       	rjmp	.+460    	; 0x28a <__bad_interrupt>
      be:	00 00       	nop
      c0:	e4 c0       	rjmp	.+456    	; 0x28a <__bad_interrupt>
      c2:	00 00       	nop
      c4:	e2 c0       	rjmp	.+452    	; 0x28a <__bad_interrupt>
      c6:	00 00       	nop
      c8:	e0 c0       	rjmp	.+448    	; 0x28a <__bad_interrupt>
      ca:	00 00       	nop
      cc:	de c0       	rjmp	.+444    	; 0x28a <__bad_interrupt>
      ce:	00 00       	nop
      d0:	dc c0       	rjmp	.+440    	; 0x28a <__bad_interrupt>
      d2:	00 00       	nop
      d4:	da c0       	rjmp	.+436    	; 0x28a <__bad_interrupt>
      d6:	00 00       	nop
      d8:	d8 c0       	rjmp	.+432    	; 0x28a <__bad_interrupt>
      da:	00 00       	nop
      dc:	d6 c0       	rjmp	.+428    	; 0x28a <__bad_interrupt>
      de:	00 00       	nop
      e0:	d4 c0       	rjmp	.+424    	; 0x28a <__bad_interrupt>
      e2:	00 00       	nop
      e4:	fe 06       	cpc	r15, r30
      e6:	01 07       	cpc	r16, r17
      e8:	f0 06       	cpc	r15, r16
      ea:	f4 06       	cpc	r15, r20
      ec:	fa 06       	cpc	r15, r26
      ee:	38 07       	cpc	r19, r24
      f0:	05 07       	cpc	r16, r21
      f2:	09 07       	cpc	r16, r25
      f4:	0f 07       	cpc	r16, r31
      f6:	13 07       	cpc	r17, r19
      f8:	17 07       	cpc	r17, r23
      fa:	1d 07       	cpc	r17, r29
      fc:	21 07       	cpc	r18, r17
      fe:	25 07       	cpc	r18, r21
     100:	38 07       	cpc	r19, r24
     102:	2b 07       	cpc	r18, r27
     104:	2f 07       	cpc	r18, r31
     106:	33 07       	cpc	r19, r19

00000108 <__trampolines_end>:
     108:	00 00       	nop
     10a:	0a 0b       	sbc	r16, r26
     10c:	02 09       	sbc	r16, r2
     10e:	0c 0d       	add	r16, r12
     110:	0e 08       	sbc	r0, r14
     112:	07 03       	mulsu	r16, r23
     114:	04 01       	movw	r0, r8
	...
     132:	00 00       	nop
     134:	12 11       	cpse	r17, r2
     136:	10 00       	.word	0x0010	; ????
	...

0000014e <digital_pin_to_bit_mask_PGM>:
     14e:	01 02 10 20 20 08 08 10 20 40 10 20 40 80 02 01     ...  ... @. @...
     15e:	02 01 08 04 02 01 01 02 04 08 10 20 40 80 80 40     ........... @..@
     16e:	20 10 08 04 02 01 80 04 02 01 80 40 20 10 08 04      ..........@ ...
     17e:	02 01 08 04 02 01 01 02 04 08 10 20 40 80 01 02     ........... @...
     18e:	04 08 10 20 40 80                                   ... @.

00000194 <digital_pin_to_port_PGM>:
     194:	05 05 05 05 07 05 08 08 08 08 02 02 02 02 0a 0a     ................
     1a4:	08 08 04 04 04 04 01 01 01 01 01 01 01 01 03 03     ................
     1b4:	03 03 03 03 03 03 04 07 07 07 0c 0c 0c 0c 0c 0c     ................
     1c4:	0c 0c 02 02 02 02 06 06 06 06 06 06 06 06 0b 0b     ................
     1d4:	0b 0b 0b 0b 0b 0b                                   ......

000001da <port_to_input_PGM>:
     1da:	00 00 20 00 23 00 26 00 29 00 2c 00 2f 00 32 00     .. .#.&.).,./.2.
     1ea:	00 01 00 00 03 01 06 01 09 01                       ..........

000001f4 <port_to_output_PGM>:
     1f4:	00 00 22 00 25 00 28 00 2b 00 2e 00 31 00 34 00     ..".%.(.+...1.4.
     204:	02 01 00 00 05 01 08 01 0b 01                       ..........

0000020e <port_to_mode_PGM>:
     20e:	00 00 21 00 24 00 27 00 2a 00 2d 00 30 00 33 00     ..!.$.'.*.-.0.3.
     21e:	01 01 00 00 04 01 07 01 0a 01                       ..........

00000228 <__ctors_start>:
     228:	ff 04       	cpc	r15, r15

0000022a <__ctors_end>:
     22a:	11 24       	eor	r1, r1
     22c:	1f be       	out	0x3f, r1	; 63
     22e:	cf ef       	ldi	r28, 0xFF	; 255
     230:	d1 e2       	ldi	r29, 0x21	; 33
     232:	de bf       	out	0x3e, r29	; 62
     234:	cd bf       	out	0x3d, r28	; 61
     236:	00 e0       	ldi	r16, 0x00	; 0
     238:	0c bf       	out	0x3c, r16	; 60

0000023a <__do_copy_data>:
     23a:	12 e0       	ldi	r17, 0x02	; 2
     23c:	a0 e0       	ldi	r26, 0x00	; 0
     23e:	b2 e0       	ldi	r27, 0x02	; 2
     240:	ea e4       	ldi	r30, 0x4A	; 74
     242:	f7 e1       	ldi	r31, 0x17	; 23
     244:	00 e0       	ldi	r16, 0x00	; 0
     246:	0b bf       	out	0x3b, r16	; 59
     248:	02 c0       	rjmp	.+4      	; 0x24e <__do_copy_data+0x14>
     24a:	07 90       	elpm	r0, Z+
     24c:	0d 92       	st	X+, r0
     24e:	ac 34       	cpi	r26, 0x4C	; 76
     250:	b1 07       	cpc	r27, r17
     252:	d9 f7       	brne	.-10     	; 0x24a <__do_copy_data+0x10>

00000254 <__do_clear_bss>:
     254:	22 e0       	ldi	r18, 0x02	; 2
     256:	ac e4       	ldi	r26, 0x4C	; 76
     258:	b2 e0       	ldi	r27, 0x02	; 2
     25a:	01 c0       	rjmp	.+2      	; 0x25e <.do_clear_bss_start>

0000025c <.do_clear_bss_loop>:
     25c:	1d 92       	st	X+, r1

0000025e <.do_clear_bss_start>:
     25e:	a7 3f       	cpi	r26, 0xF7	; 247
     260:	b2 07       	cpc	r27, r18
     262:	e1 f7       	brne	.-8      	; 0x25c <.do_clear_bss_loop>

00000264 <__do_global_ctors>:
     264:	11 e0       	ldi	r17, 0x01	; 1
     266:	c5 e1       	ldi	r28, 0x15	; 21
     268:	d1 e0       	ldi	r29, 0x01	; 1
     26a:	00 e0       	ldi	r16, 0x00	; 0
     26c:	06 c0       	rjmp	.+12     	; 0x27a <__do_global_ctors+0x16>
     26e:	21 97       	sbiw	r28, 0x01	; 1
     270:	01 09       	sbc	r16, r1
     272:	80 2f       	mov	r24, r16
     274:	fe 01       	movw	r30, r28
     276:	0e 94 40 09 	call	0x1280	; 0x1280 <__tablejump2__>
     27a:	c4 31       	cpi	r28, 0x14	; 20
     27c:	d1 07       	cpc	r29, r17
     27e:	80 e0       	ldi	r24, 0x00	; 0
     280:	08 07       	cpc	r16, r24
     282:	a9 f7       	brne	.-22     	; 0x26e <__do_global_ctors+0xa>
     284:	ea d3       	rcall	.+2004   	; 0xa5a <main>
     286:	0c 94 a3 0b 	jmp	0x1746	; 0x1746 <_exit>

0000028a <__bad_interrupt>:
     28a:	ba ce       	rjmp	.-652    	; 0x0 <__vectors>

0000028c <setup>:
#include "Header files\LimitSwitch.h"

void setup()
{
	StepperInit();
	LimitSwitchPinInit();
     28c:	57 d1       	rcall	.+686    	; 0x53c <_Z11StepperInitv>
     28e:	44 d1       	rcall	.+648    	; 0x518 <_Z18LimitSwitchPinInitv>
  public:
    inline HardwareSerial(
      volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
      volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
      volatile uint8_t *ucsrc, volatile uint8_t *udr);
    void begin(unsigned long baud) { begin(baud, SERIAL_8N1); }
     290:	26 e0       	ldi	r18, 0x06	; 6
     292:	40 e0       	ldi	r20, 0x00	; 0
     294:	51 ee       	ldi	r21, 0xE1	; 225
     296:	60 e0       	ldi	r22, 0x00	; 0
     298:	70 e0       	ldi	r23, 0x00	; 0
     29a:	8c e4       	ldi	r24, 0x4C	; 76
     29c:	92 e0       	ldi	r25, 0x02	; 2
     29e:	e4 d2       	rcall	.+1480   	; 0x868 <_ZN14HardwareSerial5beginEmh>
	Serial.begin(57600);
	Serial.println("Connected");
     2a0:	66 e0       	ldi	r22, 0x06	; 6
     2a2:	72 e0       	ldi	r23, 0x02	; 2
     2a4:	8c e4       	ldi	r24, 0x4C	; 76
     2a6:	92 e0       	ldi	r25, 0x02	; 2
     2a8:	24 c4       	rjmp	.+2120   	; 0xaf2 <_ZN5Print7printlnEPKc>

000002aa <loop>:
}

void loop()
{
     2aa:	cf 92       	push	r12
     2ac:	df 92       	push	r13
     2ae:	ef 92       	push	r14
     2b0:	0f 93       	push	r16
     2b2:	1f 93       	push	r17
     2b4:	cf 93       	push	r28
     2b6:	df 93       	push	r29
     2b8:	cd b7       	in	r28, 0x3d	; 61
     2ba:	de b7       	in	r29, 0x3e	; 62
     2bc:	a4 97       	sbiw	r28, 0x24	; 36
     2be:	0f b6       	in	r0, 0x3f	; 63
     2c0:	f8 94       	cli
     2c2:	de bf       	out	0x3e, r29	; 62
     2c4:	0f be       	out	0x3f, r0	; 63
     2c6:	cd bf       	out	0x3d, r28	; 61
	String readData, readDataX, readDataY, readDataZ;
     2c8:	6f e3       	ldi	r22, 0x3F	; 63
     2ca:	72 e0       	ldi	r23, 0x02	; 2
     2cc:	ce 01       	movw	r24, r28
     2ce:	49 96       	adiw	r24, 0x19	; 25
     2d0:	ca d6       	rcall	.+3476   	; 0x1066 <_ZN6StringC1EPKc>
     2d2:	6f e3       	ldi	r22, 0x3F	; 63
     2d4:	72 e0       	ldi	r23, 0x02	; 2
     2d6:	ce 01       	movw	r24, r28
     2d8:	43 96       	adiw	r24, 0x13	; 19
     2da:	c5 d6       	rcall	.+3466   	; 0x1066 <_ZN6StringC1EPKc>
     2dc:	6f e3       	ldi	r22, 0x3F	; 63
     2de:	72 e0       	ldi	r23, 0x02	; 2
     2e0:	ce 01       	movw	r24, r28
     2e2:	0d 96       	adiw	r24, 0x0d	; 13
     2e4:	c0 d6       	rcall	.+3456   	; 0x1066 <_ZN6StringC1EPKc>
     2e6:	6f e3       	ldi	r22, 0x3F	; 63
     2e8:	72 e0       	ldi	r23, 0x02	; 2
     2ea:	ce 01       	movw	r24, r28
     2ec:	07 96       	adiw	r24, 0x07	; 7
     2ee:	bb d6       	rcall	.+3446   	; 0x1066 <_ZN6StringC1EPKc>
	int x, y, z;
	int xStepps = 0, yStepps = 0, zStepps = 0;
     2f0:	1c a2       	std	Y+36, r1	; 0x24
     2f2:	1b a2       	std	Y+35, r1	; 0x23
     2f4:	1a a2       	std	Y+34, r1	; 0x22
     2f6:	19 a2       	std	Y+33, r1	; 0x21
     2f8:	18 a2       	std	Y+32, r1	; 0x20

	bool limitSwitchX = digitalRead(pinLimitSwitchX);
     2fa:	1f 8e       	std	Y+31, r1	; 0x1f
     2fc:	82 e0       	ldi	r24, 0x02	; 2
     2fe:	23 d6       	rcall	.+3142   	; 0xf46 <digitalRead>
     300:	11 e0       	ldi	r17, 0x01	; 1
     302:	89 2b       	or	r24, r25
     304:	09 f4       	brne	.+2      	; 0x308 <loop+0x5e>
	bool limitSwitchY = digitalRead(pinLimitSwitchY);
     306:	10 e0       	ldi	r17, 0x00	; 0
     308:	8f e0       	ldi	r24, 0x0F	; 15
     30a:	1d d6       	rcall	.+3130   	; 0xf46 <digitalRead>
     30c:	01 e0       	ldi	r16, 0x01	; 1
     30e:	89 2b       	or	r24, r25
     310:	09 f4       	brne	.+2      	; 0x314 <loop+0x6a>
	bool limitSwitchZ = digitalRead(pinLimitSwitchZ);
     312:	00 e0       	ldi	r16, 0x00	; 0
     314:	83 e1       	ldi	r24, 0x13	; 19
     316:	17 d6       	rcall	.+3118   	; 0xf46 <digitalRead>
     318:	ee 24       	eor	r14, r14
     31a:	e3 94       	inc	r14
     31c:	89 2b       	or	r24, r25
     31e:	09 f4       	brne	.+2      	; 0x322 <loop+0x78>
	
	if (Serial.available())
     320:	e1 2c       	mov	r14, r1
     322:	8c e4       	ldi	r24, 0x4C	; 76
     324:	92 e0       	ldi	r25, 0x02	; 2
     326:	9f d1       	rcall	.+830    	; 0x666 <_ZN14HardwareSerial9availableEv>
     328:	89 2b       	or	r24, r25
     32a:	09 f4       	brne	.+2      	; 0x32e <loop+0x84>
	{
		Serial.println("Podaj ilosc krokow x y z: ");
     32c:	d1 c0       	rjmp	.+418    	; 0x4d0 <__LOCK_REGION_LENGTH__+0xd0>
     32e:	60 e1       	ldi	r22, 0x10	; 16
     330:	72 e0       	ldi	r23, 0x02	; 2
     332:	8c e4       	ldi	r24, 0x4C	; 76
     334:	92 e0       	ldi	r25, 0x02	; 2
		readData = Serial.readString();
     336:	dd d3       	rcall	.+1978   	; 0xaf2 <_ZN5Print7printlnEPKc>
     338:	6c e4       	ldi	r22, 0x4C	; 76
     33a:	72 e0       	ldi	r23, 0x02	; 2
     33c:	ce 01       	movw	r24, r28
     33e:	01 96       	adiw	r24, 0x01	; 1
     340:	16 d4       	rcall	.+2092   	; 0xb6e <_ZN6Stream10readStringEv>
     342:	be 01       	movw	r22, r28
     344:	6f 5f       	subi	r22, 0xFF	; 255
     346:	7f 4f       	sbci	r23, 0xFF	; 255
     348:	ce 01       	movw	r24, r28
     34a:	49 96       	adiw	r24, 0x19	; 25
     34c:	db d6       	rcall	.+3510   	; 0x1104 <_ZN6StringaSEOS_>
     34e:	ce 01       	movw	r24, r28
     350:	01 96       	adiw	r24, 0x01	; 1
		
		int i = 0;
     352:	22 d6       	rcall	.+3140   	; 0xf98 <_ZN6StringD1Ev>
     354:	c1 2c       	mov	r12, r1
		while(readData[i] != '\0')
     356:	d1 2c       	mov	r13, r1
     358:	b6 01       	movw	r22, r12
     35a:	ce 01       	movw	r24, r28
     35c:	49 96       	adiw	r24, 0x19	; 25
     35e:	1c d7       	rcall	.+3640   	; 0x1198 <_ZN6StringixEj>
     360:	fc 01       	movw	r30, r24
     362:	80 81       	ld	r24, Z
     364:	81 11       	cpse	r24, r1
     366:	03 c0       	rjmp	.+6      	; 0x36e <loop+0xc4>
     368:	c1 2c       	mov	r12, r1
		{
			if (readData[i] == ' ')
     36a:	d1 2c       	mov	r13, r1
     36c:	2d c0       	rjmp	.+90     	; 0x3c8 <loop+0x11e>
     36e:	b6 01       	movw	r22, r12
     370:	ce 01       	movw	r24, r28
     372:	49 96       	adiw	r24, 0x19	; 25
     374:	11 d7       	rcall	.+3618   	; 0x1198 <_ZN6StringixEj>
     376:	fc 01       	movw	r30, r24
     378:	80 81       	ld	r24, Z
			readData.remove(i);
     37a:	80 32       	cpi	r24, 0x20	; 32
     37c:	21 f4       	brne	.+8      	; 0x386 <loop+0xdc>
     37e:	b6 01       	movw	r22, r12
     380:	ce 01       	movw	r24, r28
			i++;
     382:	49 96       	adiw	r24, 0x19	; 25
     384:	4d d7       	rcall	.+3738   	; 0x1220 <_ZN6String6removeEj>
	{
		Serial.println("Podaj ilosc krokow x y z: ");
		readData = Serial.readString();
		
		int i = 0;
		while(readData[i] != '\0')
     386:	ff ef       	ldi	r31, 0xFF	; 255
		}

		int j = 0;
		while(readData[j] != '\0')
		{
			if(readData[j] == 'X')
     388:	cf 1a       	sub	r12, r31
     38a:	df 0a       	sbc	r13, r31
     38c:	e5 cf       	rjmp	.-54     	; 0x358 <loop+0xae>
     38e:	b6 01       	movw	r22, r12
     390:	ce 01       	movw	r24, r28
     392:	49 96       	adiw	r24, 0x19	; 25
     394:	01 d7       	rcall	.+3586   	; 0x1198 <_ZN6StringixEj>
     396:	fc 01       	movw	r30, r24
				{
					readDataX += readData[j+1];
					j++;
				}
			}
			if(readData[j] == 'X')
     398:	80 81       	ld	r24, Z
     39a:	88 35       	cpi	r24, 0x58	; 88
     39c:	91 f1       	breq	.+100    	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
     39e:	b6 01       	movw	r22, r12
     3a0:	ce 01       	movw	r24, r28
     3a2:	49 96       	adiw	r24, 0x19	; 25
     3a4:	f9 d6       	rcall	.+3570   	; 0x1198 <_ZN6StringixEj>
     3a6:	fc 01       	movw	r30, r24
     3a8:	80 81       	ld	r24, Z
				{
					readDataY += readData[j+1];
					j++;
				}
			}
			if(readData[j] == 'Z')
     3aa:	88 35       	cpi	r24, 0x58	; 88
     3ac:	09 f4       	brne	.+2      	; 0x3b0 <loop+0x106>
     3ae:	4f c0       	rjmp	.+158    	; 0x44e <__LOCK_REGION_LENGTH__+0x4e>
     3b0:	b6 01       	movw	r22, r12
     3b2:	ce 01       	movw	r24, r28
     3b4:	49 96       	adiw	r24, 0x19	; 25
     3b6:	f0 d6       	rcall	.+3552   	; 0x1198 <_ZN6StringixEj>
     3b8:	fc 01       	movw	r30, r24
     3ba:	80 81       	ld	r24, Z
				{
					readDataZ += readData[j+1];
					j++;
				}
			}
			j++;
     3bc:	8a 35       	cpi	r24, 0x5A	; 90
     3be:	09 f4       	brne	.+2      	; 0x3c2 <loop+0x118>
     3c0:	6c c0       	rjmp	.+216    	; 0x49a <__LOCK_REGION_LENGTH__+0x9a>
			readData.remove(i);
			i++;
		}

		int j = 0;
		while(readData[j] != '\0')
     3c2:	ff ef       	ldi	r31, 0xFF	; 255
     3c4:	cf 1a       	sub	r12, r31
     3c6:	df 0a       	sbc	r13, r31
     3c8:	b6 01       	movw	r22, r12
     3ca:	ce 01       	movw	r24, r28
     3cc:	49 96       	adiw	r24, 0x19	; 25
     3ce:	e4 d6       	rcall	.+3528   	; 0x1198 <_ZN6StringixEj>
     3d0:	fc 01       	movw	r30, r24
		{
			if(readData[j] == 'X')
			{
				while(readData[j] != 'Y' || readData[j] != 'Z' || readData[j] != '\0' )
     3d2:	80 81       	ld	r24, Z
     3d4:	81 11       	cpse	r24, r1
     3d6:	db cf       	rjmp	.-74     	; 0x38e <loop+0xe4>
     3d8:	72 c0       	rjmp	.+228    	; 0x4be <__LOCK_REGION_LENGTH__+0xbe>
     3da:	b6 01       	movw	r22, r12
     3dc:	ce 01       	movw	r24, r28
     3de:	49 96       	adiw	r24, 0x19	; 25
				{
					readDataX += readData[j+1];
     3e0:	db d6       	rcall	.+3510   	; 0x1198 <_ZN6StringixEj>
     3e2:	fc 01       	movw	r30, r24
     3e4:	80 81       	ld	r24, Z
     3e6:	8a 35       	cpi	r24, 0x5A	; 90
     3e8:	a9 f0       	breq	.+42     	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
     3ea:	8f ef       	ldi	r24, 0xFF	; 255
     3ec:	c8 1a       	sub	r12, r24

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
	String & operator += (char c)			{concat(c); return (*this);}
     3ee:	d8 0a       	sbc	r13, r24
     3f0:	b6 01       	movw	r22, r12
     3f2:	ce 01       	movw	r24, r28
     3f4:	49 96       	adiw	r24, 0x19	; 25
     3f6:	d0 d6       	rcall	.+3488   	; 0x1198 <_ZN6StringixEj>
		int j = 0;
		while(readData[j] != '\0')
		{
			if(readData[j] == 'X')
			{
				while(readData[j] != 'Y' || readData[j] != 'Z' || readData[j] != '\0' )
     3f8:	fc 01       	movw	r30, r24
     3fa:	60 81       	ld	r22, Z
     3fc:	ce 01       	movw	r24, r28
     3fe:	43 96       	adiw	r24, 0x13	; 19
     400:	b8 d6       	rcall	.+3440   	; 0x1172 <_ZN6String6concatEc>
     402:	b6 01       	movw	r22, r12
     404:	ce 01       	movw	r24, r28
     406:	49 96       	adiw	r24, 0x19	; 25
     408:	c7 d6       	rcall	.+3470   	; 0x1198 <_ZN6StringixEj>
     40a:	fc 01       	movw	r30, r24
     40c:	80 81       	ld	r24, Z
     40e:	89 35       	cpi	r24, 0x59	; 89
     410:	61 f7       	brne	.-40     	; 0x3ea <loop+0x140>
     412:	e3 cf       	rjmp	.-58     	; 0x3da <loop+0x130>
     414:	b6 01       	movw	r22, r12
     416:	ce 01       	movw	r24, r28
					j++;
				}
			}
			if(readData[j] == 'X')
			{
				while(readData[j] != 'X' || readData[j] != 'Z' || readData[j] != '\0' )
     418:	49 96       	adiw	r24, 0x19	; 25
     41a:	be d6       	rcall	.+3452   	; 0x1198 <_ZN6StringixEj>
     41c:	fc 01       	movw	r30, r24
     41e:	80 81       	ld	r24, Z
     420:	81 11       	cpse	r24, r1
     422:	e3 cf       	rjmp	.-58     	; 0x3ea <loop+0x140>
     424:	bc cf       	rjmp	.-136    	; 0x39e <loop+0xf4>
     426:	b6 01       	movw	r22, r12
				{
					readDataY += readData[j+1];
     428:	ce 01       	movw	r24, r28
     42a:	49 96       	adiw	r24, 0x19	; 25
     42c:	b5 d6       	rcall	.+3434   	; 0x1198 <_ZN6StringixEj>
     42e:	fc 01       	movw	r30, r24
     430:	80 81       	ld	r24, Z
     432:	8a 35       	cpi	r24, 0x5A	; 90
     434:	a9 f0       	breq	.+42     	; 0x460 <__LOCK_REGION_LENGTH__+0x60>
     436:	ff ef       	ldi	r31, 0xFF	; 255
     438:	cf 1a       	sub	r12, r31
     43a:	df 0a       	sbc	r13, r31
     43c:	b6 01       	movw	r22, r12
     43e:	ce 01       	movw	r24, r28
					j++;
				}
			}
			if(readData[j] == 'X')
			{
				while(readData[j] != 'X' || readData[j] != 'Z' || readData[j] != '\0' )
     440:	49 96       	adiw	r24, 0x19	; 25
     442:	aa d6       	rcall	.+3412   	; 0x1198 <_ZN6StringixEj>
     444:	fc 01       	movw	r30, r24
     446:	60 81       	ld	r22, Z
     448:	ce 01       	movw	r24, r28
     44a:	0d 96       	adiw	r24, 0x0d	; 13
     44c:	92 d6       	rcall	.+3364   	; 0x1172 <_ZN6String6concatEc>
     44e:	b6 01       	movw	r22, r12
     450:	ce 01       	movw	r24, r28
     452:	49 96       	adiw	r24, 0x19	; 25
     454:	a1 d6       	rcall	.+3394   	; 0x1198 <_ZN6StringixEj>
     456:	fc 01       	movw	r30, r24
     458:	80 81       	ld	r24, Z
     45a:	88 35       	cpi	r24, 0x58	; 88
     45c:	61 f7       	brne	.-40     	; 0x436 <__LOCK_REGION_LENGTH__+0x36>
     45e:	e3 cf       	rjmp	.-58     	; 0x426 <__LOCK_REGION_LENGTH__+0x26>
					j++;
				}
			}
			if(readData[j] == 'Z')
			{
				while(readData[j] != 'X' || readData[j] != 'Y' || readData[j] != '\0' )
     460:	b6 01       	movw	r22, r12
     462:	ce 01       	movw	r24, r28
     464:	49 96       	adiw	r24, 0x19	; 25
     466:	98 d6       	rcall	.+3376   	; 0x1198 <_ZN6StringixEj>
     468:	fc 01       	movw	r30, r24
     46a:	80 81       	ld	r24, Z
     46c:	81 11       	cpse	r24, r1
     46e:	e3 cf       	rjmp	.-58     	; 0x436 <__LOCK_REGION_LENGTH__+0x36>
				{
					readDataZ += readData[j+1];
     470:	9f cf       	rjmp	.-194    	; 0x3b0 <loop+0x106>
     472:	b6 01       	movw	r22, r12
     474:	ce 01       	movw	r24, r28
     476:	49 96       	adiw	r24, 0x19	; 25
     478:	8f d6       	rcall	.+3358   	; 0x1198 <_ZN6StringixEj>
     47a:	fc 01       	movw	r30, r24
     47c:	80 81       	ld	r24, Z
     47e:	89 35       	cpi	r24, 0x59	; 89
     480:	a9 f0       	breq	.+42     	; 0x4ac <__LOCK_REGION_LENGTH__+0xac>
     482:	ff ef       	ldi	r31, 0xFF	; 255
					j++;
				}
			}
			if(readData[j] == 'Z')
			{
				while(readData[j] != 'X' || readData[j] != 'Y' || readData[j] != '\0' )
     484:	cf 1a       	sub	r12, r31
     486:	df 0a       	sbc	r13, r31
     488:	b6 01       	movw	r22, r12
     48a:	ce 01       	movw	r24, r28
     48c:	49 96       	adiw	r24, 0x19	; 25
     48e:	84 d6       	rcall	.+3336   	; 0x1198 <_ZN6StringixEj>
     490:	fc 01       	movw	r30, r24
     492:	60 81       	ld	r22, Z
     494:	ce 01       	movw	r24, r28
     496:	07 96       	adiw	r24, 0x07	; 7
     498:	6c d6       	rcall	.+3288   	; 0x1172 <_ZN6String6concatEc>
     49a:	b6 01       	movw	r22, r12
     49c:	ce 01       	movw	r24, r28
     49e:	49 96       	adiw	r24, 0x19	; 25
				}
			}
			j++;
		}

		x = readDataX.toInt();
     4a0:	7b d6       	rcall	.+3318   	; 0x1198 <_ZN6StringixEj>
     4a2:	fc 01       	movw	r30, r24
     4a4:	80 81       	ld	r24, Z
     4a6:	88 35       	cpi	r24, 0x58	; 88
		y = readDataY.toInt();
     4a8:	61 f7       	brne	.-40     	; 0x482 <__LOCK_REGION_LENGTH__+0x82>
     4aa:	e3 cf       	rjmp	.-58     	; 0x472 <__LOCK_REGION_LENGTH__+0x72>
     4ac:	b6 01       	movw	r22, r12
     4ae:	ce 01       	movw	r24, r28
		z = readDataZ.toInt();
     4b0:	49 96       	adiw	r24, 0x19	; 25
     4b2:	72 d6       	rcall	.+3300   	; 0x1198 <_ZN6StringixEj>
     4b4:	fc 01       	movw	r30, r24
     4b6:	80 81       	ld	r24, Z
	}
	MovementXYZ(&xStepps, &yStepps, &zStepps,
	limitSwitchX, limitSwitchY, limitSwitchZ);
     4b8:	81 11       	cpse	r24, r1
     4ba:	e3 cf       	rjmp	.-58     	; 0x482 <__LOCK_REGION_LENGTH__+0x82>
     4bc:	82 cf       	rjmp	.-252    	; 0x3c2 <loop+0x118>
     4be:	ce 01       	movw	r24, r28
     4c0:	43 96       	adiw	r24, 0x13	; 19
     4c2:	b1 d6       	rcall	.+3426   	; 0x1226 <_ZNK6String5toIntEv>
     4c4:	ce 01       	movw	r24, r28
     4c6:	0d 96       	adiw	r24, 0x0d	; 13
     4c8:	ae d6       	rcall	.+3420   	; 0x1226 <_ZNK6String5toIntEv>
     4ca:	ce 01       	movw	r24, r28
     4cc:	07 96       	adiw	r24, 0x07	; 7
	Serial.println("Connected");
}

void loop()
{
	String readData, readDataX, readDataY, readDataZ;
     4ce:	ab d6       	rcall	.+3414   	; 0x1226 <_ZNK6String5toIntEv>
     4d0:	21 2f       	mov	r18, r17
     4d2:	ae 01       	movw	r20, r28
     4d4:	41 5e       	subi	r20, 0xE1	; 225
     4d6:	5f 4f       	sbci	r21, 0xFF	; 255
     4d8:	be 01       	movw	r22, r28
     4da:	6f 5d       	subi	r22, 0xDF	; 223
     4dc:	7f 4f       	sbci	r23, 0xFF	; 255
     4de:	ce 01       	movw	r24, r28
     4e0:	83 96       	adiw	r24, 0x23	; 35
     4e2:	50 d0       	rcall	.+160    	; 0x584 <_Z11MovementXYZPiS_S_bbb>
     4e4:	ce 01       	movw	r24, r28
     4e6:	07 96       	adiw	r24, 0x07	; 7
     4e8:	57 d5       	rcall	.+2734   	; 0xf98 <_ZN6StringD1Ev>
     4ea:	ce 01       	movw	r24, r28
     4ec:	0d 96       	adiw	r24, 0x0d	; 13
		y = readDataY.toInt();
		z = readDataZ.toInt();
	}
	MovementXYZ(&xStepps, &yStepps, &zStepps,
	limitSwitchX, limitSwitchY, limitSwitchZ);
}
     4ee:	54 d5       	rcall	.+2728   	; 0xf98 <_ZN6StringD1Ev>
     4f0:	ce 01       	movw	r24, r28
     4f2:	43 96       	adiw	r24, 0x13	; 19
     4f4:	51 d5       	rcall	.+2722   	; 0xf98 <_ZN6StringD1Ev>
     4f6:	ce 01       	movw	r24, r28
     4f8:	49 96       	adiw	r24, 0x19	; 25
     4fa:	4e d5       	rcall	.+2716   	; 0xf98 <_ZN6StringD1Ev>
     4fc:	a4 96       	adiw	r28, 0x24	; 36
     4fe:	0f b6       	in	r0, 0x3f	; 63
     500:	f8 94       	cli
     502:	de bf       	out	0x3e, r29	; 62
     504:	0f be       	out	0x3f, r0	; 63
     506:	cd bf       	out	0x3d, r28	; 61
     508:	df 91       	pop	r29
     50a:	cf 91       	pop	r28
     50c:	1f 91       	pop	r17
     50e:	0f 91       	pop	r16
     510:	ef 90       	pop	r14
     512:	df 90       	pop	r13
     514:	cf 90       	pop	r12
     516:	08 95       	ret

00000518 <_Z18LimitSwitchPinInitv>:
#include "Arduino.h"
#include "..\Header Files\LimitSwitch.h"

void LimitSwitchPinInit()
{
	pinMode(pinLimitSwitchX, INPUT);
     518:	60 e0       	ldi	r22, 0x00	; 0
     51a:	82 e0       	ldi	r24, 0x02	; 2
     51c:	aa d4       	rcall	.+2388   	; 0xe72 <pinMode>
	pinMode(pinLimitSwitchY, INPUT);
     51e:	60 e0       	ldi	r22, 0x00	; 0
     520:	8f e0       	ldi	r24, 0x0F	; 15
	pinMode(pinLimitSwitchZ, INPUT);
     522:	a7 d4       	rcall	.+2382   	; 0xe72 <pinMode>
     524:	60 e0       	ldi	r22, 0x00	; 0
	digitalWrite(pinLimitSwitchX, HIGH);
     526:	83 e1       	ldi	r24, 0x13	; 19
     528:	a4 d4       	rcall	.+2376   	; 0xe72 <pinMode>
     52a:	61 e0       	ldi	r22, 0x01	; 1
	digitalWrite(pinLimitSwitchY, HIGH);
     52c:	82 e0       	ldi	r24, 0x02	; 2
     52e:	dd d4       	rcall	.+2490   	; 0xeea <digitalWrite>
     530:	61 e0       	ldi	r22, 0x01	; 1
	digitalWrite(pinLimitSwitchZ, HIGH);
     532:	8f e0       	ldi	r24, 0x0F	; 15
     534:	da d4       	rcall	.+2484   	; 0xeea <digitalWrite>
     536:	61 e0       	ldi	r22, 0x01	; 1
     538:	83 e1       	ldi	r24, 0x13	; 19
     53a:	d7 c4       	rjmp	.+2478   	; 0xeea <digitalWrite>

0000053c <_Z11StepperInitv>:

void ChangeStepperZDir(bool dirZ)
{
	if (dirZ)
	pinMode(pinDirZ, HIGH);
	else pinMode(pinDirZ, LOW);
     53c:	61 e0       	ldi	r22, 0x01	; 1
     53e:	87 e3       	ldi	r24, 0x37	; 55
     540:	98 d4       	rcall	.+2352   	; 0xe72 <pinMode>
     542:	61 e0       	ldi	r22, 0x01	; 1
     544:	8d e3       	ldi	r24, 0x3D	; 61
     546:	95 d4       	rcall	.+2346   	; 0xe72 <pinMode>
     548:	61 e0       	ldi	r22, 0x01	; 1
     54a:	80 e3       	ldi	r24, 0x30	; 48
     54c:	92 d4       	rcall	.+2340   	; 0xe72 <pinMode>
     54e:	61 e0       	ldi	r22, 0x01	; 1
     550:	86 e2       	ldi	r24, 0x26	; 38
     552:	8f d4       	rcall	.+2334   	; 0xe72 <pinMode>
     554:	61 e0       	ldi	r22, 0x01	; 1
     556:	88 e3       	ldi	r24, 0x38	; 56
     558:	8c d4       	rcall	.+2328   	; 0xe72 <pinMode>
     55a:	61 e0       	ldi	r22, 0x01	; 1
     55c:	8e e3       	ldi	r24, 0x3E	; 62
     55e:	89 d4       	rcall	.+2322   	; 0xe72 <pinMode>
     560:	61 e0       	ldi	r22, 0x01	; 1
     562:	85 e3       	ldi	r24, 0x35	; 53
     564:	86 d4       	rcall	.+2316   	; 0xe72 <pinMode>
     566:	61 e0       	ldi	r22, 0x01	; 1
     568:	81 e3       	ldi	r24, 0x31	; 49
     56a:	83 d4       	rcall	.+2310   	; 0xe72 <pinMode>
     56c:	61 e0       	ldi	r22, 0x01	; 1
     56e:	88 e2       	ldi	r24, 0x28	; 40
     570:	80 d4       	rcall	.+2304   	; 0xe72 <pinMode>
     572:	61 e0       	ldi	r22, 0x01	; 1
     574:	86 e3       	ldi	r24, 0x36	; 54
     576:	7d d4       	rcall	.+2298   	; 0xe72 <pinMode>
     578:	61 e0       	ldi	r22, 0x01	; 1
     57a:	8c e3       	ldi	r24, 0x3C	; 60
     57c:	7a d4       	rcall	.+2292   	; 0xe72 <pinMode>
     57e:	61 e0       	ldi	r22, 0x01	; 1
     580:	8e e2       	ldi	r24, 0x2E	; 46
     582:	77 c4       	rjmp	.+2286   	; 0xe72 <pinMode>

00000584 <_Z11MovementXYZPiS_S_bbb>:
}

void MovementXYZ(int *SteppsX, int *SteppsY, int *SteppsZ,
bool switchX, bool switchY, bool switchZ)
{
     584:	af 92       	push	r10
     586:	bf 92       	push	r11
     588:	cf 92       	push	r12
     58a:	df 92       	push	r13
     58c:	ef 92       	push	r14
     58e:	0f 93       	push	r16
     590:	1f 93       	push	r17
     592:	cf 93       	push	r28
     594:	df 93       	push	r29
     596:	5c 01       	movw	r10, r24
     598:	6b 01       	movw	r12, r22
     59a:	ea 01       	movw	r28, r20
     59c:	12 2f       	mov	r17, r18
	if (*SteppsX > 0 && !(switchX))
     59e:	fc 01       	movw	r30, r24
     5a0:	80 81       	ld	r24, Z
     5a2:	91 81       	ldd	r25, Z+1	; 0x01
     5a4:	18 16       	cp	r1, r24
     5a6:	19 06       	cpc	r1, r25
     5a8:	2c f4       	brge	.+10     	; 0x5b4 <_Z11MovementXYZPiS_S_bbb+0x30>
     5aa:	21 11       	cpse	r18, r1
     5ac:	03 c0       	rjmp	.+6      	; 0x5b4 <_Z11MovementXYZPiS_S_bbb+0x30>
	digitalWrite(pinStepX, LOW);
     5ae:	60 e0       	ldi	r22, 0x00	; 0
     5b0:	86 e3       	ldi	r24, 0x36	; 54
     5b2:	9b d4       	rcall	.+2358   	; 0xeea <digitalWrite>
	if (*SteppsY > 0 && !(switchY))
     5b4:	f6 01       	movw	r30, r12
     5b6:	80 81       	ld	r24, Z
     5b8:	91 81       	ldd	r25, Z+1	; 0x01
     5ba:	18 16       	cp	r1, r24
     5bc:	19 06       	cpc	r1, r25
     5be:	2c f4       	brge	.+10     	; 0x5ca <_Z11MovementXYZPiS_S_bbb+0x46>
     5c0:	01 11       	cpse	r16, r1
     5c2:	03 c0       	rjmp	.+6      	; 0x5ca <_Z11MovementXYZPiS_S_bbb+0x46>
	digitalWrite(pinStepY, LOW);
     5c4:	60 e0       	ldi	r22, 0x00	; 0
     5c6:	8c e3       	ldi	r24, 0x3C	; 60
     5c8:	90 d4       	rcall	.+2336   	; 0xeea <digitalWrite>
	if (*SteppsZ > 0 && !(switchZ))
     5ca:	88 81       	ld	r24, Y
     5cc:	99 81       	ldd	r25, Y+1	; 0x01
     5ce:	18 16       	cp	r1, r24
     5d0:	19 06       	cpc	r1, r25
     5d2:	2c f4       	brge	.+10     	; 0x5de <_Z11MovementXYZPiS_S_bbb+0x5a>
     5d4:	e1 10       	cpse	r14, r1
	digitalWrite(pinStepZ, LOW);
     5d6:	03 c0       	rjmp	.+6      	; 0x5de <_Z11MovementXYZPiS_S_bbb+0x5a>
     5d8:	60 e0       	ldi	r22, 0x00	; 0
     5da:	8e e2       	ldi	r24, 0x2E	; 46
	delay(1);
     5dc:	86 d4       	rcall	.+2316   	; 0xeea <digitalWrite>
     5de:	61 e0       	ldi	r22, 0x01	; 1
     5e0:	70 e0       	ldi	r23, 0x00	; 0
     5e2:	80 e0       	ldi	r24, 0x00	; 0
     5e4:	90 e0       	ldi	r25, 0x00	; 0

	if (*SteppsX > 0 && !(switchX))
     5e6:	55 d3       	rcall	.+1706   	; 0xc92 <delay>
     5e8:	f5 01       	movw	r30, r10
     5ea:	80 81       	ld	r24, Z
     5ec:	91 81       	ldd	r25, Z+1	; 0x01
     5ee:	18 16       	cp	r1, r24
     5f0:	19 06       	cpc	r1, r25
	{
		digitalWrite(pinStepX, HIGH);
     5f2:	5c f4       	brge	.+22     	; 0x60a <_Z11MovementXYZPiS_S_bbb+0x86>
     5f4:	11 11       	cpse	r17, r1
     5f6:	09 c0       	rjmp	.+18     	; 0x60a <_Z11MovementXYZPiS_S_bbb+0x86>
     5f8:	61 e0       	ldi	r22, 0x01	; 1
		(*SteppsX)--;
     5fa:	86 e3       	ldi	r24, 0x36	; 54
     5fc:	76 d4       	rcall	.+2284   	; 0xeea <digitalWrite>
     5fe:	f5 01       	movw	r30, r10
     600:	80 81       	ld	r24, Z
     602:	91 81       	ldd	r25, Z+1	; 0x01
     604:	01 97       	sbiw	r24, 0x01	; 1
	}
	if (*SteppsY > 0 && !(switchY))
     606:	91 83       	std	Z+1, r25	; 0x01
     608:	80 83       	st	Z, r24
     60a:	f6 01       	movw	r30, r12
     60c:	80 81       	ld	r24, Z
     60e:	91 81       	ldd	r25, Z+1	; 0x01
     610:	18 16       	cp	r1, r24
     612:	19 06       	cpc	r1, r25
	{
		digitalWrite(pinStepY, HIGH);
     614:	5c f4       	brge	.+22     	; 0x62c <_Z11MovementXYZPiS_S_bbb+0xa8>
     616:	01 11       	cpse	r16, r1
     618:	09 c0       	rjmp	.+18     	; 0x62c <_Z11MovementXYZPiS_S_bbb+0xa8>
     61a:	61 e0       	ldi	r22, 0x01	; 1
		(*SteppsY)--;
     61c:	8c e3       	ldi	r24, 0x3C	; 60
     61e:	65 d4       	rcall	.+2250   	; 0xeea <digitalWrite>
     620:	f6 01       	movw	r30, r12
     622:	80 81       	ld	r24, Z
     624:	91 81       	ldd	r25, Z+1	; 0x01
     626:	01 97       	sbiw	r24, 0x01	; 1
	}
	if (*SteppsZ > 0 && !(switchZ))
     628:	91 83       	std	Z+1, r25	; 0x01
     62a:	80 83       	st	Z, r24
     62c:	88 81       	ld	r24, Y
     62e:	99 81       	ldd	r25, Y+1	; 0x01
     630:	18 16       	cp	r1, r24
     632:	19 06       	cpc	r1, r25
	{
		digitalWrite(pinStepZ, LOW);
     634:	54 f4       	brge	.+20     	; 0x64a <_Z11MovementXYZPiS_S_bbb+0xc6>
     636:	e1 10       	cpse	r14, r1
     638:	08 c0       	rjmp	.+16     	; 0x64a <_Z11MovementXYZPiS_S_bbb+0xc6>
     63a:	60 e0       	ldi	r22, 0x00	; 0
		(*SteppsZ)--;
     63c:	8e e2       	ldi	r24, 0x2E	; 46
     63e:	55 d4       	rcall	.+2218   	; 0xeea <digitalWrite>
     640:	88 81       	ld	r24, Y
     642:	99 81       	ldd	r25, Y+1	; 0x01
     644:	01 97       	sbiw	r24, 0x01	; 1
	}
	delay(1);
     646:	99 83       	std	Y+1, r25	; 0x01
     648:	88 83       	st	Y, r24
     64a:	61 e0       	ldi	r22, 0x01	; 1
     64c:	70 e0       	ldi	r23, 0x00	; 0
     64e:	80 e0       	ldi	r24, 0x00	; 0
     650:	90 e0       	ldi	r25, 0x00	; 0
     652:	df 91       	pop	r29
     654:	cf 91       	pop	r28
     656:	1f 91       	pop	r17
     658:	0f 91       	pop	r16
     65a:	ef 90       	pop	r14
     65c:	df 90       	pop	r13
	if (*SteppsZ > 0 && !(switchZ))
	{
		digitalWrite(pinStepZ, LOW);
		(*SteppsZ)--;
	}
	delay(1);
     65e:	cf 90       	pop	r12
     660:	bf 90       	pop	r11
     662:	af 90       	pop	r10
     664:	16 c3       	rjmp	.+1580   	; 0xc92 <delay>

00000666 <_ZN14HardwareSerial9availableEv>:
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
     666:	fc 01       	movw	r30, r24
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
     668:	91 8d       	ldd	r25, Z+25	; 0x19
     66a:	22 8d       	ldd	r18, Z+26	; 0x1a
     66c:	89 2f       	mov	r24, r25
     66e:	90 e0       	ldi	r25, 0x00	; 0
     670:	80 5c       	subi	r24, 0xC0	; 192
     672:	9f 4f       	sbci	r25, 0xFF	; 255
     674:	82 1b       	sub	r24, r18
     676:	91 09       	sbc	r25, r1
}
     678:	8f 73       	andi	r24, 0x3F	; 63
     67a:	99 27       	eor	r25, r25
     67c:	08 95       	ret

0000067e <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
     67e:	fc 01       	movw	r30, r24
  if (_rx_buffer_head == _rx_buffer_tail) {
     680:	91 8d       	ldd	r25, Z+25	; 0x19
     682:	82 8d       	ldd	r24, Z+26	; 0x1a
     684:	98 17       	cp	r25, r24
     686:	31 f0       	breq	.+12     	; 0x694 <_ZN14HardwareSerial4peekEv+0x16>
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
     688:	82 8d       	ldd	r24, Z+26	; 0x1a
     68a:	e8 0f       	add	r30, r24
     68c:	f1 1d       	adc	r31, r1
     68e:	85 8d       	ldd	r24, Z+29	; 0x1d
     690:	90 e0       	ldi	r25, 0x00	; 0
     692:	08 95       	ret
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
     694:	8f ef       	ldi	r24, 0xFF	; 255
     696:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
     698:	08 95       	ret

0000069a <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
     69a:	fc 01       	movw	r30, r24
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
     69c:	91 8d       	ldd	r25, Z+25	; 0x19
     69e:	82 8d       	ldd	r24, Z+26	; 0x1a
     6a0:	98 17       	cp	r25, r24
     6a2:	61 f0       	breq	.+24     	; 0x6bc <_ZN14HardwareSerial4readEv+0x22>
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
     6a4:	82 8d       	ldd	r24, Z+26	; 0x1a
     6a6:	df 01       	movw	r26, r30
     6a8:	a8 0f       	add	r26, r24
     6aa:	b1 1d       	adc	r27, r1
     6ac:	5d 96       	adiw	r26, 0x1d	; 29
     6ae:	8c 91       	ld	r24, X
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
     6b0:	92 8d       	ldd	r25, Z+26	; 0x1a
     6b2:	9f 5f       	subi	r25, 0xFF	; 255
     6b4:	9f 73       	andi	r25, 0x3F	; 63
     6b6:	92 8f       	std	Z+26, r25	; 0x1a
    return c;
     6b8:	90 e0       	ldi	r25, 0x00	; 0
     6ba:	08 95       	ret

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
     6bc:	8f ef       	ldi	r24, 0xFF	; 255
     6be:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
     6c0:	08 95       	ret

000006c2 <_ZN14HardwareSerial17availableForWriteEv>:
{
#if (SERIAL_TX_BUFFER_SIZE>256)
  uint8_t oldSREG = SREG;
  cli();
#endif
  tx_buffer_index_t head = _tx_buffer_head;
     6c2:	fc 01       	movw	r30, r24
     6c4:	53 8d       	ldd	r21, Z+27	; 0x1b
  tx_buffer_index_t tail = _tx_buffer_tail;
     6c6:	44 8d       	ldd	r20, Z+28	; 0x1c
     6c8:	25 2f       	mov	r18, r21
     6ca:	30 e0       	ldi	r19, 0x00	; 0
     6cc:	84 2f       	mov	r24, r20
     6ce:	90 e0       	ldi	r25, 0x00	; 0
#if (SERIAL_TX_BUFFER_SIZE>256)
  SREG = oldSREG;
#endif
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
     6d0:	82 1b       	sub	r24, r18
     6d2:	93 0b       	sbc	r25, r19
     6d4:	54 17       	cp	r21, r20
     6d6:	10 f0       	brcs	.+4      	; 0x6dc <_ZN14HardwareSerial17availableForWriteEv+0x1a>
     6d8:	cf 96       	adiw	r24, 0x3f	; 63
     6da:	08 95       	ret
  return tail - head - 1;
     6dc:	01 97       	sbiw	r24, 0x01	; 1
}
     6de:	08 95       	ret

000006e0 <_Z14serialEventRunv>:
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
     6e0:	86 ef       	ldi	r24, 0xF6	; 246
     6e2:	94 e0       	ldi	r25, 0x04	; 4
     6e4:	89 2b       	or	r24, r25
     6e6:	39 f0       	breq	.+14     	; 0x6f6 <_Z14serialEventRunv+0x16>
     6e8:	80 e0       	ldi	r24, 0x00	; 0
     6ea:	90 e0       	ldi	r25, 0x00	; 0
     6ec:	89 2b       	or	r24, r25
     6ee:	19 f0       	breq	.+6      	; 0x6f6 <_Z14serialEventRunv+0x16>
     6f0:	7d d1       	rcall	.+762    	; 0x9ec <_Z17Serial0_availablev>
     6f2:	81 11       	cpse	r24, r1
#endif
#if defined(HAVE_HWSERIAL1)
  if (Serial1_available && serialEvent1 && Serial1_available()) serialEvent1();
     6f4:	25 c0       	rjmp	.+74     	; 0x740 <_Z14serialEventRunv+0x60>
     6f6:	80 e0       	ldi	r24, 0x00	; 0
     6f8:	90 e0       	ldi	r25, 0x00	; 0
     6fa:	89 2b       	or	r24, r25
     6fc:	41 f0       	breq	.+16     	; 0x70e <_Z14serialEventRunv+0x2e>
     6fe:	80 e0       	ldi	r24, 0x00	; 0
     700:	90 e0       	ldi	r25, 0x00	; 0
     702:	89 2b       	or	r24, r25
     704:	21 f0       	breq	.+8      	; 0x70e <_Z14serialEventRunv+0x2e>
     706:	0e 94 00 00 	call	0	; 0x0 <__vectors>
     70a:	81 11       	cpse	r24, r1
#endif
#if defined(HAVE_HWSERIAL2)
  if (Serial2_available && serialEvent2 && Serial2_available()) serialEvent2();
     70c:	1c c0       	rjmp	.+56     	; 0x746 <_Z14serialEventRunv+0x66>
     70e:	80 e0       	ldi	r24, 0x00	; 0
     710:	90 e0       	ldi	r25, 0x00	; 0
     712:	89 2b       	or	r24, r25
     714:	41 f0       	breq	.+16     	; 0x726 <_Z14serialEventRunv+0x46>
     716:	80 e0       	ldi	r24, 0x00	; 0
     718:	90 e0       	ldi	r25, 0x00	; 0
     71a:	89 2b       	or	r24, r25
     71c:	21 f0       	breq	.+8      	; 0x726 <_Z14serialEventRunv+0x46>
     71e:	0e 94 00 00 	call	0	; 0x0 <__vectors>
     722:	81 11       	cpse	r24, r1
#endif
#if defined(HAVE_HWSERIAL3)
  if (Serial3_available && serialEvent3 && Serial3_available()) serialEvent3();
     724:	13 c0       	rjmp	.+38     	; 0x74c <_Z14serialEventRunv+0x6c>
     726:	80 e0       	ldi	r24, 0x00	; 0
     728:	90 e0       	ldi	r25, 0x00	; 0
     72a:	89 2b       	or	r24, r25
     72c:	a1 f0       	breq	.+40     	; 0x756 <_Z14serialEventRunv+0x76>
     72e:	80 e0       	ldi	r24, 0x00	; 0
     730:	90 e0       	ldi	r25, 0x00	; 0
     732:	89 2b       	or	r24, r25
     734:	81 f0       	breq	.+32     	; 0x756 <_Z14serialEventRunv+0x76>
     736:	0e 94 00 00 	call	0	; 0x0 <__vectors>
     73a:	81 11       	cpse	r24, r1
     73c:	0a c0       	rjmp	.+20     	; 0x752 <_Z14serialEventRunv+0x72>
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
     73e:	08 95       	ret
     740:	0e 94 00 00 	call	0	; 0x0 <__vectors>
#endif
#if defined(HAVE_HWSERIAL1)
  if (Serial1_available && serialEvent1 && Serial1_available()) serialEvent1();
     744:	d8 cf       	rjmp	.-80     	; 0x6f6 <_Z14serialEventRunv+0x16>
     746:	0e 94 00 00 	call	0	; 0x0 <__vectors>
#endif
#if defined(HAVE_HWSERIAL2)
  if (Serial2_available && serialEvent2 && Serial2_available()) serialEvent2();
     74a:	e1 cf       	rjmp	.-62     	; 0x70e <_Z14serialEventRunv+0x2e>
     74c:	0e 94 00 00 	call	0	; 0x0 <__vectors>
#endif
#if defined(HAVE_HWSERIAL3)
  if (Serial3_available && serialEvent3 && Serial3_available()) serialEvent3();
     750:	ea cf       	rjmp	.-44     	; 0x726 <_Z14serialEventRunv+0x46>
     752:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
     756:	08 95       	ret

00000758 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
}

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
     758:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
     75a:	84 8d       	ldd	r24, Z+28	; 0x1c
     75c:	df 01       	movw	r26, r30
     75e:	a8 0f       	add	r26, r24
     760:	b1 1d       	adc	r27, r1
     762:	a3 5a       	subi	r26, 0xA3	; 163
     764:	bf 4f       	sbci	r27, 0xFF	; 255
     766:	2c 91       	ld	r18, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
     768:	84 8d       	ldd	r24, Z+28	; 0x1c
     76a:	90 e0       	ldi	r25, 0x00	; 0
     76c:	01 96       	adiw	r24, 0x01	; 1
     76e:	8f 73       	andi	r24, 0x3F	; 63
     770:	99 27       	eor	r25, r25
     772:	84 8f       	std	Z+28, r24	; 0x1c

  *_udr = c;
     774:	a6 89       	ldd	r26, Z+22	; 0x16
     776:	b7 89       	ldd	r27, Z+23	; 0x17
     778:	2c 93       	st	X, r18

  // clear the TXC bit -- "can be cleared by writing a one to its bit
  // location". This makes sure flush() won't return until the bytes
  // actually got written
  sbi(*_ucsra, TXC0);
     77a:	a0 89       	ldd	r26, Z+16	; 0x10
     77c:	b1 89       	ldd	r27, Z+17	; 0x11
     77e:	8c 91       	ld	r24, X
     780:	80 64       	ori	r24, 0x40	; 64
     782:	8c 93       	st	X, r24

  if (_tx_buffer_head == _tx_buffer_tail) {
     784:	93 8d       	ldd	r25, Z+27	; 0x1b
     786:	84 8d       	ldd	r24, Z+28	; 0x1c
     788:	98 13       	cpse	r25, r24
     78a:	06 c0       	rjmp	.+12     	; 0x798 <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x40>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
     78c:	02 88       	ldd	r0, Z+18	; 0x12
     78e:	f3 89       	ldd	r31, Z+19	; 0x13
     790:	e0 2d       	mov	r30, r0
     792:	80 81       	ld	r24, Z
     794:	8f 7d       	andi	r24, 0xDF	; 223
     796:	80 83       	st	Z, r24
     798:	08 95       	ret

0000079a <_ZN14HardwareSerial5writeEh>:
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}

size_t HardwareSerial::write(uint8_t c)
{
     79a:	ef 92       	push	r14
     79c:	ff 92       	push	r15
     79e:	0f 93       	push	r16
     7a0:	1f 93       	push	r17
     7a2:	cf 93       	push	r28
     7a4:	df 93       	push	r29
     7a6:	ec 01       	movw	r28, r24
  _written = true;
     7a8:	81 e0       	ldi	r24, 0x01	; 1
     7aa:	88 8f       	std	Y+24, r24	; 0x18
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
     7ac:	9b 8d       	ldd	r25, Y+27	; 0x1b
     7ae:	8c 8d       	ldd	r24, Y+28	; 0x1c
     7b0:	98 13       	cpse	r25, r24
     7b2:	05 c0       	rjmp	.+10     	; 0x7be <_ZN14HardwareSerial5writeEh+0x24>
     7b4:	e8 89       	ldd	r30, Y+16	; 0x10
     7b6:	f9 89       	ldd	r31, Y+17	; 0x11
     7b8:	80 81       	ld	r24, Z
     7ba:	85 fd       	sbrc	r24, 5
     7bc:	23 c0       	rjmp	.+70     	; 0x804 <_ZN14HardwareSerial5writeEh+0x6a>
     7be:	f6 2e       	mov	r15, r22
    *_udr = c;
    sbi(*_ucsra, TXC0);
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
     7c0:	0b 8d       	ldd	r16, Y+27	; 0x1b
     7c2:	10 e0       	ldi	r17, 0x00	; 0
     7c4:	0f 5f       	subi	r16, 0xFF	; 255
     7c6:	1f 4f       	sbci	r17, 0xFF	; 255
     7c8:	0f 73       	andi	r16, 0x3F	; 63
     7ca:	11 27       	eor	r17, r17
     7cc:	e0 2e       	mov	r14, r16
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
     7ce:	8c 8d       	ldd	r24, Y+28	; 0x1c
     7d0:	e8 12       	cpse	r14, r24
     7d2:	0b c0       	rjmp	.+22     	; 0x7ea <_ZN14HardwareSerial5writeEh+0x50>
    if (bit_is_clear(SREG, SREG_I)) {
     7d4:	0f b6       	in	r0, 0x3f	; 63
     7d6:	07 fc       	sbrc	r0, 7
     7d8:	fa cf       	rjmp	.-12     	; 0x7ce <_ZN14HardwareSerial5writeEh+0x34>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
     7da:	e8 89       	ldd	r30, Y+16	; 0x10
     7dc:	f9 89       	ldd	r31, Y+17	; 0x11
     7de:	80 81       	ld	r24, Z
     7e0:	85 ff       	sbrs	r24, 5
     7e2:	f5 cf       	rjmp	.-22     	; 0x7ce <_ZN14HardwareSerial5writeEh+0x34>
	_tx_udr_empty_irq();
     7e4:	ce 01       	movw	r24, r28
     7e6:	b8 df       	rcall	.-144    	; 0x758 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
     7e8:	f2 cf       	rjmp	.-28     	; 0x7ce <_ZN14HardwareSerial5writeEh+0x34>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
     7ea:	8b 8d       	ldd	r24, Y+27	; 0x1b
     7ec:	fe 01       	movw	r30, r28
     7ee:	e8 0f       	add	r30, r24
     7f0:	f1 1d       	adc	r31, r1
     7f2:	e3 5a       	subi	r30, 0xA3	; 163
     7f4:	ff 4f       	sbci	r31, 0xFF	; 255
     7f6:	f0 82       	st	Z, r15
  _tx_buffer_head = i;
     7f8:	0b 8f       	std	Y+27, r16	; 0x1b
	
  sbi(*_ucsrb, UDRIE0);
     7fa:	ea 89       	ldd	r30, Y+18	; 0x12
     7fc:	fb 89       	ldd	r31, Y+19	; 0x13
     7fe:	80 81       	ld	r24, Z
     800:	80 62       	ori	r24, 0x20	; 32
     802:	07 c0       	rjmp	.+14     	; 0x812 <_ZN14HardwareSerial5writeEh+0x78>
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    *_udr = c;
     804:	ee 89       	ldd	r30, Y+22	; 0x16
     806:	ff 89       	ldd	r31, Y+23	; 0x17
     808:	60 83       	st	Z, r22
    sbi(*_ucsra, TXC0);
     80a:	e8 89       	ldd	r30, Y+16	; 0x10
     80c:	f9 89       	ldd	r31, Y+17	; 0x11
     80e:	80 81       	ld	r24, Z
     810:	80 64       	ori	r24, 0x40	; 64
     812:	80 83       	st	Z, r24
  _tx_buffer_head = i;
	
  sbi(*_ucsrb, UDRIE0);
  
  return 1;
}
     814:	81 e0       	ldi	r24, 0x01	; 1
     816:	90 e0       	ldi	r25, 0x00	; 0
     818:	df 91       	pop	r29
     81a:	cf 91       	pop	r28
     81c:	1f 91       	pop	r17
     81e:	0f 91       	pop	r16
     820:	ff 90       	pop	r15
     822:	ef 90       	pop	r14
     824:	08 95       	ret

00000826 <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
     826:	cf 93       	push	r28
     828:	df 93       	push	r29
     82a:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
     82c:	88 8d       	ldd	r24, Y+24	; 0x18
     82e:	88 23       	and	r24, r24
     830:	c1 f0       	breq	.+48     	; 0x862 <_ZN14HardwareSerial5flushEv+0x3c>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
     832:	ea 89       	ldd	r30, Y+18	; 0x12
     834:	fb 89       	ldd	r31, Y+19	; 0x13
     836:	80 81       	ld	r24, Z
     838:	85 fd       	sbrc	r24, 5
     83a:	05 c0       	rjmp	.+10     	; 0x846 <_ZN14HardwareSerial5flushEv+0x20>
     83c:	a8 89       	ldd	r26, Y+16	; 0x10
     83e:	b9 89       	ldd	r27, Y+17	; 0x11
     840:	8c 91       	ld	r24, X
     842:	86 fd       	sbrc	r24, 6
     844:	0e c0       	rjmp	.+28     	; 0x862 <_ZN14HardwareSerial5flushEv+0x3c>
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
     846:	0f b6       	in	r0, 0x3f	; 63
     848:	07 fc       	sbrc	r0, 7
     84a:	f5 cf       	rjmp	.-22     	; 0x836 <_ZN14HardwareSerial5flushEv+0x10>
     84c:	80 81       	ld	r24, Z
     84e:	85 ff       	sbrs	r24, 5
     850:	f2 cf       	rjmp	.-28     	; 0x836 <_ZN14HardwareSerial5flushEv+0x10>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
     852:	a8 89       	ldd	r26, Y+16	; 0x10
     854:	b9 89       	ldd	r27, Y+17	; 0x11
     856:	8c 91       	ld	r24, X
     858:	85 ff       	sbrs	r24, 5
     85a:	ed cf       	rjmp	.-38     	; 0x836 <_ZN14HardwareSerial5flushEv+0x10>
	  _tx_udr_empty_irq();
     85c:	ce 01       	movw	r24, r28
     85e:	7c df       	rcall	.-264    	; 0x758 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
     860:	e8 cf       	rjmp	.-48     	; 0x832 <_ZN14HardwareSerial5flushEv+0xc>
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
     862:	df 91       	pop	r29
     864:	cf 91       	pop	r28
     866:	08 95       	ret

00000868 <_ZN14HardwareSerial5beginEmh>:
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
     868:	cf 92       	push	r12
     86a:	df 92       	push	r13
     86c:	ef 92       	push	r14
     86e:	ff 92       	push	r15
     870:	1f 93       	push	r17
     872:	cf 93       	push	r28
     874:	df 93       	push	r29
     876:	ec 01       	movw	r28, r24
     878:	6a 01       	movw	r12, r20
     87a:	7b 01       	movw	r14, r22
     87c:	12 2f       	mov	r17, r18
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
     87e:	e8 89       	ldd	r30, Y+16	; 0x10
     880:	f9 89       	ldd	r31, Y+17	; 0x11
     882:	82 e0       	ldi	r24, 0x02	; 2
     884:	80 83       	st	Z, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
     886:	41 15       	cp	r20, r1
     888:	51 4e       	sbci	r21, 0xE1	; 225
     88a:	61 05       	cpc	r22, r1
     88c:	71 05       	cpc	r23, r1
     88e:	a9 f0       	breq	.+42     	; 0x8ba <_ZN14HardwareSerial5beginEmh+0x52>
// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
     890:	60 e0       	ldi	r22, 0x00	; 0
     892:	79 e0       	ldi	r23, 0x09	; 9
     894:	8d e3       	ldi	r24, 0x3D	; 61
     896:	90 e0       	ldi	r25, 0x00	; 0
     898:	a7 01       	movw	r20, r14
     89a:	96 01       	movw	r18, r12
     89c:	cf d4       	rcall	.+2462   	; 0x123c <__udivmodsi4>
     89e:	da 01       	movw	r26, r20
     8a0:	c9 01       	movw	r24, r18
     8a2:	01 97       	sbiw	r24, 0x01	; 1
     8a4:	a1 09       	sbc	r26, r1
     8a6:	b1 09       	sbc	r27, r1
     8a8:	b6 95       	lsr	r27
     8aa:	a7 95       	ror	r26
     8ac:	97 95       	ror	r25
     8ae:	87 95       	ror	r24
     8b0:	9c 01       	movw	r18, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
     8b2:	21 15       	cp	r18, r1
     8b4:	80 e1       	ldi	r24, 0x10	; 16
     8b6:	38 07       	cpc	r19, r24
     8b8:	a0 f0       	brcs	.+40     	; 0x8e2 <_ZN14HardwareSerial5beginEmh+0x7a>
  {
    *_ucsra = 0;
     8ba:	e8 89       	ldd	r30, Y+16	; 0x10
     8bc:	f9 89       	ldd	r31, Y+17	; 0x11
     8be:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
     8c0:	60 e8       	ldi	r22, 0x80	; 128
     8c2:	74 e8       	ldi	r23, 0x84	; 132
     8c4:	8e e1       	ldi	r24, 0x1E	; 30
     8c6:	90 e0       	ldi	r25, 0x00	; 0
     8c8:	a7 01       	movw	r20, r14
     8ca:	96 01       	movw	r18, r12
     8cc:	b7 d4       	rcall	.+2414   	; 0x123c <__udivmodsi4>
     8ce:	da 01       	movw	r26, r20
     8d0:	c9 01       	movw	r24, r18
     8d2:	01 97       	sbiw	r24, 0x01	; 1
     8d4:	a1 09       	sbc	r26, r1
     8d6:	b1 09       	sbc	r27, r1
     8d8:	b6 95       	lsr	r27
     8da:	a7 95       	ror	r26
     8dc:	97 95       	ror	r25
     8de:	87 95       	ror	r24
     8e0:	9c 01       	movw	r18, r24
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
     8e2:	ec 85       	ldd	r30, Y+12	; 0x0c
     8e4:	fd 85       	ldd	r31, Y+13	; 0x0d
     8e6:	30 83       	st	Z, r19
  *_ubrrl = baud_setting;
     8e8:	ee 85       	ldd	r30, Y+14	; 0x0e
     8ea:	ff 85       	ldd	r31, Y+15	; 0x0f
     8ec:	20 83       	st	Z, r18

  _written = false;
     8ee:	18 8e       	std	Y+24, r1	; 0x18

  //set the data bits, parity, and stop bits
#if defined(__AVR_ATmega8__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
     8f0:	ec 89       	ldd	r30, Y+20	; 0x14
     8f2:	fd 89       	ldd	r31, Y+21	; 0x15
     8f4:	10 83       	st	Z, r17
  
  sbi(*_ucsrb, RXEN0);
     8f6:	ea 89       	ldd	r30, Y+18	; 0x12
     8f8:	fb 89       	ldd	r31, Y+19	; 0x13
     8fa:	80 81       	ld	r24, Z
     8fc:	80 61       	ori	r24, 0x10	; 16
     8fe:	80 83       	st	Z, r24
  sbi(*_ucsrb, TXEN0);
     900:	ea 89       	ldd	r30, Y+18	; 0x12
     902:	fb 89       	ldd	r31, Y+19	; 0x13
     904:	80 81       	ld	r24, Z
     906:	88 60       	ori	r24, 0x08	; 8
     908:	80 83       	st	Z, r24
  sbi(*_ucsrb, RXCIE0);
     90a:	ea 89       	ldd	r30, Y+18	; 0x12
     90c:	fb 89       	ldd	r31, Y+19	; 0x13
     90e:	80 81       	ld	r24, Z
     910:	80 68       	ori	r24, 0x80	; 128
     912:	80 83       	st	Z, r24
  cbi(*_ucsrb, UDRIE0);
     914:	ea 89       	ldd	r30, Y+18	; 0x12
     916:	fb 89       	ldd	r31, Y+19	; 0x13
     918:	80 81       	ld	r24, Z
     91a:	8f 7d       	andi	r24, 0xDF	; 223
     91c:	80 83       	st	Z, r24
}
     91e:	df 91       	pop	r29
     920:	cf 91       	pop	r28
     922:	1f 91       	pop	r17
     924:	ff 90       	pop	r15
     926:	ef 90       	pop	r14
     928:	df 90       	pop	r13
     92a:	cf 90       	pop	r12
     92c:	08 95       	ret

0000092e <__vector_25>:
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
     92e:	1f 92       	push	r1
     930:	0f 92       	push	r0
     932:	0f b6       	in	r0, 0x3f	; 63
     934:	0f 92       	push	r0
     936:	11 24       	eor	r1, r1
     938:	0b b6       	in	r0, 0x3b	; 59
     93a:	0f 92       	push	r0
     93c:	2f 93       	push	r18
     93e:	8f 93       	push	r24
     940:	9f 93       	push	r25
     942:	ef 93       	push	r30
     944:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
     946:	e0 91 5c 02 	lds	r30, 0x025C	; 0x80025c <__data_end+0x10>
     94a:	f0 91 5d 02 	lds	r31, 0x025D	; 0x80025d <__data_end+0x11>
     94e:	80 81       	ld	r24, Z
     950:	e0 91 62 02 	lds	r30, 0x0262	; 0x800262 <__data_end+0x16>
     954:	f0 91 63 02 	lds	r31, 0x0263	; 0x800263 <__data_end+0x17>
     958:	82 fd       	sbrc	r24, 2
     95a:	12 c0       	rjmp	.+36     	; 0x980 <__vector_25+0x52>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
     95c:	90 81       	ld	r25, Z
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
     95e:	80 91 65 02 	lds	r24, 0x0265	; 0x800265 <__data_end+0x19>
     962:	8f 5f       	subi	r24, 0xFF	; 255
     964:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
     966:	20 91 66 02 	lds	r18, 0x0266	; 0x800266 <__data_end+0x1a>
     96a:	82 17       	cp	r24, r18
     96c:	51 f0       	breq	.+20     	; 0x982 <__vector_25+0x54>
      _rx_buffer[_rx_buffer_head] = c;
     96e:	e0 91 65 02 	lds	r30, 0x0265	; 0x800265 <__data_end+0x19>
     972:	f0 e0       	ldi	r31, 0x00	; 0
     974:	e4 5b       	subi	r30, 0xB4	; 180
     976:	fd 4f       	sbci	r31, 0xFD	; 253
     978:	95 8f       	std	Z+29, r25	; 0x1d
      _rx_buffer_head = i;
     97a:	80 93 65 02 	sts	0x0265, r24	; 0x800265 <__data_end+0x19>
     97e:	01 c0       	rjmp	.+2      	; 0x982 <__vector_25+0x54>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
     980:	80 81       	ld	r24, Z
    Serial._rx_complete_irq();
  }
     982:	ff 91       	pop	r31
     984:	ef 91       	pop	r30
     986:	9f 91       	pop	r25
     988:	8f 91       	pop	r24
     98a:	2f 91       	pop	r18
     98c:	0f 90       	pop	r0
     98e:	0b be       	out	0x3b, r0	; 59
     990:	0f 90       	pop	r0
     992:	0f be       	out	0x3f, r0	; 63
     994:	0f 90       	pop	r0
     996:	1f 90       	pop	r1
     998:	18 95       	reti

0000099a <__vector_26>:
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
     99a:	1f 92       	push	r1
     99c:	0f 92       	push	r0
     99e:	0f b6       	in	r0, 0x3f	; 63
     9a0:	0f 92       	push	r0
     9a2:	11 24       	eor	r1, r1
     9a4:	0b b6       	in	r0, 0x3b	; 59
     9a6:	0f 92       	push	r0
     9a8:	2f 93       	push	r18
     9aa:	3f 93       	push	r19
     9ac:	4f 93       	push	r20
     9ae:	5f 93       	push	r21
     9b0:	6f 93       	push	r22
     9b2:	7f 93       	push	r23
     9b4:	8f 93       	push	r24
     9b6:	9f 93       	push	r25
     9b8:	af 93       	push	r26
     9ba:	bf 93       	push	r27
     9bc:	ef 93       	push	r30
     9be:	ff 93       	push	r31
  Serial._tx_udr_empty_irq();
     9c0:	8c e4       	ldi	r24, 0x4C	; 76
     9c2:	92 e0       	ldi	r25, 0x02	; 2
     9c4:	c9 de       	rcall	.-622    	; 0x758 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
     9c6:	ff 91       	pop	r31
     9c8:	ef 91       	pop	r30
     9ca:	bf 91       	pop	r27
     9cc:	af 91       	pop	r26
     9ce:	9f 91       	pop	r25
     9d0:	8f 91       	pop	r24
     9d2:	7f 91       	pop	r23
     9d4:	6f 91       	pop	r22
     9d6:	5f 91       	pop	r21
     9d8:	4f 91       	pop	r20
     9da:	3f 91       	pop	r19
     9dc:	2f 91       	pop	r18
     9de:	0f 90       	pop	r0
     9e0:	0b be       	out	0x3b, r0	; 59
     9e2:	0f 90       	pop	r0
     9e4:	0f be       	out	0x3f, r0	; 63
     9e6:	0f 90       	pop	r0
     9e8:	1f 90       	pop	r1
     9ea:	18 95       	reti

000009ec <_Z17Serial0_availablev>:
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
     9ec:	8c e4       	ldi	r24, 0x4C	; 76
     9ee:	92 e0       	ldi	r25, 0x02	; 2
     9f0:	3a de       	rcall	.-908    	; 0x666 <_ZN14HardwareSerial9availableEv>
     9f2:	21 e0       	ldi	r18, 0x01	; 1
     9f4:	89 2b       	or	r24, r25
     9f6:	09 f4       	brne	.+2      	; 0x9fa <_Z17Serial0_availablev+0xe>
     9f8:	20 e0       	ldi	r18, 0x00	; 0
}
     9fa:	82 2f       	mov	r24, r18
     9fc:	08 95       	ret

000009fe <_GLOBAL__sub_I___vector_25>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
     9fe:	ec e4       	ldi	r30, 0x4C	; 76
     a00:	f2 e0       	ldi	r31, 0x02	; 2
     a02:	13 82       	std	Z+3, r1	; 0x03
     a04:	12 82       	std	Z+2, r1	; 0x02
  public:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;

    Stream() {_timeout=1000;}
     a06:	88 ee       	ldi	r24, 0xE8	; 232
     a08:	93 e0       	ldi	r25, 0x03	; 3
     a0a:	a0 e0       	ldi	r26, 0x00	; 0
     a0c:	b0 e0       	ldi	r27, 0x00	; 0
     a0e:	84 83       	std	Z+4, r24	; 0x04
     a10:	95 83       	std	Z+5, r25	; 0x05
     a12:	a6 83       	std	Z+6, r26	; 0x06
     a14:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
     a16:	8f e2       	ldi	r24, 0x2F	; 47
     a18:	92 e0       	ldi	r25, 0x02	; 2
     a1a:	91 83       	std	Z+1, r25	; 0x01
     a1c:	80 83       	st	Z, r24
     a1e:	85 ec       	ldi	r24, 0xC5	; 197
     a20:	90 e0       	ldi	r25, 0x00	; 0
     a22:	95 87       	std	Z+13, r25	; 0x0d
     a24:	84 87       	std	Z+12, r24	; 0x0c
     a26:	84 ec       	ldi	r24, 0xC4	; 196
     a28:	90 e0       	ldi	r25, 0x00	; 0
     a2a:	97 87       	std	Z+15, r25	; 0x0f
     a2c:	86 87       	std	Z+14, r24	; 0x0e
     a2e:	80 ec       	ldi	r24, 0xC0	; 192
     a30:	90 e0       	ldi	r25, 0x00	; 0
     a32:	91 8b       	std	Z+17, r25	; 0x11
     a34:	80 8b       	std	Z+16, r24	; 0x10
     a36:	81 ec       	ldi	r24, 0xC1	; 193
     a38:	90 e0       	ldi	r25, 0x00	; 0
     a3a:	93 8b       	std	Z+19, r25	; 0x13
     a3c:	82 8b       	std	Z+18, r24	; 0x12
     a3e:	82 ec       	ldi	r24, 0xC2	; 194
     a40:	90 e0       	ldi	r25, 0x00	; 0
     a42:	95 8b       	std	Z+21, r25	; 0x15
     a44:	84 8b       	std	Z+20, r24	; 0x14
     a46:	86 ec       	ldi	r24, 0xC6	; 198
     a48:	90 e0       	ldi	r25, 0x00	; 0
     a4a:	97 8b       	std	Z+23, r25	; 0x17
     a4c:	86 8b       	std	Z+22, r24	; 0x16
     a4e:	11 8e       	std	Z+25, r1	; 0x19
     a50:	12 8e       	std	Z+26, r1	; 0x1a
     a52:	13 8e       	std	Z+27, r1	; 0x1b
     a54:	14 8e       	std	Z+28, r1	; 0x1c
     a56:	08 95       	ret

00000a58 <initVariant>:
     a58:	08 95       	ret

00000a5a <main>:
void setupUSB() __attribute__((weak));
void setupUSB() { }

int main(void)
{
	init();
     a5a:	54 d1       	rcall	.+680    	; 0xd04 <init>
     a5c:	fd df       	rcall	.-6      	; 0xa58 <initVariant>
     a5e:	16 dc       	rcall	.-2004   	; 0x28c <setup>
     a60:	c0 e7       	ldi	r28, 0x70	; 112
     a62:	d3 e0       	ldi	r29, 0x03	; 3
     a64:	22 dc       	rcall	.-1980   	; 0x2aa <loop>
     a66:	20 97       	sbiw	r28, 0x00	; 0
     a68:	e9 f3       	breq	.-6      	; 0xa64 <main+0xa>
     a6a:	3a de       	rcall	.-908    	; 0x6e0 <_Z14serialEventRunv>
     a6c:	fb cf       	rjmp	.-10     	; 0xa64 <main+0xa>

00000a6e <_ZN5Print5writeEPKhj>:
size_t Print::println(const String &s)
{
  size_t n = print(s);
  n += println();
  return n;
}
     a6e:	cf 92       	push	r12
     a70:	df 92       	push	r13
     a72:	ef 92       	push	r14
     a74:	ff 92       	push	r15
     a76:	0f 93       	push	r16
     a78:	1f 93       	push	r17
     a7a:	cf 93       	push	r28
     a7c:	df 93       	push	r29
     a7e:	6c 01       	movw	r12, r24
     a80:	7a 01       	movw	r14, r20
     a82:	8b 01       	movw	r16, r22
     a84:	c0 e0       	ldi	r28, 0x00	; 0
     a86:	d0 e0       	ldi	r29, 0x00	; 0
     a88:	ce 15       	cp	r28, r14
     a8a:	df 05       	cpc	r29, r15
     a8c:	81 f0       	breq	.+32     	; 0xaae <_ZN5Print5writeEPKhj+0x40>
     a8e:	d8 01       	movw	r26, r16
     a90:	6d 91       	ld	r22, X+
     a92:	8d 01       	movw	r16, r26
     a94:	d6 01       	movw	r26, r12
     a96:	ed 91       	ld	r30, X+
     a98:	fc 91       	ld	r31, X
     a9a:	01 90       	ld	r0, Z+
     a9c:	f0 81       	ld	r31, Z
     a9e:	e0 2d       	mov	r30, r0
     aa0:	c6 01       	movw	r24, r12
     aa2:	19 95       	eicall
     aa4:	89 2b       	or	r24, r25
     aa6:	11 f0       	breq	.+4      	; 0xaac <_ZN5Print5writeEPKhj+0x3e>
     aa8:	21 96       	adiw	r28, 0x01	; 1
     aaa:	ee cf       	rjmp	.-36     	; 0xa88 <_ZN5Print5writeEPKhj+0x1a>
     aac:	7e 01       	movw	r14, r28
     aae:	c7 01       	movw	r24, r14
     ab0:	df 91       	pop	r29
     ab2:	cf 91       	pop	r28
     ab4:	1f 91       	pop	r17
     ab6:	0f 91       	pop	r16
     ab8:	ff 90       	pop	r15
     aba:	ef 90       	pop	r14
     abc:	df 90       	pop	r13
     abe:	cf 90       	pop	r12
     ac0:	08 95       	ret

00000ac2 <_ZN5Print5writeEPKc>:
     ac2:	61 15       	cp	r22, r1
     ac4:	71 05       	cpc	r23, r1
     ac6:	79 f0       	breq	.+30     	; 0xae6 <_ZN5Print5writeEPKc+0x24>
     ac8:	fb 01       	movw	r30, r22
     aca:	01 90       	ld	r0, Z+
     acc:	00 20       	and	r0, r0
     ace:	e9 f7       	brne	.-6      	; 0xaca <_ZN5Print5writeEPKc+0x8>
     ad0:	31 97       	sbiw	r30, 0x01	; 1
     ad2:	af 01       	movw	r20, r30
     ad4:	46 1b       	sub	r20, r22
     ad6:	57 0b       	sbc	r21, r23
     ad8:	dc 01       	movw	r26, r24
     ada:	ed 91       	ld	r30, X+
     adc:	fc 91       	ld	r31, X
     ade:	02 80       	ldd	r0, Z+2	; 0x02
     ae0:	f3 81       	ldd	r31, Z+3	; 0x03
     ae2:	e0 2d       	mov	r30, r0
     ae4:	19 94       	eijmp
     ae6:	80 e0       	ldi	r24, 0x00	; 0
     ae8:	90 e0       	ldi	r25, 0x00	; 0
     aea:	08 95       	ret

00000aec <_ZN5Print7printlnEv>:
     aec:	6d e3       	ldi	r22, 0x3D	; 61
     aee:	72 e0       	ldi	r23, 0x02	; 2
     af0:	e8 cf       	rjmp	.-48     	; 0xac2 <_ZN5Print5writeEPKc>

00000af2 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
     af2:	0f 93       	push	r16
     af4:	1f 93       	push	r17
     af6:	cf 93       	push	r28
     af8:	df 93       	push	r29
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
     afa:	ec 01       	movw	r28, r24
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
     afc:	e2 df       	rcall	.-60     	; 0xac2 <_ZN5Print5writeEPKc>
     afe:	8c 01       	movw	r16, r24
  return n;
}
     b00:	ce 01       	movw	r24, r28
     b02:	f4 df       	rcall	.-24     	; 0xaec <_ZN5Print7printlnEv>
     b04:	80 0f       	add	r24, r16
     b06:	91 1f       	adc	r25, r17
     b08:	df 91       	pop	r29
     b0a:	cf 91       	pop	r28
     b0c:	1f 91       	pop	r17
     b0e:	0f 91       	pop	r16
     b10:	08 95       	ret

00000b12 <_ZN6Stream9timedReadEv>:
    if (c < 0 || c == terminator) break;
    *buffer++ = (char)c;
    index++;
  }
  return index; // return number of characters, not including null terminator
}
     b12:	0f 93       	push	r16
     b14:	1f 93       	push	r17
     b16:	cf 93       	push	r28
     b18:	df 93       	push	r29
     b1a:	ec 01       	movw	r28, r24
     b1c:	89 d0       	rcall	.+274    	; 0xc30 <millis>
     b1e:	68 87       	std	Y+8, r22	; 0x08
     b20:	79 87       	std	Y+9, r23	; 0x09
     b22:	8a 87       	std	Y+10, r24	; 0x0a
     b24:	9b 87       	std	Y+11, r25	; 0x0b
     b26:	e8 81       	ld	r30, Y
     b28:	f9 81       	ldd	r31, Y+1	; 0x01
     b2a:	02 84       	ldd	r0, Z+10	; 0x0a
     b2c:	f3 85       	ldd	r31, Z+11	; 0x0b
     b2e:	e0 2d       	mov	r30, r0
     b30:	ce 01       	movw	r24, r28
     b32:	19 95       	eicall
     b34:	97 ff       	sbrs	r25, 7
     b36:	16 c0       	rjmp	.+44     	; 0xb64 <_ZN6Stream9timedReadEv+0x52>
     b38:	7b d0       	rcall	.+246    	; 0xc30 <millis>
     b3a:	08 85       	ldd	r16, Y+8	; 0x08
     b3c:	19 85       	ldd	r17, Y+9	; 0x09
     b3e:	2a 85       	ldd	r18, Y+10	; 0x0a
     b40:	3b 85       	ldd	r19, Y+11	; 0x0b
     b42:	dc 01       	movw	r26, r24
     b44:	cb 01       	movw	r24, r22
     b46:	80 1b       	sub	r24, r16
     b48:	91 0b       	sbc	r25, r17
     b4a:	a2 0b       	sbc	r26, r18
     b4c:	b3 0b       	sbc	r27, r19
     b4e:	0c 81       	ldd	r16, Y+4	; 0x04
     b50:	1d 81       	ldd	r17, Y+5	; 0x05
     b52:	2e 81       	ldd	r18, Y+6	; 0x06
     b54:	3f 81       	ldd	r19, Y+7	; 0x07
     b56:	80 17       	cp	r24, r16
     b58:	91 07       	cpc	r25, r17
     b5a:	a2 07       	cpc	r26, r18
     b5c:	b3 07       	cpc	r27, r19
     b5e:	18 f3       	brcs	.-58     	; 0xb26 <_ZN6Stream9timedReadEv+0x14>
     b60:	8f ef       	ldi	r24, 0xFF	; 255
     b62:	9f ef       	ldi	r25, 0xFF	; 255
     b64:	df 91       	pop	r29
     b66:	cf 91       	pop	r28
     b68:	1f 91       	pop	r17
     b6a:	0f 91       	pop	r16
     b6c:	08 95       	ret

00000b6e <_ZN6Stream10readStringEv>:

String Stream::readString()
{
     b6e:	0f 93       	push	r16
     b70:	1f 93       	push	r17
     b72:	cf 93       	push	r28
     b74:	df 93       	push	r29
     b76:	ec 01       	movw	r28, r24
     b78:	8b 01       	movw	r16, r22
  String ret;
     b7a:	6f e3       	ldi	r22, 0x3F	; 63
     b7c:	72 e0       	ldi	r23, 0x02	; 2
  int c = timedRead();
     b7e:	73 d2       	rcall	.+1254   	; 0x1066 <_ZN6StringC1EPKc>
     b80:	c8 01       	movw	r24, r16
  while (c >= 0)
     b82:	c7 df       	rcall	.-114    	; 0xb12 <_ZN6Stream9timedReadEv>

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
	String & operator += (char c)			{concat(c); return (*this);}
     b84:	97 fd       	sbrc	r25, 7
     b86:	04 c0       	rjmp	.+8      	; 0xb90 <_ZN6Stream10readStringEv+0x22>
     b88:	68 2f       	mov	r22, r24
     b8a:	ce 01       	movw	r24, r28
  {
    ret += (char)c;
    c = timedRead();
  }
  return ret;
}
     b8c:	f2 d2       	rcall	.+1508   	; 0x1172 <_ZN6String6concatEc>
     b8e:	f8 cf       	rjmp	.-16     	; 0xb80 <_ZN6Stream10readStringEv+0x12>
     b90:	ce 01       	movw	r24, r28
     b92:	df 91       	pop	r29
     b94:	cf 91       	pop	r28
     b96:	1f 91       	pop	r17
     b98:	0f 91       	pop	r16
     b9a:	08 95       	ret

00000b9c <__vector_23>:
	

#endif

	// busy wait
	__asm__ __volatile__ (
     b9c:	1f 92       	push	r1
     b9e:	0f 92       	push	r0
     ba0:	0f b6       	in	r0, 0x3f	; 63
     ba2:	0f 92       	push	r0
     ba4:	11 24       	eor	r1, r1
     ba6:	2f 93       	push	r18
     ba8:	3f 93       	push	r19
     baa:	8f 93       	push	r24
     bac:	9f 93       	push	r25
     bae:	af 93       	push	r26
     bb0:	bf 93       	push	r27
     bb2:	80 91 ea 02 	lds	r24, 0x02EA	; 0x8002ea <timer0_millis>
     bb6:	90 91 eb 02 	lds	r25, 0x02EB	; 0x8002eb <timer0_millis+0x1>
     bba:	a0 91 ec 02 	lds	r26, 0x02EC	; 0x8002ec <timer0_millis+0x2>
     bbe:	b0 91 ed 02 	lds	r27, 0x02ED	; 0x8002ed <timer0_millis+0x3>
     bc2:	30 91 e9 02 	lds	r19, 0x02E9	; 0x8002e9 <timer0_fract>
     bc6:	23 e0       	ldi	r18, 0x03	; 3
     bc8:	23 0f       	add	r18, r19
     bca:	2d 37       	cpi	r18, 0x7D	; 125
     bcc:	20 f4       	brcc	.+8      	; 0xbd6 <__vector_23+0x3a>
     bce:	01 96       	adiw	r24, 0x01	; 1
     bd0:	a1 1d       	adc	r26, r1
     bd2:	b1 1d       	adc	r27, r1
     bd4:	05 c0       	rjmp	.+10     	; 0xbe0 <__vector_23+0x44>
     bd6:	26 e8       	ldi	r18, 0x86	; 134
     bd8:	23 0f       	add	r18, r19
     bda:	02 96       	adiw	r24, 0x02	; 2
     bdc:	a1 1d       	adc	r26, r1
     bde:	b1 1d       	adc	r27, r1
     be0:	20 93 e9 02 	sts	0x02E9, r18	; 0x8002e9 <timer0_fract>
     be4:	80 93 ea 02 	sts	0x02EA, r24	; 0x8002ea <timer0_millis>
     be8:	90 93 eb 02 	sts	0x02EB, r25	; 0x8002eb <timer0_millis+0x1>
     bec:	a0 93 ec 02 	sts	0x02EC, r26	; 0x8002ec <timer0_millis+0x2>
     bf0:	b0 93 ed 02 	sts	0x02ED, r27	; 0x8002ed <timer0_millis+0x3>
     bf4:	80 91 ee 02 	lds	r24, 0x02EE	; 0x8002ee <timer0_overflow_count>
     bf8:	90 91 ef 02 	lds	r25, 0x02EF	; 0x8002ef <timer0_overflow_count+0x1>
     bfc:	a0 91 f0 02 	lds	r26, 0x02F0	; 0x8002f0 <timer0_overflow_count+0x2>
     c00:	b0 91 f1 02 	lds	r27, 0x02F1	; 0x8002f1 <timer0_overflow_count+0x3>
     c04:	01 96       	adiw	r24, 0x01	; 1
     c06:	a1 1d       	adc	r26, r1
     c08:	b1 1d       	adc	r27, r1
     c0a:	80 93 ee 02 	sts	0x02EE, r24	; 0x8002ee <timer0_overflow_count>
     c0e:	90 93 ef 02 	sts	0x02EF, r25	; 0x8002ef <timer0_overflow_count+0x1>
     c12:	a0 93 f0 02 	sts	0x02F0, r26	; 0x8002f0 <timer0_overflow_count+0x2>
     c16:	b0 93 f1 02 	sts	0x02F1, r27	; 0x8002f1 <timer0_overflow_count+0x3>
     c1a:	bf 91       	pop	r27
     c1c:	af 91       	pop	r26
     c1e:	9f 91       	pop	r25
     c20:	8f 91       	pop	r24
     c22:	3f 91       	pop	r19
     c24:	2f 91       	pop	r18
     c26:	0f 90       	pop	r0
     c28:	0f be       	out	0x3f, r0	; 63
     c2a:	0f 90       	pop	r0
     c2c:	1f 90       	pop	r1
     c2e:	18 95       	reti

00000c30 <millis>:
     c30:	2f b7       	in	r18, 0x3f	; 63
     c32:	f8 94       	cli
     c34:	60 91 ea 02 	lds	r22, 0x02EA	; 0x8002ea <timer0_millis>
     c38:	70 91 eb 02 	lds	r23, 0x02EB	; 0x8002eb <timer0_millis+0x1>
     c3c:	80 91 ec 02 	lds	r24, 0x02EC	; 0x8002ec <timer0_millis+0x2>
     c40:	90 91 ed 02 	lds	r25, 0x02ED	; 0x8002ed <timer0_millis+0x3>
     c44:	2f bf       	out	0x3f, r18	; 63
     c46:	08 95       	ret

00000c48 <micros>:
     c48:	3f b7       	in	r19, 0x3f	; 63
     c4a:	f8 94       	cli
     c4c:	80 91 ee 02 	lds	r24, 0x02EE	; 0x8002ee <timer0_overflow_count>
     c50:	90 91 ef 02 	lds	r25, 0x02EF	; 0x8002ef <timer0_overflow_count+0x1>
     c54:	a0 91 f0 02 	lds	r26, 0x02F0	; 0x8002f0 <timer0_overflow_count+0x2>
     c58:	b0 91 f1 02 	lds	r27, 0x02F1	; 0x8002f1 <timer0_overflow_count+0x3>
     c5c:	26 b5       	in	r18, 0x26	; 38
     c5e:	a8 9b       	sbis	0x15, 0	; 21
     c60:	05 c0       	rjmp	.+10     	; 0xc6c <micros+0x24>
     c62:	2f 3f       	cpi	r18, 0xFF	; 255
     c64:	19 f0       	breq	.+6      	; 0xc6c <micros+0x24>
     c66:	01 96       	adiw	r24, 0x01	; 1
     c68:	a1 1d       	adc	r26, r1
     c6a:	b1 1d       	adc	r27, r1
     c6c:	3f bf       	out	0x3f, r19	; 63
     c6e:	ba 2f       	mov	r27, r26
     c70:	a9 2f       	mov	r26, r25
     c72:	98 2f       	mov	r25, r24
     c74:	88 27       	eor	r24, r24
     c76:	82 0f       	add	r24, r18
     c78:	91 1d       	adc	r25, r1
     c7a:	a1 1d       	adc	r26, r1
     c7c:	b1 1d       	adc	r27, r1
     c7e:	bc 01       	movw	r22, r24
     c80:	cd 01       	movw	r24, r26
     c82:	42 e0       	ldi	r20, 0x02	; 2
     c84:	66 0f       	add	r22, r22
     c86:	77 1f       	adc	r23, r23
     c88:	88 1f       	adc	r24, r24
     c8a:	99 1f       	adc	r25, r25
     c8c:	4a 95       	dec	r20
     c8e:	d1 f7       	brne	.-12     	; 0xc84 <micros+0x3c>
     c90:	08 95       	ret

00000c92 <delay>:
     c92:	8f 92       	push	r8
     c94:	9f 92       	push	r9
     c96:	af 92       	push	r10
     c98:	bf 92       	push	r11
     c9a:	cf 92       	push	r12
     c9c:	df 92       	push	r13
     c9e:	ef 92       	push	r14
     ca0:	ff 92       	push	r15
     ca2:	6b 01       	movw	r12, r22
     ca4:	7c 01       	movw	r14, r24
     ca6:	d0 df       	rcall	.-96     	; 0xc48 <micros>
     ca8:	4b 01       	movw	r8, r22
     caa:	5c 01       	movw	r10, r24
     cac:	c1 14       	cp	r12, r1
     cae:	d1 04       	cpc	r13, r1
     cb0:	e1 04       	cpc	r14, r1
     cb2:	f1 04       	cpc	r15, r1
     cb4:	f1 f0       	breq	.+60     	; 0xcf2 <delay+0x60>
     cb6:	c1 d2       	rcall	.+1410   	; 0x123a <yield>
     cb8:	c7 df       	rcall	.-114    	; 0xc48 <micros>
     cba:	dc 01       	movw	r26, r24
     cbc:	cb 01       	movw	r24, r22
     cbe:	88 19       	sub	r24, r8
     cc0:	99 09       	sbc	r25, r9
     cc2:	aa 09       	sbc	r26, r10
     cc4:	bb 09       	sbc	r27, r11
     cc6:	88 3e       	cpi	r24, 0xE8	; 232
     cc8:	93 40       	sbci	r25, 0x03	; 3
     cca:	a1 05       	cpc	r26, r1
     ccc:	b1 05       	cpc	r27, r1
     cce:	70 f3       	brcs	.-36     	; 0xcac <delay+0x1a>
     cd0:	21 e0       	ldi	r18, 0x01	; 1
     cd2:	c2 1a       	sub	r12, r18
     cd4:	d1 08       	sbc	r13, r1
     cd6:	e1 08       	sbc	r14, r1
     cd8:	f1 08       	sbc	r15, r1
     cda:	88 ee       	ldi	r24, 0xE8	; 232
     cdc:	88 0e       	add	r8, r24
     cde:	83 e0       	ldi	r24, 0x03	; 3
     ce0:	98 1e       	adc	r9, r24
     ce2:	a1 1c       	adc	r10, r1
     ce4:	b1 1c       	adc	r11, r1
     ce6:	c1 14       	cp	r12, r1
     ce8:	d1 04       	cpc	r13, r1
     cea:	e1 04       	cpc	r14, r1
     cec:	f1 04       	cpc	r15, r1
     cee:	21 f7       	brne	.-56     	; 0xcb8 <delay+0x26>
     cf0:	dd cf       	rjmp	.-70     	; 0xcac <delay+0x1a>
     cf2:	ff 90       	pop	r15
     cf4:	ef 90       	pop	r14
     cf6:	df 90       	pop	r13
     cf8:	cf 90       	pop	r12
     cfa:	bf 90       	pop	r11
     cfc:	af 90       	pop	r10
     cfe:	9f 90       	pop	r9
     d00:	8f 90       	pop	r8
     d02:	08 95       	ret

00000d04 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
     d04:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
     d06:	84 b5       	in	r24, 0x24	; 36
     d08:	82 60       	ori	r24, 0x02	; 2
     d0a:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
     d0c:	84 b5       	in	r24, 0x24	; 36
     d0e:	81 60       	ori	r24, 0x01	; 1
     d10:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
     d12:	85 b5       	in	r24, 0x25	; 37
     d14:	82 60       	ori	r24, 0x02	; 2
     d16:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
     d18:	85 b5       	in	r24, 0x25	; 37
     d1a:	81 60       	ori	r24, 0x01	; 1
     d1c:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
     d1e:	ee e6       	ldi	r30, 0x6E	; 110
     d20:	f0 e0       	ldi	r31, 0x00	; 0
     d22:	80 81       	ld	r24, Z
     d24:	81 60       	ori	r24, 0x01	; 1
     d26:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
     d28:	e1 e8       	ldi	r30, 0x81	; 129
     d2a:	f0 e0       	ldi	r31, 0x00	; 0
     d2c:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
     d2e:	80 81       	ld	r24, Z
     d30:	82 60       	ori	r24, 0x02	; 2
     d32:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
     d34:	80 81       	ld	r24, Z
     d36:	81 60       	ori	r24, 0x01	; 1
     d38:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
     d3a:	e0 e8       	ldi	r30, 0x80	; 128
     d3c:	f0 e0       	ldi	r31, 0x00	; 0
     d3e:	80 81       	ld	r24, Z
     d40:	81 60       	ori	r24, 0x01	; 1
     d42:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
     d44:	e1 eb       	ldi	r30, 0xB1	; 177
     d46:	f0 e0       	ldi	r31, 0x00	; 0
     d48:	80 81       	ld	r24, Z
     d4a:	84 60       	ori	r24, 0x04	; 4
     d4c:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
     d4e:	e0 eb       	ldi	r30, 0xB0	; 176
     d50:	f0 e0       	ldi	r31, 0x00	; 0
     d52:	80 81       	ld	r24, Z
     d54:	81 60       	ori	r24, 0x01	; 1
     d56:	80 83       	st	Z, r24
//#else
	// Timer 2 not finished (may not be present on this CPU)
#endif

#if defined(TCCR3B) && defined(CS31) && defined(WGM30)
	sbi(TCCR3B, CS31);		// set timer 3 prescale factor to 64
     d58:	e1 e9       	ldi	r30, 0x91	; 145
     d5a:	f0 e0       	ldi	r31, 0x00	; 0
     d5c:	80 81       	ld	r24, Z
     d5e:	82 60       	ori	r24, 0x02	; 2
     d60:	80 83       	st	Z, r24
	sbi(TCCR3B, CS30);
     d62:	80 81       	ld	r24, Z
     d64:	81 60       	ori	r24, 0x01	; 1
     d66:	80 83       	st	Z, r24
	sbi(TCCR3A, WGM30);		// put timer 3 in 8-bit phase correct pwm mode
     d68:	e0 e9       	ldi	r30, 0x90	; 144
     d6a:	f0 e0       	ldi	r31, 0x00	; 0
     d6c:	80 81       	ld	r24, Z
     d6e:	81 60       	ori	r24, 0x01	; 1
     d70:	80 83       	st	Z, r24
	sbi(TCCR4D, WGM40);		// put timer 4 in phase- and frequency-correct PWM mode	
	sbi(TCCR4A, PWM4A);		// enable PWM mode for comparator OCR4A
	sbi(TCCR4C, PWM4D);		// enable PWM mode for comparator OCR4D
#else /* beginning of timer4 block for ATMEGA1280 and ATMEGA2560 */
#if defined(TCCR4B) && defined(CS41) && defined(WGM40)
	sbi(TCCR4B, CS41);		// set timer 4 prescale factor to 64
     d72:	e1 ea       	ldi	r30, 0xA1	; 161
     d74:	f0 e0       	ldi	r31, 0x00	; 0
     d76:	80 81       	ld	r24, Z
     d78:	82 60       	ori	r24, 0x02	; 2
     d7a:	80 83       	st	Z, r24
	sbi(TCCR4B, CS40);
     d7c:	80 81       	ld	r24, Z
     d7e:	81 60       	ori	r24, 0x01	; 1
     d80:	80 83       	st	Z, r24
	sbi(TCCR4A, WGM40);		// put timer 4 in 8-bit phase correct pwm mode
     d82:	e0 ea       	ldi	r30, 0xA0	; 160
     d84:	f0 e0       	ldi	r31, 0x00	; 0
     d86:	80 81       	ld	r24, Z
     d88:	81 60       	ori	r24, 0x01	; 1
     d8a:	80 83       	st	Z, r24
#endif
#endif /* end timer4 block for ATMEGA1280/2560 and similar */	

#if defined(TCCR5B) && defined(CS51) && defined(WGM50)
	sbi(TCCR5B, CS51);		// set timer 5 prescale factor to 64
     d8c:	e1 e2       	ldi	r30, 0x21	; 33
     d8e:	f1 e0       	ldi	r31, 0x01	; 1
     d90:	80 81       	ld	r24, Z
     d92:	82 60       	ori	r24, 0x02	; 2
     d94:	80 83       	st	Z, r24
	sbi(TCCR5B, CS50);
     d96:	80 81       	ld	r24, Z
     d98:	81 60       	ori	r24, 0x01	; 1
     d9a:	80 83       	st	Z, r24
	sbi(TCCR5A, WGM50);		// put timer 5 in 8-bit phase correct pwm mode
     d9c:	e0 e2       	ldi	r30, 0x20	; 32
     d9e:	f1 e0       	ldi	r31, 0x01	; 1
     da0:	80 81       	ld	r24, Z
     da2:	81 60       	ori	r24, 0x01	; 1
     da4:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
     da6:	ea e7       	ldi	r30, 0x7A	; 122
     da8:	f0 e0       	ldi	r31, 0x00	; 0
     daa:	80 81       	ld	r24, Z
     dac:	84 60       	ori	r24, 0x04	; 4
     dae:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
     db0:	80 81       	ld	r24, Z
     db2:	82 60       	ori	r24, 0x02	; 2
     db4:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
     db6:	80 81       	ld	r24, Z
     db8:	81 60       	ori	r24, 0x01	; 1
     dba:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
     dbc:	80 81       	ld	r24, Z
     dbe:	80 68       	ori	r24, 0x80	; 128
     dc0:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
     dc2:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7000c1>
     dc6:	08 95       	ret

00000dc8 <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
     dc8:	90 e0       	ldi	r25, 0x00	; 0
     dca:	fc 01       	movw	r30, r24
     dcc:	31 97       	sbiw	r30, 0x01	; 1
     dce:	e2 31       	cpi	r30, 0x12	; 18
     dd0:	f1 05       	cpc	r31, r1
     dd2:	08 f0       	brcs	.+2      	; 0xdd6 <turnOffPWM+0xe>
     dd4:	4d c0       	rjmp	.+154    	; 0xe70 <turnOffPWM+0xa8>
     dd6:	88 27       	eor	r24, r24
     dd8:	ee 58       	subi	r30, 0x8E	; 142
     dda:	ff 4f       	sbci	r31, 0xFF	; 255
     ddc:	8f 4f       	sbci	r24, 0xFF	; 255
     dde:	50 c2       	rjmp	.+1184   	; 0x1280 <__tablejump2__>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
     de0:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
     de4:	8f 77       	andi	r24, 0x7F	; 127
     de6:	03 c0       	rjmp	.+6      	; 0xdee <turnOffPWM+0x26>
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
     de8:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
     dec:	8f 7d       	andi	r24, 0xDF	; 223
     dee:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
     df2:	08 95       	ret
		#endif
		#if defined(TCCR1A) && defined(COM1C1)
		case TIMER1C:   cbi(TCCR1A, COM1C1);    break;
     df4:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
     df8:	87 7f       	andi	r24, 0xF7	; 247
     dfa:	f9 cf       	rjmp	.-14     	; 0xdee <turnOffPWM+0x26>
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
     dfc:	84 b5       	in	r24, 0x24	; 36
     dfe:	8f 77       	andi	r24, 0x7F	; 127
     e00:	02 c0       	rjmp	.+4      	; 0xe06 <turnOffPWM+0x3e>
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
     e02:	84 b5       	in	r24, 0x24	; 36
     e04:	8f 7d       	andi	r24, 0xDF	; 223
     e06:	84 bd       	out	0x24, r24	; 36
     e08:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
     e0a:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7000b0>
     e0e:	8f 77       	andi	r24, 0x7F	; 127
     e10:	03 c0       	rjmp	.+6      	; 0xe18 <turnOffPWM+0x50>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
     e12:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7000b0>
     e16:	8f 7d       	andi	r24, 0xDF	; 223
     e18:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7000b0>
     e1c:	08 95       	ret
		#endif
		
		#if defined(TCCR3A) && defined(COM3A1)
		case  TIMER3A:  cbi(TCCR3A, COM3A1);    break;
     e1e:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
     e22:	8f 77       	andi	r24, 0x7F	; 127
     e24:	07 c0       	rjmp	.+14     	; 0xe34 <turnOffPWM+0x6c>
		#endif
		#if defined(TCCR3A) && defined(COM3B1)
		case  TIMER3B:  cbi(TCCR3A, COM3B1);    break;
     e26:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
     e2a:	8f 7d       	andi	r24, 0xDF	; 223
     e2c:	03 c0       	rjmp	.+6      	; 0xe34 <turnOffPWM+0x6c>
		#endif
		#if defined(TCCR3A) && defined(COM3C1)
		case  TIMER3C:  cbi(TCCR3A, COM3C1);    break;
     e2e:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
     e32:	87 7f       	andi	r24, 0xF7	; 247
     e34:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
     e38:	08 95       	ret
		#endif

		#if defined(TCCR4A) && defined(COM4A1)
		case  TIMER4A:  cbi(TCCR4A, COM4A1);    break;
     e3a:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
     e3e:	8f 77       	andi	r24, 0x7F	; 127
     e40:	07 c0       	rjmp	.+14     	; 0xe50 <turnOffPWM+0x88>
		#endif					
		#if defined(TCCR4A) && defined(COM4B1)
		case  TIMER4B:  cbi(TCCR4A, COM4B1);    break;
     e42:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
     e46:	8f 7d       	andi	r24, 0xDF	; 223
     e48:	03 c0       	rjmp	.+6      	; 0xe50 <turnOffPWM+0x88>
		#endif
		#if defined(TCCR4A) && defined(COM4C1)
		case  TIMER4C:  cbi(TCCR4A, COM4C1);    break;
     e4a:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
     e4e:	87 7f       	andi	r24, 0xF7	; 247
     e50:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
     e54:	08 95       	ret
		#if defined(TCCR4C) && defined(COM4D1)
		case TIMER4D:	cbi(TCCR4C, COM4D1);	break;
		#endif			
			
		#if defined(TCCR5A)
		case  TIMER5A:  cbi(TCCR5A, COM5A1);    break;
     e56:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
     e5a:	8f 77       	andi	r24, 0x7F	; 127
     e5c:	07 c0       	rjmp	.+14     	; 0xe6c <turnOffPWM+0xa4>
		case  TIMER5B:  cbi(TCCR5A, COM5B1);    break;
     e5e:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
     e62:	8f 7d       	andi	r24, 0xDF	; 223
     e64:	03 c0       	rjmp	.+6      	; 0xe6c <turnOffPWM+0xa4>
		case  TIMER5C:  cbi(TCCR5A, COM5C1);    break;
     e66:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
     e6a:	87 7f       	andi	r24, 0xF7	; 247
     e6c:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
     e70:	08 95       	ret

00000e72 <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
     e72:	cf 93       	push	r28
     e74:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
     e76:	90 e0       	ldi	r25, 0x00	; 0
     e78:	fc 01       	movw	r30, r24
     e7a:	e2 5b       	subi	r30, 0xB2	; 178
     e7c:	fe 4f       	sbci	r31, 0xFE	; 254
     e7e:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
     e80:	fc 01       	movw	r30, r24
     e82:	ec 56       	subi	r30, 0x6C	; 108
     e84:	fe 4f       	sbci	r31, 0xFE	; 254
     e86:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
     e88:	88 23       	and	r24, r24
     e8a:	61 f1       	breq	.+88     	; 0xee4 <pinMode+0x72>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
     e8c:	90 e0       	ldi	r25, 0x00	; 0
     e8e:	88 0f       	add	r24, r24
     e90:	99 1f       	adc	r25, r25
     e92:	fc 01       	movw	r30, r24
     e94:	e2 5f       	subi	r30, 0xF2	; 242
     e96:	fd 4f       	sbci	r31, 0xFD	; 253
     e98:	c5 91       	lpm	r28, Z+
     e9a:	d4 91       	lpm	r29, Z
	out = portOutputRegister(port);
     e9c:	fc 01       	movw	r30, r24
     e9e:	ec 50       	subi	r30, 0x0C	; 12
     ea0:	fe 4f       	sbci	r31, 0xFE	; 254
     ea2:	a5 91       	lpm	r26, Z+
     ea4:	b4 91       	lpm	r27, Z

	if (mode == INPUT) { 
     ea6:	61 11       	cpse	r22, r1
     ea8:	09 c0       	rjmp	.+18     	; 0xebc <pinMode+0x4a>
		uint8_t oldSREG = SREG;
     eaa:	9f b7       	in	r25, 0x3f	; 63
                cli();
     eac:	f8 94       	cli
		*reg &= ~bit;
     eae:	88 81       	ld	r24, Y
     eb0:	20 95       	com	r18
     eb2:	82 23       	and	r24, r18
     eb4:	88 83       	st	Y, r24
		*out &= ~bit;
     eb6:	ec 91       	ld	r30, X
     eb8:	2e 23       	and	r18, r30
     eba:	0b c0       	rjmp	.+22     	; 0xed2 <pinMode+0x60>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
     ebc:	62 30       	cpi	r22, 0x02	; 2
     ebe:	61 f4       	brne	.+24     	; 0xed8 <pinMode+0x66>
		uint8_t oldSREG = SREG;
     ec0:	9f b7       	in	r25, 0x3f	; 63
                cli();
     ec2:	f8 94       	cli
		*reg &= ~bit;
     ec4:	88 81       	ld	r24, Y
     ec6:	32 2f       	mov	r19, r18
     ec8:	30 95       	com	r19
     eca:	83 23       	and	r24, r19
     ecc:	88 83       	st	Y, r24
		*out |= bit;
     ece:	ec 91       	ld	r30, X
     ed0:	2e 2b       	or	r18, r30
     ed2:	2c 93       	st	X, r18
		SREG = oldSREG;
     ed4:	9f bf       	out	0x3f, r25	; 63
     ed6:	06 c0       	rjmp	.+12     	; 0xee4 <pinMode+0x72>
	} else {
		uint8_t oldSREG = SREG;
     ed8:	8f b7       	in	r24, 0x3f	; 63
                cli();
     eda:	f8 94       	cli
		*reg |= bit;
     edc:	e8 81       	ld	r30, Y
     ede:	2e 2b       	or	r18, r30
     ee0:	28 83       	st	Y, r18
		SREG = oldSREG;
     ee2:	8f bf       	out	0x3f, r24	; 63
	}
}
     ee4:	df 91       	pop	r29
     ee6:	cf 91       	pop	r28
     ee8:	08 95       	ret

00000eea <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
     eea:	1f 93       	push	r17
     eec:	cf 93       	push	r28
     eee:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
     ef0:	28 2f       	mov	r18, r24
     ef2:	30 e0       	ldi	r19, 0x00	; 0
     ef4:	f9 01       	movw	r30, r18
     ef6:	e8 5f       	subi	r30, 0xF8	; 248
     ef8:	fe 4f       	sbci	r31, 0xFE	; 254
     efa:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
     efc:	f9 01       	movw	r30, r18
     efe:	e2 5b       	subi	r30, 0xB2	; 178
     f00:	fe 4f       	sbci	r31, 0xFE	; 254
     f02:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
     f04:	f9 01       	movw	r30, r18
     f06:	ec 56       	subi	r30, 0x6C	; 108
     f08:	fe 4f       	sbci	r31, 0xFE	; 254
     f0a:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
     f0c:	cc 23       	and	r28, r28
     f0e:	b9 f0       	breq	.+46     	; 0xf3e <digitalWrite+0x54>
     f10:	16 2f       	mov	r17, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
     f12:	81 11       	cpse	r24, r1

	out = portOutputRegister(port);
     f14:	59 df       	rcall	.-334    	; 0xdc8 <turnOffPWM>
     f16:	ec 2f       	mov	r30, r28
     f18:	f0 e0       	ldi	r31, 0x00	; 0
     f1a:	ee 0f       	add	r30, r30
     f1c:	ff 1f       	adc	r31, r31
     f1e:	ec 50       	subi	r30, 0x0C	; 12
     f20:	fe 4f       	sbci	r31, 0xFE	; 254
     f22:	a5 91       	lpm	r26, Z+

	uint8_t oldSREG = SREG;
     f24:	b4 91       	lpm	r27, Z
	cli();
     f26:	9f b7       	in	r25, 0x3f	; 63

	if (val == LOW) {
     f28:	f8 94       	cli
     f2a:	11 11       	cpse	r17, r1
		*out &= ~bit;
     f2c:	04 c0       	rjmp	.+8      	; 0xf36 <digitalWrite+0x4c>
     f2e:	8c 91       	ld	r24, X
     f30:	d0 95       	com	r29
     f32:	d8 23       	and	r29, r24
	} else {
		*out |= bit;
     f34:	02 c0       	rjmp	.+4      	; 0xf3a <digitalWrite+0x50>
     f36:	ec 91       	ld	r30, X
     f38:	de 2b       	or	r29, r30
	}

	SREG = oldSREG;
     f3a:	dc 93       	st	X, r29
}
     f3c:	9f bf       	out	0x3f, r25	; 63
     f3e:	df 91       	pop	r29
     f40:	cf 91       	pop	r28
     f42:	1f 91       	pop	r17
     f44:	08 95       	ret

00000f46 <digitalRead>:

int digitalRead(uint8_t pin)
{
     f46:	cf 93       	push	r28
     f48:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
     f4a:	28 2f       	mov	r18, r24
     f4c:	30 e0       	ldi	r19, 0x00	; 0
     f4e:	f9 01       	movw	r30, r18
     f50:	e8 5f       	subi	r30, 0xF8	; 248
     f52:	fe 4f       	sbci	r31, 0xFE	; 254
     f54:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
     f56:	f9 01       	movw	r30, r18
     f58:	e2 5b       	subi	r30, 0xB2	; 178
     f5a:	fe 4f       	sbci	r31, 0xFE	; 254
     f5c:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
     f5e:	f9 01       	movw	r30, r18
     f60:	ec 56       	subi	r30, 0x6C	; 108
     f62:	fe 4f       	sbci	r31, 0xFE	; 254
     f64:	c4 91       	lpm	r28, Z

	if (port == NOT_A_PIN) return LOW;
     f66:	cc 23       	and	r28, r28
     f68:	89 f0       	breq	.+34     	; 0xf8c <digitalRead+0x46>

	// If the pin that support PWM output, we need to turn it off
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
     f6a:	81 11       	cpse	r24, r1

	if (*portInputRegister(port) & bit) return HIGH;
     f6c:	2d df       	rcall	.-422    	; 0xdc8 <turnOffPWM>
     f6e:	ec 2f       	mov	r30, r28
     f70:	f0 e0       	ldi	r31, 0x00	; 0
     f72:	ee 0f       	add	r30, r30
     f74:	ff 1f       	adc	r31, r31
     f76:	e6 52       	subi	r30, 0x26	; 38
     f78:	fe 4f       	sbci	r31, 0xFE	; 254
     f7a:	a5 91       	lpm	r26, Z+
     f7c:	b4 91       	lpm	r27, Z
{
	uint8_t timer = digitalPinToTimer(pin);
	uint8_t bit = digitalPinToBitMask(pin);
	uint8_t port = digitalPinToPort(pin);

	if (port == NOT_A_PIN) return LOW;
     f7e:	ec 91       	ld	r30, X
     f80:	ed 23       	and	r30, r29
     f82:	81 e0       	ldi	r24, 0x01	; 1
     f84:	90 e0       	ldi	r25, 0x00	; 0
     f86:	21 f4       	brne	.+8      	; 0xf90 <digitalRead+0x4a>
     f88:	80 e0       	ldi	r24, 0x00	; 0
     f8a:	02 c0       	rjmp	.+4      	; 0xf90 <digitalRead+0x4a>
     f8c:	80 e0       	ldi	r24, 0x00	; 0
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);

	if (*portInputRegister(port) & bit) return HIGH;
	return LOW;
}
     f8e:	90 e0       	ldi	r25, 0x00	; 0
     f90:	df 91       	pop	r29
     f92:	cf 91       	pop	r28
     f94:	08 95       	ret

00000f96 <_ZNK6String14StringIfHelperEv>:
	char *end = buffer + len - 1;
	while (isspace(*end) && end >= begin) end--;
	len = end + 1 - begin;
	if (begin > buffer) memcpy(buffer, begin, len);
	buffer[len] = 0;
}
     f96:	08 95       	ret

00000f98 <_ZN6StringD1Ev>:
     f98:	fc 01       	movw	r30, r24
     f9a:	80 81       	ld	r24, Z
     f9c:	91 81       	ldd	r25, Z+1	; 0x01
     f9e:	10 c2       	rjmp	.+1056   	; 0x13c0 <free>

00000fa0 <_ZN6String10invalidateEv>:
     fa0:	cf 93       	push	r28
     fa2:	df 93       	push	r29
     fa4:	ec 01       	movw	r28, r24
     fa6:	88 81       	ld	r24, Y
     fa8:	99 81       	ldd	r25, Y+1	; 0x01
     faa:	00 97       	sbiw	r24, 0x00	; 0
     fac:	09 f0       	breq	.+2      	; 0xfb0 <_ZN6String10invalidateEv+0x10>
     fae:	08 d2       	rcall	.+1040   	; 0x13c0 <free>
     fb0:	19 82       	std	Y+1, r1	; 0x01
     fb2:	18 82       	st	Y, r1
     fb4:	1d 82       	std	Y+5, r1	; 0x05
     fb6:	1c 82       	std	Y+4, r1	; 0x04
     fb8:	1b 82       	std	Y+3, r1	; 0x03
     fba:	1a 82       	std	Y+2, r1	; 0x02
     fbc:	df 91       	pop	r29
     fbe:	cf 91       	pop	r28
     fc0:	08 95       	ret

00000fc2 <_ZN6String12changeBufferEj>:
     fc2:	0f 93       	push	r16
     fc4:	1f 93       	push	r17
     fc6:	cf 93       	push	r28
     fc8:	df 93       	push	r29
     fca:	ec 01       	movw	r28, r24
     fcc:	8b 01       	movw	r16, r22
     fce:	6f 5f       	subi	r22, 0xFF	; 255
     fd0:	7f 4f       	sbci	r23, 0xFF	; 255
     fd2:	88 81       	ld	r24, Y
     fd4:	99 81       	ldd	r25, Y+1	; 0x01
     fd6:	7d d2       	rcall	.+1274   	; 0x14d2 <realloc>
     fd8:	00 97       	sbiw	r24, 0x00	; 0
     fda:	31 f0       	breq	.+12     	; 0xfe8 <_ZN6String12changeBufferEj+0x26>
     fdc:	99 83       	std	Y+1, r25	; 0x01
     fde:	88 83       	st	Y, r24
     fe0:	1b 83       	std	Y+3, r17	; 0x03
     fe2:	0a 83       	std	Y+2, r16	; 0x02
     fe4:	81 e0       	ldi	r24, 0x01	; 1
     fe6:	01 c0       	rjmp	.+2      	; 0xfea <_ZN6String12changeBufferEj+0x28>
     fe8:	80 e0       	ldi	r24, 0x00	; 0
     fea:	df 91       	pop	r29
     fec:	cf 91       	pop	r28
     fee:	1f 91       	pop	r17
     ff0:	0f 91       	pop	r16
     ff2:	08 95       	ret

00000ff4 <_ZN6String7reserveEj>:
     ff4:	cf 93       	push	r28
     ff6:	df 93       	push	r29
     ff8:	ec 01       	movw	r28, r24
     ffa:	88 81       	ld	r24, Y
     ffc:	99 81       	ldd	r25, Y+1	; 0x01
     ffe:	89 2b       	or	r24, r25
    1000:	29 f0       	breq	.+10     	; 0x100c <_ZN6String7reserveEj+0x18>
    1002:	8a 81       	ldd	r24, Y+2	; 0x02
    1004:	9b 81       	ldd	r25, Y+3	; 0x03
    1006:	86 17       	cp	r24, r22
    1008:	97 07       	cpc	r25, r23
    100a:	58 f4       	brcc	.+22     	; 0x1022 <_ZN6String7reserveEj+0x2e>
    100c:	ce 01       	movw	r24, r28
    100e:	d9 df       	rcall	.-78     	; 0xfc2 <_ZN6String12changeBufferEj>
    1010:	88 23       	and	r24, r24
    1012:	41 f0       	breq	.+16     	; 0x1024 <_ZN6String7reserveEj+0x30>
    1014:	8c 81       	ldd	r24, Y+4	; 0x04
    1016:	9d 81       	ldd	r25, Y+5	; 0x05
    1018:	89 2b       	or	r24, r25
    101a:	19 f4       	brne	.+6      	; 0x1022 <_ZN6String7reserveEj+0x2e>
    101c:	e8 81       	ld	r30, Y
    101e:	f9 81       	ldd	r31, Y+1	; 0x01
    1020:	10 82       	st	Z, r1
    1022:	81 e0       	ldi	r24, 0x01	; 1
    1024:	df 91       	pop	r29
    1026:	cf 91       	pop	r28
    1028:	08 95       	ret

0000102a <_ZN6String4copyEPKcj>:
    102a:	ef 92       	push	r14
    102c:	ff 92       	push	r15
    102e:	0f 93       	push	r16
    1030:	1f 93       	push	r17
    1032:	cf 93       	push	r28
    1034:	df 93       	push	r29
    1036:	ec 01       	movw	r28, r24
    1038:	7b 01       	movw	r14, r22
    103a:	8a 01       	movw	r16, r20
    103c:	ba 01       	movw	r22, r20
    103e:	da df       	rcall	.-76     	; 0xff4 <_ZN6String7reserveEj>
    1040:	81 11       	cpse	r24, r1
    1042:	03 c0       	rjmp	.+6      	; 0x104a <_ZN6String4copyEPKcj+0x20>
    1044:	ce 01       	movw	r24, r28
    1046:	ac df       	rcall	.-168    	; 0xfa0 <_ZN6String10invalidateEv>
    1048:	06 c0       	rjmp	.+12     	; 0x1056 <_ZN6String4copyEPKcj+0x2c>
    104a:	1d 83       	std	Y+5, r17	; 0x05
    104c:	0c 83       	std	Y+4, r16	; 0x04
    104e:	b7 01       	movw	r22, r14
    1050:	88 81       	ld	r24, Y
    1052:	99 81       	ldd	r25, Y+1	; 0x01
    1054:	4d d3       	rcall	.+1690   	; 0x16f0 <strcpy>
    1056:	ce 01       	movw	r24, r28
    1058:	df 91       	pop	r29
    105a:	cf 91       	pop	r28
    105c:	1f 91       	pop	r17
    105e:	0f 91       	pop	r16
    1060:	ff 90       	pop	r15
    1062:	ef 90       	pop	r14
    1064:	08 95       	ret

00001066 <_ZN6StringC1EPKc>:
    1066:	fc 01       	movw	r30, r24
    1068:	11 82       	std	Z+1, r1	; 0x01
    106a:	10 82       	st	Z, r1
    106c:	13 82       	std	Z+3, r1	; 0x03
    106e:	12 82       	std	Z+2, r1	; 0x02
    1070:	15 82       	std	Z+5, r1	; 0x05
    1072:	14 82       	std	Z+4, r1	; 0x04
    1074:	61 15       	cp	r22, r1
    1076:	71 05       	cpc	r23, r1
    1078:	49 f0       	breq	.+18     	; 0x108c <_ZN6StringC1EPKc+0x26>
    107a:	fb 01       	movw	r30, r22
    107c:	01 90       	ld	r0, Z+
    107e:	00 20       	and	r0, r0
    1080:	e9 f7       	brne	.-6      	; 0x107c <_ZN6StringC1EPKc+0x16>
    1082:	31 97       	sbiw	r30, 0x01	; 1
    1084:	af 01       	movw	r20, r30
    1086:	46 1b       	sub	r20, r22
    1088:	57 0b       	sbc	r21, r23
    108a:	cf cf       	rjmp	.-98     	; 0x102a <_ZN6String4copyEPKcj>
    108c:	08 95       	ret

0000108e <_ZN6String4moveERS_>:
    108e:	0f 93       	push	r16
    1090:	1f 93       	push	r17
    1092:	cf 93       	push	r28
    1094:	df 93       	push	r29
    1096:	8c 01       	movw	r16, r24
    1098:	eb 01       	movw	r28, r22
    109a:	fc 01       	movw	r30, r24
    109c:	80 81       	ld	r24, Z
    109e:	91 81       	ldd	r25, Z+1	; 0x01
    10a0:	00 97       	sbiw	r24, 0x00	; 0
    10a2:	c1 f0       	breq	.+48     	; 0x10d4 <_ZN6String4moveERS_+0x46>
    10a4:	68 81       	ld	r22, Y
    10a6:	79 81       	ldd	r23, Y+1	; 0x01
    10a8:	61 15       	cp	r22, r1
    10aa:	71 05       	cpc	r23, r1
    10ac:	91 f0       	breq	.+36     	; 0x10d2 <_ZN6String4moveERS_+0x44>
    10ae:	2b ec       	ldi	r18, 0xCB	; 203
    10b0:	37 e0       	ldi	r19, 0x07	; 7
    10b2:	23 2b       	or	r18, r19
    10b4:	71 f0       	breq	.+28     	; 0x10d2 <_ZN6String4moveERS_+0x44>
    10b6:	42 81       	ldd	r20, Z+2	; 0x02
    10b8:	53 81       	ldd	r21, Z+3	; 0x03
    10ba:	2c 81       	ldd	r18, Y+4	; 0x04
    10bc:	3d 81       	ldd	r19, Y+5	; 0x05
    10be:	42 17       	cp	r20, r18
    10c0:	53 07       	cpc	r21, r19
    10c2:	38 f0       	brcs	.+14     	; 0x10d2 <_ZN6String4moveERS_+0x44>
    10c4:	15 d3       	rcall	.+1578   	; 0x16f0 <strcpy>
    10c6:	8c 81       	ldd	r24, Y+4	; 0x04
    10c8:	9d 81       	ldd	r25, Y+5	; 0x05
    10ca:	f8 01       	movw	r30, r16
    10cc:	95 83       	std	Z+5, r25	; 0x05
    10ce:	84 83       	std	Z+4, r24	; 0x04
    10d0:	12 c0       	rjmp	.+36     	; 0x10f6 <_ZN6String4moveERS_+0x68>
    10d2:	76 d1       	rcall	.+748    	; 0x13c0 <free>
    10d4:	88 81       	ld	r24, Y
    10d6:	99 81       	ldd	r25, Y+1	; 0x01
    10d8:	f8 01       	movw	r30, r16
    10da:	91 83       	std	Z+1, r25	; 0x01
    10dc:	80 83       	st	Z, r24
    10de:	8a 81       	ldd	r24, Y+2	; 0x02
    10e0:	9b 81       	ldd	r25, Y+3	; 0x03
    10e2:	93 83       	std	Z+3, r25	; 0x03
    10e4:	82 83       	std	Z+2, r24	; 0x02
    10e6:	8c 81       	ldd	r24, Y+4	; 0x04
    10e8:	9d 81       	ldd	r25, Y+5	; 0x05
    10ea:	95 83       	std	Z+5, r25	; 0x05
    10ec:	84 83       	std	Z+4, r24	; 0x04
    10ee:	19 82       	std	Y+1, r1	; 0x01
    10f0:	18 82       	st	Y, r1
    10f2:	1b 82       	std	Y+3, r1	; 0x03
    10f4:	1a 82       	std	Y+2, r1	; 0x02
    10f6:	1d 82       	std	Y+5, r1	; 0x05
    10f8:	1c 82       	std	Y+4, r1	; 0x04
    10fa:	df 91       	pop	r29
    10fc:	cf 91       	pop	r28
    10fe:	1f 91       	pop	r17
    1100:	0f 91       	pop	r16
    1102:	08 95       	ret

00001104 <_ZN6StringaSEOS_>:
    1104:	cf 93       	push	r28
    1106:	df 93       	push	r29
    1108:	ec 01       	movw	r28, r24
    110a:	86 17       	cp	r24, r22
    110c:	97 07       	cpc	r25, r23
    110e:	09 f0       	breq	.+2      	; 0x1112 <_ZN6StringaSEOS_+0xe>
    1110:	be df       	rcall	.-132    	; 0x108e <_ZN6String4moveERS_>
    1112:	ce 01       	movw	r24, r28
    1114:	df 91       	pop	r29
    1116:	cf 91       	pop	r28
    1118:	08 95       	ret

0000111a <_ZN6String6concatEPKcj>:
    111a:	ef 92       	push	r14
    111c:	ff 92       	push	r15
    111e:	0f 93       	push	r16
    1120:	1f 93       	push	r17
    1122:	cf 93       	push	r28
    1124:	df 93       	push	r29
    1126:	61 15       	cp	r22, r1
    1128:	71 05       	cpc	r23, r1
    112a:	11 f4       	brne	.+4      	; 0x1130 <_ZN6String6concatEPKcj+0x16>
    112c:	80 e0       	ldi	r24, 0x00	; 0
    112e:	1a c0       	rjmp	.+52     	; 0x1164 <_ZN6String6concatEPKcj+0x4a>
    1130:	41 15       	cp	r20, r1
    1132:	51 05       	cpc	r21, r1
    1134:	b1 f0       	breq	.+44     	; 0x1162 <_ZN6String6concatEPKcj+0x48>
    1136:	7b 01       	movw	r14, r22
    1138:	ec 01       	movw	r28, r24
    113a:	8c 81       	ldd	r24, Y+4	; 0x04
    113c:	9d 81       	ldd	r25, Y+5	; 0x05
    113e:	8a 01       	movw	r16, r20
    1140:	08 0f       	add	r16, r24
    1142:	19 1f       	adc	r17, r25
    1144:	b8 01       	movw	r22, r16
    1146:	ce 01       	movw	r24, r28
    1148:	55 df       	rcall	.-342    	; 0xff4 <_ZN6String7reserveEj>
    114a:	88 23       	and	r24, r24
    114c:	79 f3       	breq	.-34     	; 0x112c <_ZN6String6concatEPKcj+0x12>
    114e:	28 81       	ld	r18, Y
    1150:	39 81       	ldd	r19, Y+1	; 0x01
    1152:	8c 81       	ldd	r24, Y+4	; 0x04
    1154:	9d 81       	ldd	r25, Y+5	; 0x05
    1156:	b7 01       	movw	r22, r14
    1158:	82 0f       	add	r24, r18
    115a:	93 1f       	adc	r25, r19
    115c:	c9 d2       	rcall	.+1426   	; 0x16f0 <strcpy>
    115e:	1d 83       	std	Y+5, r17	; 0x05
    1160:	0c 83       	std	Y+4, r16	; 0x04
    1162:	81 e0       	ldi	r24, 0x01	; 1
    1164:	df 91       	pop	r29
    1166:	cf 91       	pop	r28
    1168:	1f 91       	pop	r17
    116a:	0f 91       	pop	r16
    116c:	ff 90       	pop	r15
    116e:	ef 90       	pop	r14
    1170:	08 95       	ret

00001172 <_ZN6String6concatEc>:
    1172:	cf 93       	push	r28
    1174:	df 93       	push	r29
    1176:	1f 92       	push	r1
    1178:	1f 92       	push	r1
    117a:	cd b7       	in	r28, 0x3d	; 61
    117c:	de b7       	in	r29, 0x3e	; 62
    117e:	69 83       	std	Y+1, r22	; 0x01
    1180:	1a 82       	std	Y+2, r1	; 0x02
    1182:	41 e0       	ldi	r20, 0x01	; 1
    1184:	50 e0       	ldi	r21, 0x00	; 0
    1186:	be 01       	movw	r22, r28
    1188:	6f 5f       	subi	r22, 0xFF	; 255
    118a:	7f 4f       	sbci	r23, 0xFF	; 255
    118c:	c6 df       	rcall	.-116    	; 0x111a <_ZN6String6concatEPKcj>
    118e:	0f 90       	pop	r0
    1190:	0f 90       	pop	r0
    1192:	df 91       	pop	r29
    1194:	cf 91       	pop	r28
    1196:	08 95       	ret

00001198 <_ZN6StringixEj>:
    1198:	fc 01       	movw	r30, r24
    119a:	24 81       	ldd	r18, Z+4	; 0x04
    119c:	35 81       	ldd	r19, Z+5	; 0x05
    119e:	62 17       	cp	r22, r18
    11a0:	73 07       	cpc	r23, r19
    11a2:	20 f4       	brcc	.+8      	; 0x11ac <_ZN6StringixEj+0x14>
    11a4:	80 81       	ld	r24, Z
    11a6:	91 81       	ldd	r25, Z+1	; 0x01
    11a8:	00 97       	sbiw	r24, 0x00	; 0
    11aa:	29 f4       	brne	.+10     	; 0x11b6 <_ZN6StringixEj+0x1e>
    11ac:	10 92 f2 02 	sts	0x02F2, r1	; 0x8002f2 <_ZZN6StringixEjE19dummy_writable_char>
    11b0:	82 ef       	ldi	r24, 0xF2	; 242
    11b2:	92 e0       	ldi	r25, 0x02	; 2
    11b4:	08 95       	ret
    11b6:	86 0f       	add	r24, r22
    11b8:	97 1f       	adc	r25, r23
    11ba:	08 95       	ret

000011bc <_ZN6String6removeEjj>:
    11bc:	cf 93       	push	r28
    11be:	df 93       	push	r29
    11c0:	dc 01       	movw	r26, r24
    11c2:	14 96       	adiw	r26, 0x04	; 4
    11c4:	ed 91       	ld	r30, X+
    11c6:	fc 91       	ld	r31, X
    11c8:	15 97       	sbiw	r26, 0x05	; 5
    11ca:	6e 17       	cp	r22, r30
    11cc:	7f 07       	cpc	r23, r31
    11ce:	28 f5       	brcc	.+74     	; 0x121a <_ZN6String6removeEjj+0x5e>
    11d0:	41 15       	cp	r20, r1
    11d2:	51 05       	cpc	r21, r1
    11d4:	11 f1       	breq	.+68     	; 0x121a <_ZN6String6removeEjj+0x5e>
    11d6:	df 01       	movw	r26, r30
    11d8:	a6 1b       	sub	r26, r22
    11da:	b7 0b       	sbc	r27, r23
    11dc:	9a 01       	movw	r18, r20
    11de:	a4 17       	cp	r26, r20
    11e0:	b5 07       	cpc	r27, r21
    11e2:	08 f4       	brcc	.+2      	; 0x11e6 <_ZN6String6removeEjj+0x2a>
    11e4:	9d 01       	movw	r18, r26
    11e6:	db 01       	movw	r26, r22
    11e8:	ec 01       	movw	r28, r24
    11ea:	88 81       	ld	r24, Y
    11ec:	99 81       	ldd	r25, Y+1	; 0x01
    11ee:	e2 1b       	sub	r30, r18
    11f0:	f3 0b       	sbc	r31, r19
    11f2:	fd 83       	std	Y+5, r31	; 0x05
    11f4:	ec 83       	std	Y+4, r30	; 0x04
    11f6:	af 01       	movw	r20, r30
    11f8:	46 1b       	sub	r20, r22
    11fa:	57 0b       	sbc	r21, r23
    11fc:	26 0f       	add	r18, r22
    11fe:	37 1f       	adc	r19, r23
    1200:	bc 01       	movw	r22, r24
    1202:	62 0f       	add	r22, r18
    1204:	73 1f       	adc	r23, r19
    1206:	8a 0f       	add	r24, r26
    1208:	9b 1f       	adc	r25, r27
    120a:	79 d2       	rcall	.+1266   	; 0x16fe <strncpy>
    120c:	e8 81       	ld	r30, Y
    120e:	f9 81       	ldd	r31, Y+1	; 0x01
    1210:	8c 81       	ldd	r24, Y+4	; 0x04
    1212:	9d 81       	ldd	r25, Y+5	; 0x05
    1214:	e8 0f       	add	r30, r24
    1216:	f9 1f       	adc	r31, r25
    1218:	10 82       	st	Z, r1
    121a:	df 91       	pop	r29
    121c:	cf 91       	pop	r28
    121e:	08 95       	ret

00001220 <_ZN6String6removeEj>:
    1220:	4f ef       	ldi	r20, 0xFF	; 255
    1222:	5f ef       	ldi	r21, 0xFF	; 255
    1224:	cb cf       	rjmp	.-106    	; 0x11bc <_ZN6String6removeEjj>

00001226 <_ZNK6String5toIntEv>:
/*  Parsing / Conversion                     */
/*********************************************/

long String::toInt(void) const
{
	if (buffer) return atol(buffer);
    1226:	fc 01       	movw	r30, r24
    1228:	80 81       	ld	r24, Z
    122a:	91 81       	ldd	r25, Z+1	; 0x01
    122c:	00 97       	sbiw	r24, 0x00	; 0
    122e:	09 f0       	breq	.+2      	; 0x1232 <_ZNK6String5toIntEv+0xc>
	return 0;
}
    1230:	30 c2       	rjmp	.+1120   	; 0x1692 <atol>
    1232:	60 e0       	ldi	r22, 0x00	; 0
    1234:	70 e0       	ldi	r23, 0x00	; 0
    1236:	cb 01       	movw	r24, r22
    1238:	08 95       	ret

0000123a <yield>:
 * libraries or sketches that supports cooperative threads.
 *
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
    123a:	08 95       	ret

0000123c <__udivmodsi4>:
    123c:	a1 e2       	ldi	r26, 0x21	; 33
    123e:	1a 2e       	mov	r1, r26
    1240:	aa 1b       	sub	r26, r26
    1242:	bb 1b       	sub	r27, r27
    1244:	fd 01       	movw	r30, r26
    1246:	0d c0       	rjmp	.+26     	; 0x1262 <__udivmodsi4_ep>

00001248 <__udivmodsi4_loop>:
    1248:	aa 1f       	adc	r26, r26
    124a:	bb 1f       	adc	r27, r27
    124c:	ee 1f       	adc	r30, r30
    124e:	ff 1f       	adc	r31, r31
    1250:	a2 17       	cp	r26, r18
    1252:	b3 07       	cpc	r27, r19
    1254:	e4 07       	cpc	r30, r20
    1256:	f5 07       	cpc	r31, r21
    1258:	20 f0       	brcs	.+8      	; 0x1262 <__udivmodsi4_ep>
    125a:	a2 1b       	sub	r26, r18
    125c:	b3 0b       	sbc	r27, r19
    125e:	e4 0b       	sbc	r30, r20
    1260:	f5 0b       	sbc	r31, r21

00001262 <__udivmodsi4_ep>:
    1262:	66 1f       	adc	r22, r22
    1264:	77 1f       	adc	r23, r23
    1266:	88 1f       	adc	r24, r24
    1268:	99 1f       	adc	r25, r25
    126a:	1a 94       	dec	r1
    126c:	69 f7       	brne	.-38     	; 0x1248 <__udivmodsi4_loop>
    126e:	60 95       	com	r22
    1270:	70 95       	com	r23
    1272:	80 95       	com	r24
    1274:	90 95       	com	r25
    1276:	9b 01       	movw	r18, r22
    1278:	ac 01       	movw	r20, r24
    127a:	bd 01       	movw	r22, r26
    127c:	cf 01       	movw	r24, r30
    127e:	08 95       	ret

00001280 <__tablejump2__>:
    1280:	ee 0f       	add	r30, r30
    1282:	ff 1f       	adc	r31, r31
    1284:	88 1f       	adc	r24, r24
    1286:	8b bf       	out	0x3b, r24	; 59
    1288:	07 90       	elpm	r0, Z+
    128a:	f6 91       	elpm	r31, Z
    128c:	e0 2d       	mov	r30, r0
    128e:	19 94       	eijmp

00001290 <malloc>:
    1290:	0f 93       	push	r16
    1292:	1f 93       	push	r17
    1294:	cf 93       	push	r28
    1296:	df 93       	push	r29
    1298:	82 30       	cpi	r24, 0x02	; 2
    129a:	91 05       	cpc	r25, r1
    129c:	10 f4       	brcc	.+4      	; 0x12a2 <malloc+0x12>
    129e:	82 e0       	ldi	r24, 0x02	; 2
    12a0:	90 e0       	ldi	r25, 0x00	; 0
    12a2:	e0 91 f5 02 	lds	r30, 0x02F5	; 0x8002f5 <__flp>
    12a6:	f0 91 f6 02 	lds	r31, 0x02F6	; 0x8002f6 <__flp+0x1>
    12aa:	20 e0       	ldi	r18, 0x00	; 0
    12ac:	30 e0       	ldi	r19, 0x00	; 0
    12ae:	a0 e0       	ldi	r26, 0x00	; 0
    12b0:	b0 e0       	ldi	r27, 0x00	; 0
    12b2:	30 97       	sbiw	r30, 0x00	; 0
    12b4:	19 f1       	breq	.+70     	; 0x12fc <malloc+0x6c>
    12b6:	40 81       	ld	r20, Z
    12b8:	51 81       	ldd	r21, Z+1	; 0x01
    12ba:	02 81       	ldd	r16, Z+2	; 0x02
    12bc:	13 81       	ldd	r17, Z+3	; 0x03
    12be:	48 17       	cp	r20, r24
    12c0:	59 07       	cpc	r21, r25
    12c2:	c8 f0       	brcs	.+50     	; 0x12f6 <malloc+0x66>
    12c4:	84 17       	cp	r24, r20
    12c6:	95 07       	cpc	r25, r21
    12c8:	69 f4       	brne	.+26     	; 0x12e4 <malloc+0x54>
    12ca:	10 97       	sbiw	r26, 0x00	; 0
    12cc:	31 f0       	breq	.+12     	; 0x12da <malloc+0x4a>
    12ce:	12 96       	adiw	r26, 0x02	; 2
    12d0:	0c 93       	st	X, r16
    12d2:	12 97       	sbiw	r26, 0x02	; 2
    12d4:	13 96       	adiw	r26, 0x03	; 3
    12d6:	1c 93       	st	X, r17
    12d8:	27 c0       	rjmp	.+78     	; 0x1328 <malloc+0x98>
    12da:	00 93 f5 02 	sts	0x02F5, r16	; 0x8002f5 <__flp>
    12de:	10 93 f6 02 	sts	0x02F6, r17	; 0x8002f6 <__flp+0x1>
    12e2:	22 c0       	rjmp	.+68     	; 0x1328 <malloc+0x98>
    12e4:	21 15       	cp	r18, r1
    12e6:	31 05       	cpc	r19, r1
    12e8:	19 f0       	breq	.+6      	; 0x12f0 <malloc+0x60>
    12ea:	42 17       	cp	r20, r18
    12ec:	53 07       	cpc	r21, r19
    12ee:	18 f4       	brcc	.+6      	; 0x12f6 <malloc+0x66>
    12f0:	9a 01       	movw	r18, r20
    12f2:	bd 01       	movw	r22, r26
    12f4:	ef 01       	movw	r28, r30
    12f6:	df 01       	movw	r26, r30
    12f8:	f8 01       	movw	r30, r16
    12fa:	db cf       	rjmp	.-74     	; 0x12b2 <malloc+0x22>
    12fc:	21 15       	cp	r18, r1
    12fe:	31 05       	cpc	r19, r1
    1300:	f9 f0       	breq	.+62     	; 0x1340 <malloc+0xb0>
    1302:	28 1b       	sub	r18, r24
    1304:	39 0b       	sbc	r19, r25
    1306:	24 30       	cpi	r18, 0x04	; 4
    1308:	31 05       	cpc	r19, r1
    130a:	80 f4       	brcc	.+32     	; 0x132c <malloc+0x9c>
    130c:	8a 81       	ldd	r24, Y+2	; 0x02
    130e:	9b 81       	ldd	r25, Y+3	; 0x03
    1310:	61 15       	cp	r22, r1
    1312:	71 05       	cpc	r23, r1
    1314:	21 f0       	breq	.+8      	; 0x131e <malloc+0x8e>
    1316:	fb 01       	movw	r30, r22
    1318:	93 83       	std	Z+3, r25	; 0x03
    131a:	82 83       	std	Z+2, r24	; 0x02
    131c:	04 c0       	rjmp	.+8      	; 0x1326 <malloc+0x96>
    131e:	90 93 f6 02 	sts	0x02F6, r25	; 0x8002f6 <__flp+0x1>
    1322:	80 93 f5 02 	sts	0x02F5, r24	; 0x8002f5 <__flp>
    1326:	fe 01       	movw	r30, r28
    1328:	32 96       	adiw	r30, 0x02	; 2
    132a:	44 c0       	rjmp	.+136    	; 0x13b4 <malloc+0x124>
    132c:	fe 01       	movw	r30, r28
    132e:	e2 0f       	add	r30, r18
    1330:	f3 1f       	adc	r31, r19
    1332:	81 93       	st	Z+, r24
    1334:	91 93       	st	Z+, r25
    1336:	22 50       	subi	r18, 0x02	; 2
    1338:	31 09       	sbc	r19, r1
    133a:	39 83       	std	Y+1, r19	; 0x01
    133c:	28 83       	st	Y, r18
    133e:	3a c0       	rjmp	.+116    	; 0x13b4 <malloc+0x124>
    1340:	20 91 f3 02 	lds	r18, 0x02F3	; 0x8002f3 <__brkval>
    1344:	30 91 f4 02 	lds	r19, 0x02F4	; 0x8002f4 <__brkval+0x1>
    1348:	23 2b       	or	r18, r19
    134a:	41 f4       	brne	.+16     	; 0x135c <malloc+0xcc>
    134c:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <__malloc_heap_start>
    1350:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <__malloc_heap_start+0x1>
    1354:	30 93 f4 02 	sts	0x02F4, r19	; 0x8002f4 <__brkval+0x1>
    1358:	20 93 f3 02 	sts	0x02F3, r18	; 0x8002f3 <__brkval>
    135c:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__data_start>
    1360:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__data_start+0x1>
    1364:	21 15       	cp	r18, r1
    1366:	31 05       	cpc	r19, r1
    1368:	41 f4       	brne	.+16     	; 0x137a <malloc+0xea>
    136a:	2d b7       	in	r18, 0x3d	; 61
    136c:	3e b7       	in	r19, 0x3e	; 62
    136e:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
    1372:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
    1376:	24 1b       	sub	r18, r20
    1378:	35 0b       	sbc	r19, r21
    137a:	e0 91 f3 02 	lds	r30, 0x02F3	; 0x8002f3 <__brkval>
    137e:	f0 91 f4 02 	lds	r31, 0x02F4	; 0x8002f4 <__brkval+0x1>
    1382:	e2 17       	cp	r30, r18
    1384:	f3 07       	cpc	r31, r19
    1386:	a0 f4       	brcc	.+40     	; 0x13b0 <malloc+0x120>
    1388:	2e 1b       	sub	r18, r30
    138a:	3f 0b       	sbc	r19, r31
    138c:	28 17       	cp	r18, r24
    138e:	39 07       	cpc	r19, r25
    1390:	78 f0       	brcs	.+30     	; 0x13b0 <malloc+0x120>
    1392:	ac 01       	movw	r20, r24
    1394:	4e 5f       	subi	r20, 0xFE	; 254
    1396:	5f 4f       	sbci	r21, 0xFF	; 255
    1398:	24 17       	cp	r18, r20
    139a:	35 07       	cpc	r19, r21
    139c:	48 f0       	brcs	.+18     	; 0x13b0 <malloc+0x120>
    139e:	4e 0f       	add	r20, r30
    13a0:	5f 1f       	adc	r21, r31
    13a2:	50 93 f4 02 	sts	0x02F4, r21	; 0x8002f4 <__brkval+0x1>
    13a6:	40 93 f3 02 	sts	0x02F3, r20	; 0x8002f3 <__brkval>
    13aa:	81 93       	st	Z+, r24
    13ac:	91 93       	st	Z+, r25
    13ae:	02 c0       	rjmp	.+4      	; 0x13b4 <malloc+0x124>
    13b0:	e0 e0       	ldi	r30, 0x00	; 0
    13b2:	f0 e0       	ldi	r31, 0x00	; 0
    13b4:	cf 01       	movw	r24, r30
    13b6:	df 91       	pop	r29
    13b8:	cf 91       	pop	r28
    13ba:	1f 91       	pop	r17
    13bc:	0f 91       	pop	r16
    13be:	08 95       	ret

000013c0 <free>:
    13c0:	cf 93       	push	r28
    13c2:	df 93       	push	r29
    13c4:	00 97       	sbiw	r24, 0x00	; 0
    13c6:	09 f4       	brne	.+2      	; 0x13ca <free+0xa>
    13c8:	81 c0       	rjmp	.+258    	; 0x14cc <free+0x10c>
    13ca:	fc 01       	movw	r30, r24
    13cc:	32 97       	sbiw	r30, 0x02	; 2
    13ce:	13 82       	std	Z+3, r1	; 0x03
    13d0:	12 82       	std	Z+2, r1	; 0x02
    13d2:	a0 91 f5 02 	lds	r26, 0x02F5	; 0x8002f5 <__flp>
    13d6:	b0 91 f6 02 	lds	r27, 0x02F6	; 0x8002f6 <__flp+0x1>
    13da:	10 97       	sbiw	r26, 0x00	; 0
    13dc:	81 f4       	brne	.+32     	; 0x13fe <free+0x3e>
    13de:	20 81       	ld	r18, Z
    13e0:	31 81       	ldd	r19, Z+1	; 0x01
    13e2:	82 0f       	add	r24, r18
    13e4:	93 1f       	adc	r25, r19
    13e6:	20 91 f3 02 	lds	r18, 0x02F3	; 0x8002f3 <__brkval>
    13ea:	30 91 f4 02 	lds	r19, 0x02F4	; 0x8002f4 <__brkval+0x1>
    13ee:	28 17       	cp	r18, r24
    13f0:	39 07       	cpc	r19, r25
    13f2:	51 f5       	brne	.+84     	; 0x1448 <free+0x88>
    13f4:	f0 93 f4 02 	sts	0x02F4, r31	; 0x8002f4 <__brkval+0x1>
    13f8:	e0 93 f3 02 	sts	0x02F3, r30	; 0x8002f3 <__brkval>
    13fc:	67 c0       	rjmp	.+206    	; 0x14cc <free+0x10c>
    13fe:	ed 01       	movw	r28, r26
    1400:	20 e0       	ldi	r18, 0x00	; 0
    1402:	30 e0       	ldi	r19, 0x00	; 0
    1404:	ce 17       	cp	r28, r30
    1406:	df 07       	cpc	r29, r31
    1408:	40 f4       	brcc	.+16     	; 0x141a <free+0x5a>
    140a:	4a 81       	ldd	r20, Y+2	; 0x02
    140c:	5b 81       	ldd	r21, Y+3	; 0x03
    140e:	9e 01       	movw	r18, r28
    1410:	41 15       	cp	r20, r1
    1412:	51 05       	cpc	r21, r1
    1414:	f1 f0       	breq	.+60     	; 0x1452 <free+0x92>
    1416:	ea 01       	movw	r28, r20
    1418:	f5 cf       	rjmp	.-22     	; 0x1404 <free+0x44>
    141a:	d3 83       	std	Z+3, r29	; 0x03
    141c:	c2 83       	std	Z+2, r28	; 0x02
    141e:	40 81       	ld	r20, Z
    1420:	51 81       	ldd	r21, Z+1	; 0x01
    1422:	84 0f       	add	r24, r20
    1424:	95 1f       	adc	r25, r21
    1426:	c8 17       	cp	r28, r24
    1428:	d9 07       	cpc	r29, r25
    142a:	59 f4       	brne	.+22     	; 0x1442 <free+0x82>
    142c:	88 81       	ld	r24, Y
    142e:	99 81       	ldd	r25, Y+1	; 0x01
    1430:	84 0f       	add	r24, r20
    1432:	95 1f       	adc	r25, r21
    1434:	02 96       	adiw	r24, 0x02	; 2
    1436:	91 83       	std	Z+1, r25	; 0x01
    1438:	80 83       	st	Z, r24
    143a:	8a 81       	ldd	r24, Y+2	; 0x02
    143c:	9b 81       	ldd	r25, Y+3	; 0x03
    143e:	93 83       	std	Z+3, r25	; 0x03
    1440:	82 83       	std	Z+2, r24	; 0x02
    1442:	21 15       	cp	r18, r1
    1444:	31 05       	cpc	r19, r1
    1446:	29 f4       	brne	.+10     	; 0x1452 <free+0x92>
    1448:	f0 93 f6 02 	sts	0x02F6, r31	; 0x8002f6 <__flp+0x1>
    144c:	e0 93 f5 02 	sts	0x02F5, r30	; 0x8002f5 <__flp>
    1450:	3d c0       	rjmp	.+122    	; 0x14cc <free+0x10c>
    1452:	e9 01       	movw	r28, r18
    1454:	fb 83       	std	Y+3, r31	; 0x03
    1456:	ea 83       	std	Y+2, r30	; 0x02
    1458:	49 91       	ld	r20, Y+
    145a:	59 91       	ld	r21, Y+
    145c:	c4 0f       	add	r28, r20
    145e:	d5 1f       	adc	r29, r21
    1460:	ec 17       	cp	r30, r28
    1462:	fd 07       	cpc	r31, r29
    1464:	61 f4       	brne	.+24     	; 0x147e <free+0xbe>
    1466:	80 81       	ld	r24, Z
    1468:	91 81       	ldd	r25, Z+1	; 0x01
    146a:	84 0f       	add	r24, r20
    146c:	95 1f       	adc	r25, r21
    146e:	02 96       	adiw	r24, 0x02	; 2
    1470:	e9 01       	movw	r28, r18
    1472:	99 83       	std	Y+1, r25	; 0x01
    1474:	88 83       	st	Y, r24
    1476:	82 81       	ldd	r24, Z+2	; 0x02
    1478:	93 81       	ldd	r25, Z+3	; 0x03
    147a:	9b 83       	std	Y+3, r25	; 0x03
    147c:	8a 83       	std	Y+2, r24	; 0x02
    147e:	e0 e0       	ldi	r30, 0x00	; 0
    1480:	f0 e0       	ldi	r31, 0x00	; 0
    1482:	12 96       	adiw	r26, 0x02	; 2
    1484:	8d 91       	ld	r24, X+
    1486:	9c 91       	ld	r25, X
    1488:	13 97       	sbiw	r26, 0x03	; 3
    148a:	00 97       	sbiw	r24, 0x00	; 0
    148c:	19 f0       	breq	.+6      	; 0x1494 <free+0xd4>
    148e:	fd 01       	movw	r30, r26
    1490:	dc 01       	movw	r26, r24
    1492:	f7 cf       	rjmp	.-18     	; 0x1482 <free+0xc2>
    1494:	8d 91       	ld	r24, X+
    1496:	9c 91       	ld	r25, X
    1498:	11 97       	sbiw	r26, 0x01	; 1
    149a:	9d 01       	movw	r18, r26
    149c:	2e 5f       	subi	r18, 0xFE	; 254
    149e:	3f 4f       	sbci	r19, 0xFF	; 255
    14a0:	82 0f       	add	r24, r18
    14a2:	93 1f       	adc	r25, r19
    14a4:	20 91 f3 02 	lds	r18, 0x02F3	; 0x8002f3 <__brkval>
    14a8:	30 91 f4 02 	lds	r19, 0x02F4	; 0x8002f4 <__brkval+0x1>
    14ac:	28 17       	cp	r18, r24
    14ae:	39 07       	cpc	r19, r25
    14b0:	69 f4       	brne	.+26     	; 0x14cc <free+0x10c>
    14b2:	30 97       	sbiw	r30, 0x00	; 0
    14b4:	29 f4       	brne	.+10     	; 0x14c0 <free+0x100>
    14b6:	10 92 f6 02 	sts	0x02F6, r1	; 0x8002f6 <__flp+0x1>
    14ba:	10 92 f5 02 	sts	0x02F5, r1	; 0x8002f5 <__flp>
    14be:	02 c0       	rjmp	.+4      	; 0x14c4 <free+0x104>
    14c0:	13 82       	std	Z+3, r1	; 0x03
    14c2:	12 82       	std	Z+2, r1	; 0x02
    14c4:	b0 93 f4 02 	sts	0x02F4, r27	; 0x8002f4 <__brkval+0x1>
    14c8:	a0 93 f3 02 	sts	0x02F3, r26	; 0x8002f3 <__brkval>
    14cc:	df 91       	pop	r29
    14ce:	cf 91       	pop	r28
    14d0:	08 95       	ret

000014d2 <realloc>:
    14d2:	6f 92       	push	r6
    14d4:	7f 92       	push	r7
    14d6:	8f 92       	push	r8
    14d8:	9f 92       	push	r9
    14da:	af 92       	push	r10
    14dc:	bf 92       	push	r11
    14de:	cf 92       	push	r12
    14e0:	df 92       	push	r13
    14e2:	ef 92       	push	r14
    14e4:	ff 92       	push	r15
    14e6:	0f 93       	push	r16
    14e8:	1f 93       	push	r17
    14ea:	cf 93       	push	r28
    14ec:	df 93       	push	r29
    14ee:	00 97       	sbiw	r24, 0x00	; 0
    14f0:	81 f4       	brne	.+32     	; 0x1512 <realloc+0x40>
    14f2:	cb 01       	movw	r24, r22
    14f4:	df 91       	pop	r29
    14f6:	cf 91       	pop	r28
    14f8:	1f 91       	pop	r17
    14fa:	0f 91       	pop	r16
    14fc:	ff 90       	pop	r15
    14fe:	ef 90       	pop	r14
    1500:	df 90       	pop	r13
    1502:	cf 90       	pop	r12
    1504:	bf 90       	pop	r11
    1506:	af 90       	pop	r10
    1508:	9f 90       	pop	r9
    150a:	8f 90       	pop	r8
    150c:	7f 90       	pop	r7
    150e:	6f 90       	pop	r6
    1510:	bf ce       	rjmp	.-642    	; 0x1290 <malloc>
    1512:	fc 01       	movw	r30, r24
    1514:	e6 0f       	add	r30, r22
    1516:	f7 1f       	adc	r31, r23
    1518:	9c 01       	movw	r18, r24
    151a:	22 50       	subi	r18, 0x02	; 2
    151c:	31 09       	sbc	r19, r1
    151e:	e2 17       	cp	r30, r18
    1520:	f3 07       	cpc	r31, r19
    1522:	08 f4       	brcc	.+2      	; 0x1526 <realloc+0x54>
    1524:	a5 c0       	rjmp	.+330    	; 0x1670 <realloc+0x19e>
    1526:	ec 01       	movw	r28, r24
    1528:	d9 01       	movw	r26, r18
    152a:	0d 91       	ld	r16, X+
    152c:	1c 91       	ld	r17, X
    152e:	11 97       	sbiw	r26, 0x01	; 1
    1530:	06 17       	cp	r16, r22
    1532:	17 07       	cpc	r17, r23
    1534:	a8 f0       	brcs	.+42     	; 0x1560 <realloc+0x8e>
    1536:	05 30       	cpi	r16, 0x05	; 5
    1538:	11 05       	cpc	r17, r1
    153a:	08 f4       	brcc	.+2      	; 0x153e <realloc+0x6c>
    153c:	97 c0       	rjmp	.+302    	; 0x166c <realloc+0x19a>
    153e:	c8 01       	movw	r24, r16
    1540:	04 97       	sbiw	r24, 0x04	; 4
    1542:	86 17       	cp	r24, r22
    1544:	97 07       	cpc	r25, r23
    1546:	08 f4       	brcc	.+2      	; 0x154a <realloc+0x78>
    1548:	91 c0       	rjmp	.+290    	; 0x166c <realloc+0x19a>
    154a:	02 50       	subi	r16, 0x02	; 2
    154c:	11 09       	sbc	r17, r1
    154e:	06 1b       	sub	r16, r22
    1550:	17 0b       	sbc	r17, r23
    1552:	01 93       	st	Z+, r16
    1554:	11 93       	st	Z+, r17
    1556:	6d 93       	st	X+, r22
    1558:	7c 93       	st	X, r23
    155a:	cf 01       	movw	r24, r30
    155c:	31 df       	rcall	.-414    	; 0x13c0 <free>
    155e:	86 c0       	rjmp	.+268    	; 0x166c <realloc+0x19a>
    1560:	5b 01       	movw	r10, r22
    1562:	a0 1a       	sub	r10, r16
    1564:	b1 0a       	sbc	r11, r17
    1566:	4c 01       	movw	r8, r24
    1568:	80 0e       	add	r8, r16
    156a:	91 1e       	adc	r9, r17
    156c:	a0 91 f5 02 	lds	r26, 0x02F5	; 0x8002f5 <__flp>
    1570:	b0 91 f6 02 	lds	r27, 0x02F6	; 0x8002f6 <__flp+0x1>
    1574:	61 2c       	mov	r6, r1
    1576:	71 2c       	mov	r7, r1
    1578:	e1 2c       	mov	r14, r1
    157a:	f1 2c       	mov	r15, r1
    157c:	10 97       	sbiw	r26, 0x00	; 0
    157e:	09 f4       	brne	.+2      	; 0x1582 <realloc+0xb0>
    1580:	46 c0       	rjmp	.+140    	; 0x160e <realloc+0x13c>
    1582:	8d 91       	ld	r24, X+
    1584:	9c 91       	ld	r25, X
    1586:	11 97       	sbiw	r26, 0x01	; 1
    1588:	a8 15       	cp	r26, r8
    158a:	b9 05       	cpc	r27, r9
    158c:	b1 f5       	brne	.+108    	; 0x15fa <realloc+0x128>
    158e:	6c 01       	movw	r12, r24
    1590:	42 e0       	ldi	r20, 0x02	; 2
    1592:	c4 0e       	add	r12, r20
    1594:	d1 1c       	adc	r13, r1
    1596:	ca 14       	cp	r12, r10
    1598:	db 04       	cpc	r13, r11
    159a:	78 f1       	brcs	.+94     	; 0x15fa <realloc+0x128>
    159c:	4c 01       	movw	r8, r24
    159e:	8a 18       	sub	r8, r10
    15a0:	9b 08       	sbc	r9, r11
    15a2:	64 01       	movw	r12, r8
    15a4:	42 e0       	ldi	r20, 0x02	; 2
    15a6:	c4 0e       	add	r12, r20
    15a8:	d1 1c       	adc	r13, r1
    15aa:	12 96       	adiw	r26, 0x02	; 2
    15ac:	bc 90       	ld	r11, X
    15ae:	12 97       	sbiw	r26, 0x02	; 2
    15b0:	13 96       	adiw	r26, 0x03	; 3
    15b2:	ac 91       	ld	r26, X
    15b4:	b5 e0       	ldi	r27, 0x05	; 5
    15b6:	cb 16       	cp	r12, r27
    15b8:	d1 04       	cpc	r13, r1
    15ba:	40 f0       	brcs	.+16     	; 0x15cc <realloc+0xfa>
    15bc:	b2 82       	std	Z+2, r11	; 0x02
    15be:	a3 83       	std	Z+3, r26	; 0x03
    15c0:	91 82       	std	Z+1, r9	; 0x01
    15c2:	80 82       	st	Z, r8
    15c4:	d9 01       	movw	r26, r18
    15c6:	6d 93       	st	X+, r22
    15c8:	7c 93       	st	X, r23
    15ca:	09 c0       	rjmp	.+18     	; 0x15de <realloc+0x10c>
    15cc:	0e 5f       	subi	r16, 0xFE	; 254
    15ce:	1f 4f       	sbci	r17, 0xFF	; 255
    15d0:	80 0f       	add	r24, r16
    15d2:	91 1f       	adc	r25, r17
    15d4:	f9 01       	movw	r30, r18
    15d6:	91 83       	std	Z+1, r25	; 0x01
    15d8:	80 83       	st	Z, r24
    15da:	eb 2d       	mov	r30, r11
    15dc:	fa 2f       	mov	r31, r26
    15de:	e1 14       	cp	r14, r1
    15e0:	f1 04       	cpc	r15, r1
    15e2:	31 f0       	breq	.+12     	; 0x15f0 <realloc+0x11e>
    15e4:	d7 01       	movw	r26, r14
    15e6:	13 96       	adiw	r26, 0x03	; 3
    15e8:	fc 93       	st	X, r31
    15ea:	ee 93       	st	-X, r30
    15ec:	12 97       	sbiw	r26, 0x02	; 2
    15ee:	3e c0       	rjmp	.+124    	; 0x166c <realloc+0x19a>
    15f0:	f0 93 f6 02 	sts	0x02F6, r31	; 0x8002f6 <__flp+0x1>
    15f4:	e0 93 f5 02 	sts	0x02F5, r30	; 0x8002f5 <__flp>
    15f8:	39 c0       	rjmp	.+114    	; 0x166c <realloc+0x19a>
    15fa:	68 16       	cp	r6, r24
    15fc:	79 06       	cpc	r7, r25
    15fe:	08 f4       	brcc	.+2      	; 0x1602 <realloc+0x130>
    1600:	3c 01       	movw	r6, r24
    1602:	7d 01       	movw	r14, r26
    1604:	12 96       	adiw	r26, 0x02	; 2
    1606:	0d 90       	ld	r0, X+
    1608:	bc 91       	ld	r27, X
    160a:	a0 2d       	mov	r26, r0
    160c:	b7 cf       	rjmp	.-146    	; 0x157c <realloc+0xaa>
    160e:	80 91 f3 02 	lds	r24, 0x02F3	; 0x8002f3 <__brkval>
    1612:	90 91 f4 02 	lds	r25, 0x02F4	; 0x8002f4 <__brkval+0x1>
    1616:	88 16       	cp	r8, r24
    1618:	99 06       	cpc	r9, r25
    161a:	e1 f4       	brne	.+56     	; 0x1654 <realloc+0x182>
    161c:	66 16       	cp	r6, r22
    161e:	77 06       	cpc	r7, r23
    1620:	c8 f4       	brcc	.+50     	; 0x1654 <realloc+0x182>
    1622:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__data_start>
    1626:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <__data_start+0x1>
    162a:	00 97       	sbiw	r24, 0x00	; 0
    162c:	41 f4       	brne	.+16     	; 0x163e <realloc+0x16c>
    162e:	8d b7       	in	r24, 0x3d	; 61
    1630:	9e b7       	in	r25, 0x3e	; 62
    1632:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
    1636:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
    163a:	84 1b       	sub	r24, r20
    163c:	95 0b       	sbc	r25, r21
    163e:	e8 17       	cp	r30, r24
    1640:	f9 07       	cpc	r31, r25
    1642:	b0 f4       	brcc	.+44     	; 0x1670 <realloc+0x19e>
    1644:	f0 93 f4 02 	sts	0x02F4, r31	; 0x8002f4 <__brkval+0x1>
    1648:	e0 93 f3 02 	sts	0x02F3, r30	; 0x8002f3 <__brkval>
    164c:	f9 01       	movw	r30, r18
    164e:	71 83       	std	Z+1, r23	; 0x01
    1650:	60 83       	st	Z, r22
    1652:	0c c0       	rjmp	.+24     	; 0x166c <realloc+0x19a>
    1654:	cb 01       	movw	r24, r22
    1656:	1c de       	rcall	.-968    	; 0x1290 <malloc>
    1658:	7c 01       	movw	r14, r24
    165a:	00 97       	sbiw	r24, 0x00	; 0
    165c:	49 f0       	breq	.+18     	; 0x1670 <realloc+0x19e>
    165e:	a8 01       	movw	r20, r16
    1660:	be 01       	movw	r22, r28
    1662:	3d d0       	rcall	.+122    	; 0x16de <memcpy>
    1664:	ce 01       	movw	r24, r28
    1666:	ac de       	rcall	.-680    	; 0x13c0 <free>
    1668:	c7 01       	movw	r24, r14
    166a:	04 c0       	rjmp	.+8      	; 0x1674 <realloc+0x1a2>
    166c:	ce 01       	movw	r24, r28
    166e:	02 c0       	rjmp	.+4      	; 0x1674 <realloc+0x1a2>
    1670:	80 e0       	ldi	r24, 0x00	; 0
    1672:	90 e0       	ldi	r25, 0x00	; 0
    1674:	df 91       	pop	r29
    1676:	cf 91       	pop	r28
    1678:	1f 91       	pop	r17
    167a:	0f 91       	pop	r16
    167c:	ff 90       	pop	r15
    167e:	ef 90       	pop	r14
    1680:	df 90       	pop	r13
    1682:	cf 90       	pop	r12
    1684:	bf 90       	pop	r11
    1686:	af 90       	pop	r10
    1688:	9f 90       	pop	r9
    168a:	8f 90       	pop	r8
    168c:	7f 90       	pop	r7
    168e:	6f 90       	pop	r6
    1690:	08 95       	ret

00001692 <atol>:
    1692:	1f 93       	push	r17
    1694:	fc 01       	movw	r30, r24
    1696:	99 27       	eor	r25, r25
    1698:	88 27       	eor	r24, r24
    169a:	bc 01       	movw	r22, r24
    169c:	e8 94       	clt
    169e:	11 91       	ld	r17, Z+
    16a0:	10 32       	cpi	r17, 0x20	; 32
    16a2:	e9 f3       	breq	.-6      	; 0x169e <atol+0xc>
    16a4:	19 30       	cpi	r17, 0x09	; 9
    16a6:	10 f0       	brcs	.+4      	; 0x16ac <atol+0x1a>
    16a8:	1e 30       	cpi	r17, 0x0E	; 14
    16aa:	c8 f3       	brcs	.-14     	; 0x169e <atol+0xc>
    16ac:	1b 32       	cpi	r17, 0x2B	; 43
    16ae:	49 f0       	breq	.+18     	; 0x16c2 <atol+0x30>
    16b0:	1d 32       	cpi	r17, 0x2D	; 45
    16b2:	41 f4       	brne	.+16     	; 0x16c4 <atol+0x32>
    16b4:	68 94       	set
    16b6:	05 c0       	rjmp	.+10     	; 0x16c2 <atol+0x30>
    16b8:	31 d0       	rcall	.+98     	; 0x171c <__mulsi_const_10>
    16ba:	61 0f       	add	r22, r17
    16bc:	71 1d       	adc	r23, r1
    16be:	81 1d       	adc	r24, r1
    16c0:	91 1d       	adc	r25, r1
    16c2:	11 91       	ld	r17, Z+
    16c4:	10 53       	subi	r17, 0x30	; 48
    16c6:	1a 30       	cpi	r17, 0x0A	; 10
    16c8:	b8 f3       	brcs	.-18     	; 0x16b8 <atol+0x26>
    16ca:	3e f4       	brtc	.+14     	; 0x16da <atol+0x48>
    16cc:	90 95       	com	r25
    16ce:	80 95       	com	r24
    16d0:	70 95       	com	r23
    16d2:	61 95       	neg	r22
    16d4:	7f 4f       	sbci	r23, 0xFF	; 255
    16d6:	8f 4f       	sbci	r24, 0xFF	; 255
    16d8:	9f 4f       	sbci	r25, 0xFF	; 255
    16da:	1f 91       	pop	r17
    16dc:	08 95       	ret

000016de <memcpy>:
    16de:	fb 01       	movw	r30, r22
    16e0:	dc 01       	movw	r26, r24
    16e2:	02 c0       	rjmp	.+4      	; 0x16e8 <memcpy+0xa>
    16e4:	01 90       	ld	r0, Z+
    16e6:	0d 92       	st	X+, r0
    16e8:	41 50       	subi	r20, 0x01	; 1
    16ea:	50 40       	sbci	r21, 0x00	; 0
    16ec:	d8 f7       	brcc	.-10     	; 0x16e4 <memcpy+0x6>
    16ee:	08 95       	ret

000016f0 <strcpy>:
    16f0:	fb 01       	movw	r30, r22
    16f2:	dc 01       	movw	r26, r24
    16f4:	01 90       	ld	r0, Z+
    16f6:	0d 92       	st	X+, r0
    16f8:	00 20       	and	r0, r0
    16fa:	e1 f7       	brne	.-8      	; 0x16f4 <strcpy+0x4>
    16fc:	08 95       	ret

000016fe <strncpy>:
    16fe:	fb 01       	movw	r30, r22
    1700:	dc 01       	movw	r26, r24
    1702:	41 50       	subi	r20, 0x01	; 1
    1704:	50 40       	sbci	r21, 0x00	; 0
    1706:	48 f0       	brcs	.+18     	; 0x171a <strncpy+0x1c>
    1708:	01 90       	ld	r0, Z+
    170a:	0d 92       	st	X+, r0
    170c:	00 20       	and	r0, r0
    170e:	c9 f7       	brne	.-14     	; 0x1702 <strncpy+0x4>
    1710:	01 c0       	rjmp	.+2      	; 0x1714 <strncpy+0x16>
    1712:	1d 92       	st	X+, r1
    1714:	41 50       	subi	r20, 0x01	; 1
    1716:	50 40       	sbci	r21, 0x00	; 0
    1718:	e0 f7       	brcc	.-8      	; 0x1712 <strncpy+0x14>
    171a:	08 95       	ret

0000171c <__mulsi_const_10>:
    171c:	59 2f       	mov	r21, r25
    171e:	48 2f       	mov	r20, r24
    1720:	37 2f       	mov	r19, r23
    1722:	26 2f       	mov	r18, r22
    1724:	66 0f       	add	r22, r22
    1726:	77 1f       	adc	r23, r23
    1728:	88 1f       	adc	r24, r24
    172a:	99 1f       	adc	r25, r25
    172c:	66 0f       	add	r22, r22
    172e:	77 1f       	adc	r23, r23
    1730:	88 1f       	adc	r24, r24
    1732:	99 1f       	adc	r25, r25
    1734:	62 0f       	add	r22, r18
    1736:	73 1f       	adc	r23, r19
    1738:	84 1f       	adc	r24, r20
    173a:	95 1f       	adc	r25, r21
    173c:	66 0f       	add	r22, r22
    173e:	77 1f       	adc	r23, r23
    1740:	88 1f       	adc	r24, r24
    1742:	99 1f       	adc	r25, r25
    1744:	08 95       	ret

00001746 <_exit>:
    1746:	f8 94       	cli

00001748 <__stop_program>:
    1748:	ff cf       	rjmp	.-2      	; 0x1748 <__stop_program>
