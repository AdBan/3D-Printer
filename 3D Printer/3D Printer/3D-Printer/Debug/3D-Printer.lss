
3D-Printer.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000032  00800200  00002378  0000240c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002378  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000c2  00800232  00800232  0000243e  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  0000243e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000249c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000006e0  00000000  00000000  000024dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00011e8c  00000000  00000000  00002bbc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002fc2  00000000  00000000  00014a48  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000039c9  00000000  00000000  00017a0a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001798  00000000  00000000  0001b3d4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000029ed  00000000  00000000  0001cb6c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00008cca  00000000  00000000  0001f559  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000006c0  00000000  00000000  00028223  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	34 c1       	rjmp	.+616    	; 0x26a <__dtors_end>
       2:	00 00       	nop
       4:	62 c1       	rjmp	.+708    	; 0x2ca <__bad_interrupt>
       6:	00 00       	nop
       8:	60 c1       	rjmp	.+704    	; 0x2ca <__bad_interrupt>
       a:	00 00       	nop
       c:	5e c1       	rjmp	.+700    	; 0x2ca <__bad_interrupt>
       e:	00 00       	nop
      10:	5c c1       	rjmp	.+696    	; 0x2ca <__bad_interrupt>
      12:	00 00       	nop
      14:	5a c1       	rjmp	.+692    	; 0x2ca <__bad_interrupt>
      16:	00 00       	nop
      18:	58 c1       	rjmp	.+688    	; 0x2ca <__bad_interrupt>
      1a:	00 00       	nop
      1c:	56 c1       	rjmp	.+684    	; 0x2ca <__bad_interrupt>
      1e:	00 00       	nop
      20:	54 c1       	rjmp	.+680    	; 0x2ca <__bad_interrupt>
      22:	00 00       	nop
      24:	52 c1       	rjmp	.+676    	; 0x2ca <__bad_interrupt>
      26:	00 00       	nop
      28:	50 c1       	rjmp	.+672    	; 0x2ca <__bad_interrupt>
      2a:	00 00       	nop
      2c:	4e c1       	rjmp	.+668    	; 0x2ca <__bad_interrupt>
      2e:	00 00       	nop
      30:	4c c1       	rjmp	.+664    	; 0x2ca <__bad_interrupt>
      32:	00 00       	nop
      34:	4a c1       	rjmp	.+660    	; 0x2ca <__bad_interrupt>
      36:	00 00       	nop
      38:	48 c1       	rjmp	.+656    	; 0x2ca <__bad_interrupt>
      3a:	00 00       	nop
      3c:	46 c1       	rjmp	.+652    	; 0x2ca <__bad_interrupt>
      3e:	00 00       	nop
      40:	44 c1       	rjmp	.+648    	; 0x2ca <__bad_interrupt>
      42:	00 00       	nop
      44:	42 c1       	rjmp	.+644    	; 0x2ca <__bad_interrupt>
      46:	00 00       	nop
      48:	40 c1       	rjmp	.+640    	; 0x2ca <__bad_interrupt>
      4a:	00 00       	nop
      4c:	3e c1       	rjmp	.+636    	; 0x2ca <__bad_interrupt>
      4e:	00 00       	nop
      50:	3c c1       	rjmp	.+632    	; 0x2ca <__bad_interrupt>
      52:	00 00       	nop
      54:	3a c1       	rjmp	.+628    	; 0x2ca <__bad_interrupt>
      56:	00 00       	nop
      58:	38 c1       	rjmp	.+624    	; 0x2ca <__bad_interrupt>
      5a:	00 00       	nop
      5c:	0c 94 f8 09 	jmp	0x13f0	; 0x13f0 <__vector_23>
      60:	34 c1       	rjmp	.+616    	; 0x2ca <__bad_interrupt>
      62:	00 00       	nop
      64:	58 c7       	rjmp	.+3760   	; 0xf16 <__vector_25>
      66:	00 00       	nop
      68:	8c c7       	rjmp	.+3864   	; 0xf82 <__vector_26>
      6a:	00 00       	nop
      6c:	2e c1       	rjmp	.+604    	; 0x2ca <__bad_interrupt>
      6e:	00 00       	nop
      70:	2c c1       	rjmp	.+600    	; 0x2ca <__bad_interrupt>
      72:	00 00       	nop
      74:	2a c1       	rjmp	.+596    	; 0x2ca <__bad_interrupt>
      76:	00 00       	nop
      78:	28 c1       	rjmp	.+592    	; 0x2ca <__bad_interrupt>
      7a:	00 00       	nop
      7c:	26 c1       	rjmp	.+588    	; 0x2ca <__bad_interrupt>
      7e:	00 00       	nop
      80:	24 c1       	rjmp	.+584    	; 0x2ca <__bad_interrupt>
      82:	00 00       	nop
      84:	22 c1       	rjmp	.+580    	; 0x2ca <__bad_interrupt>
      86:	00 00       	nop
      88:	20 c1       	rjmp	.+576    	; 0x2ca <__bad_interrupt>
      8a:	00 00       	nop
      8c:	1e c1       	rjmp	.+572    	; 0x2ca <__bad_interrupt>
      8e:	00 00       	nop
      90:	1c c1       	rjmp	.+568    	; 0x2ca <__bad_interrupt>
      92:	00 00       	nop
      94:	1a c1       	rjmp	.+564    	; 0x2ca <__bad_interrupt>
      96:	00 00       	nop
      98:	18 c1       	rjmp	.+560    	; 0x2ca <__bad_interrupt>
      9a:	00 00       	nop
      9c:	16 c1       	rjmp	.+556    	; 0x2ca <__bad_interrupt>
      9e:	00 00       	nop
      a0:	14 c1       	rjmp	.+552    	; 0x2ca <__bad_interrupt>
      a2:	00 00       	nop
      a4:	12 c1       	rjmp	.+548    	; 0x2ca <__bad_interrupt>
      a6:	00 00       	nop
      a8:	10 c1       	rjmp	.+544    	; 0x2ca <__bad_interrupt>
      aa:	00 00       	nop
      ac:	0e c1       	rjmp	.+540    	; 0x2ca <__bad_interrupt>
      ae:	00 00       	nop
      b0:	0c c1       	rjmp	.+536    	; 0x2ca <__bad_interrupt>
      b2:	00 00       	nop
      b4:	0a c1       	rjmp	.+532    	; 0x2ca <__bad_interrupt>
      b6:	00 00       	nop
      b8:	08 c1       	rjmp	.+528    	; 0x2ca <__bad_interrupt>
      ba:	00 00       	nop
      bc:	06 c1       	rjmp	.+524    	; 0x2ca <__bad_interrupt>
      be:	00 00       	nop
      c0:	04 c1       	rjmp	.+520    	; 0x2ca <__bad_interrupt>
      c2:	00 00       	nop
      c4:	02 c1       	rjmp	.+516    	; 0x2ca <__bad_interrupt>
      c6:	00 00       	nop
      c8:	00 c1       	rjmp	.+512    	; 0x2ca <__bad_interrupt>
      ca:	00 00       	nop
      cc:	fe c0       	rjmp	.+508    	; 0x2ca <__bad_interrupt>
      ce:	00 00       	nop
      d0:	fc c0       	rjmp	.+504    	; 0x2ca <__bad_interrupt>
      d2:	00 00       	nop
      d4:	fa c0       	rjmp	.+500    	; 0x2ca <__bad_interrupt>
      d6:	00 00       	nop
      d8:	f8 c0       	rjmp	.+496    	; 0x2ca <__bad_interrupt>
      da:	00 00       	nop
      dc:	f6 c0       	rjmp	.+492    	; 0x2ca <__bad_interrupt>
      de:	00 00       	nop
      e0:	f4 c0       	rjmp	.+488    	; 0x2ca <__bad_interrupt>
      e2:	00 00       	nop
      e4:	d5 0a       	sbc	r13, r21
      e6:	d8 0a       	sbc	r13, r24
      e8:	c7 0a       	sbc	r12, r23
      ea:	cb 0a       	sbc	r12, r27
      ec:	d1 0a       	sbc	r13, r17
      ee:	0f 0b       	sbc	r16, r31
      f0:	dc 0a       	sbc	r13, r28
      f2:	e0 0a       	sbc	r14, r16
      f4:	e6 0a       	sbc	r14, r22
      f6:	ea 0a       	sbc	r14, r26
      f8:	ee 0a       	sbc	r14, r30
      fa:	f4 0a       	sbc	r15, r20
      fc:	f8 0a       	sbc	r15, r24
      fe:	fc 0a       	sbc	r15, r28
     100:	0f 0b       	sbc	r16, r31
     102:	02 0b       	sbc	r16, r18
     104:	06 0b       	sbc	r16, r22
     106:	0a 0b       	sbc	r16, r26

00000108 <__trampolines_end>:
     108:	4e 41       	sbci	r20, 0x1E	; 30
     10a:	4e 49       	Address 0x0000010a is out of bounds.
.word	0xffff	; ????

0000010b <pstr_inity>:
     10b:	49 4e 49 54 59                                      INITY

00000110 <pstr_inf>:
     110:	49 4e 46                                            INF

00000113 <pwr_m10>:
     113:	cd cc cc 3d 0a d7 23 3c 17 b7 d1 38 77 cc 2b 32     ...=..#<...8w.+2
     123:	95 95 e6 24 1f b1 4f 0a                             ...$..O.

0000012b <pwr_p10>:
     12b:	00 00 20 41 00 00 c8 42 00 40 1c 46 20 bc be 4c     .. A...B.@.F ..L
     13b:	ca 1b 0e 5a ae c5 9d 74                             ...Z...t

00000143 <digital_pin_to_timer_PGM>:
     143:	00 00 0a 0b 02 09 0c 0d 0e 08 07 03 04 01 00 00     ................
	...
     16f:	12 11 10 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...

00000189 <digital_pin_to_bit_mask_PGM>:
     189:	01 02 10 20 20 08 08 10 20 40 10 20 40 80 02 01     ...  ... @. @...
     199:	02 01 08 04 02 01 01 02 04 08 10 20 40 80 80 40     ........... @..@
     1a9:	20 10 08 04 02 01 80 04 02 01 80 40 20 10 08 04      ..........@ ...
     1b9:	02 01 08 04 02 01 01 02 04 08 10 20 40 80 01 02     ........... @...
     1c9:	04 08 10 20 40 80                                   ... @.

000001cf <digital_pin_to_port_PGM>:
     1cf:	05 05 05 05 07 05 08 08 08 08 02 02 02 02 0a 0a     ................
     1df:	08 08 04 04 04 04 01 01 01 01 01 01 01 01 03 03     ................
     1ef:	03 03 03 03 03 03 04 07 07 07 0c 0c 0c 0c 0c 0c     ................
     1ff:	0c 0c 02 02 02 02 06 06 06 06 06 06 06 06 0b 0b     ................
     20f:	0b 0b 0b 0b 0b 0b                                   ......

00000215 <port_to_input_PGM>:
     215:	00 00 20 00 23 00 26 00 29 00 2c 00 2f 00 32 00     .. .#.&.).,./.2.
     225:	00 01 00 00 03 01 06 01 09 01                       ..........

0000022f <port_to_output_PGM>:
     22f:	00 00 22 00 25 00 28 00 2b 00 2e 00 31 00 34 00     ..".%.(.+...1.4.
     23f:	02 01 00 00 05 01 08 01 0b 01                       ..........

00000249 <port_to_mode_PGM>:
     249:	00 00 21 00 24 00 27 00 2a 00 2d 00 30 00 33 00     ..!.$.'.*.-.0.3.
     259:	01 01 00 00 04 01 07 01 0a 01 00                    ...........

00000264 <__ctors_start>:
     264:	74 01       	movw	r14, r8
     266:	f3 07       	cpc	r31, r19

00000268 <__ctors_end>:
     268:	7a 01       	movw	r14, r20

0000026a <__dtors_end>:
     26a:	11 24       	eor	r1, r1
     26c:	1f be       	out	0x3f, r1	; 63
     26e:	cf ef       	ldi	r28, 0xFF	; 255
     270:	d1 e2       	ldi	r29, 0x21	; 33
     272:	de bf       	out	0x3e, r29	; 62
     274:	cd bf       	out	0x3d, r28	; 61
     276:	00 e0       	ldi	r16, 0x00	; 0
     278:	0c bf       	out	0x3c, r16	; 60

0000027a <__do_copy_data>:
     27a:	12 e0       	ldi	r17, 0x02	; 2
     27c:	a0 e0       	ldi	r26, 0x00	; 0
     27e:	b2 e0       	ldi	r27, 0x02	; 2
     280:	e8 e7       	ldi	r30, 0x78	; 120
     282:	f3 e2       	ldi	r31, 0x23	; 35
     284:	00 e0       	ldi	r16, 0x00	; 0
     286:	0b bf       	out	0x3b, r16	; 59
     288:	02 c0       	rjmp	.+4      	; 0x28e <__do_copy_data+0x14>
     28a:	07 90       	elpm	r0, Z+
     28c:	0d 92       	st	X+, r0
     28e:	a2 33       	cpi	r26, 0x32	; 50
     290:	b1 07       	cpc	r27, r17
     292:	d9 f7       	brne	.-10     	; 0x28a <__do_copy_data+0x10>

00000294 <__do_clear_bss>:
     294:	22 e0       	ldi	r18, 0x02	; 2
     296:	a2 e3       	ldi	r26, 0x32	; 50
     298:	b2 e0       	ldi	r27, 0x02	; 2
     29a:	01 c0       	rjmp	.+2      	; 0x29e <.do_clear_bss_start>

0000029c <.do_clear_bss_loop>:
     29c:	1d 92       	st	X+, r1

0000029e <.do_clear_bss_start>:
     29e:	a4 3f       	cpi	r26, 0xF4	; 244
     2a0:	b2 07       	cpc	r27, r18
     2a2:	e1 f7       	brne	.-8      	; 0x29c <.do_clear_bss_loop>

000002a4 <__do_global_ctors>:
     2a4:	11 e0       	ldi	r17, 0x01	; 1
     2a6:	c4 e3       	ldi	r28, 0x34	; 52
     2a8:	d1 e0       	ldi	r29, 0x01	; 1
     2aa:	00 e0       	ldi	r16, 0x00	; 0
     2ac:	06 c0       	rjmp	.+12     	; 0x2ba <__do_global_ctors+0x16>
     2ae:	21 97       	sbiw	r28, 0x01	; 1
     2b0:	01 09       	sbc	r16, r1
     2b2:	80 2f       	mov	r24, r16
     2b4:	fe 01       	movw	r30, r28
     2b6:	0e 94 e9 0d 	call	0x1bd2	; 0x1bd2 <__tablejump2__>
     2ba:	c2 33       	cpi	r28, 0x32	; 50
     2bc:	d1 07       	cpc	r29, r17
     2be:	80 e0       	ldi	r24, 0x00	; 0
     2c0:	08 07       	cpc	r16, r24
     2c2:	a9 f7       	brne	.-22     	; 0x2ae <__do_global_ctors+0xa>
     2c4:	be d6       	rcall	.+3452   	; 0x1042 <main>
     2c6:	0c 94 ab 11 	jmp	0x2356	; 0x2356 <__do_global_dtors>

000002ca <__bad_interrupt>:
     2ca:	9a ce       	rjmp	.-716    	; 0x0 <__vectors>

000002cc <setup>:
Steps steps = {0, 0, 0, 0};
String readBuffer;

///CREDIT: Adam Baniuszewicz, Bartosz Flis, Jakub Sybidlo
void setup()
{
     2cc:	62 d1       	rcall	.+708    	; 0x592 <_Z11StepperInitv>
     2ce:	26 e0       	ldi	r18, 0x06	; 6
     2d0:	40 e0       	ldi	r20, 0x00	; 0
     2d2:	51 ee       	ldi	r21, 0xE1	; 225
     2d4:	60 e0       	ldi	r22, 0x00	; 0
     2d6:	70 e0       	ldi	r23, 0x00	; 0
     2d8:	88 e4       	ldi	r24, 0x48	; 72
     2da:	92 e0       	ldi	r25, 0x02	; 2
     2dc:	b9 d5       	rcall	.+2930   	; 0xe50 <_ZN14HardwareSerial5beginEmh>
     2de:	66 e0       	ldi	r22, 0x06	; 6
     2e0:	72 e0       	ldi	r23, 0x02	; 2
     2e2:	88 e4       	ldi	r24, 0x48	; 72
     2e4:	92 e0       	ldi	r25, 0x02	; 2
     2e6:	00 c7       	rjmp	.+3584   	; 0x10e8 <_ZN5Print7printlnEPKc>

000002e8 <_GLOBAL__sub_I_steps>:
     2e8:	65 e2       	ldi	r22, 0x25	; 37
     2ea:	72 e0       	ldi	r23, 0x02	; 2
     2ec:	82 e3       	ldi	r24, 0x32	; 50
     2ee:	92 e0       	ldi	r25, 0x02	; 2
     2f0:	0c 94 48 0c 	jmp	0x1890	; 0x1890 <_ZN6StringC1EPKc>

000002f4 <_GLOBAL__sub_D_steps>:
     2f4:	82 e3       	ldi	r24, 0x32	; 50
     2f6:	92 e0       	ldi	r25, 0x02	; 2
     2f8:	0c 94 e1 0b 	jmp	0x17c2	; 0x17c2 <_ZN6StringD1Ev>

000002fc <loop>:
     2fc:	cf 93       	push	r28
     2fe:	df 93       	push	r29
     300:	cd b7       	in	r28, 0x3d	; 61
     302:	de b7       	in	r29, 0x3e	; 62
     304:	66 97       	sbiw	r28, 0x16	; 22
     306:	0f b6       	in	r0, 0x3f	; 63
     308:	f8 94       	cli
     30a:	de bf       	out	0x3e, r29	; 62
     30c:	0f be       	out	0x3f, r0	; 63
     30e:	cd bf       	out	0x3d, r28	; 61
     310:	88 e4       	ldi	r24, 0x48	; 72
     312:	92 e0       	ldi	r25, 0x02	; 2
     314:	9c d4       	rcall	.+2360   	; 0xc4e <_ZN14HardwareSerial9availableEv>
     316:	89 2b       	or	r24, r25
     318:	09 f4       	brne	.+2      	; 0x31c <loop+0x20>
     31a:	51 c0       	rjmp	.+162    	; 0x3be <loop+0xc2>
     31c:	68 e4       	ldi	r22, 0x48	; 72
     31e:	72 e0       	ldi	r23, 0x02	; 2
     320:	ce 01       	movw	r24, r28
     322:	01 96       	adiw	r24, 0x01	; 1
     324:	0e 94 e1 09 	call	0x13c2	; 0x13c2 <_ZN6Stream10readStringEv>
     328:	be 01       	movw	r22, r28
     32a:	6f 5f       	subi	r22, 0xFF	; 255
     32c:	7f 4f       	sbci	r23, 0xFF	; 255
     32e:	ce 01       	movw	r24, r28
     330:	07 96       	adiw	r24, 0x07	; 7
     332:	9f d0       	rcall	.+318    	; 0x472 <_Z11DecodeFrame6String>
     334:	80 e1       	ldi	r24, 0x10	; 16
     336:	fe 01       	movw	r30, r28
     338:	37 96       	adiw	r30, 0x07	; 7
     33a:	a8 e3       	ldi	r26, 0x38	; 56
     33c:	b2 e0       	ldi	r27, 0x02	; 2
     33e:	01 90       	ld	r0, Z+
     340:	0d 92       	st	X+, r0
     342:	8a 95       	dec	r24
     344:	e1 f7       	brne	.-8      	; 0x33e <loop+0x42>
     346:	ce 01       	movw	r24, r28
     348:	01 96       	adiw	r24, 0x01	; 1
     34a:	0e 94 e1 0b 	call	0x17c2	; 0x17c2 <_ZN6StringD1Ev>
     34e:	40 91 38 02 	lds	r20, 0x0238	; 0x800238 <steps>
     352:	50 91 39 02 	lds	r21, 0x0239	; 0x800239 <steps+0x1>
     356:	60 91 3a 02 	lds	r22, 0x023A	; 0x80023a <steps+0x2>
     35a:	70 91 3b 02 	lds	r23, 0x023B	; 0x80023b <steps+0x3>
     35e:	22 e0       	ldi	r18, 0x02	; 2
     360:	30 e0       	ldi	r19, 0x00	; 0
     362:	88 e4       	ldi	r24, 0x48	; 72
     364:	92 e0       	ldi	r25, 0x02	; 2
     366:	ef d7       	rcall	.+4062   	; 0x1346 <_ZN5Print7printlnEdi>
     368:	40 91 3c 02 	lds	r20, 0x023C	; 0x80023c <steps+0x4>
     36c:	50 91 3d 02 	lds	r21, 0x023D	; 0x80023d <steps+0x5>
     370:	60 91 3e 02 	lds	r22, 0x023E	; 0x80023e <steps+0x6>
     374:	70 91 3f 02 	lds	r23, 0x023F	; 0x80023f <steps+0x7>
     378:	22 e0       	ldi	r18, 0x02	; 2
     37a:	30 e0       	ldi	r19, 0x00	; 0
     37c:	88 e4       	ldi	r24, 0x48	; 72
     37e:	92 e0       	ldi	r25, 0x02	; 2
     380:	e2 d7       	rcall	.+4036   	; 0x1346 <_ZN5Print7printlnEdi>
     382:	40 91 40 02 	lds	r20, 0x0240	; 0x800240 <steps+0x8>
     386:	50 91 41 02 	lds	r21, 0x0241	; 0x800241 <steps+0x9>
     38a:	60 91 42 02 	lds	r22, 0x0242	; 0x800242 <steps+0xa>
     38e:	70 91 43 02 	lds	r23, 0x0243	; 0x800243 <steps+0xb>
     392:	22 e0       	ldi	r18, 0x02	; 2
     394:	30 e0       	ldi	r19, 0x00	; 0
     396:	88 e4       	ldi	r24, 0x48	; 72
     398:	92 e0       	ldi	r25, 0x02	; 2
     39a:	d5 d7       	rcall	.+4010   	; 0x1346 <_ZN5Print7printlnEdi>
     39c:	40 91 44 02 	lds	r20, 0x0244	; 0x800244 <steps+0xc>
     3a0:	50 91 45 02 	lds	r21, 0x0245	; 0x800245 <steps+0xd>
     3a4:	60 91 46 02 	lds	r22, 0x0246	; 0x800246 <steps+0xe>
     3a8:	70 91 47 02 	lds	r23, 0x0247	; 0x800247 <steps+0xf>
     3ac:	22 e0       	ldi	r18, 0x02	; 2
     3ae:	30 e0       	ldi	r19, 0x00	; 0
     3b0:	88 e4       	ldi	r24, 0x48	; 72
     3b2:	92 e0       	ldi	r25, 0x02	; 2
     3b4:	c8 d7       	rcall	.+3984   	; 0x1346 <_ZN5Print7printlnEdi>
     3b6:	88 e3       	ldi	r24, 0x38	; 56
     3b8:	92 e0       	ldi	r25, 0x02	; 2
     3ba:	5e d1       	rcall	.+700    	; 0x678 <_Z17ChangeSteppersDirP5Steps>
     3bc:	a9 cf       	rjmp	.-174    	; 0x310 <loop+0x14>
     3be:	88 e3       	ldi	r24, 0x38	; 56
     3c0:	92 e0       	ldi	r25, 0x02	; 2
     3c2:	d9 d1       	rcall	.+946    	; 0x776 <_Z11MovementXYZP5Steps>
     3c4:	66 96       	adiw	r28, 0x16	; 22
     3c6:	0f b6       	in	r0, 0x3f	; 63
     3c8:	f8 94       	cli
     3ca:	de bf       	out	0x3e, r29	; 62
     3cc:	0f be       	out	0x3f, r0	; 63
     3ce:	cd bf       	out	0x3d, r28	; 61
     3d0:	df 91       	pop	r29
     3d2:	cf 91       	pop	r28
     3d4:	08 95       	ret

000003d6 <_Z18LimitSwitchPinInitv>:
#include "..\Header Files\LimitSwitch.h"

///CREDIT: Adam Baniuszewicz, Bartosz Flis, Jakub Sybidlo
void LimitSwitchPinInit()
{
	pinMode(pinLimitSwitchX, INPUT);
     3d6:	60 e0       	ldi	r22, 0x00	; 0
     3d8:	82 e0       	ldi	r24, 0x02	; 2
     3da:	0e 94 10 0b 	call	0x1620	; 0x1620 <pinMode>
	pinMode(pinLimitSwitchY, INPUT);
     3de:	60 e0       	ldi	r22, 0x00	; 0
     3e0:	8f e0       	ldi	r24, 0x0F	; 15
     3e2:	0e 94 10 0b 	call	0x1620	; 0x1620 <pinMode>
	pinMode(pinLimitSwitchZ, INPUT);
     3e6:	60 e0       	ldi	r22, 0x00	; 0
     3e8:	83 e1       	ldi	r24, 0x13	; 19
     3ea:	0e 94 10 0b 	call	0x1620	; 0x1620 <pinMode>
	digitalWrite(pinLimitSwitchX, HIGH);
     3ee:	61 e0       	ldi	r22, 0x01	; 1
     3f0:	82 e0       	ldi	r24, 0x02	; 2
     3f2:	0e 94 4c 0b 	call	0x1698	; 0x1698 <digitalWrite>
	digitalWrite(pinLimitSwitchY, HIGH);
     3f6:	61 e0       	ldi	r22, 0x01	; 1
     3f8:	8f e0       	ldi	r24, 0x0F	; 15
     3fa:	0e 94 4c 0b 	call	0x1698	; 0x1698 <digitalWrite>
	digitalWrite(pinLimitSwitchZ, HIGH);
     3fe:	61 e0       	ldi	r22, 0x01	; 1
     400:	83 e1       	ldi	r24, 0x13	; 19
     402:	0c 94 4c 0b 	jmp	0x1698	; 0x1698 <digitalWrite>

00000406 <_Z12RemoveSpacesPc>:
#include "stdlib.h"


///CREDIT: Adam Baniuszewicz, Bartosz Flis, Jakub Sybidlo
void RemoveSpaces(char* source)
{
     406:	fc 01       	movw	r30, r24
	char* i = source;
	char* j = source;

	while(*j != '\0')
     408:	21 91       	ld	r18, Z+
     40a:	22 23       	and	r18, r18
     40c:	31 f0       	breq	.+12     	; 0x41a <_Z12RemoveSpacesPc+0x14>
	{
		*i = *j++;
     40e:	dc 01       	movw	r26, r24
     410:	2c 93       	st	X, r18
		if(*i != ' ')
     412:	20 32       	cpi	r18, 0x20	; 32
     414:	c9 f3       	breq	.-14     	; 0x408 <_Z12RemoveSpacesPc+0x2>
		i++;
     416:	01 96       	adiw	r24, 0x01	; 1
     418:	f7 cf       	rjmp	.-18     	; 0x408 <_Z12RemoveSpacesPc+0x2>
	}
	*i = 0;
     41a:	fc 01       	movw	r30, r24
     41c:	10 82       	st	Z, r1
     41e:	08 95       	ret

00000420 <_Z23GetNumberAfterCharacterPcc>:
}

///CREDIT: Adam Baniuszewicz, Bartosz Flis, Jakub Sybidlo
double GetNumberAfterCharacter(char* source, char character)
{
	while (*source != '\0')
     420:	fc 01       	movw	r30, r24
     422:	21 91       	ld	r18, Z+
     424:	cf 01       	movw	r24, r30
     426:	22 23       	and	r18, r18
     428:	31 f0       	breq	.+12     	; 0x436 <_Z23GetNumberAfterCharacterPcc+0x16>
	{
		if (*source++ == character)
     42a:	26 13       	cpse	r18, r22
     42c:	f9 cf       	rjmp	.-14     	; 0x420 <_Z23GetNumberAfterCharacterPcc>
		{
			//extract all digits after desired character
			return strtod(source, NULL);
     42e:	60 e0       	ldi	r22, 0x00	; 0
     430:	70 e0       	ldi	r23, 0x00	; 0
     432:	0c 94 0b 10 	jmp	0x2016	; 0x2016 <strtod>
		}
	}
	return 0; //returning '0' won't cause any movement
}
     436:	60 e0       	ldi	r22, 0x00	; 0
     438:	70 e0       	ldi	r23, 0x00	; 0
     43a:	cb 01       	movw	r24, r22
     43c:	08 95       	ret

0000043e <_Z7GetCodePc>:

	return steps;
}

int GetCode(char* readBuffer)
{
     43e:	fc 01       	movw	r30, r24
	if (readBuffer[0] == 'g' && readBuffer[1] == '0' && readBuffer[2] == '0')
     440:	80 81       	ld	r24, Z
     442:	87 36       	cpi	r24, 0x67	; 103
     444:	59 f4       	brne	.+22     	; 0x45c <_Z7GetCodePc+0x1e>
     446:	81 81       	ldd	r24, Z+1	; 0x01
     448:	80 33       	cpi	r24, 0x30	; 48
     44a:	81 f4       	brne	.+32     	; 0x46c <_Z7GetCodePc+0x2e>
     44c:	82 81       	ldd	r24, Z+2	; 0x02
     44e:	80 33       	cpi	r24, 0x30	; 48
     450:	51 f0       	breq	.+20     	; 0x466 <_Z7GetCodePc+0x28>
		return 0;
	if (readBuffer[0] == 'g' && readBuffer[1] == '0' && readBuffer[2] == '1')
     452:	81 33       	cpi	r24, 0x31	; 49
     454:	59 f4       	brne	.+22     	; 0x46c <_Z7GetCodePc+0x2e>
		return 1;
     456:	81 e0       	ldi	r24, 0x01	; 1
     458:	90 e0       	ldi	r25, 0x00	; 0
     45a:	08 95       	ret
	if (readBuffer[0] == 'f')
     45c:	86 36       	cpi	r24, 0x66	; 102
     45e:	31 f4       	brne	.+12     	; 0x46c <_Z7GetCodePc+0x2e>
		return 99;
     460:	83 e6       	ldi	r24, 0x63	; 99
     462:	90 e0       	ldi	r25, 0x00	; 0
     464:	08 95       	ret
}

int GetCode(char* readBuffer)
{
	if (readBuffer[0] == 'g' && readBuffer[1] == '0' && readBuffer[2] == '0')
		return 0;
     466:	80 e0       	ldi	r24, 0x00	; 0
     468:	90 e0       	ldi	r25, 0x00	; 0
     46a:	08 95       	ret
	if (readBuffer[0] == 'g' && readBuffer[1] == '0' && readBuffer[2] == '1')
		return 1;
	if (readBuffer[0] == 'f')
		return 99;
	
	return -1;	 
     46c:	8f ef       	ldi	r24, 0xFF	; 255
     46e:	9f ef       	ldi	r25, 0xFF	; 255
     470:	08 95       	ret

00000472 <_Z11DecodeFrame6String>:
	return 0; //returning '0' won't cause any movement
}

///CREDIT: Adam Baniuszewicz, Bartosz Flis, Jakub Sybidlo
Steps DecodeFrame(String frame)
{
     472:	cf 92       	push	r12
     474:	df 92       	push	r13
     476:	ef 92       	push	r14
     478:	ff 92       	push	r15
     47a:	0f 93       	push	r16
     47c:	1f 93       	push	r17
     47e:	cf 93       	push	r28
     480:	df 93       	push	r29
     482:	cd b7       	in	r28, 0x3d	; 61
     484:	de b7       	in	r29, 0x3e	; 62
     486:	7c 01       	movw	r14, r24
     488:	cb 01       	movw	r24, r22
	steps.x = (int)GetNumberAfterCharacter(readDataChar, 'x');
	steps.y = (int)GetNumberAfterCharacter(readDataChar, 'y');
	steps.z = (int)GetNumberAfterCharacter(readDataChar, 'z');

	return steps;
}
     48a:	cd b6       	in	r12, 0x3d	; 61
     48c:	de b6       	in	r13, 0x3e	; 62
Steps DecodeFrame(String frame)
{
	Steps steps;

	//convert string to char
	char readDataChar[frame.length() + 1];
     48e:	fb 01       	movw	r30, r22
     490:	44 81       	ldd	r20, Z+4	; 0x04
     492:	55 81       	ldd	r21, Z+5	; 0x05
     494:	4f 5f       	subi	r20, 0xFF	; 255
     496:	5f 4f       	sbci	r21, 0xFF	; 255
     498:	2d b7       	in	r18, 0x3d	; 61
     49a:	3e b7       	in	r19, 0x3e	; 62
     49c:	24 1b       	sub	r18, r20
     49e:	35 0b       	sbc	r19, r21
     4a0:	0f b6       	in	r0, 0x3f	; 63
     4a2:	f8 94       	cli
     4a4:	3e bf       	out	0x3e, r19	; 62
     4a6:	0f be       	out	0x3f, r0	; 63
     4a8:	2d bf       	out	0x3d, r18	; 61
     4aa:	0d b7       	in	r16, 0x3d	; 61
     4ac:	1e b7       	in	r17, 0x3e	; 62
     4ae:	0f 5f       	subi	r16, 0xFF	; 255
     4b0:	1f 4f       	sbci	r17, 0xFF	; 255
	void setCharAt(unsigned int index, char c);
	char operator [] (unsigned int index) const;
	char& operator [] (unsigned int index);
	void getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index=0) const;
	void toCharArray(char *buf, unsigned int bufsize, unsigned int index=0) const
		{ getBytes((unsigned char *)buf, bufsize, index); }
     4b2:	20 e0       	ldi	r18, 0x00	; 0
     4b4:	30 e0       	ldi	r19, 0x00	; 0
     4b6:	b8 01       	movw	r22, r16
     4b8:	0e 94 9b 0c 	call	0x1936	; 0x1936 <_ZNK6String8getBytesEPhjj>
	frame.toCharArray(readDataChar, frame.length() + 1);
			
	RemoveSpaces(readDataChar);
     4bc:	c8 01       	movw	r24, r16
     4be:	a3 df       	rcall	.-186    	; 0x406 <_Z12RemoveSpacesPc>
	strlwr(readDataChar); //convert data to lowercase
     4c0:	c8 01       	movw	r24, r16
     4c2:	0e 94 8f 11 	call	0x231e	; 0x231e <strlwr>

	switch (GetCode(readDataChar))
     4c6:	c8 01       	movw	r24, r16
     4c8:	ba df       	rcall	.-140    	; 0x43e <_Z7GetCodePc>
     4ca:	81 30       	cpi	r24, 0x01	; 1
     4cc:	91 05       	cpc	r25, r1
     4ce:	51 f0       	breq	.+20     	; 0x4e4 <_Z11DecodeFrame6String+0x72>
     4d0:	83 36       	cpi	r24, 0x63	; 99
     4d2:	91 05       	cpc	r25, r1
     4d4:	09 f4       	brne	.+2      	; 0x4d8 <_Z11DecodeFrame6String+0x66>
     4d6:	3e c0       	rjmp	.+124    	; 0x554 <_Z11DecodeFrame6String+0xe2>
     4d8:	89 2b       	or	r24, r25
     4da:	09 f0       	breq	.+2      	; 0x4de <_Z11DecodeFrame6String+0x6c>
	{
		case 0: 
			steps.speed = SetSpeed(G00SPEED);
     4dc:	4b c0       	rjmp	.+150    	; 0x574 <_Z11DecodeFrame6String+0x102>
     4de:	88 e0       	ldi	r24, 0x08	; 8
			break;
		case 1:
			steps.speed = SetSpeed(G01SPEED);
     4e0:	90 e0       	ldi	r25, 0x00	; 0
     4e2:	02 c0       	rjmp	.+4      	; 0x4e8 <_Z11DecodeFrame6String+0x76>
     4e4:	85 e0       	ldi	r24, 0x05	; 5
     4e6:	90 e0       	ldi	r25, 0x00	; 0
     4e8:	2c d2       	rcall	.+1112   	; 0x942 <_Z8SetSpeedi>
     4ea:	bc 01       	movw	r22, r24
     4ec:	99 0f       	add	r25, r25
     4ee:	88 0b       	sbc	r24, r24
     4f0:	99 0b       	sbc	r25, r25
     4f2:	f9 d2       	rcall	.+1522   	; 0xae6 <__floatsisf>
     4f4:	f7 01       	movw	r30, r14
			steps.speed = SetSpeed((int)GetNumberAfterCharacter(readDataChar, 'f'));
			return steps;
		default:
			return steps;
	}
	steps.x = (int)GetNumberAfterCharacter(readDataChar, 'x');
     4f6:	64 87       	std	Z+12, r22	; 0x0c
     4f8:	75 87       	std	Z+13, r23	; 0x0d
     4fa:	86 87       	std	Z+14, r24	; 0x0e
     4fc:	97 87       	std	Z+15, r25	; 0x0f
     4fe:	68 e7       	ldi	r22, 0x78	; 120
     500:	c8 01       	movw	r24, r16
     502:	8e df       	rcall	.-228    	; 0x420 <_Z23GetNumberAfterCharacterPcc>
     504:	bd d2       	rcall	.+1402   	; 0xa80 <__fixsfsi>
     506:	07 2e       	mov	r0, r23
     508:	00 0c       	add	r0, r0
     50a:	88 0b       	sbc	r24, r24
     50c:	99 0b       	sbc	r25, r25
     50e:	eb d2       	rcall	.+1494   	; 0xae6 <__floatsisf>
     510:	f7 01       	movw	r30, r14
	steps.y = (int)GetNumberAfterCharacter(readDataChar, 'y');
     512:	60 83       	st	Z, r22
     514:	71 83       	std	Z+1, r23	; 0x01
     516:	82 83       	std	Z+2, r24	; 0x02
     518:	93 83       	std	Z+3, r25	; 0x03
     51a:	69 e7       	ldi	r22, 0x79	; 121
     51c:	c8 01       	movw	r24, r16
     51e:	80 df       	rcall	.-256    	; 0x420 <_Z23GetNumberAfterCharacterPcc>
     520:	af d2       	rcall	.+1374   	; 0xa80 <__fixsfsi>
     522:	07 2e       	mov	r0, r23
     524:	00 0c       	add	r0, r0
     526:	88 0b       	sbc	r24, r24
     528:	99 0b       	sbc	r25, r25
     52a:	dd d2       	rcall	.+1466   	; 0xae6 <__floatsisf>
	steps.z = (int)GetNumberAfterCharacter(readDataChar, 'z');
     52c:	f7 01       	movw	r30, r14
     52e:	64 83       	std	Z+4, r22	; 0x04
     530:	75 83       	std	Z+5, r23	; 0x05
     532:	86 83       	std	Z+6, r24	; 0x06
     534:	97 83       	std	Z+7, r25	; 0x07
     536:	6a e7       	ldi	r22, 0x7A	; 122
     538:	c8 01       	movw	r24, r16
     53a:	72 df       	rcall	.-284    	; 0x420 <_Z23GetNumberAfterCharacterPcc>
     53c:	a1 d2       	rcall	.+1346   	; 0xa80 <__fixsfsi>
     53e:	07 2e       	mov	r0, r23
     540:	00 0c       	add	r0, r0
     542:	88 0b       	sbc	r24, r24
     544:	99 0b       	sbc	r25, r25

	return steps;
     546:	cf d2       	rcall	.+1438   	; 0xae6 <__floatsisf>
			break;
		case 1:
			steps.speed = SetSpeed(G01SPEED);
			break;
		case 99:
			steps.speed = SetSpeed((int)GetNumberAfterCharacter(readDataChar, 'f'));
     548:	f7 01       	movw	r30, r14
     54a:	60 87       	std	Z+8, r22	; 0x08
     54c:	71 87       	std	Z+9, r23	; 0x09
     54e:	82 87       	std	Z+10, r24	; 0x0a
     550:	93 87       	std	Z+11, r25	; 0x0b
     552:	10 c0       	rjmp	.+32     	; 0x574 <_Z11DecodeFrame6String+0x102>
     554:	66 e6       	ldi	r22, 0x66	; 102
     556:	c8 01       	movw	r24, r16
     558:	63 df       	rcall	.-314    	; 0x420 <_Z23GetNumberAfterCharacterPcc>
     55a:	92 d2       	rcall	.+1316   	; 0xa80 <__fixsfsi>
     55c:	cb 01       	movw	r24, r22
     55e:	f1 d1       	rcall	.+994    	; 0x942 <_Z8SetSpeedi>
     560:	bc 01       	movw	r22, r24
     562:	99 0f       	add	r25, r25
     564:	88 0b       	sbc	r24, r24
     566:	99 0b       	sbc	r25, r25
     568:	be d2       	rcall	.+1404   	; 0xae6 <__floatsisf>
     56a:	f7 01       	movw	r30, r14
     56c:	64 87       	std	Z+12, r22	; 0x0c
     56e:	75 87       	std	Z+13, r23	; 0x0d
	steps.x = (int)GetNumberAfterCharacter(readDataChar, 'x');
	steps.y = (int)GetNumberAfterCharacter(readDataChar, 'y');
	steps.z = (int)GetNumberAfterCharacter(readDataChar, 'z');

	return steps;
}
     570:	86 87       	std	Z+14, r24	; 0x0e
     572:	97 87       	std	Z+15, r25	; 0x0f
     574:	c7 01       	movw	r24, r14
     576:	0f b6       	in	r0, 0x3f	; 63
     578:	f8 94       	cli
     57a:	de be       	out	0x3e, r13	; 62
     57c:	0f be       	out	0x3f, r0	; 63
     57e:	cd be       	out	0x3d, r12	; 61
     580:	df 91       	pop	r29
     582:	cf 91       	pop	r28
     584:	1f 91       	pop	r17
     586:	0f 91       	pop	r16
     588:	ff 90       	pop	r15
     58a:	ef 90       	pop	r14
     58c:	df 90       	pop	r13
     58e:	cf 90       	pop	r12
     590:	08 95       	ret

00000592 <_Z11StepperInitv>:
     592:	21 df       	rcall	.-446    	; 0x3d6 <_Z18LimitSwitchPinInitv>
     594:	61 e0       	ldi	r22, 0x01	; 1
     596:	87 e3       	ldi	r24, 0x37	; 55
     598:	0e 94 10 0b 	call	0x1620	; 0x1620 <pinMode>
     59c:	61 e0       	ldi	r22, 0x01	; 1
     59e:	8d e3       	ldi	r24, 0x3D	; 61
     5a0:	0e 94 10 0b 	call	0x1620	; 0x1620 <pinMode>
     5a4:	61 e0       	ldi	r22, 0x01	; 1
     5a6:	80 e3       	ldi	r24, 0x30	; 48
     5a8:	0e 94 10 0b 	call	0x1620	; 0x1620 <pinMode>
     5ac:	61 e0       	ldi	r22, 0x01	; 1
     5ae:	86 e2       	ldi	r24, 0x26	; 38
     5b0:	0e 94 10 0b 	call	0x1620	; 0x1620 <pinMode>
     5b4:	61 e0       	ldi	r22, 0x01	; 1
     5b6:	88 e3       	ldi	r24, 0x38	; 56
     5b8:	0e 94 10 0b 	call	0x1620	; 0x1620 <pinMode>
     5bc:	61 e0       	ldi	r22, 0x01	; 1
     5be:	8e e3       	ldi	r24, 0x3E	; 62
     5c0:	0e 94 10 0b 	call	0x1620	; 0x1620 <pinMode>
     5c4:	61 e0       	ldi	r22, 0x01	; 1
     5c6:	85 e3       	ldi	r24, 0x35	; 53
     5c8:	0e 94 10 0b 	call	0x1620	; 0x1620 <pinMode>
     5cc:	61 e0       	ldi	r22, 0x01	; 1
     5ce:	81 e3       	ldi	r24, 0x31	; 49
     5d0:	0e 94 10 0b 	call	0x1620	; 0x1620 <pinMode>
     5d4:	61 e0       	ldi	r22, 0x01	; 1
     5d6:	88 e2       	ldi	r24, 0x28	; 40
     5d8:	0e 94 10 0b 	call	0x1620	; 0x1620 <pinMode>
     5dc:	61 e0       	ldi	r22, 0x01	; 1
     5de:	86 e3       	ldi	r24, 0x36	; 54
     5e0:	0e 94 10 0b 	call	0x1620	; 0x1620 <pinMode>
     5e4:	61 e0       	ldi	r22, 0x01	; 1
     5e6:	8c e3       	ldi	r24, 0x3C	; 60
     5e8:	0e 94 10 0b 	call	0x1620	; 0x1620 <pinMode>
     5ec:	61 e0       	ldi	r22, 0x01	; 1
     5ee:	8e e2       	ldi	r24, 0x2E	; 46
     5f0:	0c 94 10 0b 	jmp	0x1620	; 0x1620 <pinMode>

000005f4 <_Z15ReadLimitSwitchPbS_S_>:
     5f4:	ef 92       	push	r14
     5f6:	ff 92       	push	r15
     5f8:	0f 93       	push	r16
     5fa:	1f 93       	push	r17
     5fc:	cf 93       	push	r28
     5fe:	df 93       	push	r29
     600:	7c 01       	movw	r14, r24
     602:	8b 01       	movw	r16, r22
     604:	ea 01       	movw	r28, r20
     606:	82 e0       	ldi	r24, 0x02	; 2
     608:	0e 94 7a 0b 	call	0x16f4	; 0x16f4 <digitalRead>
     60c:	21 e0       	ldi	r18, 0x01	; 1
     60e:	89 2b       	or	r24, r25
     610:	09 f4       	brne	.+2      	; 0x614 <_Z15ReadLimitSwitchPbS_S_+0x20>
     612:	20 e0       	ldi	r18, 0x00	; 0
     614:	f7 01       	movw	r30, r14
     616:	20 83       	st	Z, r18
     618:	8f e0       	ldi	r24, 0x0F	; 15
     61a:	0e 94 7a 0b 	call	0x16f4	; 0x16f4 <digitalRead>
     61e:	21 e0       	ldi	r18, 0x01	; 1
     620:	89 2b       	or	r24, r25
     622:	09 f4       	brne	.+2      	; 0x626 <_Z15ReadLimitSwitchPbS_S_+0x32>
     624:	20 e0       	ldi	r18, 0x00	; 0
     626:	f8 01       	movw	r30, r16
     628:	20 83       	st	Z, r18
     62a:	83 e1       	ldi	r24, 0x13	; 19
     62c:	0e 94 7a 0b 	call	0x16f4	; 0x16f4 <digitalRead>
     630:	21 e0       	ldi	r18, 0x01	; 1
     632:	89 2b       	or	r24, r25
     634:	09 f4       	brne	.+2      	; 0x638 <_Z15ReadLimitSwitchPbS_S_+0x44>
     636:	20 e0       	ldi	r18, 0x00	; 0
     638:	28 83       	st	Y, r18
     63a:	df 91       	pop	r29
     63c:	cf 91       	pop	r28
     63e:	1f 91       	pop	r17
     640:	0f 91       	pop	r16
     642:	ff 90       	pop	r15
     644:	ef 90       	pop	r14
     646:	08 95       	ret

00000648 <_Z17ChangeStepperXDirb>:
     648:	88 23       	and	r24, r24
     64a:	11 f0       	breq	.+4      	; 0x650 <_Z17ChangeStepperXDirb+0x8>
     64c:	61 e0       	ldi	r22, 0x01	; 1
     64e:	01 c0       	rjmp	.+2      	; 0x652 <_Z17ChangeStepperXDirb+0xa>
     650:	60 e0       	ldi	r22, 0x00	; 0
     652:	87 e3       	ldi	r24, 0x37	; 55
     654:	0c 94 4c 0b 	jmp	0x1698	; 0x1698 <digitalWrite>

00000658 <_Z17ChangeStepperYDirb>:
     658:	88 23       	and	r24, r24
     65a:	11 f0       	breq	.+4      	; 0x660 <_Z17ChangeStepperYDirb+0x8>
     65c:	61 e0       	ldi	r22, 0x01	; 1
     65e:	01 c0       	rjmp	.+2      	; 0x662 <_Z17ChangeStepperYDirb+0xa>
     660:	60 e0       	ldi	r22, 0x00	; 0
     662:	8d e3       	ldi	r24, 0x3D	; 61
     664:	0c 94 4c 0b 	jmp	0x1698	; 0x1698 <digitalWrite>

00000668 <_Z17ChangeStepperZDirb>:
     668:	88 23       	and	r24, r24
     66a:	11 f0       	breq	.+4      	; 0x670 <_Z17ChangeStepperZDirb+0x8>
     66c:	61 e0       	ldi	r22, 0x01	; 1
     66e:	01 c0       	rjmp	.+2      	; 0x672 <_Z17ChangeStepperZDirb+0xa>
     670:	60 e0       	ldi	r22, 0x00	; 0
     672:	80 e3       	ldi	r24, 0x30	; 48
     674:	0c 94 4c 0b 	jmp	0x1698	; 0x1698 <digitalWrite>

00000678 <_Z17ChangeSteppersDirP5Steps>:
     678:	cf 92       	push	r12
     67a:	df 92       	push	r13
     67c:	ef 92       	push	r14
     67e:	ff 92       	push	r15
     680:	cf 93       	push	r28
     682:	df 93       	push	r29
     684:	ec 01       	movw	r28, r24
     686:	20 e0       	ldi	r18, 0x00	; 0
     688:	30 e0       	ldi	r19, 0x00	; 0
     68a:	a9 01       	movw	r20, r18
     68c:	68 81       	ld	r22, Y
     68e:	79 81       	ldd	r23, Y+1	; 0x01
     690:	8a 81       	ldd	r24, Y+2	; 0x02
     692:	9b 81       	ldd	r25, Y+3	; 0x03
     694:	b4 d2       	rcall	.+1384   	; 0xbfe <__gesf2>
     696:	18 16       	cp	r1, r24
     698:	1c f4       	brge	.+6      	; 0x6a0 <_Z17ChangeSteppersDirP5Steps+0x28>
     69a:	80 e0       	ldi	r24, 0x00	; 0
     69c:	d5 df       	rcall	.-86     	; 0x648 <_Z17ChangeStepperXDirb>
     69e:	17 c0       	rjmp	.+46     	; 0x6ce <_Z17ChangeSteppersDirP5Steps+0x56>
     6a0:	61 e0       	ldi	r22, 0x01	; 1
     6a2:	87 e3       	ldi	r24, 0x37	; 55
     6a4:	f9 d7       	rcall	.+4082   	; 0x1698 <digitalWrite>
     6a6:	c8 80       	ld	r12, Y
     6a8:	d9 80       	ldd	r13, Y+1	; 0x01
     6aa:	ea 80       	ldd	r14, Y+2	; 0x02
     6ac:	fb 80       	ldd	r15, Y+3	; 0x03
     6ae:	20 e0       	ldi	r18, 0x00	; 0
     6b0:	30 e0       	ldi	r19, 0x00	; 0
     6b2:	a9 01       	movw	r20, r18
     6b4:	c7 01       	movw	r24, r14
     6b6:	b6 01       	movw	r22, r12
     6b8:	a2 d2       	rcall	.+1348   	; 0xbfe <__gesf2>
     6ba:	18 16       	cp	r1, r24
     6bc:	24 f0       	brlt	.+8      	; 0x6c6 <_Z17ChangeSteppersDirP5Steps+0x4e>
     6be:	f7 fa       	bst	r15, 7
     6c0:	f0 94       	com	r15
     6c2:	f7 f8       	bld	r15, 7
     6c4:	f0 94       	com	r15
     6c6:	c8 82       	st	Y, r12
     6c8:	d9 82       	std	Y+1, r13	; 0x01
     6ca:	ea 82       	std	Y+2, r14	; 0x02
     6cc:	fb 82       	std	Y+3, r15	; 0x03
     6ce:	20 e0       	ldi	r18, 0x00	; 0
     6d0:	30 e0       	ldi	r19, 0x00	; 0
     6d2:	a9 01       	movw	r20, r18
     6d4:	6c 81       	ldd	r22, Y+4	; 0x04
     6d6:	7d 81       	ldd	r23, Y+5	; 0x05
     6d8:	8e 81       	ldd	r24, Y+6	; 0x06
     6da:	9f 81       	ldd	r25, Y+7	; 0x07
     6dc:	90 d2       	rcall	.+1312   	; 0xbfe <__gesf2>
     6de:	18 16       	cp	r1, r24
     6e0:	1c f4       	brge	.+6      	; 0x6e8 <_Z17ChangeSteppersDirP5Steps+0x70>
     6e2:	80 e0       	ldi	r24, 0x00	; 0
     6e4:	b9 df       	rcall	.-142    	; 0x658 <_Z17ChangeStepperYDirb>
     6e6:	17 c0       	rjmp	.+46     	; 0x716 <_Z17ChangeSteppersDirP5Steps+0x9e>
     6e8:	61 e0       	ldi	r22, 0x01	; 1
     6ea:	8d e3       	ldi	r24, 0x3D	; 61
     6ec:	d5 d7       	rcall	.+4010   	; 0x1698 <digitalWrite>
     6ee:	cc 80       	ldd	r12, Y+4	; 0x04
     6f0:	dd 80       	ldd	r13, Y+5	; 0x05
     6f2:	ee 80       	ldd	r14, Y+6	; 0x06
     6f4:	ff 80       	ldd	r15, Y+7	; 0x07
     6f6:	20 e0       	ldi	r18, 0x00	; 0
     6f8:	30 e0       	ldi	r19, 0x00	; 0
     6fa:	a9 01       	movw	r20, r18
     6fc:	c7 01       	movw	r24, r14
     6fe:	b6 01       	movw	r22, r12
     700:	7e d2       	rcall	.+1276   	; 0xbfe <__gesf2>
     702:	18 16       	cp	r1, r24
     704:	24 f0       	brlt	.+8      	; 0x70e <_Z17ChangeSteppersDirP5Steps+0x96>
     706:	f7 fa       	bst	r15, 7
     708:	f0 94       	com	r15
     70a:	f7 f8       	bld	r15, 7
     70c:	f0 94       	com	r15
     70e:	cc 82       	std	Y+4, r12	; 0x04
     710:	dd 82       	std	Y+5, r13	; 0x05
     712:	ee 82       	std	Y+6, r14	; 0x06
     714:	ff 82       	std	Y+7, r15	; 0x07
     716:	20 e0       	ldi	r18, 0x00	; 0
     718:	30 e0       	ldi	r19, 0x00	; 0
     71a:	a9 01       	movw	r20, r18
     71c:	68 85       	ldd	r22, Y+8	; 0x08
     71e:	79 85       	ldd	r23, Y+9	; 0x09
     720:	8a 85       	ldd	r24, Y+10	; 0x0a
     722:	9b 85       	ldd	r25, Y+11	; 0x0b
     724:	6c d2       	rcall	.+1240   	; 0xbfe <__gesf2>
     726:	18 16       	cp	r1, r24
     728:	44 f4       	brge	.+16     	; 0x73a <_Z17ChangeSteppersDirP5Steps+0xc2>
     72a:	80 e0       	ldi	r24, 0x00	; 0
     72c:	df 91       	pop	r29
     72e:	cf 91       	pop	r28
     730:	ff 90       	pop	r15
     732:	ef 90       	pop	r14
     734:	df 90       	pop	r13
     736:	cf 90       	pop	r12
     738:	97 cf       	rjmp	.-210    	; 0x668 <_Z17ChangeStepperZDirb>
     73a:	61 e0       	ldi	r22, 0x01	; 1
     73c:	80 e3       	ldi	r24, 0x30	; 48
     73e:	ac d7       	rcall	.+3928   	; 0x1698 <digitalWrite>
     740:	c8 84       	ldd	r12, Y+8	; 0x08
     742:	d9 84       	ldd	r13, Y+9	; 0x09
     744:	ea 84       	ldd	r14, Y+10	; 0x0a
     746:	fb 84       	ldd	r15, Y+11	; 0x0b
     748:	20 e0       	ldi	r18, 0x00	; 0
     74a:	30 e0       	ldi	r19, 0x00	; 0
     74c:	a9 01       	movw	r20, r18
     74e:	c7 01       	movw	r24, r14
     750:	b6 01       	movw	r22, r12
     752:	55 d2       	rcall	.+1194   	; 0xbfe <__gesf2>
     754:	18 16       	cp	r1, r24
     756:	24 f0       	brlt	.+8      	; 0x760 <_Z17ChangeSteppersDirP5Steps+0xe8>
     758:	f7 fa       	bst	r15, 7
     75a:	f0 94       	com	r15
     75c:	f7 f8       	bld	r15, 7
     75e:	f0 94       	com	r15
     760:	c8 86       	std	Y+8, r12	; 0x08
     762:	d9 86       	std	Y+9, r13	; 0x09
     764:	ea 86       	std	Y+10, r14	; 0x0a
     766:	fb 86       	std	Y+11, r15	; 0x0b
     768:	df 91       	pop	r29
     76a:	cf 91       	pop	r28
     76c:	ff 90       	pop	r15
     76e:	ef 90       	pop	r14
     770:	df 90       	pop	r13
     772:	cf 90       	pop	r12
     774:	08 95       	ret

00000776 <_Z11MovementXYZP5Steps>:
     776:	0f 93       	push	r16
     778:	1f 93       	push	r17
     77a:	cf 93       	push	r28
     77c:	df 93       	push	r29
     77e:	00 d0       	rcall	.+0      	; 0x780 <_Z11MovementXYZP5Steps+0xa>
     780:	cd b7       	in	r28, 0x3d	; 61
     782:	de b7       	in	r29, 0x3e	; 62
     784:	8c 01       	movw	r16, r24
     786:	ae 01       	movw	r20, r28
     788:	4f 5f       	subi	r20, 0xFF	; 255
     78a:	5f 4f       	sbci	r21, 0xFF	; 255
     78c:	be 01       	movw	r22, r28
     78e:	6e 5f       	subi	r22, 0xFE	; 254
     790:	7f 4f       	sbci	r23, 0xFF	; 255
     792:	ce 01       	movw	r24, r28
     794:	03 96       	adiw	r24, 0x03	; 3
     796:	2e df       	rcall	.-420    	; 0x5f4 <_Z15ReadLimitSwitchPbS_S_>
     798:	20 e0       	ldi	r18, 0x00	; 0
     79a:	30 e0       	ldi	r19, 0x00	; 0
     79c:	a9 01       	movw	r20, r18
     79e:	f8 01       	movw	r30, r16
     7a0:	60 81       	ld	r22, Z
     7a2:	71 81       	ldd	r23, Z+1	; 0x01
     7a4:	82 81       	ldd	r24, Z+2	; 0x02
     7a6:	93 81       	ldd	r25, Z+3	; 0x03
     7a8:	2a d2       	rcall	.+1108   	; 0xbfe <__gesf2>
     7aa:	18 16       	cp	r1, r24
     7ac:	4c f4       	brge	.+18     	; 0x7c0 <_Z11MovementXYZP5Steps+0x4a>
     7ae:	8b 81       	ldd	r24, Y+3	; 0x03
     7b0:	88 23       	and	r24, r24
     7b2:	09 f4       	brne	.+2      	; 0x7b6 <_Z11MovementXYZP5Steps+0x40>
     7b4:	81 c0       	rjmp	.+258    	; 0x8b8 <_Z11MovementXYZP5Steps+0x142>
     7b6:	87 e3       	ldi	r24, 0x37	; 55
     7b8:	9d d7       	rcall	.+3898   	; 0x16f4 <digitalRead>
     7ba:	89 2b       	or	r24, r25
     7bc:	09 f0       	breq	.+2      	; 0x7c0 <_Z11MovementXYZP5Steps+0x4a>
     7be:	7c c0       	rjmp	.+248    	; 0x8b8 <_Z11MovementXYZP5Steps+0x142>
     7c0:	20 e0       	ldi	r18, 0x00	; 0
     7c2:	30 e0       	ldi	r19, 0x00	; 0
     7c4:	a9 01       	movw	r20, r18
     7c6:	f8 01       	movw	r30, r16
     7c8:	64 81       	ldd	r22, Z+4	; 0x04
     7ca:	75 81       	ldd	r23, Z+5	; 0x05
     7cc:	86 81       	ldd	r24, Z+6	; 0x06
     7ce:	97 81       	ldd	r25, Z+7	; 0x07
     7d0:	16 d2       	rcall	.+1068   	; 0xbfe <__gesf2>
     7d2:	18 16       	cp	r1, r24
     7d4:	4c f4       	brge	.+18     	; 0x7e8 <_Z11MovementXYZP5Steps+0x72>
     7d6:	8a 81       	ldd	r24, Y+2	; 0x02
     7d8:	88 23       	and	r24, r24
     7da:	09 f4       	brne	.+2      	; 0x7de <_Z11MovementXYZP5Steps+0x68>
     7dc:	71 c0       	rjmp	.+226    	; 0x8c0 <_Z11MovementXYZP5Steps+0x14a>
     7de:	8d e3       	ldi	r24, 0x3D	; 61
     7e0:	89 d7       	rcall	.+3858   	; 0x16f4 <digitalRead>
     7e2:	89 2b       	or	r24, r25
     7e4:	09 f0       	breq	.+2      	; 0x7e8 <_Z11MovementXYZP5Steps+0x72>
     7e6:	6c c0       	rjmp	.+216    	; 0x8c0 <_Z11MovementXYZP5Steps+0x14a>
     7e8:	20 e0       	ldi	r18, 0x00	; 0
     7ea:	30 e0       	ldi	r19, 0x00	; 0
     7ec:	a9 01       	movw	r20, r18
     7ee:	f8 01       	movw	r30, r16
     7f0:	60 85       	ldd	r22, Z+8	; 0x08
     7f2:	71 85       	ldd	r23, Z+9	; 0x09
     7f4:	82 85       	ldd	r24, Z+10	; 0x0a
     7f6:	93 85       	ldd	r25, Z+11	; 0x0b
     7f8:	02 d2       	rcall	.+1028   	; 0xbfe <__gesf2>
     7fa:	18 16       	cp	r1, r24
     7fc:	4c f4       	brge	.+18     	; 0x810 <_Z11MovementXYZP5Steps+0x9a>
     7fe:	89 81       	ldd	r24, Y+1	; 0x01
     800:	88 23       	and	r24, r24
     802:	09 f4       	brne	.+2      	; 0x806 <_Z11MovementXYZP5Steps+0x90>
     804:	61 c0       	rjmp	.+194    	; 0x8c8 <_Z11MovementXYZP5Steps+0x152>
     806:	80 e3       	ldi	r24, 0x30	; 48
     808:	75 d7       	rcall	.+3818   	; 0x16f4 <digitalRead>
     80a:	89 2b       	or	r24, r25
     80c:	09 f0       	breq	.+2      	; 0x810 <_Z11MovementXYZP5Steps+0x9a>
     80e:	5c c0       	rjmp	.+184    	; 0x8c8 <_Z11MovementXYZP5Steps+0x152>
     810:	f8 01       	movw	r30, r16
     812:	64 85       	ldd	r22, Z+12	; 0x0c
     814:	75 85       	ldd	r23, Z+13	; 0x0d
     816:	86 85       	ldd	r24, Z+14	; 0x0e
     818:	97 85       	ldd	r25, Z+15	; 0x0f
     81a:	37 d1       	rcall	.+622    	; 0xa8a <__fixunssfsi>
     81c:	cb 01       	movw	r24, r22
     81e:	3e d6       	rcall	.+3196   	; 0x149c <delayMicroseconds>
     820:	20 e0       	ldi	r18, 0x00	; 0
     822:	30 e0       	ldi	r19, 0x00	; 0
     824:	a9 01       	movw	r20, r18
     826:	f8 01       	movw	r30, r16
     828:	60 81       	ld	r22, Z
     82a:	71 81       	ldd	r23, Z+1	; 0x01
     82c:	82 81       	ldd	r24, Z+2	; 0x02
     82e:	93 81       	ldd	r25, Z+3	; 0x03
     830:	e6 d1       	rcall	.+972    	; 0xbfe <__gesf2>
     832:	18 16       	cp	r1, r24
     834:	4c f4       	brge	.+18     	; 0x848 <_Z11MovementXYZP5Steps+0xd2>
     836:	8b 81       	ldd	r24, Y+3	; 0x03
     838:	88 23       	and	r24, r24
     83a:	09 f4       	brne	.+2      	; 0x83e <_Z11MovementXYZP5Steps+0xc8>
     83c:	49 c0       	rjmp	.+146    	; 0x8d0 <_Z11MovementXYZP5Steps+0x15a>
     83e:	87 e3       	ldi	r24, 0x37	; 55
     840:	59 d7       	rcall	.+3762   	; 0x16f4 <digitalRead>
     842:	89 2b       	or	r24, r25
     844:	09 f0       	breq	.+2      	; 0x848 <_Z11MovementXYZP5Steps+0xd2>
     846:	44 c0       	rjmp	.+136    	; 0x8d0 <_Z11MovementXYZP5Steps+0x15a>
     848:	20 e0       	ldi	r18, 0x00	; 0
     84a:	30 e0       	ldi	r19, 0x00	; 0
     84c:	a9 01       	movw	r20, r18
     84e:	f8 01       	movw	r30, r16
     850:	64 81       	ldd	r22, Z+4	; 0x04
     852:	75 81       	ldd	r23, Z+5	; 0x05
     854:	86 81       	ldd	r24, Z+6	; 0x06
     856:	97 81       	ldd	r25, Z+7	; 0x07
     858:	d2 d1       	rcall	.+932    	; 0xbfe <__gesf2>
     85a:	18 16       	cp	r1, r24
     85c:	4c f4       	brge	.+18     	; 0x870 <_Z11MovementXYZP5Steps+0xfa>
     85e:	8a 81       	ldd	r24, Y+2	; 0x02
     860:	88 23       	and	r24, r24
     862:	09 f4       	brne	.+2      	; 0x866 <_Z11MovementXYZP5Steps+0xf0>
     864:	48 c0       	rjmp	.+144    	; 0x8f6 <_Z11MovementXYZP5Steps+0x180>
     866:	8d e3       	ldi	r24, 0x3D	; 61
     868:	45 d7       	rcall	.+3722   	; 0x16f4 <digitalRead>
     86a:	89 2b       	or	r24, r25
     86c:	09 f0       	breq	.+2      	; 0x870 <_Z11MovementXYZP5Steps+0xfa>
     86e:	43 c0       	rjmp	.+134    	; 0x8f6 <_Z11MovementXYZP5Steps+0x180>
     870:	20 e0       	ldi	r18, 0x00	; 0
     872:	30 e0       	ldi	r19, 0x00	; 0
     874:	a9 01       	movw	r20, r18
     876:	f8 01       	movw	r30, r16
     878:	60 85       	ldd	r22, Z+8	; 0x08
     87a:	71 85       	ldd	r23, Z+9	; 0x09
     87c:	82 85       	ldd	r24, Z+10	; 0x0a
     87e:	93 85       	ldd	r25, Z+11	; 0x0b
     880:	be d1       	rcall	.+892    	; 0xbfe <__gesf2>
     882:	18 16       	cp	r1, r24
     884:	4c f4       	brge	.+18     	; 0x898 <_Z11MovementXYZP5Steps+0x122>
     886:	89 81       	ldd	r24, Y+1	; 0x01
     888:	88 23       	and	r24, r24
     88a:	09 f4       	brne	.+2      	; 0x88e <_Z11MovementXYZP5Steps+0x118>
     88c:	47 c0       	rjmp	.+142    	; 0x91c <_Z11MovementXYZP5Steps+0x1a6>
     88e:	80 e3       	ldi	r24, 0x30	; 48
     890:	31 d7       	rcall	.+3682   	; 0x16f4 <digitalRead>
     892:	89 2b       	or	r24, r25
     894:	09 f0       	breq	.+2      	; 0x898 <_Z11MovementXYZP5Steps+0x122>
     896:	42 c0       	rjmp	.+132    	; 0x91c <_Z11MovementXYZP5Steps+0x1a6>
     898:	f8 01       	movw	r30, r16
     89a:	64 85       	ldd	r22, Z+12	; 0x0c
     89c:	75 85       	ldd	r23, Z+13	; 0x0d
     89e:	86 85       	ldd	r24, Z+14	; 0x0e
     8a0:	97 85       	ldd	r25, Z+15	; 0x0f
     8a2:	f3 d0       	rcall	.+486    	; 0xa8a <__fixunssfsi>
     8a4:	cb 01       	movw	r24, r22
     8a6:	fa d5       	rcall	.+3060   	; 0x149c <delayMicroseconds>
     8a8:	0f 90       	pop	r0
     8aa:	0f 90       	pop	r0
     8ac:	0f 90       	pop	r0
     8ae:	df 91       	pop	r29
     8b0:	cf 91       	pop	r28
     8b2:	1f 91       	pop	r17
     8b4:	0f 91       	pop	r16
     8b6:	08 95       	ret
     8b8:	60 e0       	ldi	r22, 0x00	; 0
     8ba:	86 e3       	ldi	r24, 0x36	; 54
     8bc:	ed d6       	rcall	.+3546   	; 0x1698 <digitalWrite>
     8be:	80 cf       	rjmp	.-256    	; 0x7c0 <_Z11MovementXYZP5Steps+0x4a>
     8c0:	60 e0       	ldi	r22, 0x00	; 0
     8c2:	8c e3       	ldi	r24, 0x3C	; 60
     8c4:	e9 d6       	rcall	.+3538   	; 0x1698 <digitalWrite>
     8c6:	90 cf       	rjmp	.-224    	; 0x7e8 <_Z11MovementXYZP5Steps+0x72>
     8c8:	60 e0       	ldi	r22, 0x00	; 0
     8ca:	8e e2       	ldi	r24, 0x2E	; 46
     8cc:	e5 d6       	rcall	.+3530   	; 0x1698 <digitalWrite>
     8ce:	a0 cf       	rjmp	.-192    	; 0x810 <_Z11MovementXYZP5Steps+0x9a>
     8d0:	61 e0       	ldi	r22, 0x01	; 1
     8d2:	86 e3       	ldi	r24, 0x36	; 54
     8d4:	e1 d6       	rcall	.+3522   	; 0x1698 <digitalWrite>
     8d6:	20 e0       	ldi	r18, 0x00	; 0
     8d8:	30 e0       	ldi	r19, 0x00	; 0
     8da:	40 e8       	ldi	r20, 0x80	; 128
     8dc:	5f e3       	ldi	r21, 0x3F	; 63
     8de:	f8 01       	movw	r30, r16
     8e0:	60 81       	ld	r22, Z
     8e2:	71 81       	ldd	r23, Z+1	; 0x01
     8e4:	82 81       	ldd	r24, Z+2	; 0x02
     8e6:	93 81       	ldd	r25, Z+3	; 0x03
     8e8:	66 d0       	rcall	.+204    	; 0x9b6 <__subsf3>
     8ea:	f8 01       	movw	r30, r16
     8ec:	60 83       	st	Z, r22
     8ee:	71 83       	std	Z+1, r23	; 0x01
     8f0:	82 83       	std	Z+2, r24	; 0x02
     8f2:	93 83       	std	Z+3, r25	; 0x03
     8f4:	a9 cf       	rjmp	.-174    	; 0x848 <_Z11MovementXYZP5Steps+0xd2>
     8f6:	61 e0       	ldi	r22, 0x01	; 1
     8f8:	8c e3       	ldi	r24, 0x3C	; 60
     8fa:	ce d6       	rcall	.+3484   	; 0x1698 <digitalWrite>
     8fc:	20 e0       	ldi	r18, 0x00	; 0
     8fe:	30 e0       	ldi	r19, 0x00	; 0
     900:	40 e8       	ldi	r20, 0x80	; 128
     902:	5f e3       	ldi	r21, 0x3F	; 63
     904:	f8 01       	movw	r30, r16
     906:	64 81       	ldd	r22, Z+4	; 0x04
     908:	75 81       	ldd	r23, Z+5	; 0x05
     90a:	86 81       	ldd	r24, Z+6	; 0x06
     90c:	97 81       	ldd	r25, Z+7	; 0x07
     90e:	53 d0       	rcall	.+166    	; 0x9b6 <__subsf3>
     910:	f8 01       	movw	r30, r16
     912:	64 83       	std	Z+4, r22	; 0x04
     914:	75 83       	std	Z+5, r23	; 0x05
     916:	86 83       	std	Z+6, r24	; 0x06
     918:	97 83       	std	Z+7, r25	; 0x07
     91a:	aa cf       	rjmp	.-172    	; 0x870 <_Z11MovementXYZP5Steps+0xfa>
     91c:	61 e0       	ldi	r22, 0x01	; 1
     91e:	8e e2       	ldi	r24, 0x2E	; 46
     920:	bb d6       	rcall	.+3446   	; 0x1698 <digitalWrite>
     922:	20 e0       	ldi	r18, 0x00	; 0
     924:	30 e0       	ldi	r19, 0x00	; 0
     926:	40 e8       	ldi	r20, 0x80	; 128
     928:	5f e3       	ldi	r21, 0x3F	; 63
     92a:	f8 01       	movw	r30, r16
     92c:	60 85       	ldd	r22, Z+8	; 0x08
     92e:	71 85       	ldd	r23, Z+9	; 0x09
     930:	82 85       	ldd	r24, Z+10	; 0x0a
     932:	93 85       	ldd	r25, Z+11	; 0x0b
     934:	40 d0       	rcall	.+128    	; 0x9b6 <__subsf3>
     936:	f8 01       	movw	r30, r16
     938:	60 87       	std	Z+8, r22	; 0x08
     93a:	71 87       	std	Z+9, r23	; 0x09
     93c:	82 87       	std	Z+10, r24	; 0x0a
     93e:	93 87       	std	Z+11, r25	; 0x0b
     940:	ab cf       	rjmp	.-170    	; 0x898 <_Z11MovementXYZP5Steps+0x122>

00000942 <_Z8SetSpeedi>:
     942:	af 92       	push	r10
     944:	bf 92       	push	r11
     946:	cf 92       	push	r12
     948:	df 92       	push	r13
     94a:	ef 92       	push	r14
     94c:	ff 92       	push	r15
     94e:	0f 93       	push	r16
     950:	1f 93       	push	r17
     952:	8b 30       	cpi	r24, 0x0B	; 11
     954:	91 05       	cpc	r25, r1
     956:	14 f0       	brlt	.+4      	; 0x95c <_Z8SetSpeedi+0x1a>
     958:	8a e0       	ldi	r24, 0x0A	; 10
     95a:	90 e0       	ldi	r25, 0x00	; 0
     95c:	bc 01       	movw	r22, r24
     95e:	97 ff       	sbrs	r25, 7
     960:	02 c0       	rjmp	.+4      	; 0x966 <_Z8SetSpeedi+0x24>
     962:	60 e0       	ldi	r22, 0x00	; 0
     964:	70 e0       	ldi	r23, 0x00	; 0
     966:	07 2e       	mov	r0, r23
     968:	00 0c       	add	r0, r0
     96a:	88 0b       	sbc	r24, r24
     96c:	99 0b       	sbc	r25, r25
     96e:	1f 92       	push	r1
     970:	1f 92       	push	r1
     972:	22 e0       	ldi	r18, 0x02	; 2
     974:	2f 93       	push	r18
     976:	2e ee       	ldi	r18, 0xEE	; 238
     978:	2f 93       	push	r18
     97a:	a1 2c       	mov	r10, r1
     97c:	b1 2c       	mov	r11, r1
     97e:	65 01       	movw	r12, r10
     980:	1a e0       	ldi	r17, 0x0A	; 10
     982:	e1 2e       	mov	r14, r17
     984:	f1 2c       	mov	r15, r1
     986:	00 e0       	ldi	r16, 0x00	; 0
     988:	10 e0       	ldi	r17, 0x00	; 0
     98a:	20 e0       	ldi	r18, 0x00	; 0
     98c:	30 e0       	ldi	r19, 0x00	; 0
     98e:	a9 01       	movw	r20, r18
     990:	d9 d6       	rcall	.+3506   	; 0x1744 <_Z3maplllll>
     992:	28 ee       	ldi	r18, 0xE8	; 232
     994:	33 e0       	ldi	r19, 0x03	; 3
     996:	c9 01       	movw	r24, r18
     998:	86 1b       	sub	r24, r22
     99a:	97 0b       	sbc	r25, r23
     99c:	0f 90       	pop	r0
     99e:	0f 90       	pop	r0
     9a0:	0f 90       	pop	r0
     9a2:	0f 90       	pop	r0
     9a4:	1f 91       	pop	r17
     9a6:	0f 91       	pop	r16
     9a8:	ff 90       	pop	r15
     9aa:	ef 90       	pop	r14
     9ac:	df 90       	pop	r13
     9ae:	cf 90       	pop	r12
     9b0:	bf 90       	pop	r11
     9b2:	af 90       	pop	r10
     9b4:	08 95       	ret

000009b6 <__subsf3>:
     9b6:	50 58       	subi	r21, 0x80	; 128

000009b8 <__addsf3>:
     9b8:	bb 27       	eor	r27, r27
     9ba:	aa 27       	eor	r26, r26
     9bc:	0e d0       	rcall	.+28     	; 0x9da <__addsf3x>
     9be:	e5 c0       	rjmp	.+458    	; 0xb8a <__fp_round>
     9c0:	d6 d0       	rcall	.+428    	; 0xb6e <__fp_pscA>
     9c2:	30 f0       	brcs	.+12     	; 0x9d0 <__addsf3+0x18>
     9c4:	db d0       	rcall	.+438    	; 0xb7c <__fp_pscB>
     9c6:	20 f0       	brcs	.+8      	; 0x9d0 <__addsf3+0x18>
     9c8:	31 f4       	brne	.+12     	; 0x9d6 <__addsf3+0x1e>
     9ca:	9f 3f       	cpi	r25, 0xFF	; 255
     9cc:	11 f4       	brne	.+4      	; 0x9d2 <__addsf3+0x1a>
     9ce:	1e f4       	brtc	.+6      	; 0x9d6 <__addsf3+0x1e>
     9d0:	cb c0       	rjmp	.+406    	; 0xb68 <__fp_nan>
     9d2:	0e f4       	brtc	.+2      	; 0x9d6 <__addsf3+0x1e>
     9d4:	e0 95       	com	r30
     9d6:	e7 fb       	bst	r30, 7
     9d8:	c1 c0       	rjmp	.+386    	; 0xb5c <__fp_inf>

000009da <__addsf3x>:
     9da:	e9 2f       	mov	r30, r25
     9dc:	e7 d0       	rcall	.+462    	; 0xbac <__fp_split3>
     9de:	80 f3       	brcs	.-32     	; 0x9c0 <__addsf3+0x8>
     9e0:	ba 17       	cp	r27, r26
     9e2:	62 07       	cpc	r22, r18
     9e4:	73 07       	cpc	r23, r19
     9e6:	84 07       	cpc	r24, r20
     9e8:	95 07       	cpc	r25, r21
     9ea:	18 f0       	brcs	.+6      	; 0x9f2 <__addsf3x+0x18>
     9ec:	71 f4       	brne	.+28     	; 0xa0a <__addsf3x+0x30>
     9ee:	9e f5       	brtc	.+102    	; 0xa56 <__addsf3x+0x7c>
     9f0:	ff c0       	rjmp	.+510    	; 0xbf0 <__fp_zero>
     9f2:	0e f4       	brtc	.+2      	; 0x9f6 <__addsf3x+0x1c>
     9f4:	e0 95       	com	r30
     9f6:	0b 2e       	mov	r0, r27
     9f8:	ba 2f       	mov	r27, r26
     9fa:	a0 2d       	mov	r26, r0
     9fc:	0b 01       	movw	r0, r22
     9fe:	b9 01       	movw	r22, r18
     a00:	90 01       	movw	r18, r0
     a02:	0c 01       	movw	r0, r24
     a04:	ca 01       	movw	r24, r20
     a06:	a0 01       	movw	r20, r0
     a08:	11 24       	eor	r1, r1
     a0a:	ff 27       	eor	r31, r31
     a0c:	59 1b       	sub	r21, r25
     a0e:	99 f0       	breq	.+38     	; 0xa36 <__addsf3x+0x5c>
     a10:	59 3f       	cpi	r21, 0xF9	; 249
     a12:	50 f4       	brcc	.+20     	; 0xa28 <__addsf3x+0x4e>
     a14:	50 3e       	cpi	r21, 0xE0	; 224
     a16:	68 f1       	brcs	.+90     	; 0xa72 <__addsf3x+0x98>
     a18:	1a 16       	cp	r1, r26
     a1a:	f0 40       	sbci	r31, 0x00	; 0
     a1c:	a2 2f       	mov	r26, r18
     a1e:	23 2f       	mov	r18, r19
     a20:	34 2f       	mov	r19, r20
     a22:	44 27       	eor	r20, r20
     a24:	58 5f       	subi	r21, 0xF8	; 248
     a26:	f3 cf       	rjmp	.-26     	; 0xa0e <__addsf3x+0x34>
     a28:	46 95       	lsr	r20
     a2a:	37 95       	ror	r19
     a2c:	27 95       	ror	r18
     a2e:	a7 95       	ror	r26
     a30:	f0 40       	sbci	r31, 0x00	; 0
     a32:	53 95       	inc	r21
     a34:	c9 f7       	brne	.-14     	; 0xa28 <__addsf3x+0x4e>
     a36:	7e f4       	brtc	.+30     	; 0xa56 <__addsf3x+0x7c>
     a38:	1f 16       	cp	r1, r31
     a3a:	ba 0b       	sbc	r27, r26
     a3c:	62 0b       	sbc	r22, r18
     a3e:	73 0b       	sbc	r23, r19
     a40:	84 0b       	sbc	r24, r20
     a42:	ba f0       	brmi	.+46     	; 0xa72 <__addsf3x+0x98>
     a44:	91 50       	subi	r25, 0x01	; 1
     a46:	a1 f0       	breq	.+40     	; 0xa70 <__addsf3x+0x96>
     a48:	ff 0f       	add	r31, r31
     a4a:	bb 1f       	adc	r27, r27
     a4c:	66 1f       	adc	r22, r22
     a4e:	77 1f       	adc	r23, r23
     a50:	88 1f       	adc	r24, r24
     a52:	c2 f7       	brpl	.-16     	; 0xa44 <__addsf3x+0x6a>
     a54:	0e c0       	rjmp	.+28     	; 0xa72 <__addsf3x+0x98>
     a56:	ba 0f       	add	r27, r26
     a58:	62 1f       	adc	r22, r18
     a5a:	73 1f       	adc	r23, r19
     a5c:	84 1f       	adc	r24, r20
     a5e:	48 f4       	brcc	.+18     	; 0xa72 <__addsf3x+0x98>
     a60:	87 95       	ror	r24
     a62:	77 95       	ror	r23
     a64:	67 95       	ror	r22
     a66:	b7 95       	ror	r27
     a68:	f7 95       	ror	r31
     a6a:	9e 3f       	cpi	r25, 0xFE	; 254
     a6c:	08 f0       	brcs	.+2      	; 0xa70 <__addsf3x+0x96>
     a6e:	b3 cf       	rjmp	.-154    	; 0x9d6 <__addsf3+0x1e>
     a70:	93 95       	inc	r25
     a72:	88 0f       	add	r24, r24
     a74:	08 f0       	brcs	.+2      	; 0xa78 <__addsf3x+0x9e>
     a76:	99 27       	eor	r25, r25
     a78:	ee 0f       	add	r30, r30
     a7a:	97 95       	ror	r25
     a7c:	87 95       	ror	r24
     a7e:	08 95       	ret

00000a80 <__fixsfsi>:
     a80:	04 d0       	rcall	.+8      	; 0xa8a <__fixunssfsi>
     a82:	68 94       	set
     a84:	b1 11       	cpse	r27, r1
     a86:	b5 c0       	rjmp	.+362    	; 0xbf2 <__fp_szero>
     a88:	08 95       	ret

00000a8a <__fixunssfsi>:
     a8a:	98 d0       	rcall	.+304    	; 0xbbc <__fp_splitA>
     a8c:	88 f0       	brcs	.+34     	; 0xab0 <__fixunssfsi+0x26>
     a8e:	9f 57       	subi	r25, 0x7F	; 127
     a90:	90 f0       	brcs	.+36     	; 0xab6 <__fixunssfsi+0x2c>
     a92:	b9 2f       	mov	r27, r25
     a94:	99 27       	eor	r25, r25
     a96:	b7 51       	subi	r27, 0x17	; 23
     a98:	a0 f0       	brcs	.+40     	; 0xac2 <__fixunssfsi+0x38>
     a9a:	d1 f0       	breq	.+52     	; 0xad0 <__fixunssfsi+0x46>
     a9c:	66 0f       	add	r22, r22
     a9e:	77 1f       	adc	r23, r23
     aa0:	88 1f       	adc	r24, r24
     aa2:	99 1f       	adc	r25, r25
     aa4:	1a f0       	brmi	.+6      	; 0xaac <__fixunssfsi+0x22>
     aa6:	ba 95       	dec	r27
     aa8:	c9 f7       	brne	.-14     	; 0xa9c <__fixunssfsi+0x12>
     aaa:	12 c0       	rjmp	.+36     	; 0xad0 <__fixunssfsi+0x46>
     aac:	b1 30       	cpi	r27, 0x01	; 1
     aae:	81 f0       	breq	.+32     	; 0xad0 <__fixunssfsi+0x46>
     ab0:	9f d0       	rcall	.+318    	; 0xbf0 <__fp_zero>
     ab2:	b1 e0       	ldi	r27, 0x01	; 1
     ab4:	08 95       	ret
     ab6:	9c c0       	rjmp	.+312    	; 0xbf0 <__fp_zero>
     ab8:	67 2f       	mov	r22, r23
     aba:	78 2f       	mov	r23, r24
     abc:	88 27       	eor	r24, r24
     abe:	b8 5f       	subi	r27, 0xF8	; 248
     ac0:	39 f0       	breq	.+14     	; 0xad0 <__fixunssfsi+0x46>
     ac2:	b9 3f       	cpi	r27, 0xF9	; 249
     ac4:	cc f3       	brlt	.-14     	; 0xab8 <__fixunssfsi+0x2e>
     ac6:	86 95       	lsr	r24
     ac8:	77 95       	ror	r23
     aca:	67 95       	ror	r22
     acc:	b3 95       	inc	r27
     ace:	d9 f7       	brne	.-10     	; 0xac6 <__fixunssfsi+0x3c>
     ad0:	3e f4       	brtc	.+14     	; 0xae0 <__fixunssfsi+0x56>
     ad2:	90 95       	com	r25
     ad4:	80 95       	com	r24
     ad6:	70 95       	com	r23
     ad8:	61 95       	neg	r22
     ada:	7f 4f       	sbci	r23, 0xFF	; 255
     adc:	8f 4f       	sbci	r24, 0xFF	; 255
     ade:	9f 4f       	sbci	r25, 0xFF	; 255
     ae0:	08 95       	ret

00000ae2 <__floatunsisf>:
     ae2:	e8 94       	clt
     ae4:	09 c0       	rjmp	.+18     	; 0xaf8 <__floatsisf+0x12>

00000ae6 <__floatsisf>:
     ae6:	97 fb       	bst	r25, 7
     ae8:	3e f4       	brtc	.+14     	; 0xaf8 <__floatsisf+0x12>
     aea:	90 95       	com	r25
     aec:	80 95       	com	r24
     aee:	70 95       	com	r23
     af0:	61 95       	neg	r22
     af2:	7f 4f       	sbci	r23, 0xFF	; 255
     af4:	8f 4f       	sbci	r24, 0xFF	; 255
     af6:	9f 4f       	sbci	r25, 0xFF	; 255
     af8:	99 23       	and	r25, r25
     afa:	a9 f0       	breq	.+42     	; 0xb26 <__floatsisf+0x40>
     afc:	f9 2f       	mov	r31, r25
     afe:	96 e9       	ldi	r25, 0x96	; 150
     b00:	bb 27       	eor	r27, r27
     b02:	93 95       	inc	r25
     b04:	f6 95       	lsr	r31
     b06:	87 95       	ror	r24
     b08:	77 95       	ror	r23
     b0a:	67 95       	ror	r22
     b0c:	b7 95       	ror	r27
     b0e:	f1 11       	cpse	r31, r1
     b10:	f8 cf       	rjmp	.-16     	; 0xb02 <__floatsisf+0x1c>
     b12:	fa f4       	brpl	.+62     	; 0xb52 <__floatsisf+0x6c>
     b14:	bb 0f       	add	r27, r27
     b16:	11 f4       	brne	.+4      	; 0xb1c <__floatsisf+0x36>
     b18:	60 ff       	sbrs	r22, 0
     b1a:	1b c0       	rjmp	.+54     	; 0xb52 <__floatsisf+0x6c>
     b1c:	6f 5f       	subi	r22, 0xFF	; 255
     b1e:	7f 4f       	sbci	r23, 0xFF	; 255
     b20:	8f 4f       	sbci	r24, 0xFF	; 255
     b22:	9f 4f       	sbci	r25, 0xFF	; 255
     b24:	16 c0       	rjmp	.+44     	; 0xb52 <__floatsisf+0x6c>
     b26:	88 23       	and	r24, r24
     b28:	11 f0       	breq	.+4      	; 0xb2e <__floatsisf+0x48>
     b2a:	96 e9       	ldi	r25, 0x96	; 150
     b2c:	11 c0       	rjmp	.+34     	; 0xb50 <__floatsisf+0x6a>
     b2e:	77 23       	and	r23, r23
     b30:	21 f0       	breq	.+8      	; 0xb3a <__floatsisf+0x54>
     b32:	9e e8       	ldi	r25, 0x8E	; 142
     b34:	87 2f       	mov	r24, r23
     b36:	76 2f       	mov	r23, r22
     b38:	05 c0       	rjmp	.+10     	; 0xb44 <__floatsisf+0x5e>
     b3a:	66 23       	and	r22, r22
     b3c:	71 f0       	breq	.+28     	; 0xb5a <__floatsisf+0x74>
     b3e:	96 e8       	ldi	r25, 0x86	; 134
     b40:	86 2f       	mov	r24, r22
     b42:	70 e0       	ldi	r23, 0x00	; 0
     b44:	60 e0       	ldi	r22, 0x00	; 0
     b46:	2a f0       	brmi	.+10     	; 0xb52 <__floatsisf+0x6c>
     b48:	9a 95       	dec	r25
     b4a:	66 0f       	add	r22, r22
     b4c:	77 1f       	adc	r23, r23
     b4e:	88 1f       	adc	r24, r24
     b50:	da f7       	brpl	.-10     	; 0xb48 <__floatsisf+0x62>
     b52:	88 0f       	add	r24, r24
     b54:	96 95       	lsr	r25
     b56:	87 95       	ror	r24
     b58:	97 f9       	bld	r25, 7
     b5a:	08 95       	ret

00000b5c <__fp_inf>:
     b5c:	97 f9       	bld	r25, 7
     b5e:	9f 67       	ori	r25, 0x7F	; 127
     b60:	80 e8       	ldi	r24, 0x80	; 128
     b62:	70 e0       	ldi	r23, 0x00	; 0
     b64:	60 e0       	ldi	r22, 0x00	; 0
     b66:	08 95       	ret

00000b68 <__fp_nan>:
     b68:	9f ef       	ldi	r25, 0xFF	; 255
     b6a:	80 ec       	ldi	r24, 0xC0	; 192
     b6c:	08 95       	ret

00000b6e <__fp_pscA>:
     b6e:	00 24       	eor	r0, r0
     b70:	0a 94       	dec	r0
     b72:	16 16       	cp	r1, r22
     b74:	17 06       	cpc	r1, r23
     b76:	18 06       	cpc	r1, r24
     b78:	09 06       	cpc	r0, r25
     b7a:	08 95       	ret

00000b7c <__fp_pscB>:
     b7c:	00 24       	eor	r0, r0
     b7e:	0a 94       	dec	r0
     b80:	12 16       	cp	r1, r18
     b82:	13 06       	cpc	r1, r19
     b84:	14 06       	cpc	r1, r20
     b86:	05 06       	cpc	r0, r21
     b88:	08 95       	ret

00000b8a <__fp_round>:
     b8a:	09 2e       	mov	r0, r25
     b8c:	03 94       	inc	r0
     b8e:	00 0c       	add	r0, r0
     b90:	11 f4       	brne	.+4      	; 0xb96 <__fp_round+0xc>
     b92:	88 23       	and	r24, r24
     b94:	52 f0       	brmi	.+20     	; 0xbaa <__fp_round+0x20>
     b96:	bb 0f       	add	r27, r27
     b98:	40 f4       	brcc	.+16     	; 0xbaa <__fp_round+0x20>
     b9a:	bf 2b       	or	r27, r31
     b9c:	11 f4       	brne	.+4      	; 0xba2 <__fp_round+0x18>
     b9e:	60 ff       	sbrs	r22, 0
     ba0:	04 c0       	rjmp	.+8      	; 0xbaa <__fp_round+0x20>
     ba2:	6f 5f       	subi	r22, 0xFF	; 255
     ba4:	7f 4f       	sbci	r23, 0xFF	; 255
     ba6:	8f 4f       	sbci	r24, 0xFF	; 255
     ba8:	9f 4f       	sbci	r25, 0xFF	; 255
     baa:	08 95       	ret

00000bac <__fp_split3>:
     bac:	57 fd       	sbrc	r21, 7
     bae:	90 58       	subi	r25, 0x80	; 128
     bb0:	44 0f       	add	r20, r20
     bb2:	55 1f       	adc	r21, r21
     bb4:	59 f0       	breq	.+22     	; 0xbcc <__fp_splitA+0x10>
     bb6:	5f 3f       	cpi	r21, 0xFF	; 255
     bb8:	71 f0       	breq	.+28     	; 0xbd6 <__fp_splitA+0x1a>
     bba:	47 95       	ror	r20

00000bbc <__fp_splitA>:
     bbc:	88 0f       	add	r24, r24
     bbe:	97 fb       	bst	r25, 7
     bc0:	99 1f       	adc	r25, r25
     bc2:	61 f0       	breq	.+24     	; 0xbdc <__fp_splitA+0x20>
     bc4:	9f 3f       	cpi	r25, 0xFF	; 255
     bc6:	79 f0       	breq	.+30     	; 0xbe6 <__fp_splitA+0x2a>
     bc8:	87 95       	ror	r24
     bca:	08 95       	ret
     bcc:	12 16       	cp	r1, r18
     bce:	13 06       	cpc	r1, r19
     bd0:	14 06       	cpc	r1, r20
     bd2:	55 1f       	adc	r21, r21
     bd4:	f2 cf       	rjmp	.-28     	; 0xbba <__fp_split3+0xe>
     bd6:	46 95       	lsr	r20
     bd8:	f1 df       	rcall	.-30     	; 0xbbc <__fp_splitA>
     bda:	08 c0       	rjmp	.+16     	; 0xbec <__fp_splitA+0x30>
     bdc:	16 16       	cp	r1, r22
     bde:	17 06       	cpc	r1, r23
     be0:	18 06       	cpc	r1, r24
     be2:	99 1f       	adc	r25, r25
     be4:	f1 cf       	rjmp	.-30     	; 0xbc8 <__fp_splitA+0xc>
     be6:	86 95       	lsr	r24
     be8:	71 05       	cpc	r23, r1
     bea:	61 05       	cpc	r22, r1
     bec:	08 94       	sec
     bee:	08 95       	ret

00000bf0 <__fp_zero>:
     bf0:	e8 94       	clt

00000bf2 <__fp_szero>:
     bf2:	bb 27       	eor	r27, r27
     bf4:	66 27       	eor	r22, r22
     bf6:	77 27       	eor	r23, r23
     bf8:	cb 01       	movw	r24, r22
     bfa:	97 f9       	bld	r25, 7
     bfc:	08 95       	ret

00000bfe <__gesf2>:
     bfe:	03 d0       	rcall	.+6      	; 0xc06 <__fp_cmp>
     c00:	08 f4       	brcc	.+2      	; 0xc04 <__gesf2+0x6>
     c02:	8f ef       	ldi	r24, 0xFF	; 255
     c04:	08 95       	ret

00000c06 <__fp_cmp>:
     c06:	99 0f       	add	r25, r25
     c08:	00 08       	sbc	r0, r0
     c0a:	55 0f       	add	r21, r21
     c0c:	aa 0b       	sbc	r26, r26
     c0e:	e0 e8       	ldi	r30, 0x80	; 128
     c10:	fe ef       	ldi	r31, 0xFE	; 254
     c12:	16 16       	cp	r1, r22
     c14:	17 06       	cpc	r1, r23
     c16:	e8 07       	cpc	r30, r24
     c18:	f9 07       	cpc	r31, r25
     c1a:	c0 f0       	brcs	.+48     	; 0xc4c <__fp_cmp+0x46>
     c1c:	12 16       	cp	r1, r18
     c1e:	13 06       	cpc	r1, r19
     c20:	e4 07       	cpc	r30, r20
     c22:	f5 07       	cpc	r31, r21
     c24:	98 f0       	brcs	.+38     	; 0xc4c <__fp_cmp+0x46>
     c26:	62 1b       	sub	r22, r18
     c28:	73 0b       	sbc	r23, r19
     c2a:	84 0b       	sbc	r24, r20
     c2c:	95 0b       	sbc	r25, r21
     c2e:	39 f4       	brne	.+14     	; 0xc3e <__fp_cmp+0x38>
     c30:	0a 26       	eor	r0, r26
     c32:	61 f0       	breq	.+24     	; 0xc4c <__fp_cmp+0x46>
     c34:	23 2b       	or	r18, r19
     c36:	24 2b       	or	r18, r20
     c38:	25 2b       	or	r18, r21
     c3a:	21 f4       	brne	.+8      	; 0xc44 <__fp_cmp+0x3e>
     c3c:	08 95       	ret
     c3e:	0a 26       	eor	r0, r26
     c40:	09 f4       	brne	.+2      	; 0xc44 <__fp_cmp+0x3e>
     c42:	a1 40       	sbci	r26, 0x01	; 1
     c44:	a6 95       	lsr	r26
     c46:	8f ef       	ldi	r24, 0xFF	; 255
     c48:	81 1d       	adc	r24, r1
     c4a:	81 1d       	adc	r24, r1
     c4c:	08 95       	ret

00000c4e <_ZN14HardwareSerial9availableEv>:
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
     c4e:	fc 01       	movw	r30, r24
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
     c50:	91 8d       	ldd	r25, Z+25	; 0x19
     c52:	22 8d       	ldd	r18, Z+26	; 0x1a
     c54:	89 2f       	mov	r24, r25
     c56:	90 e0       	ldi	r25, 0x00	; 0
     c58:	80 5c       	subi	r24, 0xC0	; 192
     c5a:	9f 4f       	sbci	r25, 0xFF	; 255
     c5c:	82 1b       	sub	r24, r18
     c5e:	91 09       	sbc	r25, r1
}
     c60:	8f 73       	andi	r24, 0x3F	; 63
     c62:	99 27       	eor	r25, r25
     c64:	08 95       	ret

00000c66 <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
     c66:	fc 01       	movw	r30, r24
  if (_rx_buffer_head == _rx_buffer_tail) {
     c68:	91 8d       	ldd	r25, Z+25	; 0x19
     c6a:	82 8d       	ldd	r24, Z+26	; 0x1a
     c6c:	98 17       	cp	r25, r24
     c6e:	31 f0       	breq	.+12     	; 0xc7c <_ZN14HardwareSerial4peekEv+0x16>
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
     c70:	82 8d       	ldd	r24, Z+26	; 0x1a
     c72:	e8 0f       	add	r30, r24
     c74:	f1 1d       	adc	r31, r1
     c76:	85 8d       	ldd	r24, Z+29	; 0x1d
     c78:	90 e0       	ldi	r25, 0x00	; 0
     c7a:	08 95       	ret
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
     c7c:	8f ef       	ldi	r24, 0xFF	; 255
     c7e:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
     c80:	08 95       	ret

00000c82 <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
     c82:	fc 01       	movw	r30, r24
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
     c84:	91 8d       	ldd	r25, Z+25	; 0x19
     c86:	82 8d       	ldd	r24, Z+26	; 0x1a
     c88:	98 17       	cp	r25, r24
     c8a:	61 f0       	breq	.+24     	; 0xca4 <_ZN14HardwareSerial4readEv+0x22>
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
     c8c:	82 8d       	ldd	r24, Z+26	; 0x1a
     c8e:	df 01       	movw	r26, r30
     c90:	a8 0f       	add	r26, r24
     c92:	b1 1d       	adc	r27, r1
     c94:	5d 96       	adiw	r26, 0x1d	; 29
     c96:	8c 91       	ld	r24, X
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
     c98:	92 8d       	ldd	r25, Z+26	; 0x1a
     c9a:	9f 5f       	subi	r25, 0xFF	; 255
     c9c:	9f 73       	andi	r25, 0x3F	; 63
     c9e:	92 8f       	std	Z+26, r25	; 0x1a
    return c;
     ca0:	90 e0       	ldi	r25, 0x00	; 0
     ca2:	08 95       	ret

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
     ca4:	8f ef       	ldi	r24, 0xFF	; 255
     ca6:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
     ca8:	08 95       	ret

00000caa <_ZN14HardwareSerial17availableForWriteEv>:
{
#if (SERIAL_TX_BUFFER_SIZE>256)
  uint8_t oldSREG = SREG;
  cli();
#endif
  tx_buffer_index_t head = _tx_buffer_head;
     caa:	fc 01       	movw	r30, r24
     cac:	53 8d       	ldd	r21, Z+27	; 0x1b
  tx_buffer_index_t tail = _tx_buffer_tail;
     cae:	44 8d       	ldd	r20, Z+28	; 0x1c
     cb0:	25 2f       	mov	r18, r21
     cb2:	30 e0       	ldi	r19, 0x00	; 0
     cb4:	84 2f       	mov	r24, r20
     cb6:	90 e0       	ldi	r25, 0x00	; 0
#if (SERIAL_TX_BUFFER_SIZE>256)
  SREG = oldSREG;
#endif
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
     cb8:	82 1b       	sub	r24, r18
     cba:	93 0b       	sbc	r25, r19
     cbc:	54 17       	cp	r21, r20
     cbe:	10 f0       	brcs	.+4      	; 0xcc4 <_ZN14HardwareSerial17availableForWriteEv+0x1a>
     cc0:	cf 96       	adiw	r24, 0x3f	; 63
     cc2:	08 95       	ret
  return tail - head - 1;
     cc4:	01 97       	sbiw	r24, 0x01	; 1
}
     cc6:	08 95       	ret

00000cc8 <_Z14serialEventRunv>:
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
     cc8:	8a ee       	ldi	r24, 0xEA	; 234
     cca:	97 e0       	ldi	r25, 0x07	; 7
     ccc:	89 2b       	or	r24, r25
     cce:	39 f0       	breq	.+14     	; 0xcde <_Z14serialEventRunv+0x16>
     cd0:	80 e0       	ldi	r24, 0x00	; 0
     cd2:	90 e0       	ldi	r25, 0x00	; 0
     cd4:	89 2b       	or	r24, r25
     cd6:	19 f0       	breq	.+6      	; 0xcde <_Z14serialEventRunv+0x16>
     cd8:	7d d1       	rcall	.+762    	; 0xfd4 <_Z17Serial0_availablev>
     cda:	81 11       	cpse	r24, r1
#endif
#if defined(HAVE_HWSERIAL1)
  if (Serial1_available && serialEvent1 && Serial1_available()) serialEvent1();
     cdc:	25 c0       	rjmp	.+74     	; 0xd28 <_Z14serialEventRunv+0x60>
     cde:	80 e0       	ldi	r24, 0x00	; 0
     ce0:	90 e0       	ldi	r25, 0x00	; 0
     ce2:	89 2b       	or	r24, r25
     ce4:	41 f0       	breq	.+16     	; 0xcf6 <_Z14serialEventRunv+0x2e>
     ce6:	80 e0       	ldi	r24, 0x00	; 0
     ce8:	90 e0       	ldi	r25, 0x00	; 0
     cea:	89 2b       	or	r24, r25
     cec:	21 f0       	breq	.+8      	; 0xcf6 <_Z14serialEventRunv+0x2e>
     cee:	0e 94 00 00 	call	0	; 0x0 <__vectors>
     cf2:	81 11       	cpse	r24, r1
#endif
#if defined(HAVE_HWSERIAL2)
  if (Serial2_available && serialEvent2 && Serial2_available()) serialEvent2();
     cf4:	1c c0       	rjmp	.+56     	; 0xd2e <_Z14serialEventRunv+0x66>
     cf6:	80 e0       	ldi	r24, 0x00	; 0
     cf8:	90 e0       	ldi	r25, 0x00	; 0
     cfa:	89 2b       	or	r24, r25
     cfc:	41 f0       	breq	.+16     	; 0xd0e <_Z14serialEventRunv+0x46>
     cfe:	80 e0       	ldi	r24, 0x00	; 0
     d00:	90 e0       	ldi	r25, 0x00	; 0
     d02:	89 2b       	or	r24, r25
     d04:	21 f0       	breq	.+8      	; 0xd0e <_Z14serialEventRunv+0x46>
     d06:	0e 94 00 00 	call	0	; 0x0 <__vectors>
     d0a:	81 11       	cpse	r24, r1
#endif
#if defined(HAVE_HWSERIAL3)
  if (Serial3_available && serialEvent3 && Serial3_available()) serialEvent3();
     d0c:	13 c0       	rjmp	.+38     	; 0xd34 <_Z14serialEventRunv+0x6c>
     d0e:	80 e0       	ldi	r24, 0x00	; 0
     d10:	90 e0       	ldi	r25, 0x00	; 0
     d12:	89 2b       	or	r24, r25
     d14:	a1 f0       	breq	.+40     	; 0xd3e <_Z14serialEventRunv+0x76>
     d16:	80 e0       	ldi	r24, 0x00	; 0
     d18:	90 e0       	ldi	r25, 0x00	; 0
     d1a:	89 2b       	or	r24, r25
     d1c:	81 f0       	breq	.+32     	; 0xd3e <_Z14serialEventRunv+0x76>
     d1e:	0e 94 00 00 	call	0	; 0x0 <__vectors>
     d22:	81 11       	cpse	r24, r1
     d24:	0a c0       	rjmp	.+20     	; 0xd3a <_Z14serialEventRunv+0x72>
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
     d26:	08 95       	ret
     d28:	0e 94 00 00 	call	0	; 0x0 <__vectors>
#endif
#if defined(HAVE_HWSERIAL1)
  if (Serial1_available && serialEvent1 && Serial1_available()) serialEvent1();
     d2c:	d8 cf       	rjmp	.-80     	; 0xcde <_Z14serialEventRunv+0x16>
     d2e:	0e 94 00 00 	call	0	; 0x0 <__vectors>
#endif
#if defined(HAVE_HWSERIAL2)
  if (Serial2_available && serialEvent2 && Serial2_available()) serialEvent2();
     d32:	e1 cf       	rjmp	.-62     	; 0xcf6 <_Z14serialEventRunv+0x2e>
     d34:	0e 94 00 00 	call	0	; 0x0 <__vectors>
#endif
#if defined(HAVE_HWSERIAL3)
  if (Serial3_available && serialEvent3 && Serial3_available()) serialEvent3();
     d38:	ea cf       	rjmp	.-44     	; 0xd0e <_Z14serialEventRunv+0x46>
     d3a:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
     d3e:	08 95       	ret

00000d40 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
}

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
     d40:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
     d42:	84 8d       	ldd	r24, Z+28	; 0x1c
     d44:	df 01       	movw	r26, r30
     d46:	a8 0f       	add	r26, r24
     d48:	b1 1d       	adc	r27, r1
     d4a:	a3 5a       	subi	r26, 0xA3	; 163
     d4c:	bf 4f       	sbci	r27, 0xFF	; 255
     d4e:	2c 91       	ld	r18, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
     d50:	84 8d       	ldd	r24, Z+28	; 0x1c
     d52:	90 e0       	ldi	r25, 0x00	; 0
     d54:	01 96       	adiw	r24, 0x01	; 1
     d56:	8f 73       	andi	r24, 0x3F	; 63
     d58:	99 27       	eor	r25, r25
     d5a:	84 8f       	std	Z+28, r24	; 0x1c

  *_udr = c;
     d5c:	a6 89       	ldd	r26, Z+22	; 0x16
     d5e:	b7 89       	ldd	r27, Z+23	; 0x17
     d60:	2c 93       	st	X, r18

  // clear the TXC bit -- "can be cleared by writing a one to its bit
  // location". This makes sure flush() won't return until the bytes
  // actually got written
  sbi(*_ucsra, TXC0);
     d62:	a0 89       	ldd	r26, Z+16	; 0x10
     d64:	b1 89       	ldd	r27, Z+17	; 0x11
     d66:	8c 91       	ld	r24, X
     d68:	80 64       	ori	r24, 0x40	; 64
     d6a:	8c 93       	st	X, r24

  if (_tx_buffer_head == _tx_buffer_tail) {
     d6c:	93 8d       	ldd	r25, Z+27	; 0x1b
     d6e:	84 8d       	ldd	r24, Z+28	; 0x1c
     d70:	98 13       	cpse	r25, r24
     d72:	06 c0       	rjmp	.+12     	; 0xd80 <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x40>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
     d74:	02 88       	ldd	r0, Z+18	; 0x12
     d76:	f3 89       	ldd	r31, Z+19	; 0x13
     d78:	e0 2d       	mov	r30, r0
     d7a:	80 81       	ld	r24, Z
     d7c:	8f 7d       	andi	r24, 0xDF	; 223
     d7e:	80 83       	st	Z, r24
     d80:	08 95       	ret

00000d82 <_ZN14HardwareSerial5writeEh>:
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}

size_t HardwareSerial::write(uint8_t c)
{
     d82:	ef 92       	push	r14
     d84:	ff 92       	push	r15
     d86:	0f 93       	push	r16
     d88:	1f 93       	push	r17
     d8a:	cf 93       	push	r28
     d8c:	df 93       	push	r29
     d8e:	ec 01       	movw	r28, r24
  _written = true;
     d90:	81 e0       	ldi	r24, 0x01	; 1
     d92:	88 8f       	std	Y+24, r24	; 0x18
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
     d94:	9b 8d       	ldd	r25, Y+27	; 0x1b
     d96:	8c 8d       	ldd	r24, Y+28	; 0x1c
     d98:	98 13       	cpse	r25, r24
     d9a:	05 c0       	rjmp	.+10     	; 0xda6 <_ZN14HardwareSerial5writeEh+0x24>
     d9c:	e8 89       	ldd	r30, Y+16	; 0x10
     d9e:	f9 89       	ldd	r31, Y+17	; 0x11
     da0:	80 81       	ld	r24, Z
     da2:	85 fd       	sbrc	r24, 5
     da4:	23 c0       	rjmp	.+70     	; 0xdec <_ZN14HardwareSerial5writeEh+0x6a>
     da6:	f6 2e       	mov	r15, r22
    *_udr = c;
    sbi(*_ucsra, TXC0);
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
     da8:	0b 8d       	ldd	r16, Y+27	; 0x1b
     daa:	10 e0       	ldi	r17, 0x00	; 0
     dac:	0f 5f       	subi	r16, 0xFF	; 255
     dae:	1f 4f       	sbci	r17, 0xFF	; 255
     db0:	0f 73       	andi	r16, 0x3F	; 63
     db2:	11 27       	eor	r17, r17
     db4:	e0 2e       	mov	r14, r16
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
     db6:	8c 8d       	ldd	r24, Y+28	; 0x1c
     db8:	e8 12       	cpse	r14, r24
     dba:	0b c0       	rjmp	.+22     	; 0xdd2 <_ZN14HardwareSerial5writeEh+0x50>
    if (bit_is_clear(SREG, SREG_I)) {
     dbc:	0f b6       	in	r0, 0x3f	; 63
     dbe:	07 fc       	sbrc	r0, 7
     dc0:	fa cf       	rjmp	.-12     	; 0xdb6 <_ZN14HardwareSerial5writeEh+0x34>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
     dc2:	e8 89       	ldd	r30, Y+16	; 0x10
     dc4:	f9 89       	ldd	r31, Y+17	; 0x11
     dc6:	80 81       	ld	r24, Z
     dc8:	85 ff       	sbrs	r24, 5
     dca:	f5 cf       	rjmp	.-22     	; 0xdb6 <_ZN14HardwareSerial5writeEh+0x34>
	_tx_udr_empty_irq();
     dcc:	ce 01       	movw	r24, r28
     dce:	b8 df       	rcall	.-144    	; 0xd40 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
     dd0:	f2 cf       	rjmp	.-28     	; 0xdb6 <_ZN14HardwareSerial5writeEh+0x34>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
     dd2:	8b 8d       	ldd	r24, Y+27	; 0x1b
     dd4:	fe 01       	movw	r30, r28
     dd6:	e8 0f       	add	r30, r24
     dd8:	f1 1d       	adc	r31, r1
     dda:	e3 5a       	subi	r30, 0xA3	; 163
     ddc:	ff 4f       	sbci	r31, 0xFF	; 255
     dde:	f0 82       	st	Z, r15
  _tx_buffer_head = i;
     de0:	0b 8f       	std	Y+27, r16	; 0x1b
	
  sbi(*_ucsrb, UDRIE0);
     de2:	ea 89       	ldd	r30, Y+18	; 0x12
     de4:	fb 89       	ldd	r31, Y+19	; 0x13
     de6:	80 81       	ld	r24, Z
     de8:	80 62       	ori	r24, 0x20	; 32
     dea:	07 c0       	rjmp	.+14     	; 0xdfa <_ZN14HardwareSerial5writeEh+0x78>
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    *_udr = c;
     dec:	ee 89       	ldd	r30, Y+22	; 0x16
     dee:	ff 89       	ldd	r31, Y+23	; 0x17
     df0:	60 83       	st	Z, r22
    sbi(*_ucsra, TXC0);
     df2:	e8 89       	ldd	r30, Y+16	; 0x10
     df4:	f9 89       	ldd	r31, Y+17	; 0x11
     df6:	80 81       	ld	r24, Z
     df8:	80 64       	ori	r24, 0x40	; 64
     dfa:	80 83       	st	Z, r24
  _tx_buffer_head = i;
	
  sbi(*_ucsrb, UDRIE0);
  
  return 1;
}
     dfc:	81 e0       	ldi	r24, 0x01	; 1
     dfe:	90 e0       	ldi	r25, 0x00	; 0
     e00:	df 91       	pop	r29
     e02:	cf 91       	pop	r28
     e04:	1f 91       	pop	r17
     e06:	0f 91       	pop	r16
     e08:	ff 90       	pop	r15
     e0a:	ef 90       	pop	r14
     e0c:	08 95       	ret

00000e0e <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
     e0e:	cf 93       	push	r28
     e10:	df 93       	push	r29
     e12:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
     e14:	88 8d       	ldd	r24, Y+24	; 0x18
     e16:	88 23       	and	r24, r24
     e18:	c1 f0       	breq	.+48     	; 0xe4a <_ZN14HardwareSerial5flushEv+0x3c>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
     e1a:	ea 89       	ldd	r30, Y+18	; 0x12
     e1c:	fb 89       	ldd	r31, Y+19	; 0x13
     e1e:	80 81       	ld	r24, Z
     e20:	85 fd       	sbrc	r24, 5
     e22:	05 c0       	rjmp	.+10     	; 0xe2e <_ZN14HardwareSerial5flushEv+0x20>
     e24:	a8 89       	ldd	r26, Y+16	; 0x10
     e26:	b9 89       	ldd	r27, Y+17	; 0x11
     e28:	8c 91       	ld	r24, X
     e2a:	86 fd       	sbrc	r24, 6
     e2c:	0e c0       	rjmp	.+28     	; 0xe4a <_ZN14HardwareSerial5flushEv+0x3c>
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
     e2e:	0f b6       	in	r0, 0x3f	; 63
     e30:	07 fc       	sbrc	r0, 7
     e32:	f5 cf       	rjmp	.-22     	; 0xe1e <_ZN14HardwareSerial5flushEv+0x10>
     e34:	80 81       	ld	r24, Z
     e36:	85 ff       	sbrs	r24, 5
     e38:	f2 cf       	rjmp	.-28     	; 0xe1e <_ZN14HardwareSerial5flushEv+0x10>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
     e3a:	a8 89       	ldd	r26, Y+16	; 0x10
     e3c:	b9 89       	ldd	r27, Y+17	; 0x11
     e3e:	8c 91       	ld	r24, X
     e40:	85 ff       	sbrs	r24, 5
     e42:	ed cf       	rjmp	.-38     	; 0xe1e <_ZN14HardwareSerial5flushEv+0x10>
	  _tx_udr_empty_irq();
     e44:	ce 01       	movw	r24, r28
     e46:	7c df       	rcall	.-264    	; 0xd40 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
     e48:	e8 cf       	rjmp	.-48     	; 0xe1a <_ZN14HardwareSerial5flushEv+0xc>
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
     e4a:	df 91       	pop	r29
     e4c:	cf 91       	pop	r28
     e4e:	08 95       	ret

00000e50 <_ZN14HardwareSerial5beginEmh>:
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
     e50:	cf 92       	push	r12
     e52:	df 92       	push	r13
     e54:	ef 92       	push	r14
     e56:	ff 92       	push	r15
     e58:	1f 93       	push	r17
     e5a:	cf 93       	push	r28
     e5c:	df 93       	push	r29
     e5e:	ec 01       	movw	r28, r24
     e60:	6a 01       	movw	r12, r20
     e62:	7b 01       	movw	r14, r22
     e64:	12 2f       	mov	r17, r18
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
     e66:	e8 89       	ldd	r30, Y+16	; 0x10
     e68:	f9 89       	ldd	r31, Y+17	; 0x11
     e6a:	82 e0       	ldi	r24, 0x02	; 2
     e6c:	80 83       	st	Z, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
     e6e:	41 15       	cp	r20, r1
     e70:	51 4e       	sbci	r21, 0xE1	; 225
     e72:	61 05       	cpc	r22, r1
     e74:	71 05       	cpc	r23, r1
     e76:	a9 f0       	breq	.+42     	; 0xea2 <_ZN14HardwareSerial5beginEmh+0x52>
// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
     e78:	60 e0       	ldi	r22, 0x00	; 0
     e7a:	79 e0       	ldi	r23, 0x09	; 9
     e7c:	8d e3       	ldi	r24, 0x3D	; 61
     e7e:	90 e0       	ldi	r25, 0x00	; 0
     e80:	a7 01       	movw	r20, r14
     e82:	96 01       	movw	r18, r12
     e84:	68 d6       	rcall	.+3280   	; 0x1b56 <__udivmodsi4>
     e86:	da 01       	movw	r26, r20
     e88:	c9 01       	movw	r24, r18
     e8a:	01 97       	sbiw	r24, 0x01	; 1
     e8c:	a1 09       	sbc	r26, r1
     e8e:	b1 09       	sbc	r27, r1
     e90:	b6 95       	lsr	r27
     e92:	a7 95       	ror	r26
     e94:	97 95       	ror	r25
     e96:	87 95       	ror	r24
     e98:	9c 01       	movw	r18, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
     e9a:	21 15       	cp	r18, r1
     e9c:	80 e1       	ldi	r24, 0x10	; 16
     e9e:	38 07       	cpc	r19, r24
     ea0:	a0 f0       	brcs	.+40     	; 0xeca <_ZN14HardwareSerial5beginEmh+0x7a>
  {
    *_ucsra = 0;
     ea2:	e8 89       	ldd	r30, Y+16	; 0x10
     ea4:	f9 89       	ldd	r31, Y+17	; 0x11
     ea6:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
     ea8:	60 e8       	ldi	r22, 0x80	; 128
     eaa:	74 e8       	ldi	r23, 0x84	; 132
     eac:	8e e1       	ldi	r24, 0x1E	; 30
     eae:	90 e0       	ldi	r25, 0x00	; 0
     eb0:	a7 01       	movw	r20, r14
     eb2:	96 01       	movw	r18, r12
     eb4:	50 d6       	rcall	.+3232   	; 0x1b56 <__udivmodsi4>
     eb6:	da 01       	movw	r26, r20
     eb8:	c9 01       	movw	r24, r18
     eba:	01 97       	sbiw	r24, 0x01	; 1
     ebc:	a1 09       	sbc	r26, r1
     ebe:	b1 09       	sbc	r27, r1
     ec0:	b6 95       	lsr	r27
     ec2:	a7 95       	ror	r26
     ec4:	97 95       	ror	r25
     ec6:	87 95       	ror	r24
     ec8:	9c 01       	movw	r18, r24
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
     eca:	ec 85       	ldd	r30, Y+12	; 0x0c
     ecc:	fd 85       	ldd	r31, Y+13	; 0x0d
     ece:	30 83       	st	Z, r19
  *_ubrrl = baud_setting;
     ed0:	ee 85       	ldd	r30, Y+14	; 0x0e
     ed2:	ff 85       	ldd	r31, Y+15	; 0x0f
     ed4:	20 83       	st	Z, r18

  _written = false;
     ed6:	18 8e       	std	Y+24, r1	; 0x18

  //set the data bits, parity, and stop bits
#if defined(__AVR_ATmega8__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
     ed8:	ec 89       	ldd	r30, Y+20	; 0x14
     eda:	fd 89       	ldd	r31, Y+21	; 0x15
     edc:	10 83       	st	Z, r17
  
  sbi(*_ucsrb, RXEN0);
     ede:	ea 89       	ldd	r30, Y+18	; 0x12
     ee0:	fb 89       	ldd	r31, Y+19	; 0x13
     ee2:	80 81       	ld	r24, Z
     ee4:	80 61       	ori	r24, 0x10	; 16
     ee6:	80 83       	st	Z, r24
  sbi(*_ucsrb, TXEN0);
     ee8:	ea 89       	ldd	r30, Y+18	; 0x12
     eea:	fb 89       	ldd	r31, Y+19	; 0x13
     eec:	80 81       	ld	r24, Z
     eee:	88 60       	ori	r24, 0x08	; 8
     ef0:	80 83       	st	Z, r24
  sbi(*_ucsrb, RXCIE0);
     ef2:	ea 89       	ldd	r30, Y+18	; 0x12
     ef4:	fb 89       	ldd	r31, Y+19	; 0x13
     ef6:	80 81       	ld	r24, Z
     ef8:	80 68       	ori	r24, 0x80	; 128
     efa:	80 83       	st	Z, r24
  cbi(*_ucsrb, UDRIE0);
     efc:	ea 89       	ldd	r30, Y+18	; 0x12
     efe:	fb 89       	ldd	r31, Y+19	; 0x13
     f00:	80 81       	ld	r24, Z
     f02:	8f 7d       	andi	r24, 0xDF	; 223
     f04:	80 83       	st	Z, r24
}
     f06:	df 91       	pop	r29
     f08:	cf 91       	pop	r28
     f0a:	1f 91       	pop	r17
     f0c:	ff 90       	pop	r15
     f0e:	ef 90       	pop	r14
     f10:	df 90       	pop	r13
     f12:	cf 90       	pop	r12
     f14:	08 95       	ret

00000f16 <__vector_25>:
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
     f16:	1f 92       	push	r1
     f18:	0f 92       	push	r0
     f1a:	0f b6       	in	r0, 0x3f	; 63
     f1c:	0f 92       	push	r0
     f1e:	11 24       	eor	r1, r1
     f20:	0b b6       	in	r0, 0x3b	; 59
     f22:	0f 92       	push	r0
     f24:	2f 93       	push	r18
     f26:	8f 93       	push	r24
     f28:	9f 93       	push	r25
     f2a:	ef 93       	push	r30
     f2c:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
     f2e:	e0 91 58 02 	lds	r30, 0x0258	; 0x800258 <Serial+0x10>
     f32:	f0 91 59 02 	lds	r31, 0x0259	; 0x800259 <Serial+0x11>
     f36:	80 81       	ld	r24, Z
     f38:	e0 91 5e 02 	lds	r30, 0x025E	; 0x80025e <Serial+0x16>
     f3c:	f0 91 5f 02 	lds	r31, 0x025F	; 0x80025f <Serial+0x17>
     f40:	82 fd       	sbrc	r24, 2
     f42:	12 c0       	rjmp	.+36     	; 0xf68 <__vector_25+0x52>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
     f44:	90 81       	ld	r25, Z
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
     f46:	80 91 61 02 	lds	r24, 0x0261	; 0x800261 <Serial+0x19>
     f4a:	8f 5f       	subi	r24, 0xFF	; 255
     f4c:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
     f4e:	20 91 62 02 	lds	r18, 0x0262	; 0x800262 <Serial+0x1a>
     f52:	82 17       	cp	r24, r18
     f54:	51 f0       	breq	.+20     	; 0xf6a <__vector_25+0x54>
      _rx_buffer[_rx_buffer_head] = c;
     f56:	e0 91 61 02 	lds	r30, 0x0261	; 0x800261 <Serial+0x19>
     f5a:	f0 e0       	ldi	r31, 0x00	; 0
     f5c:	e8 5b       	subi	r30, 0xB8	; 184
     f5e:	fd 4f       	sbci	r31, 0xFD	; 253
     f60:	95 8f       	std	Z+29, r25	; 0x1d
      _rx_buffer_head = i;
     f62:	80 93 61 02 	sts	0x0261, r24	; 0x800261 <Serial+0x19>
     f66:	01 c0       	rjmp	.+2      	; 0xf6a <__vector_25+0x54>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
     f68:	80 81       	ld	r24, Z
    Serial._rx_complete_irq();
  }
     f6a:	ff 91       	pop	r31
     f6c:	ef 91       	pop	r30
     f6e:	9f 91       	pop	r25
     f70:	8f 91       	pop	r24
     f72:	2f 91       	pop	r18
     f74:	0f 90       	pop	r0
     f76:	0b be       	out	0x3b, r0	; 59
     f78:	0f 90       	pop	r0
     f7a:	0f be       	out	0x3f, r0	; 63
     f7c:	0f 90       	pop	r0
     f7e:	1f 90       	pop	r1
     f80:	18 95       	reti

00000f82 <__vector_26>:
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
     f82:	1f 92       	push	r1
     f84:	0f 92       	push	r0
     f86:	0f b6       	in	r0, 0x3f	; 63
     f88:	0f 92       	push	r0
     f8a:	11 24       	eor	r1, r1
     f8c:	0b b6       	in	r0, 0x3b	; 59
     f8e:	0f 92       	push	r0
     f90:	2f 93       	push	r18
     f92:	3f 93       	push	r19
     f94:	4f 93       	push	r20
     f96:	5f 93       	push	r21
     f98:	6f 93       	push	r22
     f9a:	7f 93       	push	r23
     f9c:	8f 93       	push	r24
     f9e:	9f 93       	push	r25
     fa0:	af 93       	push	r26
     fa2:	bf 93       	push	r27
     fa4:	ef 93       	push	r30
     fa6:	ff 93       	push	r31
  Serial._tx_udr_empty_irq();
     fa8:	88 e4       	ldi	r24, 0x48	; 72
     faa:	92 e0       	ldi	r25, 0x02	; 2
     fac:	c9 de       	rcall	.-622    	; 0xd40 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
     fae:	ff 91       	pop	r31
     fb0:	ef 91       	pop	r30
     fb2:	bf 91       	pop	r27
     fb4:	af 91       	pop	r26
     fb6:	9f 91       	pop	r25
     fb8:	8f 91       	pop	r24
     fba:	7f 91       	pop	r23
     fbc:	6f 91       	pop	r22
     fbe:	5f 91       	pop	r21
     fc0:	4f 91       	pop	r20
     fc2:	3f 91       	pop	r19
     fc4:	2f 91       	pop	r18
     fc6:	0f 90       	pop	r0
     fc8:	0b be       	out	0x3b, r0	; 59
     fca:	0f 90       	pop	r0
     fcc:	0f be       	out	0x3f, r0	; 63
     fce:	0f 90       	pop	r0
     fd0:	1f 90       	pop	r1
     fd2:	18 95       	reti

00000fd4 <_Z17Serial0_availablev>:
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
     fd4:	88 e4       	ldi	r24, 0x48	; 72
     fd6:	92 e0       	ldi	r25, 0x02	; 2
     fd8:	3a de       	rcall	.-908    	; 0xc4e <_ZN14HardwareSerial9availableEv>
     fda:	21 e0       	ldi	r18, 0x01	; 1
     fdc:	89 2b       	or	r24, r25
     fde:	09 f4       	brne	.+2      	; 0xfe2 <_Z17Serial0_availablev+0xe>
     fe0:	20 e0       	ldi	r18, 0x00	; 0
}
     fe2:	82 2f       	mov	r24, r18
     fe4:	08 95       	ret

00000fe6 <_GLOBAL__sub_I___vector_25>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
     fe6:	e8 e4       	ldi	r30, 0x48	; 72
     fe8:	f2 e0       	ldi	r31, 0x02	; 2
     fea:	13 82       	std	Z+3, r1	; 0x03
     fec:	12 82       	std	Z+2, r1	; 0x02
  public:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;

    Stream() {_timeout=1000;}
     fee:	88 ee       	ldi	r24, 0xE8	; 232
     ff0:	93 e0       	ldi	r25, 0x03	; 3
     ff2:	a0 e0       	ldi	r26, 0x00	; 0
     ff4:	b0 e0       	ldi	r27, 0x00	; 0
     ff6:	84 83       	std	Z+4, r24	; 0x04
     ff8:	95 83       	std	Z+5, r25	; 0x05
     ffa:	a6 83       	std	Z+6, r26	; 0x06
     ffc:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
     ffe:	85 e1       	ldi	r24, 0x15	; 21
    1000:	92 e0       	ldi	r25, 0x02	; 2
    1002:	91 83       	std	Z+1, r25	; 0x01
    1004:	80 83       	st	Z, r24
    1006:	85 ec       	ldi	r24, 0xC5	; 197
    1008:	90 e0       	ldi	r25, 0x00	; 0
    100a:	95 87       	std	Z+13, r25	; 0x0d
    100c:	84 87       	std	Z+12, r24	; 0x0c
    100e:	84 ec       	ldi	r24, 0xC4	; 196
    1010:	90 e0       	ldi	r25, 0x00	; 0
    1012:	97 87       	std	Z+15, r25	; 0x0f
    1014:	86 87       	std	Z+14, r24	; 0x0e
    1016:	80 ec       	ldi	r24, 0xC0	; 192
    1018:	90 e0       	ldi	r25, 0x00	; 0
    101a:	91 8b       	std	Z+17, r25	; 0x11
    101c:	80 8b       	std	Z+16, r24	; 0x10
    101e:	81 ec       	ldi	r24, 0xC1	; 193
    1020:	90 e0       	ldi	r25, 0x00	; 0
    1022:	93 8b       	std	Z+19, r25	; 0x13
    1024:	82 8b       	std	Z+18, r24	; 0x12
    1026:	82 ec       	ldi	r24, 0xC2	; 194
    1028:	90 e0       	ldi	r25, 0x00	; 0
    102a:	95 8b       	std	Z+21, r25	; 0x15
    102c:	84 8b       	std	Z+20, r24	; 0x14
    102e:	86 ec       	ldi	r24, 0xC6	; 198
    1030:	90 e0       	ldi	r25, 0x00	; 0
    1032:	97 8b       	std	Z+23, r25	; 0x17
    1034:	86 8b       	std	Z+22, r24	; 0x16
    1036:	11 8e       	std	Z+25, r1	; 0x19
    1038:	12 8e       	std	Z+26, r1	; 0x1a
    103a:	13 8e       	std	Z+27, r1	; 0x1b
    103c:	14 8e       	std	Z+28, r1	; 0x1c
    103e:	08 95       	ret

00001040 <initVariant>:
    1040:	08 95       	ret

00001042 <main>:
    1042:	37 d2       	rcall	.+1134   	; 0x14b2 <init>
    1044:	fd df       	rcall	.-6      	; 0x1040 <initVariant>
    1046:	42 d9       	rcall	.-3452   	; 0x2cc <setup>
    1048:	c4 e6       	ldi	r28, 0x64	; 100
    104a:	d6 e0       	ldi	r29, 0x06	; 6
    104c:	57 d9       	rcall	.-3410   	; 0x2fc <loop>
    104e:	20 97       	sbiw	r28, 0x00	; 0
    1050:	e9 f3       	breq	.-6      	; 0x104c <main+0xa>
    1052:	3a de       	rcall	.-908    	; 0xcc8 <_Z14serialEventRunv>
    1054:	fb cf       	rjmp	.-10     	; 0x104c <main+0xa>

00001056 <_ZN5Print5writeEPKhj>:
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
    1056:	cf 92       	push	r12
    1058:	df 92       	push	r13
    105a:	ef 92       	push	r14
    105c:	ff 92       	push	r15
    105e:	0f 93       	push	r16
    1060:	1f 93       	push	r17
    1062:	cf 93       	push	r28
    1064:	df 93       	push	r29
    1066:	6c 01       	movw	r12, r24
    1068:	7a 01       	movw	r14, r20
    106a:	8b 01       	movw	r16, r22
    106c:	c0 e0       	ldi	r28, 0x00	; 0
    106e:	d0 e0       	ldi	r29, 0x00	; 0
    1070:	ce 15       	cp	r28, r14
    1072:	df 05       	cpc	r29, r15
    1074:	81 f0       	breq	.+32     	; 0x1096 <_ZN5Print5writeEPKhj+0x40>
    1076:	d8 01       	movw	r26, r16
    1078:	6d 91       	ld	r22, X+
    107a:	8d 01       	movw	r16, r26
    107c:	d6 01       	movw	r26, r12
    107e:	ed 91       	ld	r30, X+
    1080:	fc 91       	ld	r31, X
    1082:	01 90       	ld	r0, Z+
    1084:	f0 81       	ld	r31, Z
    1086:	e0 2d       	mov	r30, r0
    1088:	c6 01       	movw	r24, r12
    108a:	19 95       	eicall
    108c:	89 2b       	or	r24, r25
    108e:	11 f0       	breq	.+4      	; 0x1094 <_ZN5Print5writeEPKhj+0x3e>
    1090:	21 96       	adiw	r28, 0x01	; 1
    1092:	ee cf       	rjmp	.-36     	; 0x1070 <_ZN5Print5writeEPKhj+0x1a>
    1094:	7e 01       	movw	r14, r28
    1096:	c7 01       	movw	r24, r14
    1098:	df 91       	pop	r29
    109a:	cf 91       	pop	r28
    109c:	1f 91       	pop	r17
    109e:	0f 91       	pop	r16
    10a0:	ff 90       	pop	r15
    10a2:	ef 90       	pop	r14
    10a4:	df 90       	pop	r13
    10a6:	cf 90       	pop	r12
    10a8:	08 95       	ret

000010aa <_ZN5Print5writeEPKc>:
    10aa:	61 15       	cp	r22, r1
    10ac:	71 05       	cpc	r23, r1
    10ae:	79 f0       	breq	.+30     	; 0x10ce <_ZN5Print5writeEPKc+0x24>
    10b0:	fb 01       	movw	r30, r22
    10b2:	01 90       	ld	r0, Z+
    10b4:	00 20       	and	r0, r0
    10b6:	e9 f7       	brne	.-6      	; 0x10b2 <_ZN5Print5writeEPKc+0x8>
    10b8:	31 97       	sbiw	r30, 0x01	; 1
    10ba:	af 01       	movw	r20, r30
    10bc:	46 1b       	sub	r20, r22
    10be:	57 0b       	sbc	r21, r23
    10c0:	dc 01       	movw	r26, r24
    10c2:	ed 91       	ld	r30, X+
    10c4:	fc 91       	ld	r31, X
    10c6:	02 80       	ldd	r0, Z+2	; 0x02
    10c8:	f3 81       	ldd	r31, Z+3	; 0x03
    10ca:	e0 2d       	mov	r30, r0
    10cc:	19 94       	eijmp
    10ce:	80 e0       	ldi	r24, 0x00	; 0
    10d0:	90 e0       	ldi	r25, 0x00	; 0
    10d2:	08 95       	ret

000010d4 <_ZN5Print5printEc>:
    10d4:	dc 01       	movw	r26, r24
    10d6:	ed 91       	ld	r30, X+
    10d8:	fc 91       	ld	r31, X
    10da:	01 90       	ld	r0, Z+
    10dc:	f0 81       	ld	r31, Z
    10de:	e0 2d       	mov	r30, r0
    10e0:	19 94       	eijmp

000010e2 <_ZN5Print7printlnEv>:
    10e2:	63 e2       	ldi	r22, 0x23	; 35
    10e4:	72 e0       	ldi	r23, 0x02	; 2
    10e6:	e1 cf       	rjmp	.-62     	; 0x10aa <_ZN5Print5writeEPKc>

000010e8 <_ZN5Print7printlnEPKc>:
    10e8:	0f 93       	push	r16
    10ea:	1f 93       	push	r17
    10ec:	cf 93       	push	r28
    10ee:	df 93       	push	r29
    10f0:	ec 01       	movw	r28, r24
    10f2:	db df       	rcall	.-74     	; 0x10aa <_ZN5Print5writeEPKc>
    10f4:	8c 01       	movw	r16, r24
    10f6:	ce 01       	movw	r24, r28
    10f8:	f4 df       	rcall	.-24     	; 0x10e2 <_ZN5Print7printlnEv>
    10fa:	80 0f       	add	r24, r16
    10fc:	91 1f       	adc	r25, r17
    10fe:	df 91       	pop	r29
    1100:	cf 91       	pop	r28
    1102:	1f 91       	pop	r17
    1104:	0f 91       	pop	r16
    1106:	08 95       	ret

00001108 <_ZN5Print11printNumberEmh>:
    1108:	8f 92       	push	r8
    110a:	9f 92       	push	r9
    110c:	af 92       	push	r10
    110e:	bf 92       	push	r11
    1110:	ef 92       	push	r14
    1112:	ff 92       	push	r15
    1114:	0f 93       	push	r16
    1116:	1f 93       	push	r17
    1118:	cf 93       	push	r28
    111a:	df 93       	push	r29
    111c:	cd b7       	in	r28, 0x3d	; 61
    111e:	de b7       	in	r29, 0x3e	; 62
    1120:	a1 97       	sbiw	r28, 0x21	; 33
    1122:	0f b6       	in	r0, 0x3f	; 63
    1124:	f8 94       	cli
    1126:	de bf       	out	0x3e, r29	; 62
    1128:	0f be       	out	0x3f, r0	; 63
    112a:	cd bf       	out	0x3d, r28	; 61
    112c:	7c 01       	movw	r14, r24
    112e:	fa 01       	movw	r30, r20
    1130:	cb 01       	movw	r24, r22
    1132:	19 a2       	std	Y+33, r1	; 0x21
    1134:	22 30       	cpi	r18, 0x02	; 2
    1136:	08 f4       	brcc	.+2      	; 0x113a <_ZN5Print11printNumberEmh+0x32>
    1138:	2a e0       	ldi	r18, 0x0A	; 10
    113a:	8e 01       	movw	r16, r28
    113c:	0f 5d       	subi	r16, 0xDF	; 223
    113e:	1f 4f       	sbci	r17, 0xFF	; 255
    1140:	82 2e       	mov	r8, r18
    1142:	91 2c       	mov	r9, r1
    1144:	a1 2c       	mov	r10, r1
    1146:	b1 2c       	mov	r11, r1
    1148:	bf 01       	movw	r22, r30
    114a:	a5 01       	movw	r20, r10
    114c:	94 01       	movw	r18, r8
    114e:	03 d5       	rcall	.+2566   	; 0x1b56 <__udivmodsi4>
    1150:	f9 01       	movw	r30, r18
    1152:	ca 01       	movw	r24, r20
    1154:	01 50       	subi	r16, 0x01	; 1
    1156:	11 09       	sbc	r17, r1
    1158:	6a 30       	cpi	r22, 0x0A	; 10
    115a:	10 f4       	brcc	.+4      	; 0x1160 <_ZN5Print11printNumberEmh+0x58>
    115c:	60 5d       	subi	r22, 0xD0	; 208
    115e:	01 c0       	rjmp	.+2      	; 0x1162 <_ZN5Print11printNumberEmh+0x5a>
    1160:	69 5c       	subi	r22, 0xC9	; 201
    1162:	d8 01       	movw	r26, r16
    1164:	6c 93       	st	X, r22
    1166:	23 2b       	or	r18, r19
    1168:	24 2b       	or	r18, r20
    116a:	25 2b       	or	r18, r21
    116c:	69 f7       	brne	.-38     	; 0x1148 <_ZN5Print11printNumberEmh+0x40>
    116e:	b8 01       	movw	r22, r16
    1170:	c7 01       	movw	r24, r14
    1172:	9b df       	rcall	.-202    	; 0x10aa <_ZN5Print5writeEPKc>
    1174:	a1 96       	adiw	r28, 0x21	; 33
    1176:	0f b6       	in	r0, 0x3f	; 63
    1178:	f8 94       	cli
    117a:	de bf       	out	0x3e, r29	; 62
    117c:	0f be       	out	0x3f, r0	; 63
    117e:	cd bf       	out	0x3d, r28	; 61
    1180:	df 91       	pop	r29
    1182:	cf 91       	pop	r28
    1184:	1f 91       	pop	r17
    1186:	0f 91       	pop	r16
    1188:	ff 90       	pop	r15
    118a:	ef 90       	pop	r14
    118c:	bf 90       	pop	r11
    118e:	af 90       	pop	r10
    1190:	9f 90       	pop	r9
    1192:	8f 90       	pop	r8
    1194:	08 95       	ret

00001196 <_ZN5Print5printEmi>:
    1196:	21 15       	cp	r18, r1
    1198:	31 05       	cpc	r19, r1
    119a:	41 f4       	brne	.+16     	; 0x11ac <_ZN5Print5printEmi+0x16>
    119c:	dc 01       	movw	r26, r24
    119e:	ed 91       	ld	r30, X+
    11a0:	fc 91       	ld	r31, X
    11a2:	01 90       	ld	r0, Z+
    11a4:	f0 81       	ld	r31, Z
    11a6:	e0 2d       	mov	r30, r0
    11a8:	64 2f       	mov	r22, r20
    11aa:	19 94       	eijmp
    11ac:	ad cf       	rjmp	.-166    	; 0x1108 <_ZN5Print11printNumberEmh>

000011ae <_ZN5Print5printEji>:
    11ae:	9a 01       	movw	r18, r20
    11b0:	ab 01       	movw	r20, r22
    11b2:	60 e0       	ldi	r22, 0x00	; 0
    11b4:	70 e0       	ldi	r23, 0x00	; 0
    11b6:	ef cf       	rjmp	.-34     	; 0x1196 <_ZN5Print5printEmi>

000011b8 <_ZN5Print10printFloatEdh>:
    11b8:	7f 92       	push	r7
    11ba:	8f 92       	push	r8
    11bc:	9f 92       	push	r9
    11be:	af 92       	push	r10
    11c0:	bf 92       	push	r11
    11c2:	cf 92       	push	r12
    11c4:	df 92       	push	r13
    11c6:	ef 92       	push	r14
    11c8:	ff 92       	push	r15
    11ca:	0f 93       	push	r16
    11cc:	1f 93       	push	r17
    11ce:	cf 93       	push	r28
    11d0:	df 93       	push	r29
    11d2:	8c 01       	movw	r16, r24
    11d4:	6a 01       	movw	r12, r20
    11d6:	7b 01       	movw	r14, r22
    11d8:	72 2e       	mov	r7, r18
    11da:	9a 01       	movw	r18, r20
    11dc:	ab 01       	movw	r20, r22
    11de:	c7 01       	movw	r24, r14
    11e0:	b6 01       	movw	r22, r12
    11e2:	a6 d4       	rcall	.+2380   	; 0x1b30 <__unordsf2>
    11e4:	88 23       	and	r24, r24
    11e6:	19 f0       	breq	.+6      	; 0x11ee <_ZN5Print10printFloatEdh+0x36>
    11e8:	66 e2       	ldi	r22, 0x26	; 38
    11ea:	72 e0       	ldi	r23, 0x02	; 2
    11ec:	24 c0       	rjmp	.+72     	; 0x1236 <_ZN5Print10printFloatEdh+0x7e>
    11ee:	46 01       	movw	r8, r12
    11f0:	57 01       	movw	r10, r14
    11f2:	e8 94       	clt
    11f4:	b7 f8       	bld	r11, 7
    11f6:	2f ef       	ldi	r18, 0xFF	; 255
    11f8:	3f ef       	ldi	r19, 0xFF	; 255
    11fa:	4f e7       	ldi	r20, 0x7F	; 127
    11fc:	5f e7       	ldi	r21, 0x7F	; 127
    11fe:	c5 01       	movw	r24, r10
    1200:	b4 01       	movw	r22, r8
    1202:	96 d4       	rcall	.+2348   	; 0x1b30 <__unordsf2>
    1204:	81 11       	cpse	r24, r1
    1206:	0c c0       	rjmp	.+24     	; 0x1220 <_ZN5Print10printFloatEdh+0x68>
    1208:	2f ef       	ldi	r18, 0xFF	; 255
    120a:	3f ef       	ldi	r19, 0xFF	; 255
    120c:	4f e7       	ldi	r20, 0x7F	; 127
    120e:	5f e7       	ldi	r21, 0x7F	; 127
    1210:	c5 01       	movw	r24, r10
    1212:	b4 01       	movw	r22, r8
    1214:	be d3       	rcall	.+1916   	; 0x1992 <__cmpsf2>
    1216:	18 16       	cp	r1, r24
    1218:	1c f4       	brge	.+6      	; 0x1220 <_ZN5Print10printFloatEdh+0x68>
    121a:	6a e2       	ldi	r22, 0x2A	; 42
    121c:	72 e0       	ldi	r23, 0x02	; 2
    121e:	0b c0       	rjmp	.+22     	; 0x1236 <_ZN5Print10printFloatEdh+0x7e>
    1220:	2f ef       	ldi	r18, 0xFF	; 255
    1222:	3f ef       	ldi	r19, 0xFF	; 255
    1224:	4f e7       	ldi	r20, 0x7F	; 127
    1226:	5f e4       	ldi	r21, 0x4F	; 79
    1228:	c7 01       	movw	r24, r14
    122a:	b6 01       	movw	r22, r12
    122c:	e8 dc       	rcall	.-1584   	; 0xbfe <__gesf2>
    122e:	18 16       	cp	r1, r24
    1230:	8c f4       	brge	.+34     	; 0x1254 <_ZN5Print10printFloatEdh+0x9c>
    1232:	6e e2       	ldi	r22, 0x2E	; 46
    1234:	72 e0       	ldi	r23, 0x02	; 2
    1236:	c8 01       	movw	r24, r16
    1238:	df 91       	pop	r29
    123a:	cf 91       	pop	r28
    123c:	1f 91       	pop	r17
    123e:	0f 91       	pop	r16
    1240:	ff 90       	pop	r15
    1242:	ef 90       	pop	r14
    1244:	df 90       	pop	r13
    1246:	cf 90       	pop	r12
    1248:	bf 90       	pop	r11
    124a:	af 90       	pop	r10
    124c:	9f 90       	pop	r9
    124e:	8f 90       	pop	r8
    1250:	7f 90       	pop	r7
    1252:	2b cf       	rjmp	.-426    	; 0x10aa <_ZN5Print5writeEPKc>
    1254:	2f ef       	ldi	r18, 0xFF	; 255
    1256:	3f ef       	ldi	r19, 0xFF	; 255
    1258:	4f e7       	ldi	r20, 0x7F	; 127
    125a:	5f ec       	ldi	r21, 0xCF	; 207
    125c:	c7 01       	movw	r24, r14
    125e:	b6 01       	movw	r22, r12
    1260:	98 d3       	rcall	.+1840   	; 0x1992 <__cmpsf2>
    1262:	87 fd       	sbrc	r24, 7
    1264:	e6 cf       	rjmp	.-52     	; 0x1232 <_ZN5Print10printFloatEdh+0x7a>
    1266:	20 e0       	ldi	r18, 0x00	; 0
    1268:	30 e0       	ldi	r19, 0x00	; 0
    126a:	a9 01       	movw	r20, r18
    126c:	c7 01       	movw	r24, r14
    126e:	b6 01       	movw	r22, r12
    1270:	90 d3       	rcall	.+1824   	; 0x1992 <__cmpsf2>
    1272:	87 ff       	sbrs	r24, 7
    1274:	09 c0       	rjmp	.+18     	; 0x1288 <_ZN5Print10printFloatEdh+0xd0>
    1276:	6d e2       	ldi	r22, 0x2D	; 45
    1278:	c8 01       	movw	r24, r16
    127a:	2c df       	rcall	.-424    	; 0x10d4 <_ZN5Print5printEc>
    127c:	ec 01       	movw	r28, r24
    127e:	f7 fa       	bst	r15, 7
    1280:	f0 94       	com	r15
    1282:	f7 f8       	bld	r15, 7
    1284:	f0 94       	com	r15
    1286:	02 c0       	rjmp	.+4      	; 0x128c <_ZN5Print10printFloatEdh+0xd4>
    1288:	c0 e0       	ldi	r28, 0x00	; 0
    128a:	d0 e0       	ldi	r29, 0x00	; 0
    128c:	b1 2c       	mov	r11, r1
    128e:	60 e0       	ldi	r22, 0x00	; 0
    1290:	70 e0       	ldi	r23, 0x00	; 0
    1292:	80 e0       	ldi	r24, 0x00	; 0
    1294:	9f e3       	ldi	r25, 0x3F	; 63
    1296:	7b 14       	cp	r7, r11
    1298:	39 f0       	breq	.+14     	; 0x12a8 <_ZN5Print10printFloatEdh+0xf0>
    129a:	20 e0       	ldi	r18, 0x00	; 0
    129c:	30 e0       	ldi	r19, 0x00	; 0
    129e:	40 e2       	ldi	r20, 0x20	; 32
    12a0:	51 e4       	ldi	r21, 0x41	; 65
    12a2:	7b d3       	rcall	.+1782   	; 0x199a <__divsf3>
    12a4:	b3 94       	inc	r11
    12a6:	f7 cf       	rjmp	.-18     	; 0x1296 <_ZN5Print10printFloatEdh+0xde>
    12a8:	a7 01       	movw	r20, r14
    12aa:	96 01       	movw	r18, r12
    12ac:	85 db       	rcall	.-2294   	; 0x9b8 <__addsf3>
    12ae:	6b 01       	movw	r12, r22
    12b0:	7c 01       	movw	r14, r24
    12b2:	eb db       	rcall	.-2090   	; 0xa8a <__fixunssfsi>
    12b4:	4b 01       	movw	r8, r22
    12b6:	5c 01       	movw	r10, r24
    12b8:	2a e0       	ldi	r18, 0x0A	; 10
    12ba:	ab 01       	movw	r20, r22
    12bc:	bc 01       	movw	r22, r24
    12be:	c8 01       	movw	r24, r16
    12c0:	23 df       	rcall	.-442    	; 0x1108 <_ZN5Print11printNumberEmh>
    12c2:	c8 0f       	add	r28, r24
    12c4:	d9 1f       	adc	r29, r25
    12c6:	77 20       	and	r7, r7
    12c8:	79 f1       	breq	.+94     	; 0x1328 <_ZN5Print10printFloatEdh+0x170>
    12ca:	c5 01       	movw	r24, r10
    12cc:	b4 01       	movw	r22, r8
    12ce:	09 dc       	rcall	.-2030   	; 0xae2 <__floatunsisf>
    12d0:	9b 01       	movw	r18, r22
    12d2:	ac 01       	movw	r20, r24
    12d4:	c7 01       	movw	r24, r14
    12d6:	b6 01       	movw	r22, r12
    12d8:	6e db       	rcall	.-2340   	; 0x9b6 <__subsf3>
    12da:	6b 01       	movw	r12, r22
    12dc:	7c 01       	movw	r14, r24
    12de:	6e e2       	ldi	r22, 0x2E	; 46
    12e0:	c8 01       	movw	r24, r16
    12e2:	f8 de       	rcall	.-528    	; 0x10d4 <_ZN5Print5printEc>
    12e4:	c8 0f       	add	r28, r24
    12e6:	d9 1f       	adc	r29, r25
    12e8:	20 e0       	ldi	r18, 0x00	; 0
    12ea:	30 e0       	ldi	r19, 0x00	; 0
    12ec:	40 e2       	ldi	r20, 0x20	; 32
    12ee:	51 e4       	ldi	r21, 0x41	; 65
    12f0:	c7 01       	movw	r24, r14
    12f2:	b6 01       	movw	r22, r12
    12f4:	ba d3       	rcall	.+1908   	; 0x1a6a <__mulsf3>
    12f6:	4b 01       	movw	r8, r22
    12f8:	5c 01       	movw	r10, r24
    12fa:	c7 db       	rcall	.-2162   	; 0xa8a <__fixunssfsi>
    12fc:	6b 01       	movw	r12, r22
    12fe:	7c 01       	movw	r14, r24
    1300:	4a e0       	ldi	r20, 0x0A	; 10
    1302:	50 e0       	ldi	r21, 0x00	; 0
    1304:	c8 01       	movw	r24, r16
    1306:	53 df       	rcall	.-346    	; 0x11ae <_ZN5Print5printEji>
    1308:	c8 0f       	add	r28, r24
    130a:	d9 1f       	adc	r29, r25
    130c:	b6 01       	movw	r22, r12
    130e:	80 e0       	ldi	r24, 0x00	; 0
    1310:	90 e0       	ldi	r25, 0x00	; 0
    1312:	e7 db       	rcall	.-2098   	; 0xae2 <__floatunsisf>
    1314:	9b 01       	movw	r18, r22
    1316:	ac 01       	movw	r20, r24
    1318:	c5 01       	movw	r24, r10
    131a:	b4 01       	movw	r22, r8
    131c:	4c db       	rcall	.-2408   	; 0x9b6 <__subsf3>
    131e:	6b 01       	movw	r12, r22
    1320:	7c 01       	movw	r14, r24
    1322:	7a 94       	dec	r7
    1324:	71 10       	cpse	r7, r1
    1326:	e0 cf       	rjmp	.-64     	; 0x12e8 <_ZN5Print10printFloatEdh+0x130>
    1328:	ce 01       	movw	r24, r28
    132a:	df 91       	pop	r29
    132c:	cf 91       	pop	r28
    132e:	1f 91       	pop	r17
    1330:	0f 91       	pop	r16
    1332:	ff 90       	pop	r15
    1334:	ef 90       	pop	r14
    1336:	df 90       	pop	r13
    1338:	cf 90       	pop	r12
    133a:	bf 90       	pop	r11
    133c:	af 90       	pop	r10
    133e:	9f 90       	pop	r9
    1340:	8f 90       	pop	r8
    1342:	7f 90       	pop	r7
    1344:	08 95       	ret

00001346 <_ZN5Print7printlnEdi>:
  n += println();
  return n;
}

size_t Print::println(double num, int digits)
{
    1346:	0f 93       	push	r16
    1348:	1f 93       	push	r17
    134a:	cf 93       	push	r28
    134c:	df 93       	push	r29
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
    134e:	ec 01       	movw	r28, r24
}

size_t Print::println(double num, int digits)
{
  size_t n = print(num, digits);
  n += println();
    1350:	33 df       	rcall	.-410    	; 0x11b8 <_ZN5Print10printFloatEdh>
    1352:	8c 01       	movw	r16, r24
  return n;
}
    1354:	ce 01       	movw	r24, r28
    1356:	c5 de       	rcall	.-630    	; 0x10e2 <_ZN5Print7printlnEv>
    1358:	80 0f       	add	r24, r16
    135a:	91 1f       	adc	r25, r17
    135c:	df 91       	pop	r29
    135e:	cf 91       	pop	r28
    1360:	1f 91       	pop	r17
    1362:	0f 91       	pop	r16
    1364:	08 95       	ret

00001366 <_ZN6Stream9timedReadEv>:
    if (c < 0 || c == terminator) break;
    *buffer++ = (char)c;
    index++;
  }
  return index; // return number of characters, not including null terminator
}
    1366:	0f 93       	push	r16
    1368:	1f 93       	push	r17
    136a:	cf 93       	push	r28
    136c:	df 93       	push	r29
    136e:	ec 01       	movw	r28, r24
    1370:	89 d0       	rcall	.+274    	; 0x1484 <millis>
    1372:	68 87       	std	Y+8, r22	; 0x08
    1374:	79 87       	std	Y+9, r23	; 0x09
    1376:	8a 87       	std	Y+10, r24	; 0x0a
    1378:	9b 87       	std	Y+11, r25	; 0x0b
    137a:	e8 81       	ld	r30, Y
    137c:	f9 81       	ldd	r31, Y+1	; 0x01
    137e:	02 84       	ldd	r0, Z+10	; 0x0a
    1380:	f3 85       	ldd	r31, Z+11	; 0x0b
    1382:	e0 2d       	mov	r30, r0
    1384:	ce 01       	movw	r24, r28
    1386:	19 95       	eicall
    1388:	97 ff       	sbrs	r25, 7
    138a:	16 c0       	rjmp	.+44     	; 0x13b8 <_ZN6Stream9timedReadEv+0x52>
    138c:	7b d0       	rcall	.+246    	; 0x1484 <millis>
    138e:	08 85       	ldd	r16, Y+8	; 0x08
    1390:	19 85       	ldd	r17, Y+9	; 0x09
    1392:	2a 85       	ldd	r18, Y+10	; 0x0a
    1394:	3b 85       	ldd	r19, Y+11	; 0x0b
    1396:	dc 01       	movw	r26, r24
    1398:	cb 01       	movw	r24, r22
    139a:	80 1b       	sub	r24, r16
    139c:	91 0b       	sbc	r25, r17
    139e:	a2 0b       	sbc	r26, r18
    13a0:	b3 0b       	sbc	r27, r19
    13a2:	0c 81       	ldd	r16, Y+4	; 0x04
    13a4:	1d 81       	ldd	r17, Y+5	; 0x05
    13a6:	2e 81       	ldd	r18, Y+6	; 0x06
    13a8:	3f 81       	ldd	r19, Y+7	; 0x07
    13aa:	80 17       	cp	r24, r16
    13ac:	91 07       	cpc	r25, r17
    13ae:	a2 07       	cpc	r26, r18
    13b0:	b3 07       	cpc	r27, r19
    13b2:	18 f3       	brcs	.-58     	; 0x137a <_ZN6Stream9timedReadEv+0x14>
    13b4:	8f ef       	ldi	r24, 0xFF	; 255
    13b6:	9f ef       	ldi	r25, 0xFF	; 255
    13b8:	df 91       	pop	r29
    13ba:	cf 91       	pop	r28
    13bc:	1f 91       	pop	r17
    13be:	0f 91       	pop	r16
    13c0:	08 95       	ret

000013c2 <_ZN6Stream10readStringEv>:

String Stream::readString()
{
    13c2:	0f 93       	push	r16
    13c4:	1f 93       	push	r17
    13c6:	cf 93       	push	r28
    13c8:	df 93       	push	r29
    13ca:	ec 01       	movw	r28, r24
    13cc:	8b 01       	movw	r16, r22
  String ret;
    13ce:	65 e2       	ldi	r22, 0x25	; 37
    13d0:	72 e0       	ldi	r23, 0x02	; 2
  int c = timedRead();
    13d2:	5e d2       	rcall	.+1212   	; 0x1890 <_ZN6StringC1EPKc>
    13d4:	c8 01       	movw	r24, r16
  while (c >= 0)
    13d6:	c7 df       	rcall	.-114    	; 0x1366 <_ZN6Stream9timedReadEv>

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
	String & operator += (char c)			{concat(c); return (*this);}
    13d8:	97 fd       	sbrc	r25, 7
    13da:	04 c0       	rjmp	.+8      	; 0x13e4 <_ZN6Stream10readStringEv+0x22>
    13dc:	68 2f       	mov	r22, r24
    13de:	ce 01       	movw	r24, r28
  {
    ret += (char)c;
    c = timedRead();
  }
  return ret;
}
    13e0:	97 d2       	rcall	.+1326   	; 0x1910 <_ZN6String6concatEc>
    13e2:	f8 cf       	rjmp	.-16     	; 0x13d4 <_ZN6Stream10readStringEv+0x12>
    13e4:	ce 01       	movw	r24, r28
    13e6:	df 91       	pop	r29
    13e8:	cf 91       	pop	r28
    13ea:	1f 91       	pop	r17
    13ec:	0f 91       	pop	r16
    13ee:	08 95       	ret

000013f0 <__vector_23>:
		while ( ms > 0 && (micros() - start) >= 1000) {
			ms--;
			start += 1000;
		}
	}
}
    13f0:	1f 92       	push	r1
    13f2:	0f 92       	push	r0
    13f4:	0f b6       	in	r0, 0x3f	; 63
    13f6:	0f 92       	push	r0
    13f8:	11 24       	eor	r1, r1
    13fa:	2f 93       	push	r18
    13fc:	3f 93       	push	r19
    13fe:	8f 93       	push	r24
    1400:	9f 93       	push	r25
    1402:	af 93       	push	r26
    1404:	bf 93       	push	r27
    1406:	80 91 e6 02 	lds	r24, 0x02E6	; 0x8002e6 <timer0_millis>
    140a:	90 91 e7 02 	lds	r25, 0x02E7	; 0x8002e7 <timer0_millis+0x1>
    140e:	a0 91 e8 02 	lds	r26, 0x02E8	; 0x8002e8 <timer0_millis+0x2>
    1412:	b0 91 e9 02 	lds	r27, 0x02E9	; 0x8002e9 <timer0_millis+0x3>
    1416:	30 91 e5 02 	lds	r19, 0x02E5	; 0x8002e5 <timer0_fract>
    141a:	23 e0       	ldi	r18, 0x03	; 3
    141c:	23 0f       	add	r18, r19
    141e:	2d 37       	cpi	r18, 0x7D	; 125
    1420:	20 f4       	brcc	.+8      	; 0x142a <__vector_23+0x3a>
    1422:	01 96       	adiw	r24, 0x01	; 1
    1424:	a1 1d       	adc	r26, r1
    1426:	b1 1d       	adc	r27, r1
    1428:	05 c0       	rjmp	.+10     	; 0x1434 <__vector_23+0x44>
    142a:	26 e8       	ldi	r18, 0x86	; 134
    142c:	23 0f       	add	r18, r19
    142e:	02 96       	adiw	r24, 0x02	; 2
    1430:	a1 1d       	adc	r26, r1
    1432:	b1 1d       	adc	r27, r1
    1434:	20 93 e5 02 	sts	0x02E5, r18	; 0x8002e5 <timer0_fract>
    1438:	80 93 e6 02 	sts	0x02E6, r24	; 0x8002e6 <timer0_millis>
    143c:	90 93 e7 02 	sts	0x02E7, r25	; 0x8002e7 <timer0_millis+0x1>
    1440:	a0 93 e8 02 	sts	0x02E8, r26	; 0x8002e8 <timer0_millis+0x2>
    1444:	b0 93 e9 02 	sts	0x02E9, r27	; 0x8002e9 <timer0_millis+0x3>
    1448:	80 91 ea 02 	lds	r24, 0x02EA	; 0x8002ea <timer0_overflow_count>
    144c:	90 91 eb 02 	lds	r25, 0x02EB	; 0x8002eb <timer0_overflow_count+0x1>
    1450:	a0 91 ec 02 	lds	r26, 0x02EC	; 0x8002ec <timer0_overflow_count+0x2>
    1454:	b0 91 ed 02 	lds	r27, 0x02ED	; 0x8002ed <timer0_overflow_count+0x3>
    1458:	01 96       	adiw	r24, 0x01	; 1
    145a:	a1 1d       	adc	r26, r1
    145c:	b1 1d       	adc	r27, r1
    145e:	80 93 ea 02 	sts	0x02EA, r24	; 0x8002ea <timer0_overflow_count>
    1462:	90 93 eb 02 	sts	0x02EB, r25	; 0x8002eb <timer0_overflow_count+0x1>
    1466:	a0 93 ec 02 	sts	0x02EC, r26	; 0x8002ec <timer0_overflow_count+0x2>
    146a:	b0 93 ed 02 	sts	0x02ED, r27	; 0x8002ed <timer0_overflow_count+0x3>
    146e:	bf 91       	pop	r27
    1470:	af 91       	pop	r26
    1472:	9f 91       	pop	r25
    1474:	8f 91       	pop	r24
    1476:	3f 91       	pop	r19
    1478:	2f 91       	pop	r18
    147a:	0f 90       	pop	r0
    147c:	0f be       	out	0x3f, r0	; 63
    147e:	0f 90       	pop	r0
    1480:	1f 90       	pop	r1
    1482:	18 95       	reti

00001484 <millis>:
    1484:	2f b7       	in	r18, 0x3f	; 63
    1486:	f8 94       	cli
    1488:	60 91 e6 02 	lds	r22, 0x02E6	; 0x8002e6 <timer0_millis>
    148c:	70 91 e7 02 	lds	r23, 0x02E7	; 0x8002e7 <timer0_millis+0x1>
    1490:	80 91 e8 02 	lds	r24, 0x02E8	; 0x8002e8 <timer0_millis+0x2>
    1494:	90 91 e9 02 	lds	r25, 0x02E9	; 0x8002e9 <timer0_millis+0x3>
    1498:	2f bf       	out	0x3f, r18	; 63
    149a:	08 95       	ret

0000149c <delayMicroseconds>:
#elif F_CPU >= 16000000L
	// for the 16 MHz clock on most Arduino boards

	// for a one-microsecond delay, simply return.  the overhead
	// of the function call takes 14 (16) cycles, which is 1us
	if (us <= 1) return; //  = 3 cycles, (4 when true)
    149c:	82 30       	cpi	r24, 0x02	; 2
    149e:	91 05       	cpc	r25, r1
    14a0:	38 f0       	brcs	.+14     	; 0x14b0 <delayMicroseconds+0x14>

	// the following loop takes 1/4 of a microsecond (4 cycles)
	// per iteration, so execute it four times for each microsecond of
	// delay requested.
	us <<= 2; // x4 us, = 4 cycles
    14a2:	88 0f       	add	r24, r24
    14a4:	99 1f       	adc	r25, r25
    14a6:	88 0f       	add	r24, r24
    14a8:	99 1f       	adc	r25, r25

	// account for the time taken in the preceeding commands.
	// we just burned 19 (21) cycles above, remove 5, (5*4=20)
	// us is at least 8 so we can substract 5
	us -= 5; // = 2 cycles,
    14aa:	05 97       	sbiw	r24, 0x05	; 5
	

#endif

	// busy wait
	__asm__ __volatile__ (
    14ac:	01 97       	sbiw	r24, 0x01	; 1
    14ae:	f1 f7       	brne	.-4      	; 0x14ac <delayMicroseconds+0x10>
    14b0:	08 95       	ret

000014b2 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
    14b2:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
    14b4:	84 b5       	in	r24, 0x24	; 36
    14b6:	82 60       	ori	r24, 0x02	; 2
    14b8:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
    14ba:	84 b5       	in	r24, 0x24	; 36
    14bc:	81 60       	ori	r24, 0x01	; 1
    14be:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
    14c0:	85 b5       	in	r24, 0x25	; 37
    14c2:	82 60       	ori	r24, 0x02	; 2
    14c4:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
    14c6:	85 b5       	in	r24, 0x25	; 37
    14c8:	81 60       	ori	r24, 0x01	; 1
    14ca:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
    14cc:	ee e6       	ldi	r30, 0x6E	; 110
    14ce:	f0 e0       	ldi	r31, 0x00	; 0
    14d0:	80 81       	ld	r24, Z
    14d2:	81 60       	ori	r24, 0x01	; 1
    14d4:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
    14d6:	e1 e8       	ldi	r30, 0x81	; 129
    14d8:	f0 e0       	ldi	r31, 0x00	; 0
    14da:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
    14dc:	80 81       	ld	r24, Z
    14de:	82 60       	ori	r24, 0x02	; 2
    14e0:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
    14e2:	80 81       	ld	r24, Z
    14e4:	81 60       	ori	r24, 0x01	; 1
    14e6:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
    14e8:	e0 e8       	ldi	r30, 0x80	; 128
    14ea:	f0 e0       	ldi	r31, 0x00	; 0
    14ec:	80 81       	ld	r24, Z
    14ee:	81 60       	ori	r24, 0x01	; 1
    14f0:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
    14f2:	e1 eb       	ldi	r30, 0xB1	; 177
    14f4:	f0 e0       	ldi	r31, 0x00	; 0
    14f6:	80 81       	ld	r24, Z
    14f8:	84 60       	ori	r24, 0x04	; 4
    14fa:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
    14fc:	e0 eb       	ldi	r30, 0xB0	; 176
    14fe:	f0 e0       	ldi	r31, 0x00	; 0
    1500:	80 81       	ld	r24, Z
    1502:	81 60       	ori	r24, 0x01	; 1
    1504:	80 83       	st	Z, r24
//#else
	// Timer 2 not finished (may not be present on this CPU)
#endif

#if defined(TCCR3B) && defined(CS31) && defined(WGM30)
	sbi(TCCR3B, CS31);		// set timer 3 prescale factor to 64
    1506:	e1 e9       	ldi	r30, 0x91	; 145
    1508:	f0 e0       	ldi	r31, 0x00	; 0
    150a:	80 81       	ld	r24, Z
    150c:	82 60       	ori	r24, 0x02	; 2
    150e:	80 83       	st	Z, r24
	sbi(TCCR3B, CS30);
    1510:	80 81       	ld	r24, Z
    1512:	81 60       	ori	r24, 0x01	; 1
    1514:	80 83       	st	Z, r24
	sbi(TCCR3A, WGM30);		// put timer 3 in 8-bit phase correct pwm mode
    1516:	e0 e9       	ldi	r30, 0x90	; 144
    1518:	f0 e0       	ldi	r31, 0x00	; 0
    151a:	80 81       	ld	r24, Z
    151c:	81 60       	ori	r24, 0x01	; 1
    151e:	80 83       	st	Z, r24
	sbi(TCCR4D, WGM40);		// put timer 4 in phase- and frequency-correct PWM mode	
	sbi(TCCR4A, PWM4A);		// enable PWM mode for comparator OCR4A
	sbi(TCCR4C, PWM4D);		// enable PWM mode for comparator OCR4D
#else /* beginning of timer4 block for ATMEGA1280 and ATMEGA2560 */
#if defined(TCCR4B) && defined(CS41) && defined(WGM40)
	sbi(TCCR4B, CS41);		// set timer 4 prescale factor to 64
    1520:	e1 ea       	ldi	r30, 0xA1	; 161
    1522:	f0 e0       	ldi	r31, 0x00	; 0
    1524:	80 81       	ld	r24, Z
    1526:	82 60       	ori	r24, 0x02	; 2
    1528:	80 83       	st	Z, r24
	sbi(TCCR4B, CS40);
    152a:	80 81       	ld	r24, Z
    152c:	81 60       	ori	r24, 0x01	; 1
    152e:	80 83       	st	Z, r24
	sbi(TCCR4A, WGM40);		// put timer 4 in 8-bit phase correct pwm mode
    1530:	e0 ea       	ldi	r30, 0xA0	; 160
    1532:	f0 e0       	ldi	r31, 0x00	; 0
    1534:	80 81       	ld	r24, Z
    1536:	81 60       	ori	r24, 0x01	; 1
    1538:	80 83       	st	Z, r24
#endif
#endif /* end timer4 block for ATMEGA1280/2560 and similar */	

#if defined(TCCR5B) && defined(CS51) && defined(WGM50)
	sbi(TCCR5B, CS51);		// set timer 5 prescale factor to 64
    153a:	e1 e2       	ldi	r30, 0x21	; 33
    153c:	f1 e0       	ldi	r31, 0x01	; 1
    153e:	80 81       	ld	r24, Z
    1540:	82 60       	ori	r24, 0x02	; 2
    1542:	80 83       	st	Z, r24
	sbi(TCCR5B, CS50);
    1544:	80 81       	ld	r24, Z
    1546:	81 60       	ori	r24, 0x01	; 1
    1548:	80 83       	st	Z, r24
	sbi(TCCR5A, WGM50);		// put timer 5 in 8-bit phase correct pwm mode
    154a:	e0 e2       	ldi	r30, 0x20	; 32
    154c:	f1 e0       	ldi	r31, 0x01	; 1
    154e:	80 81       	ld	r24, Z
    1550:	81 60       	ori	r24, 0x01	; 1
    1552:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
    1554:	ea e7       	ldi	r30, 0x7A	; 122
    1556:	f0 e0       	ldi	r31, 0x00	; 0
    1558:	80 81       	ld	r24, Z
    155a:	84 60       	ori	r24, 0x04	; 4
    155c:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
    155e:	80 81       	ld	r24, Z
    1560:	82 60       	ori	r24, 0x02	; 2
    1562:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
    1564:	80 81       	ld	r24, Z
    1566:	81 60       	ori	r24, 0x01	; 1
    1568:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    156a:	80 81       	ld	r24, Z
    156c:	80 68       	ori	r24, 0x80	; 128
    156e:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
    1570:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7000c1>
    1574:	08 95       	ret

00001576 <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    1576:	90 e0       	ldi	r25, 0x00	; 0
    1578:	fc 01       	movw	r30, r24
    157a:	31 97       	sbiw	r30, 0x01	; 1
    157c:	e2 31       	cpi	r30, 0x12	; 18
    157e:	f1 05       	cpc	r31, r1
    1580:	08 f0       	brcs	.+2      	; 0x1584 <turnOffPWM+0xe>
    1582:	4d c0       	rjmp	.+154    	; 0x161e <turnOffPWM+0xa8>
    1584:	88 27       	eor	r24, r24
    1586:	ee 58       	subi	r30, 0x8E	; 142
    1588:	ff 4f       	sbci	r31, 0xFF	; 255
    158a:	8f 4f       	sbci	r24, 0xFF	; 255
    158c:	22 c3       	rjmp	.+1604   	; 0x1bd2 <__tablejump2__>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    158e:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
    1592:	8f 77       	andi	r24, 0x7F	; 127
    1594:	03 c0       	rjmp	.+6      	; 0x159c <turnOffPWM+0x26>
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    1596:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
    159a:	8f 7d       	andi	r24, 0xDF	; 223
    159c:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
    15a0:	08 95       	ret
		#endif
		#if defined(TCCR1A) && defined(COM1C1)
		case TIMER1C:   cbi(TCCR1A, COM1C1);    break;
    15a2:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
    15a6:	87 7f       	andi	r24, 0xF7	; 247
    15a8:	f9 cf       	rjmp	.-14     	; 0x159c <turnOffPWM+0x26>
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    15aa:	84 b5       	in	r24, 0x24	; 36
    15ac:	8f 77       	andi	r24, 0x7F	; 127
    15ae:	02 c0       	rjmp	.+4      	; 0x15b4 <turnOffPWM+0x3e>
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    15b0:	84 b5       	in	r24, 0x24	; 36
    15b2:	8f 7d       	andi	r24, 0xDF	; 223
    15b4:	84 bd       	out	0x24, r24	; 36
    15b6:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
    15b8:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7000b0>
    15bc:	8f 77       	andi	r24, 0x7F	; 127
    15be:	03 c0       	rjmp	.+6      	; 0x15c6 <turnOffPWM+0x50>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
    15c0:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7000b0>
    15c4:	8f 7d       	andi	r24, 0xDF	; 223
    15c6:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7000b0>
    15ca:	08 95       	ret
		#endif
		
		#if defined(TCCR3A) && defined(COM3A1)
		case  TIMER3A:  cbi(TCCR3A, COM3A1);    break;
    15cc:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
    15d0:	8f 77       	andi	r24, 0x7F	; 127
    15d2:	07 c0       	rjmp	.+14     	; 0x15e2 <turnOffPWM+0x6c>
		#endif
		#if defined(TCCR3A) && defined(COM3B1)
		case  TIMER3B:  cbi(TCCR3A, COM3B1);    break;
    15d4:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
    15d8:	8f 7d       	andi	r24, 0xDF	; 223
    15da:	03 c0       	rjmp	.+6      	; 0x15e2 <turnOffPWM+0x6c>
		#endif
		#if defined(TCCR3A) && defined(COM3C1)
		case  TIMER3C:  cbi(TCCR3A, COM3C1);    break;
    15dc:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
    15e0:	87 7f       	andi	r24, 0xF7	; 247
    15e2:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
    15e6:	08 95       	ret
		#endif

		#if defined(TCCR4A) && defined(COM4A1)
		case  TIMER4A:  cbi(TCCR4A, COM4A1);    break;
    15e8:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
    15ec:	8f 77       	andi	r24, 0x7F	; 127
    15ee:	07 c0       	rjmp	.+14     	; 0x15fe <turnOffPWM+0x88>
		#endif					
		#if defined(TCCR4A) && defined(COM4B1)
		case  TIMER4B:  cbi(TCCR4A, COM4B1);    break;
    15f0:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
    15f4:	8f 7d       	andi	r24, 0xDF	; 223
    15f6:	03 c0       	rjmp	.+6      	; 0x15fe <turnOffPWM+0x88>
		#endif
		#if defined(TCCR4A) && defined(COM4C1)
		case  TIMER4C:  cbi(TCCR4A, COM4C1);    break;
    15f8:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
    15fc:	87 7f       	andi	r24, 0xF7	; 247
    15fe:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
    1602:	08 95       	ret
		#if defined(TCCR4C) && defined(COM4D1)
		case TIMER4D:	cbi(TCCR4C, COM4D1);	break;
		#endif			
			
		#if defined(TCCR5A)
		case  TIMER5A:  cbi(TCCR5A, COM5A1);    break;
    1604:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
    1608:	8f 77       	andi	r24, 0x7F	; 127
    160a:	07 c0       	rjmp	.+14     	; 0x161a <turnOffPWM+0xa4>
		case  TIMER5B:  cbi(TCCR5A, COM5B1);    break;
    160c:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
    1610:	8f 7d       	andi	r24, 0xDF	; 223
    1612:	03 c0       	rjmp	.+6      	; 0x161a <turnOffPWM+0xa4>
		case  TIMER5C:  cbi(TCCR5A, COM5C1);    break;
    1614:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
    1618:	87 7f       	andi	r24, 0xF7	; 247
    161a:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
    161e:	08 95       	ret

00001620 <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    1620:	cf 93       	push	r28
    1622:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
    1624:	90 e0       	ldi	r25, 0x00	; 0
    1626:	fc 01       	movw	r30, r24
    1628:	e7 57       	subi	r30, 0x77	; 119
    162a:	fe 4f       	sbci	r31, 0xFE	; 254
    162c:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
    162e:	fc 01       	movw	r30, r24
    1630:	e1 53       	subi	r30, 0x31	; 49
    1632:	fe 4f       	sbci	r31, 0xFE	; 254
    1634:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
    1636:	88 23       	and	r24, r24
    1638:	61 f1       	breq	.+88     	; 0x1692 <pinMode+0x72>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
    163a:	90 e0       	ldi	r25, 0x00	; 0
    163c:	88 0f       	add	r24, r24
    163e:	99 1f       	adc	r25, r25
    1640:	fc 01       	movw	r30, r24
    1642:	e7 5b       	subi	r30, 0xB7	; 183
    1644:	fd 4f       	sbci	r31, 0xFD	; 253
    1646:	c5 91       	lpm	r28, Z+
    1648:	d4 91       	lpm	r29, Z
	out = portOutputRegister(port);
    164a:	fc 01       	movw	r30, r24
    164c:	e1 5d       	subi	r30, 0xD1	; 209
    164e:	fd 4f       	sbci	r31, 0xFD	; 253
    1650:	a5 91       	lpm	r26, Z+
    1652:	b4 91       	lpm	r27, Z

	if (mode == INPUT) { 
    1654:	61 11       	cpse	r22, r1
    1656:	09 c0       	rjmp	.+18     	; 0x166a <pinMode+0x4a>
		uint8_t oldSREG = SREG;
    1658:	9f b7       	in	r25, 0x3f	; 63
                cli();
    165a:	f8 94       	cli
		*reg &= ~bit;
    165c:	88 81       	ld	r24, Y
    165e:	20 95       	com	r18
    1660:	82 23       	and	r24, r18
    1662:	88 83       	st	Y, r24
		*out &= ~bit;
    1664:	ec 91       	ld	r30, X
    1666:	2e 23       	and	r18, r30
    1668:	0b c0       	rjmp	.+22     	; 0x1680 <pinMode+0x60>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
    166a:	62 30       	cpi	r22, 0x02	; 2
    166c:	61 f4       	brne	.+24     	; 0x1686 <pinMode+0x66>
		uint8_t oldSREG = SREG;
    166e:	9f b7       	in	r25, 0x3f	; 63
                cli();
    1670:	f8 94       	cli
		*reg &= ~bit;
    1672:	88 81       	ld	r24, Y
    1674:	32 2f       	mov	r19, r18
    1676:	30 95       	com	r19
    1678:	83 23       	and	r24, r19
    167a:	88 83       	st	Y, r24
		*out |= bit;
    167c:	ec 91       	ld	r30, X
    167e:	2e 2b       	or	r18, r30
    1680:	2c 93       	st	X, r18
		SREG = oldSREG;
    1682:	9f bf       	out	0x3f, r25	; 63
    1684:	06 c0       	rjmp	.+12     	; 0x1692 <pinMode+0x72>
	} else {
		uint8_t oldSREG = SREG;
    1686:	8f b7       	in	r24, 0x3f	; 63
                cli();
    1688:	f8 94       	cli
		*reg |= bit;
    168a:	e8 81       	ld	r30, Y
    168c:	2e 2b       	or	r18, r30
    168e:	28 83       	st	Y, r18
		SREG = oldSREG;
    1690:	8f bf       	out	0x3f, r24	; 63
	}
}
    1692:	df 91       	pop	r29
    1694:	cf 91       	pop	r28
    1696:	08 95       	ret

00001698 <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
    1698:	1f 93       	push	r17
    169a:	cf 93       	push	r28
    169c:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    169e:	28 2f       	mov	r18, r24
    16a0:	30 e0       	ldi	r19, 0x00	; 0
    16a2:	f9 01       	movw	r30, r18
    16a4:	ed 5b       	subi	r30, 0xBD	; 189
    16a6:	fe 4f       	sbci	r31, 0xFE	; 254
    16a8:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    16aa:	f9 01       	movw	r30, r18
    16ac:	e7 57       	subi	r30, 0x77	; 119
    16ae:	fe 4f       	sbci	r31, 0xFE	; 254
    16b0:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    16b2:	f9 01       	movw	r30, r18
    16b4:	e1 53       	subi	r30, 0x31	; 49
    16b6:	fe 4f       	sbci	r31, 0xFE	; 254
    16b8:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    16ba:	cc 23       	and	r28, r28
    16bc:	b9 f0       	breq	.+46     	; 0x16ec <digitalWrite+0x54>
    16be:	16 2f       	mov	r17, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    16c0:	81 11       	cpse	r24, r1

	out = portOutputRegister(port);
    16c2:	59 df       	rcall	.-334    	; 0x1576 <turnOffPWM>
    16c4:	ec 2f       	mov	r30, r28
    16c6:	f0 e0       	ldi	r31, 0x00	; 0
    16c8:	ee 0f       	add	r30, r30
    16ca:	ff 1f       	adc	r31, r31
    16cc:	e1 5d       	subi	r30, 0xD1	; 209
    16ce:	fd 4f       	sbci	r31, 0xFD	; 253
    16d0:	a5 91       	lpm	r26, Z+

	uint8_t oldSREG = SREG;
    16d2:	b4 91       	lpm	r27, Z
	cli();
    16d4:	9f b7       	in	r25, 0x3f	; 63

	if (val == LOW) {
    16d6:	f8 94       	cli
    16d8:	11 11       	cpse	r17, r1
		*out &= ~bit;
    16da:	04 c0       	rjmp	.+8      	; 0x16e4 <digitalWrite+0x4c>
    16dc:	8c 91       	ld	r24, X
    16de:	d0 95       	com	r29
    16e0:	d8 23       	and	r29, r24
	} else {
		*out |= bit;
    16e2:	02 c0       	rjmp	.+4      	; 0x16e8 <digitalWrite+0x50>
    16e4:	ec 91       	ld	r30, X
    16e6:	de 2b       	or	r29, r30
	}

	SREG = oldSREG;
    16e8:	dc 93       	st	X, r29
}
    16ea:	9f bf       	out	0x3f, r25	; 63
    16ec:	df 91       	pop	r29
    16ee:	cf 91       	pop	r28
    16f0:	1f 91       	pop	r17
    16f2:	08 95       	ret

000016f4 <digitalRead>:

int digitalRead(uint8_t pin)
{
    16f4:	cf 93       	push	r28
    16f6:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    16f8:	28 2f       	mov	r18, r24
    16fa:	30 e0       	ldi	r19, 0x00	; 0
    16fc:	f9 01       	movw	r30, r18
    16fe:	ed 5b       	subi	r30, 0xBD	; 189
    1700:	fe 4f       	sbci	r31, 0xFE	; 254
    1702:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    1704:	f9 01       	movw	r30, r18
    1706:	e7 57       	subi	r30, 0x77	; 119
    1708:	fe 4f       	sbci	r31, 0xFE	; 254
    170a:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    170c:	f9 01       	movw	r30, r18
    170e:	e1 53       	subi	r30, 0x31	; 49
    1710:	fe 4f       	sbci	r31, 0xFE	; 254
    1712:	c4 91       	lpm	r28, Z

	if (port == NOT_A_PIN) return LOW;
    1714:	cc 23       	and	r28, r28
    1716:	89 f0       	breq	.+34     	; 0x173a <digitalRead+0x46>

	// If the pin that support PWM output, we need to turn it off
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    1718:	81 11       	cpse	r24, r1

	if (*portInputRegister(port) & bit) return HIGH;
    171a:	2d df       	rcall	.-422    	; 0x1576 <turnOffPWM>
    171c:	ec 2f       	mov	r30, r28
    171e:	f0 e0       	ldi	r31, 0x00	; 0
    1720:	ee 0f       	add	r30, r30
    1722:	ff 1f       	adc	r31, r31
    1724:	eb 5e       	subi	r30, 0xEB	; 235
    1726:	fd 4f       	sbci	r31, 0xFD	; 253
    1728:	a5 91       	lpm	r26, Z+
    172a:	b4 91       	lpm	r27, Z
{
	uint8_t timer = digitalPinToTimer(pin);
	uint8_t bit = digitalPinToBitMask(pin);
	uint8_t port = digitalPinToPort(pin);

	if (port == NOT_A_PIN) return LOW;
    172c:	ec 91       	ld	r30, X
    172e:	ed 23       	and	r30, r29
    1730:	81 e0       	ldi	r24, 0x01	; 1
    1732:	90 e0       	ldi	r25, 0x00	; 0
    1734:	21 f4       	brne	.+8      	; 0x173e <digitalRead+0x4a>
    1736:	80 e0       	ldi	r24, 0x00	; 0
    1738:	02 c0       	rjmp	.+4      	; 0x173e <digitalRead+0x4a>
    173a:	80 e0       	ldi	r24, 0x00	; 0
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);

	if (*portInputRegister(port) & bit) return HIGH;
	return LOW;
}
    173c:	90 e0       	ldi	r25, 0x00	; 0
    173e:	df 91       	pop	r29
    1740:	cf 91       	pop	r28
    1742:	08 95       	ret

00001744 <_Z3maplllll>:
  long diff = howbig - howsmall;
  return random(diff) + howsmall;
}

long map(long x, long in_min, long in_max, long out_min, long out_max)
{
    1744:	4f 92       	push	r4
    1746:	5f 92       	push	r5
    1748:	6f 92       	push	r6
    174a:	7f 92       	push	r7
    174c:	af 92       	push	r10
    174e:	bf 92       	push	r11
    1750:	cf 92       	push	r12
    1752:	df 92       	push	r13
    1754:	ef 92       	push	r14
    1756:	ff 92       	push	r15
    1758:	0f 93       	push	r16
    175a:	1f 93       	push	r17
    175c:	cf 93       	push	r28
    175e:	df 93       	push	r29
    1760:	cd b7       	in	r28, 0x3d	; 61
    1762:	de b7       	in	r29, 0x3e	; 62
    1764:	29 01       	movw	r4, r18
    1766:	3a 01       	movw	r6, r20
  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
    1768:	9b 01       	movw	r18, r22
    176a:	ac 01       	movw	r20, r24
    176c:	24 19       	sub	r18, r4
    176e:	35 09       	sbc	r19, r5
    1770:	46 09       	sbc	r20, r6
    1772:	57 09       	sbc	r21, r7
    1774:	8a 89       	ldd	r24, Y+18	; 0x12
    1776:	9b 89       	ldd	r25, Y+19	; 0x13
    1778:	ac 89       	ldd	r26, Y+20	; 0x14
    177a:	bd 89       	ldd	r27, Y+21	; 0x15
    177c:	bc 01       	movw	r22, r24
    177e:	cd 01       	movw	r24, r26
    1780:	6a 19       	sub	r22, r10
    1782:	7b 09       	sbc	r23, r11
    1784:	8c 09       	sbc	r24, r12
    1786:	9d 09       	sbc	r25, r13
    1788:	d7 d1       	rcall	.+942    	; 0x1b38 <__mulsi3>
    178a:	a8 01       	movw	r20, r16
    178c:	97 01       	movw	r18, r14
    178e:	24 19       	sub	r18, r4
    1790:	35 09       	sbc	r19, r5
    1792:	46 09       	sbc	r20, r6
    1794:	57 09       	sbc	r21, r7
    1796:	01 d2       	rcall	.+1026   	; 0x1b9a <__divmodsi4>
    1798:	ca 01       	movw	r24, r20
    179a:	b9 01       	movw	r22, r18
    179c:	6a 0d       	add	r22, r10
    179e:	7b 1d       	adc	r23, r11
    17a0:	8c 1d       	adc	r24, r12
    17a2:	9d 1d       	adc	r25, r13
}
    17a4:	df 91       	pop	r29
    17a6:	cf 91       	pop	r28
    17a8:	1f 91       	pop	r17
    17aa:	0f 91       	pop	r16
    17ac:	ff 90       	pop	r15
    17ae:	ef 90       	pop	r14
    17b0:	df 90       	pop	r13
    17b2:	cf 90       	pop	r12
    17b4:	bf 90       	pop	r11
    17b6:	af 90       	pop	r10
    17b8:	7f 90       	pop	r7
    17ba:	6f 90       	pop	r6
    17bc:	5f 90       	pop	r5
    17be:	4f 90       	pop	r4
    17c0:	08 95       	ret

000017c2 <_ZN6StringD1Ev>:
/*  Character Access                         */
/*********************************************/

char String::charAt(unsigned int loc) const
{
	return operator[](loc);
    17c2:	fc 01       	movw	r30, r24
    17c4:	80 81       	ld	r24, Z
    17c6:	91 81       	ldd	r25, Z+1	; 0x01
    17c8:	bd c2       	rjmp	.+1402   	; 0x1d44 <free>

000017ca <_ZN6String10invalidateEv>:
    17ca:	cf 93       	push	r28
    17cc:	df 93       	push	r29
    17ce:	ec 01       	movw	r28, r24
    17d0:	88 81       	ld	r24, Y
    17d2:	99 81       	ldd	r25, Y+1	; 0x01
    17d4:	00 97       	sbiw	r24, 0x00	; 0
    17d6:	09 f0       	breq	.+2      	; 0x17da <_ZN6String10invalidateEv+0x10>
    17d8:	b5 d2       	rcall	.+1386   	; 0x1d44 <free>
    17da:	19 82       	std	Y+1, r1	; 0x01
    17dc:	18 82       	st	Y, r1
    17de:	1d 82       	std	Y+5, r1	; 0x05
    17e0:	1c 82       	std	Y+4, r1	; 0x04
    17e2:	1b 82       	std	Y+3, r1	; 0x03
    17e4:	1a 82       	std	Y+2, r1	; 0x02
    17e6:	df 91       	pop	r29
    17e8:	cf 91       	pop	r28
    17ea:	08 95       	ret

000017ec <_ZN6String12changeBufferEj>:
    17ec:	0f 93       	push	r16
    17ee:	1f 93       	push	r17
    17f0:	cf 93       	push	r28
    17f2:	df 93       	push	r29
    17f4:	ec 01       	movw	r28, r24
    17f6:	8b 01       	movw	r16, r22
    17f8:	6f 5f       	subi	r22, 0xFF	; 255
    17fa:	7f 4f       	sbci	r23, 0xFF	; 255
    17fc:	88 81       	ld	r24, Y
    17fe:	99 81       	ldd	r25, Y+1	; 0x01
    1800:	2a d3       	rcall	.+1620   	; 0x1e56 <realloc>
    1802:	00 97       	sbiw	r24, 0x00	; 0
    1804:	31 f0       	breq	.+12     	; 0x1812 <_ZN6String12changeBufferEj+0x26>
    1806:	99 83       	std	Y+1, r25	; 0x01
    1808:	88 83       	st	Y, r24
    180a:	1b 83       	std	Y+3, r17	; 0x03
    180c:	0a 83       	std	Y+2, r16	; 0x02
    180e:	81 e0       	ldi	r24, 0x01	; 1
    1810:	01 c0       	rjmp	.+2      	; 0x1814 <_ZN6String12changeBufferEj+0x28>
    1812:	80 e0       	ldi	r24, 0x00	; 0
    1814:	df 91       	pop	r29
    1816:	cf 91       	pop	r28
    1818:	1f 91       	pop	r17
    181a:	0f 91       	pop	r16
    181c:	08 95       	ret

0000181e <_ZN6String7reserveEj>:
    181e:	cf 93       	push	r28
    1820:	df 93       	push	r29
    1822:	ec 01       	movw	r28, r24
    1824:	88 81       	ld	r24, Y
    1826:	99 81       	ldd	r25, Y+1	; 0x01
    1828:	89 2b       	or	r24, r25
    182a:	29 f0       	breq	.+10     	; 0x1836 <_ZN6String7reserveEj+0x18>
    182c:	8a 81       	ldd	r24, Y+2	; 0x02
    182e:	9b 81       	ldd	r25, Y+3	; 0x03
    1830:	86 17       	cp	r24, r22
    1832:	97 07       	cpc	r25, r23
    1834:	58 f4       	brcc	.+22     	; 0x184c <_ZN6String7reserveEj+0x2e>
    1836:	ce 01       	movw	r24, r28
    1838:	d9 df       	rcall	.-78     	; 0x17ec <_ZN6String12changeBufferEj>
    183a:	88 23       	and	r24, r24
    183c:	41 f0       	breq	.+16     	; 0x184e <_ZN6String7reserveEj+0x30>
    183e:	8c 81       	ldd	r24, Y+4	; 0x04
    1840:	9d 81       	ldd	r25, Y+5	; 0x05
    1842:	89 2b       	or	r24, r25
    1844:	19 f4       	brne	.+6      	; 0x184c <_ZN6String7reserveEj+0x2e>
    1846:	e8 81       	ld	r30, Y
    1848:	f9 81       	ldd	r31, Y+1	; 0x01
    184a:	10 82       	st	Z, r1
    184c:	81 e0       	ldi	r24, 0x01	; 1
    184e:	df 91       	pop	r29
    1850:	cf 91       	pop	r28
    1852:	08 95       	ret

00001854 <_ZN6String4copyEPKcj>:
    1854:	ef 92       	push	r14
    1856:	ff 92       	push	r15
    1858:	0f 93       	push	r16
    185a:	1f 93       	push	r17
    185c:	cf 93       	push	r28
    185e:	df 93       	push	r29
    1860:	ec 01       	movw	r28, r24
    1862:	7b 01       	movw	r14, r22
    1864:	8a 01       	movw	r16, r20
    1866:	ba 01       	movw	r22, r20
    1868:	da df       	rcall	.-76     	; 0x181e <_ZN6String7reserveEj>
    186a:	81 11       	cpse	r24, r1
    186c:	03 c0       	rjmp	.+6      	; 0x1874 <_ZN6String4copyEPKcj+0x20>
    186e:	ce 01       	movw	r24, r28
    1870:	ac df       	rcall	.-168    	; 0x17ca <_ZN6String10invalidateEv>
    1872:	06 c0       	rjmp	.+12     	; 0x1880 <_ZN6String4copyEPKcj+0x2c>
    1874:	1d 83       	std	Y+5, r17	; 0x05
    1876:	0c 83       	std	Y+4, r16	; 0x04
    1878:	b7 01       	movw	r22, r14
    187a:	88 81       	ld	r24, Y
    187c:	99 81       	ldd	r25, Y+1	; 0x01
    187e:	48 d5       	rcall	.+2704   	; 0x2310 <strcpy>
    1880:	ce 01       	movw	r24, r28
    1882:	df 91       	pop	r29
    1884:	cf 91       	pop	r28
    1886:	1f 91       	pop	r17
    1888:	0f 91       	pop	r16
    188a:	ff 90       	pop	r15
    188c:	ef 90       	pop	r14
    188e:	08 95       	ret

00001890 <_ZN6StringC1EPKc>:
    1890:	fc 01       	movw	r30, r24
    1892:	11 82       	std	Z+1, r1	; 0x01
    1894:	10 82       	st	Z, r1
    1896:	13 82       	std	Z+3, r1	; 0x03
    1898:	12 82       	std	Z+2, r1	; 0x02
    189a:	15 82       	std	Z+5, r1	; 0x05
    189c:	14 82       	std	Z+4, r1	; 0x04
    189e:	61 15       	cp	r22, r1
    18a0:	71 05       	cpc	r23, r1
    18a2:	49 f0       	breq	.+18     	; 0x18b6 <_ZN6StringC1EPKc+0x26>
    18a4:	fb 01       	movw	r30, r22
    18a6:	01 90       	ld	r0, Z+
    18a8:	00 20       	and	r0, r0
    18aa:	e9 f7       	brne	.-6      	; 0x18a6 <_ZN6StringC1EPKc+0x16>
    18ac:	31 97       	sbiw	r30, 0x01	; 1
    18ae:	af 01       	movw	r20, r30
    18b0:	46 1b       	sub	r20, r22
    18b2:	57 0b       	sbc	r21, r23
    18b4:	cf cf       	rjmp	.-98     	; 0x1854 <_ZN6String4copyEPKcj>
    18b6:	08 95       	ret

000018b8 <_ZN6String6concatEPKcj>:
    18b8:	ef 92       	push	r14
    18ba:	ff 92       	push	r15
    18bc:	0f 93       	push	r16
    18be:	1f 93       	push	r17
    18c0:	cf 93       	push	r28
    18c2:	df 93       	push	r29
    18c4:	61 15       	cp	r22, r1
    18c6:	71 05       	cpc	r23, r1
    18c8:	11 f4       	brne	.+4      	; 0x18ce <_ZN6String6concatEPKcj+0x16>
    18ca:	80 e0       	ldi	r24, 0x00	; 0
    18cc:	1a c0       	rjmp	.+52     	; 0x1902 <_ZN6String6concatEPKcj+0x4a>
    18ce:	41 15       	cp	r20, r1
    18d0:	51 05       	cpc	r21, r1
    18d2:	b1 f0       	breq	.+44     	; 0x1900 <_ZN6String6concatEPKcj+0x48>
    18d4:	7b 01       	movw	r14, r22
    18d6:	ec 01       	movw	r28, r24
    18d8:	8c 81       	ldd	r24, Y+4	; 0x04
    18da:	9d 81       	ldd	r25, Y+5	; 0x05
    18dc:	8a 01       	movw	r16, r20
    18de:	08 0f       	add	r16, r24
    18e0:	19 1f       	adc	r17, r25
    18e2:	b8 01       	movw	r22, r16
    18e4:	ce 01       	movw	r24, r28
    18e6:	9b df       	rcall	.-202    	; 0x181e <_ZN6String7reserveEj>
    18e8:	88 23       	and	r24, r24
    18ea:	79 f3       	breq	.-34     	; 0x18ca <_ZN6String6concatEPKcj+0x12>
    18ec:	28 81       	ld	r18, Y
    18ee:	39 81       	ldd	r19, Y+1	; 0x01
    18f0:	8c 81       	ldd	r24, Y+4	; 0x04
    18f2:	9d 81       	ldd	r25, Y+5	; 0x05
    18f4:	b7 01       	movw	r22, r14
    18f6:	82 0f       	add	r24, r18
    18f8:	93 1f       	adc	r25, r19
    18fa:	0a d5       	rcall	.+2580   	; 0x2310 <strcpy>
    18fc:	1d 83       	std	Y+5, r17	; 0x05
    18fe:	0c 83       	std	Y+4, r16	; 0x04
    1900:	81 e0       	ldi	r24, 0x01	; 1
    1902:	df 91       	pop	r29
    1904:	cf 91       	pop	r28
    1906:	1f 91       	pop	r17
    1908:	0f 91       	pop	r16
    190a:	ff 90       	pop	r15
    190c:	ef 90       	pop	r14
    190e:	08 95       	ret

00001910 <_ZN6String6concatEc>:
    1910:	cf 93       	push	r28
    1912:	df 93       	push	r29
    1914:	1f 92       	push	r1
    1916:	1f 92       	push	r1
    1918:	cd b7       	in	r28, 0x3d	; 61
    191a:	de b7       	in	r29, 0x3e	; 62
    191c:	69 83       	std	Y+1, r22	; 0x01
    191e:	1a 82       	std	Y+2, r1	; 0x02
    1920:	41 e0       	ldi	r20, 0x01	; 1
    1922:	50 e0       	ldi	r21, 0x00	; 0
    1924:	be 01       	movw	r22, r28
    1926:	6f 5f       	subi	r22, 0xFF	; 255
    1928:	7f 4f       	sbci	r23, 0xFF	; 255
    192a:	c6 df       	rcall	.-116    	; 0x18b8 <_ZN6String6concatEPKcj>
    192c:	0f 90       	pop	r0
    192e:	0f 90       	pop	r0
    1930:	df 91       	pop	r29
    1932:	cf 91       	pop	r28
    1934:	08 95       	ret

00001936 <_ZNK6String8getBytesEPhjj>:
	if (index >= len || !buffer) return 0;
	return buffer[index];
}

void String::getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index) const
{
    1936:	0f 93       	push	r16
    1938:	1f 93       	push	r17
    193a:	cf 93       	push	r28
    193c:	df 93       	push	r29
	if (!bufsize || !buf) return;
    193e:	41 15       	cp	r20, r1
    1940:	51 05       	cpc	r21, r1
    1942:	11 f1       	breq	.+68     	; 0x1988 <_ZNK6String8getBytesEPhjj+0x52>
    1944:	61 15       	cp	r22, r1
    1946:	71 05       	cpc	r23, r1
    1948:	f9 f0       	breq	.+62     	; 0x1988 <_ZNK6String8getBytesEPhjj+0x52>
	if (index >= len) {
    194a:	dc 01       	movw	r26, r24
    194c:	14 96       	adiw	r26, 0x04	; 4
    194e:	ed 91       	ld	r30, X+
    1950:	fc 91       	ld	r31, X
    1952:	15 97       	sbiw	r26, 0x05	; 5
    1954:	2e 17       	cp	r18, r30
    1956:	3f 07       	cpc	r19, r31
    1958:	18 f0       	brcs	.+6      	; 0x1960 <_ZNK6String8getBytesEPhjj+0x2a>
		buf[0] = 0;
    195a:	fb 01       	movw	r30, r22
    195c:	10 82       	st	Z, r1
		return;
    195e:	14 c0       	rjmp	.+40     	; 0x1988 <_ZNK6String8getBytesEPhjj+0x52>
	}
	unsigned int n = bufsize - 1;
	if (n > len - index) n = len - index;
    1960:	e2 1b       	sub	r30, r18
    1962:	f3 0b       	sbc	r31, r19
    1964:	ea 01       	movw	r28, r20
    1966:	21 97       	sbiw	r28, 0x01	; 1
    1968:	ec 17       	cp	r30, r28
    196a:	fd 07       	cpc	r31, r29
    196c:	08 f4       	brcc	.+2      	; 0x1970 <_ZNK6String8getBytesEPhjj+0x3a>
    196e:	ef 01       	movw	r28, r30
    1970:	8b 01       	movw	r16, r22
    1972:	fc 01       	movw	r30, r24
	strncpy((char *)buf, buffer + index, n);
    1974:	60 81       	ld	r22, Z
    1976:	71 81       	ldd	r23, Z+1	; 0x01
    1978:	62 0f       	add	r22, r18
    197a:	73 1f       	adc	r23, r19
    197c:	ae 01       	movw	r20, r28
    197e:	c8 01       	movw	r24, r16
    1980:	d8 d4       	rcall	.+2480   	; 0x2332 <strncpy>
	buf[n] = 0;
    1982:	c0 0f       	add	r28, r16
    1984:	d1 1f       	adc	r29, r17
    1986:	18 82       	st	Y, r1
}
    1988:	df 91       	pop	r29
    198a:	cf 91       	pop	r28
    198c:	1f 91       	pop	r17
    198e:	0f 91       	pop	r16
    1990:	08 95       	ret

00001992 <__cmpsf2>:
    1992:	39 d9       	rcall	.-3470   	; 0xc06 <__fp_cmp>
    1994:	08 f4       	brcc	.+2      	; 0x1998 <__cmpsf2+0x6>
    1996:	81 e0       	ldi	r24, 0x01	; 1
    1998:	08 95       	ret

0000199a <__divsf3>:
    199a:	0c d0       	rcall	.+24     	; 0x19b4 <__divsf3x>
    199c:	f6 c8       	rjmp	.-3604   	; 0xb8a <__fp_round>
    199e:	ee d8       	rcall	.-3620   	; 0xb7c <__fp_pscB>
    19a0:	40 f0       	brcs	.+16     	; 0x19b2 <__divsf3+0x18>
    19a2:	e5 d8       	rcall	.-3638   	; 0xb6e <__fp_pscA>
    19a4:	30 f0       	brcs	.+12     	; 0x19b2 <__divsf3+0x18>
    19a6:	21 f4       	brne	.+8      	; 0x19b0 <__divsf3+0x16>
    19a8:	5f 3f       	cpi	r21, 0xFF	; 255
    19aa:	19 f0       	breq	.+6      	; 0x19b2 <__divsf3+0x18>
    19ac:	d7 c8       	rjmp	.-3666   	; 0xb5c <__fp_inf>
    19ae:	51 11       	cpse	r21, r1
    19b0:	20 c9       	rjmp	.-3520   	; 0xbf2 <__fp_szero>
    19b2:	da c8       	rjmp	.-3660   	; 0xb68 <__fp_nan>

000019b4 <__divsf3x>:
    19b4:	fb d8       	rcall	.-3594   	; 0xbac <__fp_split3>
    19b6:	98 f3       	brcs	.-26     	; 0x199e <__divsf3+0x4>

000019b8 <__divsf3_pse>:
    19b8:	99 23       	and	r25, r25
    19ba:	c9 f3       	breq	.-14     	; 0x19ae <__divsf3+0x14>
    19bc:	55 23       	and	r21, r21
    19be:	b1 f3       	breq	.-20     	; 0x19ac <__divsf3+0x12>
    19c0:	95 1b       	sub	r25, r21
    19c2:	55 0b       	sbc	r21, r21
    19c4:	bb 27       	eor	r27, r27
    19c6:	aa 27       	eor	r26, r26
    19c8:	62 17       	cp	r22, r18
    19ca:	73 07       	cpc	r23, r19
    19cc:	84 07       	cpc	r24, r20
    19ce:	38 f0       	brcs	.+14     	; 0x19de <__divsf3_pse+0x26>
    19d0:	9f 5f       	subi	r25, 0xFF	; 255
    19d2:	5f 4f       	sbci	r21, 0xFF	; 255
    19d4:	22 0f       	add	r18, r18
    19d6:	33 1f       	adc	r19, r19
    19d8:	44 1f       	adc	r20, r20
    19da:	aa 1f       	adc	r26, r26
    19dc:	a9 f3       	breq	.-22     	; 0x19c8 <__divsf3_pse+0x10>
    19de:	33 d0       	rcall	.+102    	; 0x1a46 <__divsf3_pse+0x8e>
    19e0:	0e 2e       	mov	r0, r30
    19e2:	3a f0       	brmi	.+14     	; 0x19f2 <__divsf3_pse+0x3a>
    19e4:	e0 e8       	ldi	r30, 0x80	; 128
    19e6:	30 d0       	rcall	.+96     	; 0x1a48 <__divsf3_pse+0x90>
    19e8:	91 50       	subi	r25, 0x01	; 1
    19ea:	50 40       	sbci	r21, 0x00	; 0
    19ec:	e6 95       	lsr	r30
    19ee:	00 1c       	adc	r0, r0
    19f0:	ca f7       	brpl	.-14     	; 0x19e4 <__divsf3_pse+0x2c>
    19f2:	29 d0       	rcall	.+82     	; 0x1a46 <__divsf3_pse+0x8e>
    19f4:	fe 2f       	mov	r31, r30
    19f6:	27 d0       	rcall	.+78     	; 0x1a46 <__divsf3_pse+0x8e>
    19f8:	66 0f       	add	r22, r22
    19fa:	77 1f       	adc	r23, r23
    19fc:	88 1f       	adc	r24, r24
    19fe:	bb 1f       	adc	r27, r27
    1a00:	26 17       	cp	r18, r22
    1a02:	37 07       	cpc	r19, r23
    1a04:	48 07       	cpc	r20, r24
    1a06:	ab 07       	cpc	r26, r27
    1a08:	b0 e8       	ldi	r27, 0x80	; 128
    1a0a:	09 f0       	breq	.+2      	; 0x1a0e <__divsf3_pse+0x56>
    1a0c:	bb 0b       	sbc	r27, r27
    1a0e:	80 2d       	mov	r24, r0
    1a10:	bf 01       	movw	r22, r30
    1a12:	ff 27       	eor	r31, r31
    1a14:	93 58       	subi	r25, 0x83	; 131
    1a16:	5f 4f       	sbci	r21, 0xFF	; 255
    1a18:	2a f0       	brmi	.+10     	; 0x1a24 <__divsf3_pse+0x6c>
    1a1a:	9e 3f       	cpi	r25, 0xFE	; 254
    1a1c:	51 05       	cpc	r21, r1
    1a1e:	68 f0       	brcs	.+26     	; 0x1a3a <__divsf3_pse+0x82>
    1a20:	9d c8       	rjmp	.-3782   	; 0xb5c <__fp_inf>
    1a22:	e7 c8       	rjmp	.-3634   	; 0xbf2 <__fp_szero>
    1a24:	5f 3f       	cpi	r21, 0xFF	; 255
    1a26:	ec f3       	brlt	.-6      	; 0x1a22 <__divsf3_pse+0x6a>
    1a28:	98 3e       	cpi	r25, 0xE8	; 232
    1a2a:	dc f3       	brlt	.-10     	; 0x1a22 <__divsf3_pse+0x6a>
    1a2c:	86 95       	lsr	r24
    1a2e:	77 95       	ror	r23
    1a30:	67 95       	ror	r22
    1a32:	b7 95       	ror	r27
    1a34:	f7 95       	ror	r31
    1a36:	9f 5f       	subi	r25, 0xFF	; 255
    1a38:	c9 f7       	brne	.-14     	; 0x1a2c <__divsf3_pse+0x74>
    1a3a:	88 0f       	add	r24, r24
    1a3c:	91 1d       	adc	r25, r1
    1a3e:	96 95       	lsr	r25
    1a40:	87 95       	ror	r24
    1a42:	97 f9       	bld	r25, 7
    1a44:	08 95       	ret
    1a46:	e1 e0       	ldi	r30, 0x01	; 1
    1a48:	66 0f       	add	r22, r22
    1a4a:	77 1f       	adc	r23, r23
    1a4c:	88 1f       	adc	r24, r24
    1a4e:	bb 1f       	adc	r27, r27
    1a50:	62 17       	cp	r22, r18
    1a52:	73 07       	cpc	r23, r19
    1a54:	84 07       	cpc	r24, r20
    1a56:	ba 07       	cpc	r27, r26
    1a58:	20 f0       	brcs	.+8      	; 0x1a62 <__divsf3_pse+0xaa>
    1a5a:	62 1b       	sub	r22, r18
    1a5c:	73 0b       	sbc	r23, r19
    1a5e:	84 0b       	sbc	r24, r20
    1a60:	ba 0b       	sbc	r27, r26
    1a62:	ee 1f       	adc	r30, r30
    1a64:	88 f7       	brcc	.-30     	; 0x1a48 <__divsf3_pse+0x90>
    1a66:	e0 95       	com	r30
    1a68:	08 95       	ret

00001a6a <__mulsf3>:
    1a6a:	0b d0       	rcall	.+22     	; 0x1a82 <__mulsf3x>
    1a6c:	8e c8       	rjmp	.-3812   	; 0xb8a <__fp_round>
    1a6e:	7f d8       	rcall	.-3842   	; 0xb6e <__fp_pscA>
    1a70:	28 f0       	brcs	.+10     	; 0x1a7c <__mulsf3+0x12>
    1a72:	84 d8       	rcall	.-3832   	; 0xb7c <__fp_pscB>
    1a74:	18 f0       	brcs	.+6      	; 0x1a7c <__mulsf3+0x12>
    1a76:	95 23       	and	r25, r21
    1a78:	09 f0       	breq	.+2      	; 0x1a7c <__mulsf3+0x12>
    1a7a:	70 c8       	rjmp	.-3872   	; 0xb5c <__fp_inf>
    1a7c:	75 c8       	rjmp	.-3862   	; 0xb68 <__fp_nan>
    1a7e:	11 24       	eor	r1, r1
    1a80:	b8 c8       	rjmp	.-3728   	; 0xbf2 <__fp_szero>

00001a82 <__mulsf3x>:
    1a82:	94 d8       	rcall	.-3800   	; 0xbac <__fp_split3>
    1a84:	a0 f3       	brcs	.-24     	; 0x1a6e <__mulsf3+0x4>

00001a86 <__mulsf3_pse>:
    1a86:	95 9f       	mul	r25, r21
    1a88:	d1 f3       	breq	.-12     	; 0x1a7e <__mulsf3+0x14>
    1a8a:	95 0f       	add	r25, r21
    1a8c:	50 e0       	ldi	r21, 0x00	; 0
    1a8e:	55 1f       	adc	r21, r21
    1a90:	62 9f       	mul	r22, r18
    1a92:	f0 01       	movw	r30, r0
    1a94:	72 9f       	mul	r23, r18
    1a96:	bb 27       	eor	r27, r27
    1a98:	f0 0d       	add	r31, r0
    1a9a:	b1 1d       	adc	r27, r1
    1a9c:	63 9f       	mul	r22, r19
    1a9e:	aa 27       	eor	r26, r26
    1aa0:	f0 0d       	add	r31, r0
    1aa2:	b1 1d       	adc	r27, r1
    1aa4:	aa 1f       	adc	r26, r26
    1aa6:	64 9f       	mul	r22, r20
    1aa8:	66 27       	eor	r22, r22
    1aaa:	b0 0d       	add	r27, r0
    1aac:	a1 1d       	adc	r26, r1
    1aae:	66 1f       	adc	r22, r22
    1ab0:	82 9f       	mul	r24, r18
    1ab2:	22 27       	eor	r18, r18
    1ab4:	b0 0d       	add	r27, r0
    1ab6:	a1 1d       	adc	r26, r1
    1ab8:	62 1f       	adc	r22, r18
    1aba:	73 9f       	mul	r23, r19
    1abc:	b0 0d       	add	r27, r0
    1abe:	a1 1d       	adc	r26, r1
    1ac0:	62 1f       	adc	r22, r18
    1ac2:	83 9f       	mul	r24, r19
    1ac4:	a0 0d       	add	r26, r0
    1ac6:	61 1d       	adc	r22, r1
    1ac8:	22 1f       	adc	r18, r18
    1aca:	74 9f       	mul	r23, r20
    1acc:	33 27       	eor	r19, r19
    1ace:	a0 0d       	add	r26, r0
    1ad0:	61 1d       	adc	r22, r1
    1ad2:	23 1f       	adc	r18, r19
    1ad4:	84 9f       	mul	r24, r20
    1ad6:	60 0d       	add	r22, r0
    1ad8:	21 1d       	adc	r18, r1
    1ada:	82 2f       	mov	r24, r18
    1adc:	76 2f       	mov	r23, r22
    1ade:	6a 2f       	mov	r22, r26
    1ae0:	11 24       	eor	r1, r1
    1ae2:	9f 57       	subi	r25, 0x7F	; 127
    1ae4:	50 40       	sbci	r21, 0x00	; 0
    1ae6:	8a f0       	brmi	.+34     	; 0x1b0a <__mulsf3_pse+0x84>
    1ae8:	e1 f0       	breq	.+56     	; 0x1b22 <__mulsf3_pse+0x9c>
    1aea:	88 23       	and	r24, r24
    1aec:	4a f0       	brmi	.+18     	; 0x1b00 <__mulsf3_pse+0x7a>
    1aee:	ee 0f       	add	r30, r30
    1af0:	ff 1f       	adc	r31, r31
    1af2:	bb 1f       	adc	r27, r27
    1af4:	66 1f       	adc	r22, r22
    1af6:	77 1f       	adc	r23, r23
    1af8:	88 1f       	adc	r24, r24
    1afa:	91 50       	subi	r25, 0x01	; 1
    1afc:	50 40       	sbci	r21, 0x00	; 0
    1afe:	a9 f7       	brne	.-22     	; 0x1aea <__mulsf3_pse+0x64>
    1b00:	9e 3f       	cpi	r25, 0xFE	; 254
    1b02:	51 05       	cpc	r21, r1
    1b04:	70 f0       	brcs	.+28     	; 0x1b22 <__mulsf3_pse+0x9c>
    1b06:	2a c8       	rjmp	.-4012   	; 0xb5c <__fp_inf>
    1b08:	74 c8       	rjmp	.-3864   	; 0xbf2 <__fp_szero>
    1b0a:	5f 3f       	cpi	r21, 0xFF	; 255
    1b0c:	ec f3       	brlt	.-6      	; 0x1b08 <__mulsf3_pse+0x82>
    1b0e:	98 3e       	cpi	r25, 0xE8	; 232
    1b10:	dc f3       	brlt	.-10     	; 0x1b08 <__mulsf3_pse+0x82>
    1b12:	86 95       	lsr	r24
    1b14:	77 95       	ror	r23
    1b16:	67 95       	ror	r22
    1b18:	b7 95       	ror	r27
    1b1a:	f7 95       	ror	r31
    1b1c:	e7 95       	ror	r30
    1b1e:	9f 5f       	subi	r25, 0xFF	; 255
    1b20:	c1 f7       	brne	.-16     	; 0x1b12 <__mulsf3_pse+0x8c>
    1b22:	fe 2b       	or	r31, r30
    1b24:	88 0f       	add	r24, r24
    1b26:	91 1d       	adc	r25, r1
    1b28:	96 95       	lsr	r25
    1b2a:	87 95       	ror	r24
    1b2c:	97 f9       	bld	r25, 7
    1b2e:	08 95       	ret

00001b30 <__unordsf2>:
    1b30:	6a d8       	rcall	.-3884   	; 0xc06 <__fp_cmp>
    1b32:	88 0b       	sbc	r24, r24
    1b34:	99 0b       	sbc	r25, r25
    1b36:	08 95       	ret

00001b38 <__mulsi3>:
    1b38:	db 01       	movw	r26, r22
    1b3a:	8f 93       	push	r24
    1b3c:	9f 93       	push	r25
    1b3e:	51 d0       	rcall	.+162    	; 0x1be2 <__muluhisi3>
    1b40:	bf 91       	pop	r27
    1b42:	af 91       	pop	r26
    1b44:	a2 9f       	mul	r26, r18
    1b46:	80 0d       	add	r24, r0
    1b48:	91 1d       	adc	r25, r1
    1b4a:	a3 9f       	mul	r26, r19
    1b4c:	90 0d       	add	r25, r0
    1b4e:	b2 9f       	mul	r27, r18
    1b50:	90 0d       	add	r25, r0
    1b52:	11 24       	eor	r1, r1
    1b54:	08 95       	ret

00001b56 <__udivmodsi4>:
    1b56:	a1 e2       	ldi	r26, 0x21	; 33
    1b58:	1a 2e       	mov	r1, r26
    1b5a:	aa 1b       	sub	r26, r26
    1b5c:	bb 1b       	sub	r27, r27
    1b5e:	fd 01       	movw	r30, r26
    1b60:	0d c0       	rjmp	.+26     	; 0x1b7c <__udivmodsi4_ep>

00001b62 <__udivmodsi4_loop>:
    1b62:	aa 1f       	adc	r26, r26
    1b64:	bb 1f       	adc	r27, r27
    1b66:	ee 1f       	adc	r30, r30
    1b68:	ff 1f       	adc	r31, r31
    1b6a:	a2 17       	cp	r26, r18
    1b6c:	b3 07       	cpc	r27, r19
    1b6e:	e4 07       	cpc	r30, r20
    1b70:	f5 07       	cpc	r31, r21
    1b72:	20 f0       	brcs	.+8      	; 0x1b7c <__udivmodsi4_ep>
    1b74:	a2 1b       	sub	r26, r18
    1b76:	b3 0b       	sbc	r27, r19
    1b78:	e4 0b       	sbc	r30, r20
    1b7a:	f5 0b       	sbc	r31, r21

00001b7c <__udivmodsi4_ep>:
    1b7c:	66 1f       	adc	r22, r22
    1b7e:	77 1f       	adc	r23, r23
    1b80:	88 1f       	adc	r24, r24
    1b82:	99 1f       	adc	r25, r25
    1b84:	1a 94       	dec	r1
    1b86:	69 f7       	brne	.-38     	; 0x1b62 <__udivmodsi4_loop>
    1b88:	60 95       	com	r22
    1b8a:	70 95       	com	r23
    1b8c:	80 95       	com	r24
    1b8e:	90 95       	com	r25
    1b90:	9b 01       	movw	r18, r22
    1b92:	ac 01       	movw	r20, r24
    1b94:	bd 01       	movw	r22, r26
    1b96:	cf 01       	movw	r24, r30
    1b98:	08 95       	ret

00001b9a <__divmodsi4>:
    1b9a:	05 2e       	mov	r0, r21
    1b9c:	97 fb       	bst	r25, 7
    1b9e:	16 f4       	brtc	.+4      	; 0x1ba4 <__divmodsi4+0xa>
    1ba0:	00 94       	com	r0
    1ba2:	0f d0       	rcall	.+30     	; 0x1bc2 <__negsi2>
    1ba4:	57 fd       	sbrc	r21, 7
    1ba6:	05 d0       	rcall	.+10     	; 0x1bb2 <__divmodsi4_neg2>
    1ba8:	d6 df       	rcall	.-84     	; 0x1b56 <__udivmodsi4>
    1baa:	07 fc       	sbrc	r0, 7
    1bac:	02 d0       	rcall	.+4      	; 0x1bb2 <__divmodsi4_neg2>
    1bae:	46 f4       	brtc	.+16     	; 0x1bc0 <__divmodsi4_exit>
    1bb0:	08 c0       	rjmp	.+16     	; 0x1bc2 <__negsi2>

00001bb2 <__divmodsi4_neg2>:
    1bb2:	50 95       	com	r21
    1bb4:	40 95       	com	r20
    1bb6:	30 95       	com	r19
    1bb8:	21 95       	neg	r18
    1bba:	3f 4f       	sbci	r19, 0xFF	; 255
    1bbc:	4f 4f       	sbci	r20, 0xFF	; 255
    1bbe:	5f 4f       	sbci	r21, 0xFF	; 255

00001bc0 <__divmodsi4_exit>:
    1bc0:	08 95       	ret

00001bc2 <__negsi2>:
    1bc2:	90 95       	com	r25
    1bc4:	80 95       	com	r24
    1bc6:	70 95       	com	r23
    1bc8:	61 95       	neg	r22
    1bca:	7f 4f       	sbci	r23, 0xFF	; 255
    1bcc:	8f 4f       	sbci	r24, 0xFF	; 255
    1bce:	9f 4f       	sbci	r25, 0xFF	; 255
    1bd0:	08 95       	ret

00001bd2 <__tablejump2__>:
    1bd2:	ee 0f       	add	r30, r30
    1bd4:	ff 1f       	adc	r31, r31
    1bd6:	88 1f       	adc	r24, r24
    1bd8:	8b bf       	out	0x3b, r24	; 59
    1bda:	07 90       	elpm	r0, Z+
    1bdc:	f6 91       	elpm	r31, Z
    1bde:	e0 2d       	mov	r30, r0
    1be0:	19 94       	eijmp

00001be2 <__muluhisi3>:
    1be2:	09 d0       	rcall	.+18     	; 0x1bf6 <__umulhisi3>
    1be4:	a5 9f       	mul	r26, r21
    1be6:	90 0d       	add	r25, r0
    1be8:	b4 9f       	mul	r27, r20
    1bea:	90 0d       	add	r25, r0
    1bec:	a4 9f       	mul	r26, r20
    1bee:	80 0d       	add	r24, r0
    1bf0:	91 1d       	adc	r25, r1
    1bf2:	11 24       	eor	r1, r1
    1bf4:	08 95       	ret

00001bf6 <__umulhisi3>:
    1bf6:	a2 9f       	mul	r26, r18
    1bf8:	b0 01       	movw	r22, r0
    1bfa:	b3 9f       	mul	r27, r19
    1bfc:	c0 01       	movw	r24, r0
    1bfe:	a3 9f       	mul	r26, r19
    1c00:	70 0d       	add	r23, r0
    1c02:	81 1d       	adc	r24, r1
    1c04:	11 24       	eor	r1, r1
    1c06:	91 1d       	adc	r25, r1
    1c08:	b2 9f       	mul	r27, r18
    1c0a:	70 0d       	add	r23, r0
    1c0c:	81 1d       	adc	r24, r1
    1c0e:	11 24       	eor	r1, r1
    1c10:	91 1d       	adc	r25, r1
    1c12:	08 95       	ret

00001c14 <malloc>:
    1c14:	0f 93       	push	r16
    1c16:	1f 93       	push	r17
    1c18:	cf 93       	push	r28
    1c1a:	df 93       	push	r29
    1c1c:	82 30       	cpi	r24, 0x02	; 2
    1c1e:	91 05       	cpc	r25, r1
    1c20:	10 f4       	brcc	.+4      	; 0x1c26 <malloc+0x12>
    1c22:	82 e0       	ldi	r24, 0x02	; 2
    1c24:	90 e0       	ldi	r25, 0x00	; 0
    1c26:	e0 91 f0 02 	lds	r30, 0x02F0	; 0x8002f0 <__flp>
    1c2a:	f0 91 f1 02 	lds	r31, 0x02F1	; 0x8002f1 <__flp+0x1>
    1c2e:	20 e0       	ldi	r18, 0x00	; 0
    1c30:	30 e0       	ldi	r19, 0x00	; 0
    1c32:	a0 e0       	ldi	r26, 0x00	; 0
    1c34:	b0 e0       	ldi	r27, 0x00	; 0
    1c36:	30 97       	sbiw	r30, 0x00	; 0
    1c38:	19 f1       	breq	.+70     	; 0x1c80 <malloc+0x6c>
    1c3a:	40 81       	ld	r20, Z
    1c3c:	51 81       	ldd	r21, Z+1	; 0x01
    1c3e:	02 81       	ldd	r16, Z+2	; 0x02
    1c40:	13 81       	ldd	r17, Z+3	; 0x03
    1c42:	48 17       	cp	r20, r24
    1c44:	59 07       	cpc	r21, r25
    1c46:	c8 f0       	brcs	.+50     	; 0x1c7a <malloc+0x66>
    1c48:	84 17       	cp	r24, r20
    1c4a:	95 07       	cpc	r25, r21
    1c4c:	69 f4       	brne	.+26     	; 0x1c68 <malloc+0x54>
    1c4e:	10 97       	sbiw	r26, 0x00	; 0
    1c50:	31 f0       	breq	.+12     	; 0x1c5e <malloc+0x4a>
    1c52:	12 96       	adiw	r26, 0x02	; 2
    1c54:	0c 93       	st	X, r16
    1c56:	12 97       	sbiw	r26, 0x02	; 2
    1c58:	13 96       	adiw	r26, 0x03	; 3
    1c5a:	1c 93       	st	X, r17
    1c5c:	27 c0       	rjmp	.+78     	; 0x1cac <malloc+0x98>
    1c5e:	00 93 f0 02 	sts	0x02F0, r16	; 0x8002f0 <__flp>
    1c62:	10 93 f1 02 	sts	0x02F1, r17	; 0x8002f1 <__flp+0x1>
    1c66:	22 c0       	rjmp	.+68     	; 0x1cac <malloc+0x98>
    1c68:	21 15       	cp	r18, r1
    1c6a:	31 05       	cpc	r19, r1
    1c6c:	19 f0       	breq	.+6      	; 0x1c74 <malloc+0x60>
    1c6e:	42 17       	cp	r20, r18
    1c70:	53 07       	cpc	r21, r19
    1c72:	18 f4       	brcc	.+6      	; 0x1c7a <malloc+0x66>
    1c74:	9a 01       	movw	r18, r20
    1c76:	bd 01       	movw	r22, r26
    1c78:	ef 01       	movw	r28, r30
    1c7a:	df 01       	movw	r26, r30
    1c7c:	f8 01       	movw	r30, r16
    1c7e:	db cf       	rjmp	.-74     	; 0x1c36 <malloc+0x22>
    1c80:	21 15       	cp	r18, r1
    1c82:	31 05       	cpc	r19, r1
    1c84:	f9 f0       	breq	.+62     	; 0x1cc4 <malloc+0xb0>
    1c86:	28 1b       	sub	r18, r24
    1c88:	39 0b       	sbc	r19, r25
    1c8a:	24 30       	cpi	r18, 0x04	; 4
    1c8c:	31 05       	cpc	r19, r1
    1c8e:	80 f4       	brcc	.+32     	; 0x1cb0 <malloc+0x9c>
    1c90:	8a 81       	ldd	r24, Y+2	; 0x02
    1c92:	9b 81       	ldd	r25, Y+3	; 0x03
    1c94:	61 15       	cp	r22, r1
    1c96:	71 05       	cpc	r23, r1
    1c98:	21 f0       	breq	.+8      	; 0x1ca2 <malloc+0x8e>
    1c9a:	fb 01       	movw	r30, r22
    1c9c:	93 83       	std	Z+3, r25	; 0x03
    1c9e:	82 83       	std	Z+2, r24	; 0x02
    1ca0:	04 c0       	rjmp	.+8      	; 0x1caa <malloc+0x96>
    1ca2:	90 93 f1 02 	sts	0x02F1, r25	; 0x8002f1 <__flp+0x1>
    1ca6:	80 93 f0 02 	sts	0x02F0, r24	; 0x8002f0 <__flp>
    1caa:	fe 01       	movw	r30, r28
    1cac:	32 96       	adiw	r30, 0x02	; 2
    1cae:	44 c0       	rjmp	.+136    	; 0x1d38 <malloc+0x124>
    1cb0:	fe 01       	movw	r30, r28
    1cb2:	e2 0f       	add	r30, r18
    1cb4:	f3 1f       	adc	r31, r19
    1cb6:	81 93       	st	Z+, r24
    1cb8:	91 93       	st	Z+, r25
    1cba:	22 50       	subi	r18, 0x02	; 2
    1cbc:	31 09       	sbc	r19, r1
    1cbe:	39 83       	std	Y+1, r19	; 0x01
    1cc0:	28 83       	st	Y, r18
    1cc2:	3a c0       	rjmp	.+116    	; 0x1d38 <malloc+0x124>
    1cc4:	20 91 ee 02 	lds	r18, 0x02EE	; 0x8002ee <__brkval>
    1cc8:	30 91 ef 02 	lds	r19, 0x02EF	; 0x8002ef <__brkval+0x1>
    1ccc:	23 2b       	or	r18, r19
    1cce:	41 f4       	brne	.+16     	; 0x1ce0 <malloc+0xcc>
    1cd0:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <__malloc_heap_start>
    1cd4:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <__malloc_heap_start+0x1>
    1cd8:	30 93 ef 02 	sts	0x02EF, r19	; 0x8002ef <__brkval+0x1>
    1cdc:	20 93 ee 02 	sts	0x02EE, r18	; 0x8002ee <__brkval>
    1ce0:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__data_start>
    1ce4:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__data_start+0x1>
    1ce8:	21 15       	cp	r18, r1
    1cea:	31 05       	cpc	r19, r1
    1cec:	41 f4       	brne	.+16     	; 0x1cfe <malloc+0xea>
    1cee:	2d b7       	in	r18, 0x3d	; 61
    1cf0:	3e b7       	in	r19, 0x3e	; 62
    1cf2:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
    1cf6:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
    1cfa:	24 1b       	sub	r18, r20
    1cfc:	35 0b       	sbc	r19, r21
    1cfe:	e0 91 ee 02 	lds	r30, 0x02EE	; 0x8002ee <__brkval>
    1d02:	f0 91 ef 02 	lds	r31, 0x02EF	; 0x8002ef <__brkval+0x1>
    1d06:	e2 17       	cp	r30, r18
    1d08:	f3 07       	cpc	r31, r19
    1d0a:	a0 f4       	brcc	.+40     	; 0x1d34 <malloc+0x120>
    1d0c:	2e 1b       	sub	r18, r30
    1d0e:	3f 0b       	sbc	r19, r31
    1d10:	28 17       	cp	r18, r24
    1d12:	39 07       	cpc	r19, r25
    1d14:	78 f0       	brcs	.+30     	; 0x1d34 <malloc+0x120>
    1d16:	ac 01       	movw	r20, r24
    1d18:	4e 5f       	subi	r20, 0xFE	; 254
    1d1a:	5f 4f       	sbci	r21, 0xFF	; 255
    1d1c:	24 17       	cp	r18, r20
    1d1e:	35 07       	cpc	r19, r21
    1d20:	48 f0       	brcs	.+18     	; 0x1d34 <malloc+0x120>
    1d22:	4e 0f       	add	r20, r30
    1d24:	5f 1f       	adc	r21, r31
    1d26:	50 93 ef 02 	sts	0x02EF, r21	; 0x8002ef <__brkval+0x1>
    1d2a:	40 93 ee 02 	sts	0x02EE, r20	; 0x8002ee <__brkval>
    1d2e:	81 93       	st	Z+, r24
    1d30:	91 93       	st	Z+, r25
    1d32:	02 c0       	rjmp	.+4      	; 0x1d38 <malloc+0x124>
    1d34:	e0 e0       	ldi	r30, 0x00	; 0
    1d36:	f0 e0       	ldi	r31, 0x00	; 0
    1d38:	cf 01       	movw	r24, r30
    1d3a:	df 91       	pop	r29
    1d3c:	cf 91       	pop	r28
    1d3e:	1f 91       	pop	r17
    1d40:	0f 91       	pop	r16
    1d42:	08 95       	ret

00001d44 <free>:
    1d44:	cf 93       	push	r28
    1d46:	df 93       	push	r29
    1d48:	00 97       	sbiw	r24, 0x00	; 0
    1d4a:	09 f4       	brne	.+2      	; 0x1d4e <free+0xa>
    1d4c:	81 c0       	rjmp	.+258    	; 0x1e50 <free+0x10c>
    1d4e:	fc 01       	movw	r30, r24
    1d50:	32 97       	sbiw	r30, 0x02	; 2
    1d52:	13 82       	std	Z+3, r1	; 0x03
    1d54:	12 82       	std	Z+2, r1	; 0x02
    1d56:	a0 91 f0 02 	lds	r26, 0x02F0	; 0x8002f0 <__flp>
    1d5a:	b0 91 f1 02 	lds	r27, 0x02F1	; 0x8002f1 <__flp+0x1>
    1d5e:	10 97       	sbiw	r26, 0x00	; 0
    1d60:	81 f4       	brne	.+32     	; 0x1d82 <free+0x3e>
    1d62:	20 81       	ld	r18, Z
    1d64:	31 81       	ldd	r19, Z+1	; 0x01
    1d66:	82 0f       	add	r24, r18
    1d68:	93 1f       	adc	r25, r19
    1d6a:	20 91 ee 02 	lds	r18, 0x02EE	; 0x8002ee <__brkval>
    1d6e:	30 91 ef 02 	lds	r19, 0x02EF	; 0x8002ef <__brkval+0x1>
    1d72:	28 17       	cp	r18, r24
    1d74:	39 07       	cpc	r19, r25
    1d76:	51 f5       	brne	.+84     	; 0x1dcc <free+0x88>
    1d78:	f0 93 ef 02 	sts	0x02EF, r31	; 0x8002ef <__brkval+0x1>
    1d7c:	e0 93 ee 02 	sts	0x02EE, r30	; 0x8002ee <__brkval>
    1d80:	67 c0       	rjmp	.+206    	; 0x1e50 <free+0x10c>
    1d82:	ed 01       	movw	r28, r26
    1d84:	20 e0       	ldi	r18, 0x00	; 0
    1d86:	30 e0       	ldi	r19, 0x00	; 0
    1d88:	ce 17       	cp	r28, r30
    1d8a:	df 07       	cpc	r29, r31
    1d8c:	40 f4       	brcc	.+16     	; 0x1d9e <free+0x5a>
    1d8e:	4a 81       	ldd	r20, Y+2	; 0x02
    1d90:	5b 81       	ldd	r21, Y+3	; 0x03
    1d92:	9e 01       	movw	r18, r28
    1d94:	41 15       	cp	r20, r1
    1d96:	51 05       	cpc	r21, r1
    1d98:	f1 f0       	breq	.+60     	; 0x1dd6 <free+0x92>
    1d9a:	ea 01       	movw	r28, r20
    1d9c:	f5 cf       	rjmp	.-22     	; 0x1d88 <free+0x44>
    1d9e:	d3 83       	std	Z+3, r29	; 0x03
    1da0:	c2 83       	std	Z+2, r28	; 0x02
    1da2:	40 81       	ld	r20, Z
    1da4:	51 81       	ldd	r21, Z+1	; 0x01
    1da6:	84 0f       	add	r24, r20
    1da8:	95 1f       	adc	r25, r21
    1daa:	c8 17       	cp	r28, r24
    1dac:	d9 07       	cpc	r29, r25
    1dae:	59 f4       	brne	.+22     	; 0x1dc6 <free+0x82>
    1db0:	88 81       	ld	r24, Y
    1db2:	99 81       	ldd	r25, Y+1	; 0x01
    1db4:	84 0f       	add	r24, r20
    1db6:	95 1f       	adc	r25, r21
    1db8:	02 96       	adiw	r24, 0x02	; 2
    1dba:	91 83       	std	Z+1, r25	; 0x01
    1dbc:	80 83       	st	Z, r24
    1dbe:	8a 81       	ldd	r24, Y+2	; 0x02
    1dc0:	9b 81       	ldd	r25, Y+3	; 0x03
    1dc2:	93 83       	std	Z+3, r25	; 0x03
    1dc4:	82 83       	std	Z+2, r24	; 0x02
    1dc6:	21 15       	cp	r18, r1
    1dc8:	31 05       	cpc	r19, r1
    1dca:	29 f4       	brne	.+10     	; 0x1dd6 <free+0x92>
    1dcc:	f0 93 f1 02 	sts	0x02F1, r31	; 0x8002f1 <__flp+0x1>
    1dd0:	e0 93 f0 02 	sts	0x02F0, r30	; 0x8002f0 <__flp>
    1dd4:	3d c0       	rjmp	.+122    	; 0x1e50 <free+0x10c>
    1dd6:	e9 01       	movw	r28, r18
    1dd8:	fb 83       	std	Y+3, r31	; 0x03
    1dda:	ea 83       	std	Y+2, r30	; 0x02
    1ddc:	49 91       	ld	r20, Y+
    1dde:	59 91       	ld	r21, Y+
    1de0:	c4 0f       	add	r28, r20
    1de2:	d5 1f       	adc	r29, r21
    1de4:	ec 17       	cp	r30, r28
    1de6:	fd 07       	cpc	r31, r29
    1de8:	61 f4       	brne	.+24     	; 0x1e02 <free+0xbe>
    1dea:	80 81       	ld	r24, Z
    1dec:	91 81       	ldd	r25, Z+1	; 0x01
    1dee:	84 0f       	add	r24, r20
    1df0:	95 1f       	adc	r25, r21
    1df2:	02 96       	adiw	r24, 0x02	; 2
    1df4:	e9 01       	movw	r28, r18
    1df6:	99 83       	std	Y+1, r25	; 0x01
    1df8:	88 83       	st	Y, r24
    1dfa:	82 81       	ldd	r24, Z+2	; 0x02
    1dfc:	93 81       	ldd	r25, Z+3	; 0x03
    1dfe:	9b 83       	std	Y+3, r25	; 0x03
    1e00:	8a 83       	std	Y+2, r24	; 0x02
    1e02:	e0 e0       	ldi	r30, 0x00	; 0
    1e04:	f0 e0       	ldi	r31, 0x00	; 0
    1e06:	12 96       	adiw	r26, 0x02	; 2
    1e08:	8d 91       	ld	r24, X+
    1e0a:	9c 91       	ld	r25, X
    1e0c:	13 97       	sbiw	r26, 0x03	; 3
    1e0e:	00 97       	sbiw	r24, 0x00	; 0
    1e10:	19 f0       	breq	.+6      	; 0x1e18 <free+0xd4>
    1e12:	fd 01       	movw	r30, r26
    1e14:	dc 01       	movw	r26, r24
    1e16:	f7 cf       	rjmp	.-18     	; 0x1e06 <free+0xc2>
    1e18:	8d 91       	ld	r24, X+
    1e1a:	9c 91       	ld	r25, X
    1e1c:	11 97       	sbiw	r26, 0x01	; 1
    1e1e:	9d 01       	movw	r18, r26
    1e20:	2e 5f       	subi	r18, 0xFE	; 254
    1e22:	3f 4f       	sbci	r19, 0xFF	; 255
    1e24:	82 0f       	add	r24, r18
    1e26:	93 1f       	adc	r25, r19
    1e28:	20 91 ee 02 	lds	r18, 0x02EE	; 0x8002ee <__brkval>
    1e2c:	30 91 ef 02 	lds	r19, 0x02EF	; 0x8002ef <__brkval+0x1>
    1e30:	28 17       	cp	r18, r24
    1e32:	39 07       	cpc	r19, r25
    1e34:	69 f4       	brne	.+26     	; 0x1e50 <free+0x10c>
    1e36:	30 97       	sbiw	r30, 0x00	; 0
    1e38:	29 f4       	brne	.+10     	; 0x1e44 <free+0x100>
    1e3a:	10 92 f1 02 	sts	0x02F1, r1	; 0x8002f1 <__flp+0x1>
    1e3e:	10 92 f0 02 	sts	0x02F0, r1	; 0x8002f0 <__flp>
    1e42:	02 c0       	rjmp	.+4      	; 0x1e48 <free+0x104>
    1e44:	13 82       	std	Z+3, r1	; 0x03
    1e46:	12 82       	std	Z+2, r1	; 0x02
    1e48:	b0 93 ef 02 	sts	0x02EF, r27	; 0x8002ef <__brkval+0x1>
    1e4c:	a0 93 ee 02 	sts	0x02EE, r26	; 0x8002ee <__brkval>
    1e50:	df 91       	pop	r29
    1e52:	cf 91       	pop	r28
    1e54:	08 95       	ret

00001e56 <realloc>:
    1e56:	6f 92       	push	r6
    1e58:	7f 92       	push	r7
    1e5a:	8f 92       	push	r8
    1e5c:	9f 92       	push	r9
    1e5e:	af 92       	push	r10
    1e60:	bf 92       	push	r11
    1e62:	cf 92       	push	r12
    1e64:	df 92       	push	r13
    1e66:	ef 92       	push	r14
    1e68:	ff 92       	push	r15
    1e6a:	0f 93       	push	r16
    1e6c:	1f 93       	push	r17
    1e6e:	cf 93       	push	r28
    1e70:	df 93       	push	r29
    1e72:	00 97       	sbiw	r24, 0x00	; 0
    1e74:	81 f4       	brne	.+32     	; 0x1e96 <realloc+0x40>
    1e76:	cb 01       	movw	r24, r22
    1e78:	df 91       	pop	r29
    1e7a:	cf 91       	pop	r28
    1e7c:	1f 91       	pop	r17
    1e7e:	0f 91       	pop	r16
    1e80:	ff 90       	pop	r15
    1e82:	ef 90       	pop	r14
    1e84:	df 90       	pop	r13
    1e86:	cf 90       	pop	r12
    1e88:	bf 90       	pop	r11
    1e8a:	af 90       	pop	r10
    1e8c:	9f 90       	pop	r9
    1e8e:	8f 90       	pop	r8
    1e90:	7f 90       	pop	r7
    1e92:	6f 90       	pop	r6
    1e94:	bf ce       	rjmp	.-642    	; 0x1c14 <malloc>
    1e96:	fc 01       	movw	r30, r24
    1e98:	e6 0f       	add	r30, r22
    1e9a:	f7 1f       	adc	r31, r23
    1e9c:	9c 01       	movw	r18, r24
    1e9e:	22 50       	subi	r18, 0x02	; 2
    1ea0:	31 09       	sbc	r19, r1
    1ea2:	e2 17       	cp	r30, r18
    1ea4:	f3 07       	cpc	r31, r19
    1ea6:	08 f4       	brcc	.+2      	; 0x1eaa <realloc+0x54>
    1ea8:	a5 c0       	rjmp	.+330    	; 0x1ff4 <realloc+0x19e>
    1eaa:	ec 01       	movw	r28, r24
    1eac:	d9 01       	movw	r26, r18
    1eae:	0d 91       	ld	r16, X+
    1eb0:	1c 91       	ld	r17, X
    1eb2:	11 97       	sbiw	r26, 0x01	; 1
    1eb4:	06 17       	cp	r16, r22
    1eb6:	17 07       	cpc	r17, r23
    1eb8:	a8 f0       	brcs	.+42     	; 0x1ee4 <realloc+0x8e>
    1eba:	05 30       	cpi	r16, 0x05	; 5
    1ebc:	11 05       	cpc	r17, r1
    1ebe:	08 f4       	brcc	.+2      	; 0x1ec2 <realloc+0x6c>
    1ec0:	97 c0       	rjmp	.+302    	; 0x1ff0 <realloc+0x19a>
    1ec2:	c8 01       	movw	r24, r16
    1ec4:	04 97       	sbiw	r24, 0x04	; 4
    1ec6:	86 17       	cp	r24, r22
    1ec8:	97 07       	cpc	r25, r23
    1eca:	08 f4       	brcc	.+2      	; 0x1ece <realloc+0x78>
    1ecc:	91 c0       	rjmp	.+290    	; 0x1ff0 <realloc+0x19a>
    1ece:	02 50       	subi	r16, 0x02	; 2
    1ed0:	11 09       	sbc	r17, r1
    1ed2:	06 1b       	sub	r16, r22
    1ed4:	17 0b       	sbc	r17, r23
    1ed6:	01 93       	st	Z+, r16
    1ed8:	11 93       	st	Z+, r17
    1eda:	6d 93       	st	X+, r22
    1edc:	7c 93       	st	X, r23
    1ede:	cf 01       	movw	r24, r30
    1ee0:	31 df       	rcall	.-414    	; 0x1d44 <free>
    1ee2:	86 c0       	rjmp	.+268    	; 0x1ff0 <realloc+0x19a>
    1ee4:	5b 01       	movw	r10, r22
    1ee6:	a0 1a       	sub	r10, r16
    1ee8:	b1 0a       	sbc	r11, r17
    1eea:	4c 01       	movw	r8, r24
    1eec:	80 0e       	add	r8, r16
    1eee:	91 1e       	adc	r9, r17
    1ef0:	a0 91 f0 02 	lds	r26, 0x02F0	; 0x8002f0 <__flp>
    1ef4:	b0 91 f1 02 	lds	r27, 0x02F1	; 0x8002f1 <__flp+0x1>
    1ef8:	61 2c       	mov	r6, r1
    1efa:	71 2c       	mov	r7, r1
    1efc:	e1 2c       	mov	r14, r1
    1efe:	f1 2c       	mov	r15, r1
    1f00:	10 97       	sbiw	r26, 0x00	; 0
    1f02:	09 f4       	brne	.+2      	; 0x1f06 <realloc+0xb0>
    1f04:	46 c0       	rjmp	.+140    	; 0x1f92 <realloc+0x13c>
    1f06:	8d 91       	ld	r24, X+
    1f08:	9c 91       	ld	r25, X
    1f0a:	11 97       	sbiw	r26, 0x01	; 1
    1f0c:	a8 15       	cp	r26, r8
    1f0e:	b9 05       	cpc	r27, r9
    1f10:	b1 f5       	brne	.+108    	; 0x1f7e <realloc+0x128>
    1f12:	6c 01       	movw	r12, r24
    1f14:	42 e0       	ldi	r20, 0x02	; 2
    1f16:	c4 0e       	add	r12, r20
    1f18:	d1 1c       	adc	r13, r1
    1f1a:	ca 14       	cp	r12, r10
    1f1c:	db 04       	cpc	r13, r11
    1f1e:	78 f1       	brcs	.+94     	; 0x1f7e <realloc+0x128>
    1f20:	4c 01       	movw	r8, r24
    1f22:	8a 18       	sub	r8, r10
    1f24:	9b 08       	sbc	r9, r11
    1f26:	64 01       	movw	r12, r8
    1f28:	42 e0       	ldi	r20, 0x02	; 2
    1f2a:	c4 0e       	add	r12, r20
    1f2c:	d1 1c       	adc	r13, r1
    1f2e:	12 96       	adiw	r26, 0x02	; 2
    1f30:	bc 90       	ld	r11, X
    1f32:	12 97       	sbiw	r26, 0x02	; 2
    1f34:	13 96       	adiw	r26, 0x03	; 3
    1f36:	ac 91       	ld	r26, X
    1f38:	b5 e0       	ldi	r27, 0x05	; 5
    1f3a:	cb 16       	cp	r12, r27
    1f3c:	d1 04       	cpc	r13, r1
    1f3e:	40 f0       	brcs	.+16     	; 0x1f50 <realloc+0xfa>
    1f40:	b2 82       	std	Z+2, r11	; 0x02
    1f42:	a3 83       	std	Z+3, r26	; 0x03
    1f44:	91 82       	std	Z+1, r9	; 0x01
    1f46:	80 82       	st	Z, r8
    1f48:	d9 01       	movw	r26, r18
    1f4a:	6d 93       	st	X+, r22
    1f4c:	7c 93       	st	X, r23
    1f4e:	09 c0       	rjmp	.+18     	; 0x1f62 <realloc+0x10c>
    1f50:	0e 5f       	subi	r16, 0xFE	; 254
    1f52:	1f 4f       	sbci	r17, 0xFF	; 255
    1f54:	80 0f       	add	r24, r16
    1f56:	91 1f       	adc	r25, r17
    1f58:	f9 01       	movw	r30, r18
    1f5a:	91 83       	std	Z+1, r25	; 0x01
    1f5c:	80 83       	st	Z, r24
    1f5e:	eb 2d       	mov	r30, r11
    1f60:	fa 2f       	mov	r31, r26
    1f62:	e1 14       	cp	r14, r1
    1f64:	f1 04       	cpc	r15, r1
    1f66:	31 f0       	breq	.+12     	; 0x1f74 <realloc+0x11e>
    1f68:	d7 01       	movw	r26, r14
    1f6a:	13 96       	adiw	r26, 0x03	; 3
    1f6c:	fc 93       	st	X, r31
    1f6e:	ee 93       	st	-X, r30
    1f70:	12 97       	sbiw	r26, 0x02	; 2
    1f72:	3e c0       	rjmp	.+124    	; 0x1ff0 <realloc+0x19a>
    1f74:	f0 93 f1 02 	sts	0x02F1, r31	; 0x8002f1 <__flp+0x1>
    1f78:	e0 93 f0 02 	sts	0x02F0, r30	; 0x8002f0 <__flp>
    1f7c:	39 c0       	rjmp	.+114    	; 0x1ff0 <realloc+0x19a>
    1f7e:	68 16       	cp	r6, r24
    1f80:	79 06       	cpc	r7, r25
    1f82:	08 f4       	brcc	.+2      	; 0x1f86 <realloc+0x130>
    1f84:	3c 01       	movw	r6, r24
    1f86:	7d 01       	movw	r14, r26
    1f88:	12 96       	adiw	r26, 0x02	; 2
    1f8a:	0d 90       	ld	r0, X+
    1f8c:	bc 91       	ld	r27, X
    1f8e:	a0 2d       	mov	r26, r0
    1f90:	b7 cf       	rjmp	.-146    	; 0x1f00 <realloc+0xaa>
    1f92:	80 91 ee 02 	lds	r24, 0x02EE	; 0x8002ee <__brkval>
    1f96:	90 91 ef 02 	lds	r25, 0x02EF	; 0x8002ef <__brkval+0x1>
    1f9a:	88 16       	cp	r8, r24
    1f9c:	99 06       	cpc	r9, r25
    1f9e:	e1 f4       	brne	.+56     	; 0x1fd8 <realloc+0x182>
    1fa0:	66 16       	cp	r6, r22
    1fa2:	77 06       	cpc	r7, r23
    1fa4:	c8 f4       	brcc	.+50     	; 0x1fd8 <realloc+0x182>
    1fa6:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__data_start>
    1faa:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <__data_start+0x1>
    1fae:	00 97       	sbiw	r24, 0x00	; 0
    1fb0:	41 f4       	brne	.+16     	; 0x1fc2 <realloc+0x16c>
    1fb2:	8d b7       	in	r24, 0x3d	; 61
    1fb4:	9e b7       	in	r25, 0x3e	; 62
    1fb6:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
    1fba:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
    1fbe:	84 1b       	sub	r24, r20
    1fc0:	95 0b       	sbc	r25, r21
    1fc2:	e8 17       	cp	r30, r24
    1fc4:	f9 07       	cpc	r31, r25
    1fc6:	b0 f4       	brcc	.+44     	; 0x1ff4 <realloc+0x19e>
    1fc8:	f0 93 ef 02 	sts	0x02EF, r31	; 0x8002ef <__brkval+0x1>
    1fcc:	e0 93 ee 02 	sts	0x02EE, r30	; 0x8002ee <__brkval>
    1fd0:	f9 01       	movw	r30, r18
    1fd2:	71 83       	std	Z+1, r23	; 0x01
    1fd4:	60 83       	st	Z, r22
    1fd6:	0c c0       	rjmp	.+24     	; 0x1ff0 <realloc+0x19a>
    1fd8:	cb 01       	movw	r24, r22
    1fda:	1c de       	rcall	.-968    	; 0x1c14 <malloc>
    1fdc:	7c 01       	movw	r14, r24
    1fde:	00 97       	sbiw	r24, 0x00	; 0
    1fe0:	49 f0       	breq	.+18     	; 0x1ff4 <realloc+0x19e>
    1fe2:	a8 01       	movw	r20, r16
    1fe4:	be 01       	movw	r22, r28
    1fe6:	8b d1       	rcall	.+790    	; 0x22fe <memcpy>
    1fe8:	ce 01       	movw	r24, r28
    1fea:	ac de       	rcall	.-680    	; 0x1d44 <free>
    1fec:	c7 01       	movw	r24, r14
    1fee:	04 c0       	rjmp	.+8      	; 0x1ff8 <realloc+0x1a2>
    1ff0:	ce 01       	movw	r24, r28
    1ff2:	02 c0       	rjmp	.+4      	; 0x1ff8 <realloc+0x1a2>
    1ff4:	80 e0       	ldi	r24, 0x00	; 0
    1ff6:	90 e0       	ldi	r25, 0x00	; 0
    1ff8:	df 91       	pop	r29
    1ffa:	cf 91       	pop	r28
    1ffc:	1f 91       	pop	r17
    1ffe:	0f 91       	pop	r16
    2000:	ff 90       	pop	r15
    2002:	ef 90       	pop	r14
    2004:	df 90       	pop	r13
    2006:	cf 90       	pop	r12
    2008:	bf 90       	pop	r11
    200a:	af 90       	pop	r10
    200c:	9f 90       	pop	r9
    200e:	8f 90       	pop	r8
    2010:	7f 90       	pop	r7
    2012:	6f 90       	pop	r6
    2014:	08 95       	ret

00002016 <strtod>:
    2016:	8f 92       	push	r8
    2018:	9f 92       	push	r9
    201a:	af 92       	push	r10
    201c:	bf 92       	push	r11
    201e:	cf 92       	push	r12
    2020:	df 92       	push	r13
    2022:	ef 92       	push	r14
    2024:	ff 92       	push	r15
    2026:	0f 93       	push	r16
    2028:	1f 93       	push	r17
    202a:	cf 93       	push	r28
    202c:	df 93       	push	r29
    202e:	ec 01       	movw	r28, r24
    2030:	6b 01       	movw	r12, r22
    2032:	61 15       	cp	r22, r1
    2034:	71 05       	cpc	r23, r1
    2036:	19 f0       	breq	.+6      	; 0x203e <strtod+0x28>
    2038:	fb 01       	movw	r30, r22
    203a:	91 83       	std	Z+1, r25	; 0x01
    203c:	80 83       	st	Z, r24
    203e:	7e 01       	movw	r14, r28
    2040:	ff ef       	ldi	r31, 0xFF	; 255
    2042:	ef 1a       	sub	r14, r31
    2044:	ff 0a       	sbc	r15, r31
    2046:	08 81       	ld	r16, Y
    2048:	80 2f       	mov	r24, r16
    204a:	90 e0       	ldi	r25, 0x00	; 0
    204c:	38 d1       	rcall	.+624    	; 0x22be <isspace>
    204e:	89 2b       	or	r24, r25
    2050:	11 f0       	breq	.+4      	; 0x2056 <strtod+0x40>
    2052:	e7 01       	movw	r28, r14
    2054:	f4 cf       	rjmp	.-24     	; 0x203e <strtod+0x28>
    2056:	0d 32       	cpi	r16, 0x2D	; 45
    2058:	39 f4       	brne	.+14     	; 0x2068 <strtod+0x52>
    205a:	7e 01       	movw	r14, r28
    205c:	82 e0       	ldi	r24, 0x02	; 2
    205e:	e8 0e       	add	r14, r24
    2060:	f1 1c       	adc	r15, r1
    2062:	09 81       	ldd	r16, Y+1	; 0x01
    2064:	11 e0       	ldi	r17, 0x01	; 1
    2066:	08 c0       	rjmp	.+16     	; 0x2078 <strtod+0x62>
    2068:	0b 32       	cpi	r16, 0x2B	; 43
    206a:	29 f4       	brne	.+10     	; 0x2076 <strtod+0x60>
    206c:	7e 01       	movw	r14, r28
    206e:	92 e0       	ldi	r25, 0x02	; 2
    2070:	e9 0e       	add	r14, r25
    2072:	f1 1c       	adc	r15, r1
    2074:	09 81       	ldd	r16, Y+1	; 0x01
    2076:	10 e0       	ldi	r17, 0x00	; 0
    2078:	e7 01       	movw	r28, r14
    207a:	21 97       	sbiw	r28, 0x01	; 1
    207c:	43 e0       	ldi	r20, 0x03	; 3
    207e:	50 e0       	ldi	r21, 0x00	; 0
    2080:	60 e1       	ldi	r22, 0x10	; 16
    2082:	71 e0       	ldi	r23, 0x01	; 1
    2084:	ce 01       	movw	r24, r28
    2086:	23 d1       	rcall	.+582    	; 0x22ce <strncasecmp_P>
    2088:	89 2b       	or	r24, r25
    208a:	b9 f4       	brne	.+46     	; 0x20ba <strtod+0xa4>
    208c:	23 96       	adiw	r28, 0x03	; 3
    208e:	45 e0       	ldi	r20, 0x05	; 5
    2090:	50 e0       	ldi	r21, 0x00	; 0
    2092:	6b e0       	ldi	r22, 0x0B	; 11
    2094:	71 e0       	ldi	r23, 0x01	; 1
    2096:	ce 01       	movw	r24, r28
    2098:	1a d1       	rcall	.+564    	; 0x22ce <strncasecmp_P>
    209a:	89 2b       	or	r24, r25
    209c:	09 f4       	brne	.+2      	; 0x20a0 <strtod+0x8a>
    209e:	25 96       	adiw	r28, 0x05	; 5
    20a0:	c1 14       	cp	r12, r1
    20a2:	d1 04       	cpc	r13, r1
    20a4:	19 f0       	breq	.+6      	; 0x20ac <strtod+0x96>
    20a6:	f6 01       	movw	r30, r12
    20a8:	d1 83       	std	Z+1, r29	; 0x01
    20aa:	c0 83       	st	Z, r28
    20ac:	11 11       	cpse	r17, r1
    20ae:	f1 c0       	rjmp	.+482    	; 0x2292 <__stack+0x93>
    20b0:	60 e0       	ldi	r22, 0x00	; 0
    20b2:	70 e0       	ldi	r23, 0x00	; 0
    20b4:	80 e8       	ldi	r24, 0x80	; 128
    20b6:	9f e7       	ldi	r25, 0x7F	; 127
    20b8:	f5 c0       	rjmp	.+490    	; 0x22a4 <__stack+0xa5>
    20ba:	43 e0       	ldi	r20, 0x03	; 3
    20bc:	50 e0       	ldi	r21, 0x00	; 0
    20be:	68 e0       	ldi	r22, 0x08	; 8
    20c0:	71 e0       	ldi	r23, 0x01	; 1
    20c2:	ce 01       	movw	r24, r28
    20c4:	04 d1       	rcall	.+520    	; 0x22ce <strncasecmp_P>
    20c6:	89 2b       	or	r24, r25
    20c8:	59 f4       	brne	.+22     	; 0x20e0 <strtod+0xca>
    20ca:	c1 14       	cp	r12, r1
    20cc:	d1 04       	cpc	r13, r1
    20ce:	09 f4       	brne	.+2      	; 0x20d2 <strtod+0xbc>
    20d0:	e5 c0       	rjmp	.+458    	; 0x229c <__stack+0x9d>
    20d2:	f2 e0       	ldi	r31, 0x02	; 2
    20d4:	ef 0e       	add	r14, r31
    20d6:	f1 1c       	adc	r15, r1
    20d8:	f6 01       	movw	r30, r12
    20da:	f1 82       	std	Z+1, r15	; 0x01
    20dc:	e0 82       	st	Z, r14
    20de:	de c0       	rjmp	.+444    	; 0x229c <__stack+0x9d>
    20e0:	20 e0       	ldi	r18, 0x00	; 0
    20e2:	30 e0       	ldi	r19, 0x00	; 0
    20e4:	a9 01       	movw	r20, r18
    20e6:	c0 e0       	ldi	r28, 0x00	; 0
    20e8:	d0 e0       	ldi	r29, 0x00	; 0
    20ea:	f7 01       	movw	r30, r14
    20ec:	60 ed       	ldi	r22, 0xD0	; 208
    20ee:	a6 2e       	mov	r10, r22
    20f0:	a0 0e       	add	r10, r16
    20f2:	89 e0       	ldi	r24, 0x09	; 9
    20f4:	8a 15       	cp	r24, r10
    20f6:	28 f1       	brcs	.+74     	; 0x2142 <strtod+0x12c>
    20f8:	91 2f       	mov	r25, r17
    20fa:	92 60       	ori	r25, 0x02	; 2
    20fc:	b9 2e       	mov	r11, r25
    20fe:	81 2f       	mov	r24, r17
    2100:	88 70       	andi	r24, 0x08	; 8
    2102:	12 ff       	sbrs	r17, 2
    2104:	04 c0       	rjmp	.+8      	; 0x210e <strtod+0xf8>
    2106:	81 11       	cpse	r24, r1
    2108:	23 c0       	rjmp	.+70     	; 0x2150 <strtod+0x13a>
    210a:	21 96       	adiw	r28, 0x01	; 1
    210c:	21 c0       	rjmp	.+66     	; 0x2150 <strtod+0x13a>
    210e:	81 11       	cpse	r24, r1
    2110:	21 97       	sbiw	r28, 0x01	; 1
    2112:	a5 e0       	ldi	r26, 0x05	; 5
    2114:	b0 e0       	ldi	r27, 0x00	; 0
    2116:	65 dd       	rcall	.-1334   	; 0x1be2 <__muluhisi3>
    2118:	dc 01       	movw	r26, r24
    211a:	cb 01       	movw	r24, r22
    211c:	88 0f       	add	r24, r24
    211e:	99 1f       	adc	r25, r25
    2120:	aa 1f       	adc	r26, r26
    2122:	bb 1f       	adc	r27, r27
    2124:	9c 01       	movw	r18, r24
    2126:	ad 01       	movw	r20, r26
    2128:	2a 0d       	add	r18, r10
    212a:	31 1d       	adc	r19, r1
    212c:	41 1d       	adc	r20, r1
    212e:	51 1d       	adc	r21, r1
    2130:	28 39       	cpi	r18, 0x98	; 152
    2132:	89 e9       	ldi	r24, 0x99	; 153
    2134:	38 07       	cpc	r19, r24
    2136:	48 07       	cpc	r20, r24
    2138:	89 e1       	ldi	r24, 0x19	; 25
    213a:	58 07       	cpc	r21, r24
    213c:	48 f0       	brcs	.+18     	; 0x2150 <strtod+0x13a>
    213e:	16 60       	ori	r17, 0x06	; 6
    2140:	06 c0       	rjmp	.+12     	; 0x214e <strtod+0x138>
    2142:	9e ef       	ldi	r25, 0xFE	; 254
    2144:	a9 12       	cpse	r10, r25
    2146:	0a c0       	rjmp	.+20     	; 0x215c <strtod+0x146>
    2148:	13 fd       	sbrc	r17, 3
    214a:	40 c0       	rjmp	.+128    	; 0x21cc <strtod+0x1b6>
    214c:	18 60       	ori	r17, 0x08	; 8
    214e:	b1 2e       	mov	r11, r17
    2150:	8f ef       	ldi	r24, 0xFF	; 255
    2152:	e8 1a       	sub	r14, r24
    2154:	f8 0a       	sbc	r15, r24
    2156:	00 81       	ld	r16, Z
    2158:	1b 2d       	mov	r17, r11
    215a:	c7 cf       	rjmp	.-114    	; 0x20ea <strtod+0xd4>
    215c:	80 2f       	mov	r24, r16
    215e:	8f 7d       	andi	r24, 0xDF	; 223
    2160:	85 34       	cpi	r24, 0x45	; 69
    2162:	a1 f5       	brne	.+104    	; 0x21cc <strtod+0x1b6>
    2164:	80 81       	ld	r24, Z
    2166:	8d 32       	cpi	r24, 0x2D	; 45
    2168:	11 f4       	brne	.+4      	; 0x216e <strtod+0x158>
    216a:	10 61       	ori	r17, 0x10	; 16
    216c:	06 c0       	rjmp	.+12     	; 0x217a <strtod+0x164>
    216e:	8b 32       	cpi	r24, 0x2B	; 43
    2170:	21 f0       	breq	.+8      	; 0x217a <strtod+0x164>
    2172:	31 96       	adiw	r30, 0x01	; 1
    2174:	61 e0       	ldi	r22, 0x01	; 1
    2176:	70 e0       	ldi	r23, 0x00	; 0
    2178:	04 c0       	rjmp	.+8      	; 0x2182 <strtod+0x16c>
    217a:	81 81       	ldd	r24, Z+1	; 0x01
    217c:	32 96       	adiw	r30, 0x02	; 2
    217e:	62 e0       	ldi	r22, 0x02	; 2
    2180:	70 e0       	ldi	r23, 0x00	; 0
    2182:	80 53       	subi	r24, 0x30	; 48
    2184:	8a 30       	cpi	r24, 0x0A	; 10
    2186:	18 f0       	brcs	.+6      	; 0x218e <strtod+0x178>
    2188:	e6 1b       	sub	r30, r22
    218a:	f7 0b       	sbc	r31, r23
    218c:	1f c0       	rjmp	.+62     	; 0x21cc <strtod+0x1b6>
    218e:	60 e0       	ldi	r22, 0x00	; 0
    2190:	70 e0       	ldi	r23, 0x00	; 0
    2192:	60 38       	cpi	r22, 0x80	; 128
    2194:	9c e0       	ldi	r25, 0x0C	; 12
    2196:	79 07       	cpc	r23, r25
    2198:	5c f4       	brge	.+22     	; 0x21b0 <strtod+0x19a>
    219a:	db 01       	movw	r26, r22
    219c:	aa 0f       	add	r26, r26
    219e:	bb 1f       	adc	r27, r27
    21a0:	aa 0f       	add	r26, r26
    21a2:	bb 1f       	adc	r27, r27
    21a4:	6a 0f       	add	r22, r26
    21a6:	7b 1f       	adc	r23, r27
    21a8:	66 0f       	add	r22, r22
    21aa:	77 1f       	adc	r23, r23
    21ac:	68 0f       	add	r22, r24
    21ae:	71 1d       	adc	r23, r1
    21b0:	31 96       	adiw	r30, 0x01	; 1
    21b2:	df 01       	movw	r26, r30
    21b4:	11 97       	sbiw	r26, 0x01	; 1
    21b6:	8c 91       	ld	r24, X
    21b8:	80 53       	subi	r24, 0x30	; 48
    21ba:	8a 30       	cpi	r24, 0x0A	; 10
    21bc:	50 f3       	brcs	.-44     	; 0x2192 <strtod+0x17c>
    21be:	14 ff       	sbrs	r17, 4
    21c0:	03 c0       	rjmp	.+6      	; 0x21c8 <strtod+0x1b2>
    21c2:	71 95       	neg	r23
    21c4:	61 95       	neg	r22
    21c6:	71 09       	sbc	r23, r1
    21c8:	c6 0f       	add	r28, r22
    21ca:	d7 1f       	adc	r29, r23
    21cc:	11 ff       	sbrs	r17, 1
    21ce:	08 c0       	rjmp	.+16     	; 0x21e0 <strtod+0x1ca>
    21d0:	c1 14       	cp	r12, r1
    21d2:	d1 04       	cpc	r13, r1
    21d4:	29 f0       	breq	.+10     	; 0x21e0 <strtod+0x1ca>
    21d6:	cf 01       	movw	r24, r30
    21d8:	01 97       	sbiw	r24, 0x01	; 1
    21da:	f6 01       	movw	r30, r12
    21dc:	91 83       	std	Z+1, r25	; 0x01
    21de:	80 83       	st	Z, r24
    21e0:	ca 01       	movw	r24, r20
    21e2:	b9 01       	movw	r22, r18
    21e4:	0e 94 71 05 	call	0xae2	; 0xae2 <__floatunsisf>
    21e8:	21 2f       	mov	r18, r17
    21ea:	23 70       	andi	r18, 0x03	; 3
    21ec:	23 30       	cpi	r18, 0x03	; 3
    21ee:	19 f0       	breq	.+6      	; 0x21f6 <strtod+0x1e0>
    21f0:	4b 01       	movw	r8, r22
    21f2:	5c 01       	movw	r10, r24
    21f4:	06 c0       	rjmp	.+12     	; 0x2202 <__stack+0x3>
    21f6:	4b 01       	movw	r8, r22
    21f8:	5c 01       	movw	r10, r24
    21fa:	b7 fa       	bst	r11, 7
    21fc:	b0 94       	com	r11
    21fe:	b7 f8       	bld	r11, 7
    2200:	b0 94       	com	r11
    2202:	20 e0       	ldi	r18, 0x00	; 0
    2204:	30 e0       	ldi	r19, 0x00	; 0
    2206:	a9 01       	movw	r20, r18
    2208:	c5 01       	movw	r24, r10
    220a:	b4 01       	movw	r22, r8
    220c:	c2 db       	rcall	.-2172   	; 0x1992 <__cmpsf2>
    220e:	88 23       	and	r24, r24
    2210:	09 f4       	brne	.+2      	; 0x2214 <__stack+0x15>
    2212:	3c c0       	rjmp	.+120    	; 0x228c <__stack+0x8d>
    2214:	d7 ff       	sbrs	r29, 7
    2216:	06 c0       	rjmp	.+12     	; 0x2224 <__stack+0x25>
    2218:	d1 95       	neg	r29
    221a:	c1 95       	neg	r28
    221c:	d1 09       	sbc	r29, r1
    221e:	07 e2       	ldi	r16, 0x27	; 39
    2220:	11 e0       	ldi	r17, 0x01	; 1
    2222:	02 c0       	rjmp	.+4      	; 0x2228 <__stack+0x29>
    2224:	0f e3       	ldi	r16, 0x3F	; 63
    2226:	11 e0       	ldi	r17, 0x01	; 1
    2228:	68 01       	movw	r12, r16
    222a:	f8 e1       	ldi	r31, 0x18	; 24
    222c:	cf 1a       	sub	r12, r31
    222e:	d1 08       	sbc	r13, r1
    2230:	90 e2       	ldi	r25, 0x20	; 32
    2232:	e9 2e       	mov	r14, r25
    2234:	f1 2c       	mov	r15, r1
    2236:	ce 15       	cp	r28, r14
    2238:	df 05       	cpc	r29, r15
    223a:	6c f0       	brlt	.+26     	; 0x2256 <__stack+0x57>
    223c:	f8 01       	movw	r30, r16
    223e:	25 91       	lpm	r18, Z+
    2240:	35 91       	lpm	r19, Z+
    2242:	45 91       	lpm	r20, Z+
    2244:	54 91       	lpm	r21, Z
    2246:	c5 01       	movw	r24, r10
    2248:	b4 01       	movw	r22, r8
    224a:	0f dc       	rcall	.-2018   	; 0x1a6a <__mulsf3>
    224c:	4b 01       	movw	r8, r22
    224e:	5c 01       	movw	r10, r24
    2250:	ce 19       	sub	r28, r14
    2252:	df 09       	sbc	r29, r15
    2254:	f0 cf       	rjmp	.-32     	; 0x2236 <__stack+0x37>
    2256:	04 50       	subi	r16, 0x04	; 4
    2258:	11 09       	sbc	r17, r1
    225a:	f5 94       	asr	r15
    225c:	e7 94       	ror	r14
    225e:	0c 15       	cp	r16, r12
    2260:	1d 05       	cpc	r17, r13
    2262:	49 f7       	brne	.-46     	; 0x2236 <__stack+0x37>
    2264:	8a 2d       	mov	r24, r10
    2266:	88 0f       	add	r24, r24
    2268:	8b 2d       	mov	r24, r11
    226a:	88 1f       	adc	r24, r24
    226c:	8f 3f       	cpi	r24, 0xFF	; 255
    226e:	41 f0       	breq	.+16     	; 0x2280 <__stack+0x81>
    2270:	20 e0       	ldi	r18, 0x00	; 0
    2272:	30 e0       	ldi	r19, 0x00	; 0
    2274:	a9 01       	movw	r20, r18
    2276:	c5 01       	movw	r24, r10
    2278:	b4 01       	movw	r22, r8
    227a:	8b db       	rcall	.-2282   	; 0x1992 <__cmpsf2>
    227c:	81 11       	cpse	r24, r1
    227e:	06 c0       	rjmp	.+12     	; 0x228c <__stack+0x8d>
    2280:	82 e2       	ldi	r24, 0x22	; 34
    2282:	90 e0       	ldi	r25, 0x00	; 0
    2284:	90 93 f3 02 	sts	0x02F3, r25	; 0x8002f3 <errno+0x1>
    2288:	80 93 f2 02 	sts	0x02F2, r24	; 0x8002f2 <errno>
    228c:	c5 01       	movw	r24, r10
    228e:	b4 01       	movw	r22, r8
    2290:	09 c0       	rjmp	.+18     	; 0x22a4 <__stack+0xa5>
    2292:	60 e0       	ldi	r22, 0x00	; 0
    2294:	70 e0       	ldi	r23, 0x00	; 0
    2296:	80 e8       	ldi	r24, 0x80	; 128
    2298:	9f ef       	ldi	r25, 0xFF	; 255
    229a:	04 c0       	rjmp	.+8      	; 0x22a4 <__stack+0xa5>
    229c:	60 e0       	ldi	r22, 0x00	; 0
    229e:	70 e0       	ldi	r23, 0x00	; 0
    22a0:	80 ec       	ldi	r24, 0xC0	; 192
    22a2:	9f e7       	ldi	r25, 0x7F	; 127
    22a4:	df 91       	pop	r29
    22a6:	cf 91       	pop	r28
    22a8:	1f 91       	pop	r17
    22aa:	0f 91       	pop	r16
    22ac:	ff 90       	pop	r15
    22ae:	ef 90       	pop	r14
    22b0:	df 90       	pop	r13
    22b2:	cf 90       	pop	r12
    22b4:	bf 90       	pop	r11
    22b6:	af 90       	pop	r10
    22b8:	9f 90       	pop	r9
    22ba:	8f 90       	pop	r8
    22bc:	08 95       	ret

000022be <isspace>:
    22be:	91 11       	cpse	r25, r1
    22c0:	47 c0       	rjmp	.+142    	; 0x2350 <__ctype_isfalse>
    22c2:	80 32       	cpi	r24, 0x20	; 32
    22c4:	19 f0       	breq	.+6      	; 0x22cc <isspace+0xe>
    22c6:	89 50       	subi	r24, 0x09	; 9
    22c8:	85 50       	subi	r24, 0x05	; 5
    22ca:	d0 f7       	brcc	.-12     	; 0x22c0 <isspace+0x2>
    22cc:	08 95       	ret

000022ce <strncasecmp_P>:
    22ce:	fb 01       	movw	r30, r22
    22d0:	dc 01       	movw	r26, r24
    22d2:	41 50       	subi	r20, 0x01	; 1
    22d4:	50 40       	sbci	r21, 0x00	; 0
    22d6:	88 f0       	brcs	.+34     	; 0x22fa <strncasecmp_P+0x2c>
    22d8:	8d 91       	ld	r24, X+
    22da:	81 34       	cpi	r24, 0x41	; 65
    22dc:	1c f0       	brlt	.+6      	; 0x22e4 <strncasecmp_P+0x16>
    22de:	8b 35       	cpi	r24, 0x5B	; 91
    22e0:	0c f4       	brge	.+2      	; 0x22e4 <strncasecmp_P+0x16>
    22e2:	80 5e       	subi	r24, 0xE0	; 224
    22e4:	65 91       	lpm	r22, Z+
    22e6:	61 34       	cpi	r22, 0x41	; 65
    22e8:	1c f0       	brlt	.+6      	; 0x22f0 <strncasecmp_P+0x22>
    22ea:	6b 35       	cpi	r22, 0x5B	; 91
    22ec:	0c f4       	brge	.+2      	; 0x22f0 <strncasecmp_P+0x22>
    22ee:	60 5e       	subi	r22, 0xE0	; 224
    22f0:	86 1b       	sub	r24, r22
    22f2:	61 11       	cpse	r22, r1
    22f4:	71 f3       	breq	.-36     	; 0x22d2 <strncasecmp_P+0x4>
    22f6:	99 0b       	sbc	r25, r25
    22f8:	08 95       	ret
    22fa:	88 1b       	sub	r24, r24
    22fc:	fc cf       	rjmp	.-8      	; 0x22f6 <strncasecmp_P+0x28>

000022fe <memcpy>:
    22fe:	fb 01       	movw	r30, r22
    2300:	dc 01       	movw	r26, r24
    2302:	02 c0       	rjmp	.+4      	; 0x2308 <memcpy+0xa>
    2304:	01 90       	ld	r0, Z+
    2306:	0d 92       	st	X+, r0
    2308:	41 50       	subi	r20, 0x01	; 1
    230a:	50 40       	sbci	r21, 0x00	; 0
    230c:	d8 f7       	brcc	.-10     	; 0x2304 <memcpy+0x6>
    230e:	08 95       	ret

00002310 <strcpy>:
    2310:	fb 01       	movw	r30, r22
    2312:	dc 01       	movw	r26, r24
    2314:	01 90       	ld	r0, Z+
    2316:	0d 92       	st	X+, r0
    2318:	00 20       	and	r0, r0
    231a:	e1 f7       	brne	.-8      	; 0x2314 <strcpy+0x4>
    231c:	08 95       	ret

0000231e <strlwr>:
    231e:	dc 01       	movw	r26, r24
    2320:	6c 91       	ld	r22, X
    2322:	61 54       	subi	r22, 0x41	; 65
    2324:	6a 31       	cpi	r22, 0x1A	; 26
    2326:	08 f0       	brcs	.+2      	; 0x232a <strlwr+0xc>
    2328:	60 52       	subi	r22, 0x20	; 32
    232a:	6f 59       	subi	r22, 0x9F	; 159
    232c:	6d 93       	st	X+, r22
    232e:	c1 f7       	brne	.-16     	; 0x2320 <strlwr+0x2>
    2330:	08 95       	ret

00002332 <strncpy>:
    2332:	fb 01       	movw	r30, r22
    2334:	dc 01       	movw	r26, r24
    2336:	41 50       	subi	r20, 0x01	; 1
    2338:	50 40       	sbci	r21, 0x00	; 0
    233a:	48 f0       	brcs	.+18     	; 0x234e <strncpy+0x1c>
    233c:	01 90       	ld	r0, Z+
    233e:	0d 92       	st	X+, r0
    2340:	00 20       	and	r0, r0
    2342:	c9 f7       	brne	.-14     	; 0x2336 <strncpy+0x4>
    2344:	01 c0       	rjmp	.+2      	; 0x2348 <strncpy+0x16>
    2346:	1d 92       	st	X+, r1
    2348:	41 50       	subi	r20, 0x01	; 1
    234a:	50 40       	sbci	r21, 0x00	; 0
    234c:	e0 f7       	brcc	.-8      	; 0x2346 <strncpy+0x14>
    234e:	08 95       	ret

00002350 <__ctype_isfalse>:
    2350:	99 27       	eor	r25, r25
    2352:	88 27       	eor	r24, r24

00002354 <__ctype_istrue>:
    2354:	08 95       	ret

00002356 <__do_global_dtors>:
    2356:	11 e0       	ldi	r17, 0x01	; 1
    2358:	c4 e3       	ldi	r28, 0x34	; 52
    235a:	d1 e0       	ldi	r29, 0x01	; 1
    235c:	00 e0       	ldi	r16, 0x00	; 0
    235e:	05 c0       	rjmp	.+10     	; 0x236a <__do_global_dtors+0x14>
    2360:	80 2f       	mov	r24, r16
    2362:	fe 01       	movw	r30, r28
    2364:	36 dc       	rcall	.-1940   	; 0x1bd2 <__tablejump2__>
    2366:	21 96       	adiw	r28, 0x01	; 1
    2368:	01 1d       	adc	r16, r1
    236a:	c5 33       	cpi	r28, 0x35	; 53
    236c:	d1 07       	cpc	r29, r17
    236e:	80 e0       	ldi	r24, 0x00	; 0
    2370:	08 07       	cpc	r16, r24
    2372:	b1 f7       	brne	.-20     	; 0x2360 <__do_global_dtors+0xa>
    2374:	f8 94       	cli

00002376 <__stop_program>:
    2376:	ff cf       	rjmp	.-2      	; 0x2376 <__stop_program>
