
3D-Printer.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000002a  00800200  00001f04  00001f98  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001f04  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000c3  0080022a  0080022a  00001fc2  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001fc2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002020  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000698  00000000  00000000  00002060  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00011bc9  00000000  00000000  000026f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002e82  00000000  00000000  000142c1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000038b7  00000000  00000000  00017143  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001678  00000000  00000000  0001a9fc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00002942  00000000  00000000  0001c074  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00008803  00000000  00000000  0001e9b6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000688  00000000  00000000  000271b9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	34 c1       	rjmp	.+616    	; 0x26a <__dtors_end>
       2:	00 00       	nop
       4:	62 c1       	rjmp	.+708    	; 0x2ca <__bad_interrupt>
       6:	00 00       	nop
       8:	60 c1       	rjmp	.+704    	; 0x2ca <__bad_interrupt>
       a:	00 00       	nop
       c:	5e c1       	rjmp	.+700    	; 0x2ca <__bad_interrupt>
       e:	00 00       	nop
      10:	5c c1       	rjmp	.+696    	; 0x2ca <__bad_interrupt>
      12:	00 00       	nop
      14:	5a c1       	rjmp	.+692    	; 0x2ca <__bad_interrupt>
      16:	00 00       	nop
      18:	58 c1       	rjmp	.+688    	; 0x2ca <__bad_interrupt>
      1a:	00 00       	nop
      1c:	56 c1       	rjmp	.+684    	; 0x2ca <__bad_interrupt>
      1e:	00 00       	nop
      20:	54 c1       	rjmp	.+680    	; 0x2ca <__bad_interrupt>
      22:	00 00       	nop
      24:	52 c1       	rjmp	.+676    	; 0x2ca <__bad_interrupt>
      26:	00 00       	nop
      28:	50 c1       	rjmp	.+672    	; 0x2ca <__bad_interrupt>
      2a:	00 00       	nop
      2c:	4e c1       	rjmp	.+668    	; 0x2ca <__bad_interrupt>
      2e:	00 00       	nop
      30:	4c c1       	rjmp	.+664    	; 0x2ca <__bad_interrupt>
      32:	00 00       	nop
      34:	4a c1       	rjmp	.+660    	; 0x2ca <__bad_interrupt>
      36:	00 00       	nop
      38:	48 c1       	rjmp	.+656    	; 0x2ca <__bad_interrupt>
      3a:	00 00       	nop
      3c:	46 c1       	rjmp	.+652    	; 0x2ca <__bad_interrupt>
      3e:	00 00       	nop
      40:	44 c1       	rjmp	.+648    	; 0x2ca <__bad_interrupt>
      42:	00 00       	nop
      44:	42 c1       	rjmp	.+644    	; 0x2ca <__bad_interrupt>
      46:	00 00       	nop
      48:	40 c1       	rjmp	.+640    	; 0x2ca <__bad_interrupt>
      4a:	00 00       	nop
      4c:	3e c1       	rjmp	.+636    	; 0x2ca <__bad_interrupt>
      4e:	00 00       	nop
      50:	3c c1       	rjmp	.+632    	; 0x2ca <__bad_interrupt>
      52:	00 00       	nop
      54:	3a c1       	rjmp	.+628    	; 0x2ca <__bad_interrupt>
      56:	00 00       	nop
      58:	38 c1       	rjmp	.+624    	; 0x2ca <__bad_interrupt>
      5a:	00 00       	nop
      5c:	0c 94 96 08 	jmp	0x112c	; 0x112c <__vector_23>
      60:	34 c1       	rjmp	.+616    	; 0x2ca <__bad_interrupt>
      62:	00 00       	nop
      64:	21 c7       	rjmp	.+3650   	; 0xea8 <__vector_25>
      66:	00 00       	nop
      68:	55 c7       	rjmp	.+3754   	; 0xf14 <__vector_26>
      6a:	00 00       	nop
      6c:	2e c1       	rjmp	.+604    	; 0x2ca <__bad_interrupt>
      6e:	00 00       	nop
      70:	2c c1       	rjmp	.+600    	; 0x2ca <__bad_interrupt>
      72:	00 00       	nop
      74:	2a c1       	rjmp	.+596    	; 0x2ca <__bad_interrupt>
      76:	00 00       	nop
      78:	28 c1       	rjmp	.+592    	; 0x2ca <__bad_interrupt>
      7a:	00 00       	nop
      7c:	26 c1       	rjmp	.+588    	; 0x2ca <__bad_interrupt>
      7e:	00 00       	nop
      80:	24 c1       	rjmp	.+584    	; 0x2ca <__bad_interrupt>
      82:	00 00       	nop
      84:	22 c1       	rjmp	.+580    	; 0x2ca <__bad_interrupt>
      86:	00 00       	nop
      88:	20 c1       	rjmp	.+576    	; 0x2ca <__bad_interrupt>
      8a:	00 00       	nop
      8c:	1e c1       	rjmp	.+572    	; 0x2ca <__bad_interrupt>
      8e:	00 00       	nop
      90:	1c c1       	rjmp	.+568    	; 0x2ca <__bad_interrupt>
      92:	00 00       	nop
      94:	1a c1       	rjmp	.+564    	; 0x2ca <__bad_interrupt>
      96:	00 00       	nop
      98:	18 c1       	rjmp	.+560    	; 0x2ca <__bad_interrupt>
      9a:	00 00       	nop
      9c:	16 c1       	rjmp	.+556    	; 0x2ca <__bad_interrupt>
      9e:	00 00       	nop
      a0:	14 c1       	rjmp	.+552    	; 0x2ca <__bad_interrupt>
      a2:	00 00       	nop
      a4:	12 c1       	rjmp	.+548    	; 0x2ca <__bad_interrupt>
      a6:	00 00       	nop
      a8:	10 c1       	rjmp	.+544    	; 0x2ca <__bad_interrupt>
      aa:	00 00       	nop
      ac:	0e c1       	rjmp	.+540    	; 0x2ca <__bad_interrupt>
      ae:	00 00       	nop
      b0:	0c c1       	rjmp	.+536    	; 0x2ca <__bad_interrupt>
      b2:	00 00       	nop
      b4:	0a c1       	rjmp	.+532    	; 0x2ca <__bad_interrupt>
      b6:	00 00       	nop
      b8:	08 c1       	rjmp	.+528    	; 0x2ca <__bad_interrupt>
      ba:	00 00       	nop
      bc:	06 c1       	rjmp	.+524    	; 0x2ca <__bad_interrupt>
      be:	00 00       	nop
      c0:	04 c1       	rjmp	.+520    	; 0x2ca <__bad_interrupt>
      c2:	00 00       	nop
      c4:	02 c1       	rjmp	.+516    	; 0x2ca <__bad_interrupt>
      c6:	00 00       	nop
      c8:	00 c1       	rjmp	.+512    	; 0x2ca <__bad_interrupt>
      ca:	00 00       	nop
      cc:	fe c0       	rjmp	.+508    	; 0x2ca <__bad_interrupt>
      ce:	00 00       	nop
      d0:	fc c0       	rjmp	.+504    	; 0x2ca <__bad_interrupt>
      d2:	00 00       	nop
      d4:	fa c0       	rjmp	.+500    	; 0x2ca <__bad_interrupt>
      d6:	00 00       	nop
      d8:	f8 c0       	rjmp	.+496    	; 0x2ca <__bad_interrupt>
      da:	00 00       	nop
      dc:	f6 c0       	rjmp	.+492    	; 0x2ca <__bad_interrupt>
      de:	00 00       	nop
      e0:	f4 c0       	rjmp	.+488    	; 0x2ca <__bad_interrupt>
      e2:	00 00       	nop
      e4:	73 09       	sbc	r23, r3
      e6:	76 09       	sbc	r23, r6
      e8:	65 09       	sbc	r22, r5
      ea:	69 09       	sbc	r22, r9
      ec:	6f 09       	sbc	r22, r15
      ee:	ad 09       	sbc	r26, r13
      f0:	7a 09       	sbc	r23, r10
      f2:	7e 09       	sbc	r23, r14
      f4:	84 09       	sbc	r24, r4
      f6:	88 09       	sbc	r24, r8
      f8:	8c 09       	sbc	r24, r12
      fa:	92 09       	sbc	r25, r2
      fc:	96 09       	sbc	r25, r6
      fe:	9a 09       	sbc	r25, r10
     100:	ad 09       	sbc	r26, r13
     102:	a0 09       	sbc	r26, r0
     104:	a4 09       	sbc	r26, r4
     106:	a8 09       	sbc	r26, r8

00000108 <__trampolines_end>:
     108:	4e 41       	sbci	r20, 0x1E	; 30
     10a:	4e 49       	Address 0x0000010a is out of bounds.
.word	0xffff	; ????

0000010b <pstr_inity>:
     10b:	49 4e 49 54 59                                      INITY

00000110 <pstr_inf>:
     110:	49 4e 46                                            INF

00000113 <pwr_m10>:
     113:	cd cc cc 3d 0a d7 23 3c 17 b7 d1 38 77 cc 2b 32     ...=..#<...8w.+2
     123:	95 95 e6 24 1f b1 4f 0a                             ...$..O.

0000012b <pwr_p10>:
     12b:	00 00 20 41 00 00 c8 42 00 40 1c 46 20 bc be 4c     .. A...B.@.F ..L
     13b:	ca 1b 0e 5a ae c5 9d 74                             ...Z...t

00000143 <digital_pin_to_timer_PGM>:
     143:	00 00 0a 0b 02 09 0c 0d 0e 08 07 03 04 01 00 00     ................
	...
     16f:	12 11 10 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...

00000189 <digital_pin_to_bit_mask_PGM>:
     189:	01 02 10 20 20 08 08 10 20 40 10 20 40 80 02 01     ...  ... @. @...
     199:	02 01 08 04 02 01 01 02 04 08 10 20 40 80 80 40     ........... @..@
     1a9:	20 10 08 04 02 01 80 04 02 01 80 40 20 10 08 04      ..........@ ...
     1b9:	02 01 08 04 02 01 01 02 04 08 10 20 40 80 01 02     ........... @...
     1c9:	04 08 10 20 40 80                                   ... @.

000001cf <digital_pin_to_port_PGM>:
     1cf:	05 05 05 05 07 05 08 08 08 08 02 02 02 02 0a 0a     ................
     1df:	08 08 04 04 04 04 01 01 01 01 01 01 01 01 03 03     ................
     1ef:	03 03 03 03 03 03 04 07 07 07 0c 0c 0c 0c 0c 0c     ................
     1ff:	0c 0c 02 02 02 02 06 06 06 06 06 06 06 06 0b 0b     ................
     20f:	0b 0b 0b 0b 0b 0b                                   ......

00000215 <port_to_input_PGM>:
     215:	00 00 20 00 23 00 26 00 29 00 2c 00 2f 00 32 00     .. .#.&.).,./.2.
     225:	00 01 00 00 03 01 06 01 09 01                       ..........

0000022f <port_to_output_PGM>:
     22f:	00 00 22 00 25 00 28 00 2b 00 2e 00 31 00 34 00     ..".%.(.+...1.4.
     23f:	02 01 00 00 05 01 08 01 0b 01                       ..........

00000249 <port_to_mode_PGM>:
     249:	00 00 21 00 24 00 27 00 2a 00 2d 00 30 00 33 00     ..!.$.'.*.-.0.3.
     259:	01 01 00 00 04 01 07 01 0a 01 00                    ...........

00000264 <__ctors_start>:
     264:	6f 01       	movw	r12, r30
     266:	bc 07       	cpc	r27, r28

00000268 <__ctors_end>:
     268:	75 01       	movw	r14, r10

0000026a <__dtors_end>:
     26a:	11 24       	eor	r1, r1
     26c:	1f be       	out	0x3f, r1	; 63
     26e:	cf ef       	ldi	r28, 0xFF	; 255
     270:	d1 e2       	ldi	r29, 0x21	; 33
     272:	de bf       	out	0x3e, r29	; 62
     274:	cd bf       	out	0x3d, r28	; 61
     276:	00 e0       	ldi	r16, 0x00	; 0
     278:	0c bf       	out	0x3c, r16	; 60

0000027a <__do_copy_data>:
     27a:	12 e0       	ldi	r17, 0x02	; 2
     27c:	a0 e0       	ldi	r26, 0x00	; 0
     27e:	b2 e0       	ldi	r27, 0x02	; 2
     280:	e4 e0       	ldi	r30, 0x04	; 4
     282:	ff e1       	ldi	r31, 0x1F	; 31
     284:	00 e0       	ldi	r16, 0x00	; 0
     286:	0b bf       	out	0x3b, r16	; 59
     288:	02 c0       	rjmp	.+4      	; 0x28e <__do_copy_data+0x14>
     28a:	07 90       	elpm	r0, Z+
     28c:	0d 92       	st	X+, r0
     28e:	aa 32       	cpi	r26, 0x2A	; 42
     290:	b1 07       	cpc	r27, r17
     292:	d9 f7       	brne	.-10     	; 0x28a <__do_copy_data+0x10>

00000294 <__do_clear_bss>:
     294:	22 e0       	ldi	r18, 0x02	; 2
     296:	aa e2       	ldi	r26, 0x2A	; 42
     298:	b2 e0       	ldi	r27, 0x02	; 2
     29a:	01 c0       	rjmp	.+2      	; 0x29e <.do_clear_bss_start>

0000029c <.do_clear_bss_loop>:
     29c:	1d 92       	st	X+, r1

0000029e <.do_clear_bss_start>:
     29e:	ad 3e       	cpi	r26, 0xED	; 237
     2a0:	b2 07       	cpc	r27, r18
     2a2:	e1 f7       	brne	.-8      	; 0x29c <.do_clear_bss_loop>

000002a4 <__do_global_ctors>:
     2a4:	11 e0       	ldi	r17, 0x01	; 1
     2a6:	c4 e3       	ldi	r28, 0x34	; 52
     2a8:	d1 e0       	ldi	r29, 0x01	; 1
     2aa:	00 e0       	ldi	r16, 0x00	; 0
     2ac:	06 c0       	rjmp	.+12     	; 0x2ba <__do_global_ctors+0x16>
     2ae:	21 97       	sbiw	r28, 0x01	; 1
     2b0:	01 09       	sbc	r16, r1
     2b2:	80 2f       	mov	r24, r16
     2b4:	fe 01       	movw	r30, r28
     2b6:	0e 94 ad 0b 	call	0x175a	; 0x175a <__tablejump2__>
     2ba:	c2 33       	cpi	r28, 0x32	; 50
     2bc:	d1 07       	cpc	r29, r17
     2be:	80 e0       	ldi	r24, 0x00	; 0
     2c0:	08 07       	cpc	r16, r24
     2c2:	a9 f7       	brne	.-22     	; 0x2ae <__do_global_ctors+0xa>
     2c4:	87 d6       	rcall	.+3342   	; 0xfd4 <main>
     2c6:	0c 94 71 0f 	jmp	0x1ee2	; 0x1ee2 <__do_global_dtors>

000002ca <__bad_interrupt>:
     2ca:	9a ce       	rjmp	.-716    	; 0x0 <__vectors>

000002cc <setup>:
bool flagaok = false;


///CREDIT: Adam Baniuszewicz, Bartosz Flis, Jakub Sybidlo
void setup()
{
     2cc:	70 d1       	rcall	.+736    	; 0x5ae <_Z11StepperInitv>
     2ce:	26 e0       	ldi	r18, 0x06	; 6
     2d0:	40 e0       	ldi	r20, 0x00	; 0
     2d2:	51 ee       	ldi	r21, 0xE1	; 225
     2d4:	60 e0       	ldi	r22, 0x00	; 0
     2d6:	70 e0       	ldi	r23, 0x00	; 0
     2d8:	81 e4       	ldi	r24, 0x41	; 65
     2da:	92 e0       	ldi	r25, 0x02	; 2
     2dc:	82 c5       	rjmp	.+2820   	; 0xde2 <_ZN14HardwareSerial5beginEmh>

000002de <_GLOBAL__sub_I_steps>:
     2de:	6c e1       	ldi	r22, 0x1C	; 28
     2e0:	72 e0       	ldi	r23, 0x02	; 2
     2e2:	8b e2       	ldi	r24, 0x2B	; 43
     2e4:	92 e0       	ldi	r25, 0x02	; 2
     2e6:	0c 94 a7 0a 	jmp	0x154e	; 0x154e <_ZN6StringC1EPKc>

000002ea <_GLOBAL__sub_D_steps>:
     2ea:	8b e2       	ldi	r24, 0x2B	; 43
     2ec:	92 e0       	ldi	r25, 0x02	; 2
     2ee:	0c 94 40 0a 	jmp	0x1480	; 0x1480 <_ZN6StringD1Ev>

000002f2 <loop>:
     2f2:	cf 93       	push	r28
     2f4:	df 93       	push	r29
     2f6:	cd b7       	in	r28, 0x3d	; 61
     2f8:	de b7       	in	r29, 0x3e	; 62
     2fa:	66 97       	sbiw	r28, 0x16	; 22
     2fc:	0f b6       	in	r0, 0x3f	; 63
     2fe:	f8 94       	cli
     300:	de bf       	out	0x3e, r29	; 62
     302:	0f be       	out	0x3f, r0	; 63
     304:	cd bf       	out	0x3d, r28	; 61
     306:	81 e4       	ldi	r24, 0x41	; 65
     308:	92 e0       	ldi	r25, 0x02	; 2
     30a:	6a d4       	rcall	.+2260   	; 0xbe0 <_ZN14HardwareSerial9availableEv>
     30c:	89 2b       	or	r24, r25
     30e:	f9 f0       	breq	.+62     	; 0x34e <loop+0x5c>
     310:	10 92 2a 02 	sts	0x022A, r1	; 0x80022a <__data_end>
     314:	4a e0       	ldi	r20, 0x0A	; 10
     316:	61 e4       	ldi	r22, 0x41	; 65
     318:	72 e0       	ldi	r23, 0x02	; 2
     31a:	ce 01       	movw	r24, r28
     31c:	01 96       	adiw	r24, 0x01	; 1
     31e:	e4 d6       	rcall	.+3528   	; 0x10e8 <_ZN6Stream15readStringUntilEc>
     320:	be 01       	movw	r22, r28
     322:	6f 5f       	subi	r22, 0xFF	; 255
     324:	7f 4f       	sbci	r23, 0xFF	; 255
     326:	ce 01       	movw	r24, r28
     328:	07 96       	adiw	r24, 0x07	; 7
     32a:	9b d0       	rcall	.+310    	; 0x462 <_Z11DecodeFrame6String>
     32c:	80 e1       	ldi	r24, 0x10	; 16
     32e:	fe 01       	movw	r30, r28
     330:	37 96       	adiw	r30, 0x07	; 7
     332:	a1 e3       	ldi	r26, 0x31	; 49
     334:	b2 e0       	ldi	r27, 0x02	; 2
     336:	01 90       	ld	r0, Z+
     338:	0d 92       	st	X+, r0
     33a:	8a 95       	dec	r24
     33c:	e1 f7       	brne	.-8      	; 0x336 <loop+0x44>
     33e:	ce 01       	movw	r24, r28
     340:	01 96       	adiw	r24, 0x01	; 1
     342:	0e 94 40 0a 	call	0x1480	; 0x1480 <_ZN6StringD1Ev>
     346:	81 e3       	ldi	r24, 0x31	; 49
     348:	92 e0       	ldi	r25, 0x02	; 2
     34a:	92 d1       	rcall	.+804    	; 0x670 <_Z17ChangeSteppersDirP5Steps>
     34c:	dc cf       	rjmp	.-72     	; 0x306 <loop+0x14>
     34e:	81 e3       	ldi	r24, 0x31	; 49
     350:	92 e0       	ldi	r25, 0x02	; 2
     352:	0d d2       	rcall	.+1050   	; 0x76e <_Z11MovementXYZP5Steps>
     354:	20 e0       	ldi	r18, 0x00	; 0
     356:	30 e0       	ldi	r19, 0x00	; 0
     358:	a9 01       	movw	r20, r18
     35a:	60 91 31 02 	lds	r22, 0x0231	; 0x800231 <steps>
     35e:	70 91 32 02 	lds	r23, 0x0232	; 0x800232 <steps+0x1>
     362:	80 91 33 02 	lds	r24, 0x0233	; 0x800233 <steps+0x2>
     366:	90 91 34 02 	lds	r25, 0x0234	; 0x800234 <steps+0x3>
     36a:	4f d3       	rcall	.+1694   	; 0xa0a <__cmpsf2>
     36c:	81 11       	cpse	r24, r1
     36e:	28 c0       	rjmp	.+80     	; 0x3c0 <loop+0xce>
     370:	20 e0       	ldi	r18, 0x00	; 0
     372:	30 e0       	ldi	r19, 0x00	; 0
     374:	a9 01       	movw	r20, r18
     376:	60 91 35 02 	lds	r22, 0x0235	; 0x800235 <steps+0x4>
     37a:	70 91 36 02 	lds	r23, 0x0236	; 0x800236 <steps+0x5>
     37e:	80 91 37 02 	lds	r24, 0x0237	; 0x800237 <steps+0x6>
     382:	90 91 38 02 	lds	r25, 0x0238	; 0x800238 <steps+0x7>
     386:	41 d3       	rcall	.+1666   	; 0xa0a <__cmpsf2>
     388:	81 11       	cpse	r24, r1
     38a:	1a c0       	rjmp	.+52     	; 0x3c0 <loop+0xce>
     38c:	20 e0       	ldi	r18, 0x00	; 0
     38e:	30 e0       	ldi	r19, 0x00	; 0
     390:	a9 01       	movw	r20, r18
     392:	60 91 39 02 	lds	r22, 0x0239	; 0x800239 <steps+0x8>
     396:	70 91 3a 02 	lds	r23, 0x023A	; 0x80023a <steps+0x9>
     39a:	80 91 3b 02 	lds	r24, 0x023B	; 0x80023b <steps+0xa>
     39e:	90 91 3c 02 	lds	r25, 0x023C	; 0x80023c <steps+0xb>
     3a2:	33 d3       	rcall	.+1638   	; 0xa0a <__cmpsf2>
     3a4:	81 11       	cpse	r24, r1
     3a6:	0c c0       	rjmp	.+24     	; 0x3c0 <loop+0xce>
     3a8:	80 91 2a 02 	lds	r24, 0x022A	; 0x80022a <__data_end>
     3ac:	81 11       	cpse	r24, r1
     3ae:	08 c0       	rjmp	.+16     	; 0x3c0 <loop+0xce>
     3b0:	66 e0       	ldi	r22, 0x06	; 6
     3b2:	72 e0       	ldi	r23, 0x02	; 2
     3b4:	81 e4       	ldi	r24, 0x41	; 65
     3b6:	92 e0       	ldi	r25, 0x02	; 2
     3b8:	59 d6       	rcall	.+3250   	; 0x106c <_ZN5Print7printlnEPKc>
     3ba:	81 e0       	ldi	r24, 0x01	; 1
     3bc:	80 93 2a 02 	sts	0x022A, r24	; 0x80022a <__data_end>
     3c0:	66 96       	adiw	r28, 0x16	; 22
     3c2:	0f b6       	in	r0, 0x3f	; 63
     3c4:	f8 94       	cli
     3c6:	de bf       	out	0x3e, r29	; 62
     3c8:	0f be       	out	0x3f, r0	; 63
     3ca:	cd bf       	out	0x3d, r28	; 61
     3cc:	df 91       	pop	r29
     3ce:	cf 91       	pop	r28
     3d0:	08 95       	ret

000003d2 <_Z18LimitSwitchPinInitv>:
#include "..\Header Files\LimitSwitch.h"

///CREDIT: Adam Baniuszewicz, Bartosz Flis, Jakub Sybidlo
void LimitSwitchPinInit()
{
	pinMode(pinLimitSwitchX, INPUT);
     3d2:	60 e0       	ldi	r22, 0x00	; 0
     3d4:	82 e0       	ldi	r24, 0x02	; 2
     3d6:	c2 d7       	rcall	.+3972   	; 0x135c <pinMode>
	pinMode(pinLimitSwitchY, INPUT);
     3d8:	60 e0       	ldi	r22, 0x00	; 0
     3da:	8f e0       	ldi	r24, 0x0F	; 15
	pinMode(pinLimitSwitchZ, INPUT);
     3dc:	bf d7       	rcall	.+3966   	; 0x135c <pinMode>
     3de:	60 e0       	ldi	r22, 0x00	; 0
	digitalWrite(pinLimitSwitchX, HIGH);
     3e0:	83 e1       	ldi	r24, 0x13	; 19
     3e2:	bc d7       	rcall	.+3960   	; 0x135c <pinMode>
     3e4:	61 e0       	ldi	r22, 0x01	; 1
	digitalWrite(pinLimitSwitchY, HIGH);
     3e6:	82 e0       	ldi	r24, 0x02	; 2
     3e8:	f5 d7       	rcall	.+4074   	; 0x13d4 <digitalWrite>
     3ea:	61 e0       	ldi	r22, 0x01	; 1
	digitalWrite(pinLimitSwitchZ, HIGH);
     3ec:	8f e0       	ldi	r24, 0x0F	; 15
     3ee:	f2 d7       	rcall	.+4068   	; 0x13d4 <digitalWrite>
     3f0:	61 e0       	ldi	r22, 0x01	; 1
     3f2:	83 e1       	ldi	r24, 0x13	; 19
     3f4:	ef c7       	rjmp	.+4062   	; 0x13d4 <digitalWrite>

000003f6 <_Z12RemoveSpacesPc>:
#include "stdlib.h"


///CREDIT: Adam Baniuszewicz, Bartosz Flis, Jakub Sybidlo
void RemoveSpaces(char* source)
{
     3f6:	fc 01       	movw	r30, r24
	char* i = source;
	char* j = source;

	while(*j != '\0')
     3f8:	21 91       	ld	r18, Z+
     3fa:	22 23       	and	r18, r18
     3fc:	31 f0       	breq	.+12     	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
	{
		*i = *j++;
     3fe:	dc 01       	movw	r26, r24
     400:	2c 93       	st	X, r18
		if(*i != ' ')
     402:	20 32       	cpi	r18, 0x20	; 32
     404:	c9 f3       	breq	.-14     	; 0x3f8 <_Z12RemoveSpacesPc+0x2>
		i++;
     406:	01 96       	adiw	r24, 0x01	; 1
     408:	f7 cf       	rjmp	.-18     	; 0x3f8 <_Z12RemoveSpacesPc+0x2>
	}
	*i = 0;
     40a:	fc 01       	movw	r30, r24
     40c:	10 82       	st	Z, r1
     40e:	08 95       	ret

00000410 <_Z23GetNumberAfterCharacterPcc>:
}

///CREDIT: Adam Baniuszewicz, Bartosz Flis, Jakub Sybidlo
double GetNumberAfterCharacter(char* source, char character)
{
	while (*source != '\0')
     410:	fc 01       	movw	r30, r24
     412:	21 91       	ld	r18, Z+
     414:	cf 01       	movw	r24, r30
     416:	22 23       	and	r18, r18
     418:	31 f0       	breq	.+12     	; 0x426 <_Z23GetNumberAfterCharacterPcc+0x16>
	{
		if (*source++ == character)
     41a:	26 13       	cpse	r18, r22
     41c:	f9 cf       	rjmp	.-14     	; 0x410 <_Z23GetNumberAfterCharacterPcc>
		{
			//extract all digits after desired character
			return strtod(source, NULL);
     41e:	60 e0       	ldi	r22, 0x00	; 0
     420:	70 e0       	ldi	r23, 0x00	; 0
     422:	0c 94 cf 0d 	jmp	0x1b9e	; 0x1b9e <strtod>
		}
	}
	return 0; //returning '0' won't cause any movement
}
     426:	60 e0       	ldi	r22, 0x00	; 0
     428:	70 e0       	ldi	r23, 0x00	; 0
     42a:	cb 01       	movw	r24, r22
     42c:	08 95       	ret

0000042e <_Z7GetCodePc>:

	return steps;
}

int GetCode(char* readBuffer)
{
     42e:	fc 01       	movw	r30, r24
	if (readBuffer[0] == 'g' && readBuffer[1] == '0' && readBuffer[2] == '0')
     430:	80 81       	ld	r24, Z
     432:	87 36       	cpi	r24, 0x67	; 103
     434:	59 f4       	brne	.+22     	; 0x44c <_Z7GetCodePc+0x1e>
     436:	81 81       	ldd	r24, Z+1	; 0x01
     438:	80 33       	cpi	r24, 0x30	; 48
     43a:	81 f4       	brne	.+32     	; 0x45c <_Z7GetCodePc+0x2e>
     43c:	82 81       	ldd	r24, Z+2	; 0x02
     43e:	80 33       	cpi	r24, 0x30	; 48
     440:	51 f0       	breq	.+20     	; 0x456 <_Z7GetCodePc+0x28>
		return 0;
	if (readBuffer[0] == 'g' && readBuffer[1] == '0' && readBuffer[2] == '1')
     442:	81 33       	cpi	r24, 0x31	; 49
     444:	59 f4       	brne	.+22     	; 0x45c <_Z7GetCodePc+0x2e>
		return 1;
     446:	81 e0       	ldi	r24, 0x01	; 1
     448:	90 e0       	ldi	r25, 0x00	; 0
     44a:	08 95       	ret
	if (readBuffer[0] == 'f')
     44c:	86 36       	cpi	r24, 0x66	; 102
     44e:	31 f4       	brne	.+12     	; 0x45c <_Z7GetCodePc+0x2e>
		return 99;
     450:	83 e6       	ldi	r24, 0x63	; 99
     452:	90 e0       	ldi	r25, 0x00	; 0
     454:	08 95       	ret
}

int GetCode(char* readBuffer)
{
	if (readBuffer[0] == 'g' && readBuffer[1] == '0' && readBuffer[2] == '0')
		return 0;
     456:	80 e0       	ldi	r24, 0x00	; 0
     458:	90 e0       	ldi	r25, 0x00	; 0
     45a:	08 95       	ret
	if (readBuffer[0] == 'g' && readBuffer[1] == '0' && readBuffer[2] == '1')
		return 1;
	if (readBuffer[0] == 'f')
		return 99;
	
	return -1;	 
     45c:	8f ef       	ldi	r24, 0xFF	; 255
     45e:	9f ef       	ldi	r25, 0xFF	; 255
     460:	08 95       	ret

00000462 <_Z11DecodeFrame6String>:
	return 0; //returning '0' won't cause any movement
}

///CREDIT: Adam Baniuszewicz, Bartosz Flis, Jakub Sybidlo
Steps DecodeFrame(String frame)
{
     462:	af 92       	push	r10
     464:	bf 92       	push	r11
     466:	cf 92       	push	r12
     468:	df 92       	push	r13
     46a:	ef 92       	push	r14
     46c:	ff 92       	push	r15
     46e:	0f 93       	push	r16
     470:	1f 93       	push	r17
     472:	cf 93       	push	r28
     474:	df 93       	push	r29
     476:	cd b7       	in	r28, 0x3d	; 61
     478:	de b7       	in	r29, 0x3e	; 62
     47a:	8c 01       	movw	r16, r24
     47c:	6b 01       	movw	r12, r22
	steps.x = (int)GetNumberAfterCharacter(readDataChar, 'x');
	steps.y = (int)GetNumberAfterCharacter(readDataChar, 'y');
	steps.z = (int)GetNumberAfterCharacter(readDataChar, 'z');

	return steps;
}
     47e:	ad b6       	in	r10, 0x3d	; 61
     480:	be b6       	in	r11, 0x3e	; 62
}

///CREDIT: Adam Baniuszewicz, Bartosz Flis, Jakub Sybidlo
Steps DecodeFrame(String frame)
{
	Steps steps = {0, 0, 0, SetSpeed((int)DEFAULTSPEED)};
     482:	80 e1       	ldi	r24, 0x10	; 16
     484:	f8 01       	movw	r30, r16
     486:	11 92       	st	Z+, r1
     488:	8a 95       	dec	r24
     48a:	e9 f7       	brne	.-6      	; 0x486 <_Z11DecodeFrame6String+0x24>
     48c:	86 e0       	ldi	r24, 0x06	; 6
     48e:	90 e0       	ldi	r25, 0x00	; 0
     490:	54 d2       	rcall	.+1192   	; 0x93a <_Z8SetSpeedi>
     492:	bc 01       	movw	r22, r24
     494:	99 0f       	add	r25, r25
     496:	88 0b       	sbc	r24, r24
     498:	99 0b       	sbc	r25, r25
     49a:	ee d2       	rcall	.+1500   	; 0xa78 <__floatsisf>
     49c:	f8 01       	movw	r30, r16
     49e:	64 87       	std	Z+12, r22	; 0x0c
     4a0:	75 87       	std	Z+13, r23	; 0x0d
     4a2:	86 87       	std	Z+14, r24	; 0x0e
     4a4:	97 87       	std	Z+15, r25	; 0x0f

	//convert string to char
	char readDataChar[frame.length() + 1];
     4a6:	f6 01       	movw	r30, r12
     4a8:	44 81       	ldd	r20, Z+4	; 0x04
     4aa:	55 81       	ldd	r21, Z+5	; 0x05
     4ac:	4f 5f       	subi	r20, 0xFF	; 255
     4ae:	5f 4f       	sbci	r21, 0xFF	; 255
     4b0:	8d b7       	in	r24, 0x3d	; 61
     4b2:	9e b7       	in	r25, 0x3e	; 62
     4b4:	84 1b       	sub	r24, r20
     4b6:	95 0b       	sbc	r25, r21
     4b8:	0f b6       	in	r0, 0x3f	; 63
     4ba:	f8 94       	cli
     4bc:	9e bf       	out	0x3e, r25	; 62
     4be:	0f be       	out	0x3f, r0	; 63
     4c0:	8d bf       	out	0x3d, r24	; 61
     4c2:	ed b7       	in	r30, 0x3d	; 61
     4c4:	fe b7       	in	r31, 0x3e	; 62
     4c6:	31 96       	adiw	r30, 0x01	; 1
     4c8:	7f 01       	movw	r14, r30
	void setCharAt(unsigned int index, char c);
	char operator [] (unsigned int index) const;
	char& operator [] (unsigned int index);
	void getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index=0) const;
	void toCharArray(char *buf, unsigned int bufsize, unsigned int index=0) const
		{ getBytes((unsigned char *)buf, bufsize, index); }
     4ca:	20 e0       	ldi	r18, 0x00	; 0
     4cc:	30 e0       	ldi	r19, 0x00	; 0
     4ce:	bf 01       	movw	r22, r30
     4d0:	c6 01       	movw	r24, r12
     4d2:	0e 94 fa 0a 	call	0x15f4	; 0x15f4 <_ZNK6String8getBytesEPhjj>
	frame.toCharArray(readDataChar, frame.length() + 1);
			
	RemoveSpaces(readDataChar);
     4d6:	c7 01       	movw	r24, r14
     4d8:	8e df       	rcall	.-228    	; 0x3f6 <_Z12RemoveSpacesPc>
	strlwr(readDataChar); //convert data to lowercase
     4da:	c7 01       	movw	r24, r14
     4dc:	0e 94 55 0f 	call	0x1eaa	; 0x1eaa <strlwr>

	switch (GetCode(readDataChar))
     4e0:	c7 01       	movw	r24, r14
     4e2:	a5 df       	rcall	.-182    	; 0x42e <_Z7GetCodePc>
     4e4:	81 30       	cpi	r24, 0x01	; 1
     4e6:	91 05       	cpc	r25, r1
     4e8:	41 f0       	breq	.+16     	; 0x4fa <_Z11DecodeFrame6String+0x98>
     4ea:	83 36       	cpi	r24, 0x63	; 99
     4ec:	91 05       	cpc	r25, r1
     4ee:	99 f0       	breq	.+38     	; 0x516 <_Z11DecodeFrame6String+0xb4>
     4f0:	89 2b       	or	r24, r25
     4f2:	11 f5       	brne	.+68     	; 0x538 <_Z11DecodeFrame6String+0xd6>
	{
		case 0: 
			steps.speed = SetSpeed((int)G00SPEED);
     4f4:	89 e0       	ldi	r24, 0x09	; 9
     4f6:	90 e0       	ldi	r25, 0x00	; 0
			break;
		case 1:
			steps.speed = SetSpeed((int)G01SPEED);
     4f8:	02 c0       	rjmp	.+4      	; 0x4fe <_Z11DecodeFrame6String+0x9c>
     4fa:	84 e0       	ldi	r24, 0x04	; 4
     4fc:	90 e0       	ldi	r25, 0x00	; 0
     4fe:	1d d2       	rcall	.+1082   	; 0x93a <_Z8SetSpeedi>
     500:	bc 01       	movw	r22, r24
     502:	99 0f       	add	r25, r25
     504:	88 0b       	sbc	r24, r24
     506:	99 0b       	sbc	r25, r25
     508:	b7 d2       	rcall	.+1390   	; 0xa78 <__floatsisf>
     50a:	f8 01       	movw	r30, r16
     50c:	64 87       	std	Z+12, r22	; 0x0c
			break;
		case 99:
			steps.speed = SetSpeed((int)GetNumberAfterCharacter(readDataChar, 'f'));
     50e:	75 87       	std	Z+13, r23	; 0x0d
     510:	86 87       	std	Z+14, r24	; 0x0e
     512:	97 87       	std	Z+15, r25	; 0x0f
     514:	11 c0       	rjmp	.+34     	; 0x538 <_Z11DecodeFrame6String+0xd6>
     516:	66 e6       	ldi	r22, 0x66	; 102
     518:	c7 01       	movw	r24, r14
     51a:	7a df       	rcall	.-268    	; 0x410 <_Z23GetNumberAfterCharacterPcc>
     51c:	7a d2       	rcall	.+1268   	; 0xa12 <__fixsfsi>
     51e:	cb 01       	movw	r24, r22
     520:	0c d2       	rcall	.+1048   	; 0x93a <_Z8SetSpeedi>
     522:	bc 01       	movw	r22, r24
     524:	99 0f       	add	r25, r25
     526:	88 0b       	sbc	r24, r24
     528:	99 0b       	sbc	r25, r25
     52a:	a6 d2       	rcall	.+1356   	; 0xa78 <__floatsisf>
     52c:	f8 01       	movw	r30, r16
			return steps;
     52e:	64 87       	std	Z+12, r22	; 0x0c
		default:
			break;
	}
	steps.x = (int)GetNumberAfterCharacter(readDataChar, 'x');
     530:	75 87       	std	Z+13, r23	; 0x0d
     532:	86 87       	std	Z+14, r24	; 0x0e
     534:	97 87       	std	Z+15, r25	; 0x0f
     536:	2a c0       	rjmp	.+84     	; 0x58c <_Z11DecodeFrame6String+0x12a>
     538:	68 e7       	ldi	r22, 0x78	; 120
     53a:	c7 01       	movw	r24, r14
     53c:	69 df       	rcall	.-302    	; 0x410 <_Z23GetNumberAfterCharacterPcc>
     53e:	69 d2       	rcall	.+1234   	; 0xa12 <__fixsfsi>
     540:	07 2e       	mov	r0, r23
     542:	00 0c       	add	r0, r0
     544:	88 0b       	sbc	r24, r24
     546:	99 0b       	sbc	r25, r25
     548:	97 d2       	rcall	.+1326   	; 0xa78 <__floatsisf>
     54a:	f8 01       	movw	r30, r16
	steps.y = (int)GetNumberAfterCharacter(readDataChar, 'y');
     54c:	60 83       	st	Z, r22
     54e:	71 83       	std	Z+1, r23	; 0x01
     550:	82 83       	std	Z+2, r24	; 0x02
     552:	93 83       	std	Z+3, r25	; 0x03
     554:	69 e7       	ldi	r22, 0x79	; 121
     556:	c7 01       	movw	r24, r14
     558:	5b df       	rcall	.-330    	; 0x410 <_Z23GetNumberAfterCharacterPcc>
     55a:	5b d2       	rcall	.+1206   	; 0xa12 <__fixsfsi>
     55c:	07 2e       	mov	r0, r23
     55e:	00 0c       	add	r0, r0
     560:	88 0b       	sbc	r24, r24
     562:	99 0b       	sbc	r25, r25
     564:	89 d2       	rcall	.+1298   	; 0xa78 <__floatsisf>
     566:	f8 01       	movw	r30, r16
	steps.z = (int)GetNumberAfterCharacter(readDataChar, 'z');
     568:	64 83       	std	Z+4, r22	; 0x04
     56a:	75 83       	std	Z+5, r23	; 0x05
     56c:	86 83       	std	Z+6, r24	; 0x06
     56e:	97 83       	std	Z+7, r25	; 0x07
     570:	6a e7       	ldi	r22, 0x7A	; 122
     572:	c7 01       	movw	r24, r14
     574:	4d df       	rcall	.-358    	; 0x410 <_Z23GetNumberAfterCharacterPcc>
     576:	4d d2       	rcall	.+1178   	; 0xa12 <__fixsfsi>
     578:	07 2e       	mov	r0, r23
     57a:	00 0c       	add	r0, r0
     57c:	88 0b       	sbc	r24, r24
     57e:	99 0b       	sbc	r25, r25
     580:	7b d2       	rcall	.+1270   	; 0xa78 <__floatsisf>
     582:	f8 01       	movw	r30, r16
     584:	60 87       	std	Z+8, r22	; 0x08
     586:	71 87       	std	Z+9, r23	; 0x09
     588:	82 87       	std	Z+10, r24	; 0x0a

	return steps;
}
     58a:	93 87       	std	Z+11, r25	; 0x0b
     58c:	c8 01       	movw	r24, r16
     58e:	0f b6       	in	r0, 0x3f	; 63
     590:	f8 94       	cli
     592:	be be       	out	0x3e, r11	; 62
     594:	0f be       	out	0x3f, r0	; 63
     596:	ad be       	out	0x3d, r10	; 61
     598:	df 91       	pop	r29
     59a:	cf 91       	pop	r28
     59c:	1f 91       	pop	r17
     59e:	0f 91       	pop	r16
     5a0:	ff 90       	pop	r15
     5a2:	ef 90       	pop	r14
     5a4:	df 90       	pop	r13
     5a6:	cf 90       	pop	r12
     5a8:	bf 90       	pop	r11
     5aa:	af 90       	pop	r10
     5ac:	08 95       	ret

000005ae <_Z11StepperInitv>:
     5ae:	11 df       	rcall	.-478    	; 0x3d2 <_Z18LimitSwitchPinInitv>
     5b0:	61 e0       	ldi	r22, 0x01	; 1
     5b2:	87 e3       	ldi	r24, 0x37	; 55
     5b4:	d3 d6       	rcall	.+3494   	; 0x135c <pinMode>
     5b6:	61 e0       	ldi	r22, 0x01	; 1
     5b8:	8d e3       	ldi	r24, 0x3D	; 61
     5ba:	d0 d6       	rcall	.+3488   	; 0x135c <pinMode>
     5bc:	61 e0       	ldi	r22, 0x01	; 1
     5be:	80 e3       	ldi	r24, 0x30	; 48
     5c0:	cd d6       	rcall	.+3482   	; 0x135c <pinMode>
     5c2:	61 e0       	ldi	r22, 0x01	; 1
     5c4:	86 e2       	ldi	r24, 0x26	; 38
     5c6:	ca d6       	rcall	.+3476   	; 0x135c <pinMode>
     5c8:	61 e0       	ldi	r22, 0x01	; 1
     5ca:	88 e3       	ldi	r24, 0x38	; 56
     5cc:	c7 d6       	rcall	.+3470   	; 0x135c <pinMode>
     5ce:	61 e0       	ldi	r22, 0x01	; 1
     5d0:	8e e3       	ldi	r24, 0x3E	; 62
     5d2:	c4 d6       	rcall	.+3464   	; 0x135c <pinMode>
     5d4:	61 e0       	ldi	r22, 0x01	; 1
     5d6:	85 e3       	ldi	r24, 0x35	; 53
     5d8:	c1 d6       	rcall	.+3458   	; 0x135c <pinMode>
     5da:	61 e0       	ldi	r22, 0x01	; 1
     5dc:	81 e3       	ldi	r24, 0x31	; 49
     5de:	be d6       	rcall	.+3452   	; 0x135c <pinMode>
     5e0:	61 e0       	ldi	r22, 0x01	; 1
     5e2:	88 e2       	ldi	r24, 0x28	; 40
     5e4:	bb d6       	rcall	.+3446   	; 0x135c <pinMode>
     5e6:	61 e0       	ldi	r22, 0x01	; 1
     5e8:	86 e3       	ldi	r24, 0x36	; 54
     5ea:	b8 d6       	rcall	.+3440   	; 0x135c <pinMode>
     5ec:	61 e0       	ldi	r22, 0x01	; 1
     5ee:	8c e3       	ldi	r24, 0x3C	; 60
     5f0:	b5 d6       	rcall	.+3434   	; 0x135c <pinMode>
     5f2:	61 e0       	ldi	r22, 0x01	; 1
     5f4:	8e e2       	ldi	r24, 0x2E	; 46
     5f6:	b2 c6       	rjmp	.+3428   	; 0x135c <pinMode>

000005f8 <_Z15ReadLimitSwitchPbS_S_>:
     5f8:	ef 92       	push	r14
     5fa:	ff 92       	push	r15
     5fc:	0f 93       	push	r16
     5fe:	1f 93       	push	r17
     600:	cf 93       	push	r28
     602:	df 93       	push	r29
     604:	7c 01       	movw	r14, r24
     606:	8b 01       	movw	r16, r22
     608:	ea 01       	movw	r28, r20
     60a:	82 e0       	ldi	r24, 0x02	; 2
     60c:	11 d7       	rcall	.+3618   	; 0x1430 <digitalRead>
     60e:	21 e0       	ldi	r18, 0x01	; 1
     610:	89 2b       	or	r24, r25
     612:	09 f4       	brne	.+2      	; 0x616 <_Z15ReadLimitSwitchPbS_S_+0x1e>
     614:	20 e0       	ldi	r18, 0x00	; 0
     616:	f7 01       	movw	r30, r14
     618:	20 83       	st	Z, r18
     61a:	8f e0       	ldi	r24, 0x0F	; 15
     61c:	09 d7       	rcall	.+3602   	; 0x1430 <digitalRead>
     61e:	21 e0       	ldi	r18, 0x01	; 1
     620:	89 2b       	or	r24, r25
     622:	09 f4       	brne	.+2      	; 0x626 <_Z15ReadLimitSwitchPbS_S_+0x2e>
     624:	20 e0       	ldi	r18, 0x00	; 0
     626:	f8 01       	movw	r30, r16
     628:	20 83       	st	Z, r18
     62a:	83 e1       	ldi	r24, 0x13	; 19
     62c:	01 d7       	rcall	.+3586   	; 0x1430 <digitalRead>
     62e:	21 e0       	ldi	r18, 0x01	; 1
     630:	89 2b       	or	r24, r25
     632:	09 f4       	brne	.+2      	; 0x636 <_Z15ReadLimitSwitchPbS_S_+0x3e>
     634:	20 e0       	ldi	r18, 0x00	; 0
     636:	28 83       	st	Y, r18
     638:	df 91       	pop	r29
     63a:	cf 91       	pop	r28
     63c:	1f 91       	pop	r17
     63e:	0f 91       	pop	r16
     640:	ff 90       	pop	r15
     642:	ef 90       	pop	r14
     644:	08 95       	ret

00000646 <_Z17ChangeStepperXDirb>:
     646:	88 23       	and	r24, r24
     648:	11 f0       	breq	.+4      	; 0x64e <_Z17ChangeStepperXDirb+0x8>
     64a:	61 e0       	ldi	r22, 0x01	; 1
     64c:	01 c0       	rjmp	.+2      	; 0x650 <_Z17ChangeStepperXDirb+0xa>
     64e:	60 e0       	ldi	r22, 0x00	; 0
     650:	87 e3       	ldi	r24, 0x37	; 55
     652:	c0 c6       	rjmp	.+3456   	; 0x13d4 <digitalWrite>

00000654 <_Z17ChangeStepperYDirb>:
     654:	88 23       	and	r24, r24
     656:	11 f0       	breq	.+4      	; 0x65c <_Z17ChangeStepperYDirb+0x8>
     658:	61 e0       	ldi	r22, 0x01	; 1
     65a:	01 c0       	rjmp	.+2      	; 0x65e <_Z17ChangeStepperYDirb+0xa>
     65c:	60 e0       	ldi	r22, 0x00	; 0
     65e:	8d e3       	ldi	r24, 0x3D	; 61
     660:	b9 c6       	rjmp	.+3442   	; 0x13d4 <digitalWrite>

00000662 <_Z17ChangeStepperZDirb>:
     662:	88 23       	and	r24, r24
     664:	11 f0       	breq	.+4      	; 0x66a <_Z17ChangeStepperZDirb+0x8>
     666:	61 e0       	ldi	r22, 0x01	; 1
     668:	01 c0       	rjmp	.+2      	; 0x66c <_Z17ChangeStepperZDirb+0xa>
     66a:	60 e0       	ldi	r22, 0x00	; 0
     66c:	80 e3       	ldi	r24, 0x30	; 48
     66e:	b2 c6       	rjmp	.+3428   	; 0x13d4 <digitalWrite>

00000670 <_Z17ChangeSteppersDirP5Steps>:
     670:	cf 92       	push	r12
     672:	df 92       	push	r13
     674:	ef 92       	push	r14
     676:	ff 92       	push	r15
     678:	cf 93       	push	r28
     67a:	df 93       	push	r29
     67c:	ec 01       	movw	r28, r24
     67e:	20 e0       	ldi	r18, 0x00	; 0
     680:	30 e0       	ldi	r19, 0x00	; 0
     682:	a9 01       	movw	r20, r18
     684:	68 81       	ld	r22, Y
     686:	79 81       	ldd	r23, Y+1	; 0x01
     688:	8a 81       	ldd	r24, Y+2	; 0x02
     68a:	9b 81       	ldd	r25, Y+3	; 0x03
     68c:	a5 d2       	rcall	.+1354   	; 0xbd8 <__gesf2>
     68e:	18 16       	cp	r1, r24
     690:	1c f4       	brge	.+6      	; 0x698 <_Z17ChangeSteppersDirP5Steps+0x28>
     692:	80 e0       	ldi	r24, 0x00	; 0
     694:	d8 df       	rcall	.-80     	; 0x646 <_Z17ChangeStepperXDirb>
     696:	17 c0       	rjmp	.+46     	; 0x6c6 <_Z17ChangeSteppersDirP5Steps+0x56>
     698:	61 e0       	ldi	r22, 0x01	; 1
     69a:	87 e3       	ldi	r24, 0x37	; 55
     69c:	9b d6       	rcall	.+3382   	; 0x13d4 <digitalWrite>
     69e:	c8 80       	ld	r12, Y
     6a0:	d9 80       	ldd	r13, Y+1	; 0x01
     6a2:	ea 80       	ldd	r14, Y+2	; 0x02
     6a4:	fb 80       	ldd	r15, Y+3	; 0x03
     6a6:	20 e0       	ldi	r18, 0x00	; 0
     6a8:	30 e0       	ldi	r19, 0x00	; 0
     6aa:	a9 01       	movw	r20, r18
     6ac:	c7 01       	movw	r24, r14
     6ae:	b6 01       	movw	r22, r12
     6b0:	93 d2       	rcall	.+1318   	; 0xbd8 <__gesf2>
     6b2:	18 16       	cp	r1, r24
     6b4:	24 f0       	brlt	.+8      	; 0x6be <_Z17ChangeSteppersDirP5Steps+0x4e>
     6b6:	f7 fa       	bst	r15, 7
     6b8:	f0 94       	com	r15
     6ba:	f7 f8       	bld	r15, 7
     6bc:	f0 94       	com	r15
     6be:	c8 82       	st	Y, r12
     6c0:	d9 82       	std	Y+1, r13	; 0x01
     6c2:	ea 82       	std	Y+2, r14	; 0x02
     6c4:	fb 82       	std	Y+3, r15	; 0x03
     6c6:	20 e0       	ldi	r18, 0x00	; 0
     6c8:	30 e0       	ldi	r19, 0x00	; 0
     6ca:	a9 01       	movw	r20, r18
     6cc:	6c 81       	ldd	r22, Y+4	; 0x04
     6ce:	7d 81       	ldd	r23, Y+5	; 0x05
     6d0:	8e 81       	ldd	r24, Y+6	; 0x06
     6d2:	9f 81       	ldd	r25, Y+7	; 0x07
     6d4:	81 d2       	rcall	.+1282   	; 0xbd8 <__gesf2>
     6d6:	18 16       	cp	r1, r24
     6d8:	1c f4       	brge	.+6      	; 0x6e0 <_Z17ChangeSteppersDirP5Steps+0x70>
     6da:	80 e0       	ldi	r24, 0x00	; 0
     6dc:	bb df       	rcall	.-138    	; 0x654 <_Z17ChangeStepperYDirb>
     6de:	17 c0       	rjmp	.+46     	; 0x70e <_Z17ChangeSteppersDirP5Steps+0x9e>
     6e0:	61 e0       	ldi	r22, 0x01	; 1
     6e2:	8d e3       	ldi	r24, 0x3D	; 61
     6e4:	77 d6       	rcall	.+3310   	; 0x13d4 <digitalWrite>
     6e6:	cc 80       	ldd	r12, Y+4	; 0x04
     6e8:	dd 80       	ldd	r13, Y+5	; 0x05
     6ea:	ee 80       	ldd	r14, Y+6	; 0x06
     6ec:	ff 80       	ldd	r15, Y+7	; 0x07
     6ee:	20 e0       	ldi	r18, 0x00	; 0
     6f0:	30 e0       	ldi	r19, 0x00	; 0
     6f2:	a9 01       	movw	r20, r18
     6f4:	c7 01       	movw	r24, r14
     6f6:	b6 01       	movw	r22, r12
     6f8:	6f d2       	rcall	.+1246   	; 0xbd8 <__gesf2>
     6fa:	18 16       	cp	r1, r24
     6fc:	24 f0       	brlt	.+8      	; 0x706 <_Z17ChangeSteppersDirP5Steps+0x96>
     6fe:	f7 fa       	bst	r15, 7
     700:	f0 94       	com	r15
     702:	f7 f8       	bld	r15, 7
     704:	f0 94       	com	r15
     706:	cc 82       	std	Y+4, r12	; 0x04
     708:	dd 82       	std	Y+5, r13	; 0x05
     70a:	ee 82       	std	Y+6, r14	; 0x06
     70c:	ff 82       	std	Y+7, r15	; 0x07
     70e:	20 e0       	ldi	r18, 0x00	; 0
     710:	30 e0       	ldi	r19, 0x00	; 0
     712:	a9 01       	movw	r20, r18
     714:	68 85       	ldd	r22, Y+8	; 0x08
     716:	79 85       	ldd	r23, Y+9	; 0x09
     718:	8a 85       	ldd	r24, Y+10	; 0x0a
     71a:	9b 85       	ldd	r25, Y+11	; 0x0b
     71c:	5d d2       	rcall	.+1210   	; 0xbd8 <__gesf2>
     71e:	18 16       	cp	r1, r24
     720:	44 f4       	brge	.+16     	; 0x732 <_Z17ChangeSteppersDirP5Steps+0xc2>
     722:	80 e0       	ldi	r24, 0x00	; 0
     724:	df 91       	pop	r29
     726:	cf 91       	pop	r28
     728:	ff 90       	pop	r15
     72a:	ef 90       	pop	r14
     72c:	df 90       	pop	r13
     72e:	cf 90       	pop	r12
     730:	98 cf       	rjmp	.-208    	; 0x662 <_Z17ChangeStepperZDirb>
     732:	61 e0       	ldi	r22, 0x01	; 1
     734:	80 e3       	ldi	r24, 0x30	; 48
     736:	4e d6       	rcall	.+3228   	; 0x13d4 <digitalWrite>
     738:	c8 84       	ldd	r12, Y+8	; 0x08
     73a:	d9 84       	ldd	r13, Y+9	; 0x09
     73c:	ea 84       	ldd	r14, Y+10	; 0x0a
     73e:	fb 84       	ldd	r15, Y+11	; 0x0b
     740:	20 e0       	ldi	r18, 0x00	; 0
     742:	30 e0       	ldi	r19, 0x00	; 0
     744:	a9 01       	movw	r20, r18
     746:	c7 01       	movw	r24, r14
     748:	b6 01       	movw	r22, r12
     74a:	46 d2       	rcall	.+1164   	; 0xbd8 <__gesf2>
     74c:	18 16       	cp	r1, r24
     74e:	24 f0       	brlt	.+8      	; 0x758 <_Z17ChangeSteppersDirP5Steps+0xe8>
     750:	f7 fa       	bst	r15, 7
     752:	f0 94       	com	r15
     754:	f7 f8       	bld	r15, 7
     756:	f0 94       	com	r15
     758:	c8 86       	std	Y+8, r12	; 0x08
     75a:	d9 86       	std	Y+9, r13	; 0x09
     75c:	ea 86       	std	Y+10, r14	; 0x0a
     75e:	fb 86       	std	Y+11, r15	; 0x0b
     760:	df 91       	pop	r29
     762:	cf 91       	pop	r28
     764:	ff 90       	pop	r15
     766:	ef 90       	pop	r14
     768:	df 90       	pop	r13
     76a:	cf 90       	pop	r12
     76c:	08 95       	ret

0000076e <_Z11MovementXYZP5Steps>:
     76e:	0f 93       	push	r16
     770:	1f 93       	push	r17
     772:	cf 93       	push	r28
     774:	df 93       	push	r29
     776:	00 d0       	rcall	.+0      	; 0x778 <_Z11MovementXYZP5Steps+0xa>
     778:	cd b7       	in	r28, 0x3d	; 61
     77a:	de b7       	in	r29, 0x3e	; 62
     77c:	8c 01       	movw	r16, r24
     77e:	ae 01       	movw	r20, r28
     780:	4f 5f       	subi	r20, 0xFF	; 255
     782:	5f 4f       	sbci	r21, 0xFF	; 255
     784:	be 01       	movw	r22, r28
     786:	6e 5f       	subi	r22, 0xFE	; 254
     788:	7f 4f       	sbci	r23, 0xFF	; 255
     78a:	ce 01       	movw	r24, r28
     78c:	03 96       	adiw	r24, 0x03	; 3
     78e:	34 df       	rcall	.-408    	; 0x5f8 <_Z15ReadLimitSwitchPbS_S_>
     790:	20 e0       	ldi	r18, 0x00	; 0
     792:	30 e0       	ldi	r19, 0x00	; 0
     794:	a9 01       	movw	r20, r18
     796:	f8 01       	movw	r30, r16
     798:	60 81       	ld	r22, Z
     79a:	71 81       	ldd	r23, Z+1	; 0x01
     79c:	82 81       	ldd	r24, Z+2	; 0x02
     79e:	93 81       	ldd	r25, Z+3	; 0x03
     7a0:	1b d2       	rcall	.+1078   	; 0xbd8 <__gesf2>
     7a2:	18 16       	cp	r1, r24
     7a4:	4c f4       	brge	.+18     	; 0x7b8 <_Z11MovementXYZP5Steps+0x4a>
     7a6:	8b 81       	ldd	r24, Y+3	; 0x03
     7a8:	88 23       	and	r24, r24
     7aa:	09 f4       	brne	.+2      	; 0x7ae <_Z11MovementXYZP5Steps+0x40>
     7ac:	81 c0       	rjmp	.+258    	; 0x8b0 <_Z11MovementXYZP5Steps+0x142>
     7ae:	87 e3       	ldi	r24, 0x37	; 55
     7b0:	3f d6       	rcall	.+3198   	; 0x1430 <digitalRead>
     7b2:	89 2b       	or	r24, r25
     7b4:	09 f0       	breq	.+2      	; 0x7b8 <_Z11MovementXYZP5Steps+0x4a>
     7b6:	7c c0       	rjmp	.+248    	; 0x8b0 <_Z11MovementXYZP5Steps+0x142>
     7b8:	20 e0       	ldi	r18, 0x00	; 0
     7ba:	30 e0       	ldi	r19, 0x00	; 0
     7bc:	a9 01       	movw	r20, r18
     7be:	f8 01       	movw	r30, r16
     7c0:	64 81       	ldd	r22, Z+4	; 0x04
     7c2:	75 81       	ldd	r23, Z+5	; 0x05
     7c4:	86 81       	ldd	r24, Z+6	; 0x06
     7c6:	97 81       	ldd	r25, Z+7	; 0x07
     7c8:	07 d2       	rcall	.+1038   	; 0xbd8 <__gesf2>
     7ca:	18 16       	cp	r1, r24
     7cc:	4c f4       	brge	.+18     	; 0x7e0 <_Z11MovementXYZP5Steps+0x72>
     7ce:	8a 81       	ldd	r24, Y+2	; 0x02
     7d0:	88 23       	and	r24, r24
     7d2:	09 f4       	brne	.+2      	; 0x7d6 <_Z11MovementXYZP5Steps+0x68>
     7d4:	71 c0       	rjmp	.+226    	; 0x8b8 <_Z11MovementXYZP5Steps+0x14a>
     7d6:	8d e3       	ldi	r24, 0x3D	; 61
     7d8:	2b d6       	rcall	.+3158   	; 0x1430 <digitalRead>
     7da:	89 2b       	or	r24, r25
     7dc:	09 f0       	breq	.+2      	; 0x7e0 <_Z11MovementXYZP5Steps+0x72>
     7de:	6c c0       	rjmp	.+216    	; 0x8b8 <_Z11MovementXYZP5Steps+0x14a>
     7e0:	20 e0       	ldi	r18, 0x00	; 0
     7e2:	30 e0       	ldi	r19, 0x00	; 0
     7e4:	a9 01       	movw	r20, r18
     7e6:	f8 01       	movw	r30, r16
     7e8:	60 85       	ldd	r22, Z+8	; 0x08
     7ea:	71 85       	ldd	r23, Z+9	; 0x09
     7ec:	82 85       	ldd	r24, Z+10	; 0x0a
     7ee:	93 85       	ldd	r25, Z+11	; 0x0b
     7f0:	f3 d1       	rcall	.+998    	; 0xbd8 <__gesf2>
     7f2:	18 16       	cp	r1, r24
     7f4:	4c f4       	brge	.+18     	; 0x808 <_Z11MovementXYZP5Steps+0x9a>
     7f6:	89 81       	ldd	r24, Y+1	; 0x01
     7f8:	88 23       	and	r24, r24
     7fa:	09 f4       	brne	.+2      	; 0x7fe <_Z11MovementXYZP5Steps+0x90>
     7fc:	61 c0       	rjmp	.+194    	; 0x8c0 <_Z11MovementXYZP5Steps+0x152>
     7fe:	80 e3       	ldi	r24, 0x30	; 48
     800:	17 d6       	rcall	.+3118   	; 0x1430 <digitalRead>
     802:	89 2b       	or	r24, r25
     804:	09 f0       	breq	.+2      	; 0x808 <_Z11MovementXYZP5Steps+0x9a>
     806:	5c c0       	rjmp	.+184    	; 0x8c0 <_Z11MovementXYZP5Steps+0x152>
     808:	f8 01       	movw	r30, r16
     80a:	64 85       	ldd	r22, Z+12	; 0x0c
     80c:	75 85       	ldd	r23, Z+13	; 0x0d
     80e:	86 85       	ldd	r24, Z+14	; 0x0e
     810:	97 85       	ldd	r25, Z+15	; 0x0f
     812:	04 d1       	rcall	.+520    	; 0xa1c <__fixunssfsi>
     814:	cb 01       	movw	r24, r22
     816:	e0 d4       	rcall	.+2496   	; 0x11d8 <delayMicroseconds>
     818:	20 e0       	ldi	r18, 0x00	; 0
     81a:	30 e0       	ldi	r19, 0x00	; 0
     81c:	a9 01       	movw	r20, r18
     81e:	f8 01       	movw	r30, r16
     820:	60 81       	ld	r22, Z
     822:	71 81       	ldd	r23, Z+1	; 0x01
     824:	82 81       	ldd	r24, Z+2	; 0x02
     826:	93 81       	ldd	r25, Z+3	; 0x03
     828:	d7 d1       	rcall	.+942    	; 0xbd8 <__gesf2>
     82a:	18 16       	cp	r1, r24
     82c:	4c f4       	brge	.+18     	; 0x840 <_Z11MovementXYZP5Steps+0xd2>
     82e:	8b 81       	ldd	r24, Y+3	; 0x03
     830:	88 23       	and	r24, r24
     832:	09 f4       	brne	.+2      	; 0x836 <_Z11MovementXYZP5Steps+0xc8>
     834:	49 c0       	rjmp	.+146    	; 0x8c8 <_Z11MovementXYZP5Steps+0x15a>
     836:	87 e3       	ldi	r24, 0x37	; 55
     838:	fb d5       	rcall	.+3062   	; 0x1430 <digitalRead>
     83a:	89 2b       	or	r24, r25
     83c:	09 f0       	breq	.+2      	; 0x840 <_Z11MovementXYZP5Steps+0xd2>
     83e:	44 c0       	rjmp	.+136    	; 0x8c8 <_Z11MovementXYZP5Steps+0x15a>
     840:	20 e0       	ldi	r18, 0x00	; 0
     842:	30 e0       	ldi	r19, 0x00	; 0
     844:	a9 01       	movw	r20, r18
     846:	f8 01       	movw	r30, r16
     848:	64 81       	ldd	r22, Z+4	; 0x04
     84a:	75 81       	ldd	r23, Z+5	; 0x05
     84c:	86 81       	ldd	r24, Z+6	; 0x06
     84e:	97 81       	ldd	r25, Z+7	; 0x07
     850:	c3 d1       	rcall	.+902    	; 0xbd8 <__gesf2>
     852:	18 16       	cp	r1, r24
     854:	4c f4       	brge	.+18     	; 0x868 <_Z11MovementXYZP5Steps+0xfa>
     856:	8a 81       	ldd	r24, Y+2	; 0x02
     858:	88 23       	and	r24, r24
     85a:	09 f4       	brne	.+2      	; 0x85e <_Z11MovementXYZP5Steps+0xf0>
     85c:	48 c0       	rjmp	.+144    	; 0x8ee <_Z11MovementXYZP5Steps+0x180>
     85e:	8d e3       	ldi	r24, 0x3D	; 61
     860:	e7 d5       	rcall	.+3022   	; 0x1430 <digitalRead>
     862:	89 2b       	or	r24, r25
     864:	09 f0       	breq	.+2      	; 0x868 <_Z11MovementXYZP5Steps+0xfa>
     866:	43 c0       	rjmp	.+134    	; 0x8ee <_Z11MovementXYZP5Steps+0x180>
     868:	20 e0       	ldi	r18, 0x00	; 0
     86a:	30 e0       	ldi	r19, 0x00	; 0
     86c:	a9 01       	movw	r20, r18
     86e:	f8 01       	movw	r30, r16
     870:	60 85       	ldd	r22, Z+8	; 0x08
     872:	71 85       	ldd	r23, Z+9	; 0x09
     874:	82 85       	ldd	r24, Z+10	; 0x0a
     876:	93 85       	ldd	r25, Z+11	; 0x0b
     878:	af d1       	rcall	.+862    	; 0xbd8 <__gesf2>
     87a:	18 16       	cp	r1, r24
     87c:	4c f4       	brge	.+18     	; 0x890 <_Z11MovementXYZP5Steps+0x122>
     87e:	89 81       	ldd	r24, Y+1	; 0x01
     880:	88 23       	and	r24, r24
     882:	09 f4       	brne	.+2      	; 0x886 <_Z11MovementXYZP5Steps+0x118>
     884:	47 c0       	rjmp	.+142    	; 0x914 <_Z11MovementXYZP5Steps+0x1a6>
     886:	80 e3       	ldi	r24, 0x30	; 48
     888:	d3 d5       	rcall	.+2982   	; 0x1430 <digitalRead>
     88a:	89 2b       	or	r24, r25
     88c:	09 f0       	breq	.+2      	; 0x890 <_Z11MovementXYZP5Steps+0x122>
     88e:	42 c0       	rjmp	.+132    	; 0x914 <_Z11MovementXYZP5Steps+0x1a6>
     890:	f8 01       	movw	r30, r16
     892:	64 85       	ldd	r22, Z+12	; 0x0c
     894:	75 85       	ldd	r23, Z+13	; 0x0d
     896:	86 85       	ldd	r24, Z+14	; 0x0e
     898:	97 85       	ldd	r25, Z+15	; 0x0f
     89a:	c0 d0       	rcall	.+384    	; 0xa1c <__fixunssfsi>
     89c:	cb 01       	movw	r24, r22
     89e:	9c d4       	rcall	.+2360   	; 0x11d8 <delayMicroseconds>
     8a0:	0f 90       	pop	r0
     8a2:	0f 90       	pop	r0
     8a4:	0f 90       	pop	r0
     8a6:	df 91       	pop	r29
     8a8:	cf 91       	pop	r28
     8aa:	1f 91       	pop	r17
     8ac:	0f 91       	pop	r16
     8ae:	08 95       	ret
     8b0:	60 e0       	ldi	r22, 0x00	; 0
     8b2:	86 e3       	ldi	r24, 0x36	; 54
     8b4:	8f d5       	rcall	.+2846   	; 0x13d4 <digitalWrite>
     8b6:	80 cf       	rjmp	.-256    	; 0x7b8 <_Z11MovementXYZP5Steps+0x4a>
     8b8:	60 e0       	ldi	r22, 0x00	; 0
     8ba:	8c e3       	ldi	r24, 0x3C	; 60
     8bc:	8b d5       	rcall	.+2838   	; 0x13d4 <digitalWrite>
     8be:	90 cf       	rjmp	.-224    	; 0x7e0 <_Z11MovementXYZP5Steps+0x72>
     8c0:	60 e0       	ldi	r22, 0x00	; 0
     8c2:	8e e2       	ldi	r24, 0x2E	; 46
     8c4:	87 d5       	rcall	.+2830   	; 0x13d4 <digitalWrite>
     8c6:	a0 cf       	rjmp	.-192    	; 0x808 <_Z11MovementXYZP5Steps+0x9a>
     8c8:	61 e0       	ldi	r22, 0x01	; 1
     8ca:	86 e3       	ldi	r24, 0x36	; 54
     8cc:	83 d5       	rcall	.+2822   	; 0x13d4 <digitalWrite>
     8ce:	20 e0       	ldi	r18, 0x00	; 0
     8d0:	30 e0       	ldi	r19, 0x00	; 0
     8d2:	40 e8       	ldi	r20, 0x80	; 128
     8d4:	5f e3       	ldi	r21, 0x3F	; 63
     8d6:	f8 01       	movw	r30, r16
     8d8:	60 81       	ld	r22, Z
     8da:	71 81       	ldd	r23, Z+1	; 0x01
     8dc:	82 81       	ldd	r24, Z+2	; 0x02
     8de:	93 81       	ldd	r25, Z+3	; 0x03
     8e0:	2f d0       	rcall	.+94     	; 0x940 <__subsf3>
     8e2:	f8 01       	movw	r30, r16
     8e4:	60 83       	st	Z, r22
     8e6:	71 83       	std	Z+1, r23	; 0x01
     8e8:	82 83       	std	Z+2, r24	; 0x02
     8ea:	93 83       	std	Z+3, r25	; 0x03
     8ec:	a9 cf       	rjmp	.-174    	; 0x840 <_Z11MovementXYZP5Steps+0xd2>
     8ee:	61 e0       	ldi	r22, 0x01	; 1
     8f0:	8c e3       	ldi	r24, 0x3C	; 60
     8f2:	70 d5       	rcall	.+2784   	; 0x13d4 <digitalWrite>
     8f4:	20 e0       	ldi	r18, 0x00	; 0
     8f6:	30 e0       	ldi	r19, 0x00	; 0
     8f8:	40 e8       	ldi	r20, 0x80	; 128
     8fa:	5f e3       	ldi	r21, 0x3F	; 63
     8fc:	f8 01       	movw	r30, r16
     8fe:	64 81       	ldd	r22, Z+4	; 0x04
     900:	75 81       	ldd	r23, Z+5	; 0x05
     902:	86 81       	ldd	r24, Z+6	; 0x06
     904:	97 81       	ldd	r25, Z+7	; 0x07
     906:	1c d0       	rcall	.+56     	; 0x940 <__subsf3>
     908:	f8 01       	movw	r30, r16
     90a:	64 83       	std	Z+4, r22	; 0x04
     90c:	75 83       	std	Z+5, r23	; 0x05
     90e:	86 83       	std	Z+6, r24	; 0x06
     910:	97 83       	std	Z+7, r25	; 0x07
     912:	aa cf       	rjmp	.-172    	; 0x868 <_Z11MovementXYZP5Steps+0xfa>
     914:	61 e0       	ldi	r22, 0x01	; 1
     916:	8e e2       	ldi	r24, 0x2E	; 46
     918:	5d d5       	rcall	.+2746   	; 0x13d4 <digitalWrite>
     91a:	20 e0       	ldi	r18, 0x00	; 0
     91c:	30 e0       	ldi	r19, 0x00	; 0
     91e:	40 e8       	ldi	r20, 0x80	; 128
     920:	5f e3       	ldi	r21, 0x3F	; 63
     922:	f8 01       	movw	r30, r16
     924:	60 85       	ldd	r22, Z+8	; 0x08
     926:	71 85       	ldd	r23, Z+9	; 0x09
     928:	82 85       	ldd	r24, Z+10	; 0x0a
     92a:	93 85       	ldd	r25, Z+11	; 0x0b
     92c:	09 d0       	rcall	.+18     	; 0x940 <__subsf3>
     92e:	f8 01       	movw	r30, r16
     930:	60 87       	std	Z+8, r22	; 0x08
     932:	71 87       	std	Z+9, r23	; 0x09
     934:	82 87       	std	Z+10, r24	; 0x0a
     936:	93 87       	std	Z+11, r25	; 0x0b
     938:	ab cf       	rjmp	.-170    	; 0x890 <_Z11MovementXYZP5Steps+0x122>

0000093a <_Z8SetSpeedi>:
     93a:	80 e0       	ldi	r24, 0x00	; 0
     93c:	90 e0       	ldi	r25, 0x00	; 0
     93e:	08 95       	ret

00000940 <__subsf3>:
     940:	50 58       	subi	r21, 0x80	; 128

00000942 <__addsf3>:
     942:	bb 27       	eor	r27, r27
     944:	aa 27       	eor	r26, r26
     946:	0e d0       	rcall	.+28     	; 0x964 <__addsf3x>
     948:	0d c1       	rjmp	.+538    	; 0xb64 <__fp_round>
     94a:	fe d0       	rcall	.+508    	; 0xb48 <__fp_pscA>
     94c:	30 f0       	brcs	.+12     	; 0x95a <__addsf3+0x18>
     94e:	03 d1       	rcall	.+518    	; 0xb56 <__fp_pscB>
     950:	20 f0       	brcs	.+8      	; 0x95a <__addsf3+0x18>
     952:	31 f4       	brne	.+12     	; 0x960 <__addsf3+0x1e>
     954:	9f 3f       	cpi	r25, 0xFF	; 255
     956:	11 f4       	brne	.+4      	; 0x95c <__addsf3+0x1a>
     958:	1e f4       	brtc	.+6      	; 0x960 <__addsf3+0x1e>
     95a:	f3 c0       	rjmp	.+486    	; 0xb42 <__fp_nan>
     95c:	0e f4       	brtc	.+2      	; 0x960 <__addsf3+0x1e>
     95e:	e0 95       	com	r30
     960:	e7 fb       	bst	r30, 7
     962:	e9 c0       	rjmp	.+466    	; 0xb36 <__fp_inf>

00000964 <__addsf3x>:
     964:	e9 2f       	mov	r30, r25
     966:	0f d1       	rcall	.+542    	; 0xb86 <__fp_split3>
     968:	80 f3       	brcs	.-32     	; 0x94a <__addsf3+0x8>
     96a:	ba 17       	cp	r27, r26
     96c:	62 07       	cpc	r22, r18
     96e:	73 07       	cpc	r23, r19
     970:	84 07       	cpc	r24, r20
     972:	95 07       	cpc	r25, r21
     974:	18 f0       	brcs	.+6      	; 0x97c <__addsf3x+0x18>
     976:	71 f4       	brne	.+28     	; 0x994 <__addsf3x+0x30>
     978:	9e f5       	brtc	.+102    	; 0x9e0 <__addsf3x+0x7c>
     97a:	27 c1       	rjmp	.+590    	; 0xbca <__fp_zero>
     97c:	0e f4       	brtc	.+2      	; 0x980 <__addsf3x+0x1c>
     97e:	e0 95       	com	r30
     980:	0b 2e       	mov	r0, r27
     982:	ba 2f       	mov	r27, r26
     984:	a0 2d       	mov	r26, r0
     986:	0b 01       	movw	r0, r22
     988:	b9 01       	movw	r22, r18
     98a:	90 01       	movw	r18, r0
     98c:	0c 01       	movw	r0, r24
     98e:	ca 01       	movw	r24, r20
     990:	a0 01       	movw	r20, r0
     992:	11 24       	eor	r1, r1
     994:	ff 27       	eor	r31, r31
     996:	59 1b       	sub	r21, r25
     998:	99 f0       	breq	.+38     	; 0x9c0 <__addsf3x+0x5c>
     99a:	59 3f       	cpi	r21, 0xF9	; 249
     99c:	50 f4       	brcc	.+20     	; 0x9b2 <__addsf3x+0x4e>
     99e:	50 3e       	cpi	r21, 0xE0	; 224
     9a0:	68 f1       	brcs	.+90     	; 0x9fc <__addsf3x+0x98>
     9a2:	1a 16       	cp	r1, r26
     9a4:	f0 40       	sbci	r31, 0x00	; 0
     9a6:	a2 2f       	mov	r26, r18
     9a8:	23 2f       	mov	r18, r19
     9aa:	34 2f       	mov	r19, r20
     9ac:	44 27       	eor	r20, r20
     9ae:	58 5f       	subi	r21, 0xF8	; 248
     9b0:	f3 cf       	rjmp	.-26     	; 0x998 <__addsf3x+0x34>
     9b2:	46 95       	lsr	r20
     9b4:	37 95       	ror	r19
     9b6:	27 95       	ror	r18
     9b8:	a7 95       	ror	r26
     9ba:	f0 40       	sbci	r31, 0x00	; 0
     9bc:	53 95       	inc	r21
     9be:	c9 f7       	brne	.-14     	; 0x9b2 <__addsf3x+0x4e>
     9c0:	7e f4       	brtc	.+30     	; 0x9e0 <__addsf3x+0x7c>
     9c2:	1f 16       	cp	r1, r31
     9c4:	ba 0b       	sbc	r27, r26
     9c6:	62 0b       	sbc	r22, r18
     9c8:	73 0b       	sbc	r23, r19
     9ca:	84 0b       	sbc	r24, r20
     9cc:	ba f0       	brmi	.+46     	; 0x9fc <__addsf3x+0x98>
     9ce:	91 50       	subi	r25, 0x01	; 1
     9d0:	a1 f0       	breq	.+40     	; 0x9fa <__addsf3x+0x96>
     9d2:	ff 0f       	add	r31, r31
     9d4:	bb 1f       	adc	r27, r27
     9d6:	66 1f       	adc	r22, r22
     9d8:	77 1f       	adc	r23, r23
     9da:	88 1f       	adc	r24, r24
     9dc:	c2 f7       	brpl	.-16     	; 0x9ce <__addsf3x+0x6a>
     9de:	0e c0       	rjmp	.+28     	; 0x9fc <__addsf3x+0x98>
     9e0:	ba 0f       	add	r27, r26
     9e2:	62 1f       	adc	r22, r18
     9e4:	73 1f       	adc	r23, r19
     9e6:	84 1f       	adc	r24, r20
     9e8:	48 f4       	brcc	.+18     	; 0x9fc <__addsf3x+0x98>
     9ea:	87 95       	ror	r24
     9ec:	77 95       	ror	r23
     9ee:	67 95       	ror	r22
     9f0:	b7 95       	ror	r27
     9f2:	f7 95       	ror	r31
     9f4:	9e 3f       	cpi	r25, 0xFE	; 254
     9f6:	08 f0       	brcs	.+2      	; 0x9fa <__addsf3x+0x96>
     9f8:	b3 cf       	rjmp	.-154    	; 0x960 <__addsf3+0x1e>
     9fa:	93 95       	inc	r25
     9fc:	88 0f       	add	r24, r24
     9fe:	08 f0       	brcs	.+2      	; 0xa02 <__addsf3x+0x9e>
     a00:	99 27       	eor	r25, r25
     a02:	ee 0f       	add	r30, r30
     a04:	97 95       	ror	r25
     a06:	87 95       	ror	r24
     a08:	08 95       	ret

00000a0a <__cmpsf2>:
     a0a:	71 d0       	rcall	.+226    	; 0xaee <__fp_cmp>
     a0c:	08 f4       	brcc	.+2      	; 0xa10 <__cmpsf2+0x6>
     a0e:	81 e0       	ldi	r24, 0x01	; 1
     a10:	08 95       	ret

00000a12 <__fixsfsi>:
     a12:	04 d0       	rcall	.+8      	; 0xa1c <__fixunssfsi>
     a14:	68 94       	set
     a16:	b1 11       	cpse	r27, r1
     a18:	d9 c0       	rjmp	.+434    	; 0xbcc <__fp_szero>
     a1a:	08 95       	ret

00000a1c <__fixunssfsi>:
     a1c:	bc d0       	rcall	.+376    	; 0xb96 <__fp_splitA>
     a1e:	88 f0       	brcs	.+34     	; 0xa42 <__fixunssfsi+0x26>
     a20:	9f 57       	subi	r25, 0x7F	; 127
     a22:	90 f0       	brcs	.+36     	; 0xa48 <__fixunssfsi+0x2c>
     a24:	b9 2f       	mov	r27, r25
     a26:	99 27       	eor	r25, r25
     a28:	b7 51       	subi	r27, 0x17	; 23
     a2a:	a0 f0       	brcs	.+40     	; 0xa54 <__fixunssfsi+0x38>
     a2c:	d1 f0       	breq	.+52     	; 0xa62 <__fixunssfsi+0x46>
     a2e:	66 0f       	add	r22, r22
     a30:	77 1f       	adc	r23, r23
     a32:	88 1f       	adc	r24, r24
     a34:	99 1f       	adc	r25, r25
     a36:	1a f0       	brmi	.+6      	; 0xa3e <__fixunssfsi+0x22>
     a38:	ba 95       	dec	r27
     a3a:	c9 f7       	brne	.-14     	; 0xa2e <__fixunssfsi+0x12>
     a3c:	12 c0       	rjmp	.+36     	; 0xa62 <__fixunssfsi+0x46>
     a3e:	b1 30       	cpi	r27, 0x01	; 1
     a40:	81 f0       	breq	.+32     	; 0xa62 <__fixunssfsi+0x46>
     a42:	c3 d0       	rcall	.+390    	; 0xbca <__fp_zero>
     a44:	b1 e0       	ldi	r27, 0x01	; 1
     a46:	08 95       	ret
     a48:	c0 c0       	rjmp	.+384    	; 0xbca <__fp_zero>
     a4a:	67 2f       	mov	r22, r23
     a4c:	78 2f       	mov	r23, r24
     a4e:	88 27       	eor	r24, r24
     a50:	b8 5f       	subi	r27, 0xF8	; 248
     a52:	39 f0       	breq	.+14     	; 0xa62 <__fixunssfsi+0x46>
     a54:	b9 3f       	cpi	r27, 0xF9	; 249
     a56:	cc f3       	brlt	.-14     	; 0xa4a <__fixunssfsi+0x2e>
     a58:	86 95       	lsr	r24
     a5a:	77 95       	ror	r23
     a5c:	67 95       	ror	r22
     a5e:	b3 95       	inc	r27
     a60:	d9 f7       	brne	.-10     	; 0xa58 <__fixunssfsi+0x3c>
     a62:	3e f4       	brtc	.+14     	; 0xa72 <__fixunssfsi+0x56>
     a64:	90 95       	com	r25
     a66:	80 95       	com	r24
     a68:	70 95       	com	r23
     a6a:	61 95       	neg	r22
     a6c:	7f 4f       	sbci	r23, 0xFF	; 255
     a6e:	8f 4f       	sbci	r24, 0xFF	; 255
     a70:	9f 4f       	sbci	r25, 0xFF	; 255
     a72:	08 95       	ret

00000a74 <__floatunsisf>:
     a74:	e8 94       	clt
     a76:	09 c0       	rjmp	.+18     	; 0xa8a <__floatsisf+0x12>

00000a78 <__floatsisf>:
     a78:	97 fb       	bst	r25, 7
     a7a:	3e f4       	brtc	.+14     	; 0xa8a <__floatsisf+0x12>
     a7c:	90 95       	com	r25
     a7e:	80 95       	com	r24
     a80:	70 95       	com	r23
     a82:	61 95       	neg	r22
     a84:	7f 4f       	sbci	r23, 0xFF	; 255
     a86:	8f 4f       	sbci	r24, 0xFF	; 255
     a88:	9f 4f       	sbci	r25, 0xFF	; 255
     a8a:	99 23       	and	r25, r25
     a8c:	a9 f0       	breq	.+42     	; 0xab8 <__floatsisf+0x40>
     a8e:	f9 2f       	mov	r31, r25
     a90:	96 e9       	ldi	r25, 0x96	; 150
     a92:	bb 27       	eor	r27, r27
     a94:	93 95       	inc	r25
     a96:	f6 95       	lsr	r31
     a98:	87 95       	ror	r24
     a9a:	77 95       	ror	r23
     a9c:	67 95       	ror	r22
     a9e:	b7 95       	ror	r27
     aa0:	f1 11       	cpse	r31, r1
     aa2:	f8 cf       	rjmp	.-16     	; 0xa94 <__floatsisf+0x1c>
     aa4:	fa f4       	brpl	.+62     	; 0xae4 <__floatsisf+0x6c>
     aa6:	bb 0f       	add	r27, r27
     aa8:	11 f4       	brne	.+4      	; 0xaae <__floatsisf+0x36>
     aaa:	60 ff       	sbrs	r22, 0
     aac:	1b c0       	rjmp	.+54     	; 0xae4 <__floatsisf+0x6c>
     aae:	6f 5f       	subi	r22, 0xFF	; 255
     ab0:	7f 4f       	sbci	r23, 0xFF	; 255
     ab2:	8f 4f       	sbci	r24, 0xFF	; 255
     ab4:	9f 4f       	sbci	r25, 0xFF	; 255
     ab6:	16 c0       	rjmp	.+44     	; 0xae4 <__floatsisf+0x6c>
     ab8:	88 23       	and	r24, r24
     aba:	11 f0       	breq	.+4      	; 0xac0 <__floatsisf+0x48>
     abc:	96 e9       	ldi	r25, 0x96	; 150
     abe:	11 c0       	rjmp	.+34     	; 0xae2 <__floatsisf+0x6a>
     ac0:	77 23       	and	r23, r23
     ac2:	21 f0       	breq	.+8      	; 0xacc <__floatsisf+0x54>
     ac4:	9e e8       	ldi	r25, 0x8E	; 142
     ac6:	87 2f       	mov	r24, r23
     ac8:	76 2f       	mov	r23, r22
     aca:	05 c0       	rjmp	.+10     	; 0xad6 <__floatsisf+0x5e>
     acc:	66 23       	and	r22, r22
     ace:	71 f0       	breq	.+28     	; 0xaec <__floatsisf+0x74>
     ad0:	96 e8       	ldi	r25, 0x86	; 134
     ad2:	86 2f       	mov	r24, r22
     ad4:	70 e0       	ldi	r23, 0x00	; 0
     ad6:	60 e0       	ldi	r22, 0x00	; 0
     ad8:	2a f0       	brmi	.+10     	; 0xae4 <__floatsisf+0x6c>
     ada:	9a 95       	dec	r25
     adc:	66 0f       	add	r22, r22
     ade:	77 1f       	adc	r23, r23
     ae0:	88 1f       	adc	r24, r24
     ae2:	da f7       	brpl	.-10     	; 0xada <__floatsisf+0x62>
     ae4:	88 0f       	add	r24, r24
     ae6:	96 95       	lsr	r25
     ae8:	87 95       	ror	r24
     aea:	97 f9       	bld	r25, 7
     aec:	08 95       	ret

00000aee <__fp_cmp>:
     aee:	99 0f       	add	r25, r25
     af0:	00 08       	sbc	r0, r0
     af2:	55 0f       	add	r21, r21
     af4:	aa 0b       	sbc	r26, r26
     af6:	e0 e8       	ldi	r30, 0x80	; 128
     af8:	fe ef       	ldi	r31, 0xFE	; 254
     afa:	16 16       	cp	r1, r22
     afc:	17 06       	cpc	r1, r23
     afe:	e8 07       	cpc	r30, r24
     b00:	f9 07       	cpc	r31, r25
     b02:	c0 f0       	brcs	.+48     	; 0xb34 <__fp_cmp+0x46>
     b04:	12 16       	cp	r1, r18
     b06:	13 06       	cpc	r1, r19
     b08:	e4 07       	cpc	r30, r20
     b0a:	f5 07       	cpc	r31, r21
     b0c:	98 f0       	brcs	.+38     	; 0xb34 <__fp_cmp+0x46>
     b0e:	62 1b       	sub	r22, r18
     b10:	73 0b       	sbc	r23, r19
     b12:	84 0b       	sbc	r24, r20
     b14:	95 0b       	sbc	r25, r21
     b16:	39 f4       	brne	.+14     	; 0xb26 <__fp_cmp+0x38>
     b18:	0a 26       	eor	r0, r26
     b1a:	61 f0       	breq	.+24     	; 0xb34 <__fp_cmp+0x46>
     b1c:	23 2b       	or	r18, r19
     b1e:	24 2b       	or	r18, r20
     b20:	25 2b       	or	r18, r21
     b22:	21 f4       	brne	.+8      	; 0xb2c <__fp_cmp+0x3e>
     b24:	08 95       	ret
     b26:	0a 26       	eor	r0, r26
     b28:	09 f4       	brne	.+2      	; 0xb2c <__fp_cmp+0x3e>
     b2a:	a1 40       	sbci	r26, 0x01	; 1
     b2c:	a6 95       	lsr	r26
     b2e:	8f ef       	ldi	r24, 0xFF	; 255
     b30:	81 1d       	adc	r24, r1
     b32:	81 1d       	adc	r24, r1
     b34:	08 95       	ret

00000b36 <__fp_inf>:
     b36:	97 f9       	bld	r25, 7
     b38:	9f 67       	ori	r25, 0x7F	; 127
     b3a:	80 e8       	ldi	r24, 0x80	; 128
     b3c:	70 e0       	ldi	r23, 0x00	; 0
     b3e:	60 e0       	ldi	r22, 0x00	; 0
     b40:	08 95       	ret

00000b42 <__fp_nan>:
     b42:	9f ef       	ldi	r25, 0xFF	; 255
     b44:	80 ec       	ldi	r24, 0xC0	; 192
     b46:	08 95       	ret

00000b48 <__fp_pscA>:
     b48:	00 24       	eor	r0, r0
     b4a:	0a 94       	dec	r0
     b4c:	16 16       	cp	r1, r22
     b4e:	17 06       	cpc	r1, r23
     b50:	18 06       	cpc	r1, r24
     b52:	09 06       	cpc	r0, r25
     b54:	08 95       	ret

00000b56 <__fp_pscB>:
     b56:	00 24       	eor	r0, r0
     b58:	0a 94       	dec	r0
     b5a:	12 16       	cp	r1, r18
     b5c:	13 06       	cpc	r1, r19
     b5e:	14 06       	cpc	r1, r20
     b60:	05 06       	cpc	r0, r21
     b62:	08 95       	ret

00000b64 <__fp_round>:
     b64:	09 2e       	mov	r0, r25
     b66:	03 94       	inc	r0
     b68:	00 0c       	add	r0, r0
     b6a:	11 f4       	brne	.+4      	; 0xb70 <__fp_round+0xc>
     b6c:	88 23       	and	r24, r24
     b6e:	52 f0       	brmi	.+20     	; 0xb84 <__fp_round+0x20>
     b70:	bb 0f       	add	r27, r27
     b72:	40 f4       	brcc	.+16     	; 0xb84 <__fp_round+0x20>
     b74:	bf 2b       	or	r27, r31
     b76:	11 f4       	brne	.+4      	; 0xb7c <__fp_round+0x18>
     b78:	60 ff       	sbrs	r22, 0
     b7a:	04 c0       	rjmp	.+8      	; 0xb84 <__fp_round+0x20>
     b7c:	6f 5f       	subi	r22, 0xFF	; 255
     b7e:	7f 4f       	sbci	r23, 0xFF	; 255
     b80:	8f 4f       	sbci	r24, 0xFF	; 255
     b82:	9f 4f       	sbci	r25, 0xFF	; 255
     b84:	08 95       	ret

00000b86 <__fp_split3>:
     b86:	57 fd       	sbrc	r21, 7
     b88:	90 58       	subi	r25, 0x80	; 128
     b8a:	44 0f       	add	r20, r20
     b8c:	55 1f       	adc	r21, r21
     b8e:	59 f0       	breq	.+22     	; 0xba6 <__fp_splitA+0x10>
     b90:	5f 3f       	cpi	r21, 0xFF	; 255
     b92:	71 f0       	breq	.+28     	; 0xbb0 <__fp_splitA+0x1a>
     b94:	47 95       	ror	r20

00000b96 <__fp_splitA>:
     b96:	88 0f       	add	r24, r24
     b98:	97 fb       	bst	r25, 7
     b9a:	99 1f       	adc	r25, r25
     b9c:	61 f0       	breq	.+24     	; 0xbb6 <__fp_splitA+0x20>
     b9e:	9f 3f       	cpi	r25, 0xFF	; 255
     ba0:	79 f0       	breq	.+30     	; 0xbc0 <__fp_splitA+0x2a>
     ba2:	87 95       	ror	r24
     ba4:	08 95       	ret
     ba6:	12 16       	cp	r1, r18
     ba8:	13 06       	cpc	r1, r19
     baa:	14 06       	cpc	r1, r20
     bac:	55 1f       	adc	r21, r21
     bae:	f2 cf       	rjmp	.-28     	; 0xb94 <__fp_split3+0xe>
     bb0:	46 95       	lsr	r20
     bb2:	f1 df       	rcall	.-30     	; 0xb96 <__fp_splitA>
     bb4:	08 c0       	rjmp	.+16     	; 0xbc6 <__fp_splitA+0x30>
     bb6:	16 16       	cp	r1, r22
     bb8:	17 06       	cpc	r1, r23
     bba:	18 06       	cpc	r1, r24
     bbc:	99 1f       	adc	r25, r25
     bbe:	f1 cf       	rjmp	.-30     	; 0xba2 <__fp_splitA+0xc>
     bc0:	86 95       	lsr	r24
     bc2:	71 05       	cpc	r23, r1
     bc4:	61 05       	cpc	r22, r1
     bc6:	08 94       	sec
     bc8:	08 95       	ret

00000bca <__fp_zero>:
     bca:	e8 94       	clt

00000bcc <__fp_szero>:
     bcc:	bb 27       	eor	r27, r27
     bce:	66 27       	eor	r22, r22
     bd0:	77 27       	eor	r23, r23
     bd2:	cb 01       	movw	r24, r22
     bd4:	97 f9       	bld	r25, 7
     bd6:	08 95       	ret

00000bd8 <__gesf2>:
     bd8:	8a df       	rcall	.-236    	; 0xaee <__fp_cmp>
     bda:	08 f4       	brcc	.+2      	; 0xbde <__gesf2+0x6>
     bdc:	8f ef       	ldi	r24, 0xFF	; 255
     bde:	08 95       	ret

00000be0 <_ZN14HardwareSerial9availableEv>:
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
     be0:	fc 01       	movw	r30, r24
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
     be2:	91 8d       	ldd	r25, Z+25	; 0x19
     be4:	22 8d       	ldd	r18, Z+26	; 0x1a
     be6:	89 2f       	mov	r24, r25
     be8:	90 e0       	ldi	r25, 0x00	; 0
     bea:	80 5c       	subi	r24, 0xC0	; 192
     bec:	9f 4f       	sbci	r25, 0xFF	; 255
     bee:	82 1b       	sub	r24, r18
     bf0:	91 09       	sbc	r25, r1
}
     bf2:	8f 73       	andi	r24, 0x3F	; 63
     bf4:	99 27       	eor	r25, r25
     bf6:	08 95       	ret

00000bf8 <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
     bf8:	fc 01       	movw	r30, r24
  if (_rx_buffer_head == _rx_buffer_tail) {
     bfa:	91 8d       	ldd	r25, Z+25	; 0x19
     bfc:	82 8d       	ldd	r24, Z+26	; 0x1a
     bfe:	98 17       	cp	r25, r24
     c00:	31 f0       	breq	.+12     	; 0xc0e <_ZN14HardwareSerial4peekEv+0x16>
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
     c02:	82 8d       	ldd	r24, Z+26	; 0x1a
     c04:	e8 0f       	add	r30, r24
     c06:	f1 1d       	adc	r31, r1
     c08:	85 8d       	ldd	r24, Z+29	; 0x1d
     c0a:	90 e0       	ldi	r25, 0x00	; 0
     c0c:	08 95       	ret
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
     c0e:	8f ef       	ldi	r24, 0xFF	; 255
     c10:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
     c12:	08 95       	ret

00000c14 <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
     c14:	fc 01       	movw	r30, r24
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
     c16:	91 8d       	ldd	r25, Z+25	; 0x19
     c18:	82 8d       	ldd	r24, Z+26	; 0x1a
     c1a:	98 17       	cp	r25, r24
     c1c:	61 f0       	breq	.+24     	; 0xc36 <_ZN14HardwareSerial4readEv+0x22>
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
     c1e:	82 8d       	ldd	r24, Z+26	; 0x1a
     c20:	df 01       	movw	r26, r30
     c22:	a8 0f       	add	r26, r24
     c24:	b1 1d       	adc	r27, r1
     c26:	5d 96       	adiw	r26, 0x1d	; 29
     c28:	8c 91       	ld	r24, X
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
     c2a:	92 8d       	ldd	r25, Z+26	; 0x1a
     c2c:	9f 5f       	subi	r25, 0xFF	; 255
     c2e:	9f 73       	andi	r25, 0x3F	; 63
     c30:	92 8f       	std	Z+26, r25	; 0x1a
    return c;
     c32:	90 e0       	ldi	r25, 0x00	; 0
     c34:	08 95       	ret

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
     c36:	8f ef       	ldi	r24, 0xFF	; 255
     c38:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
     c3a:	08 95       	ret

00000c3c <_ZN14HardwareSerial17availableForWriteEv>:
{
#if (SERIAL_TX_BUFFER_SIZE>256)
  uint8_t oldSREG = SREG;
  cli();
#endif
  tx_buffer_index_t head = _tx_buffer_head;
     c3c:	fc 01       	movw	r30, r24
     c3e:	53 8d       	ldd	r21, Z+27	; 0x1b
  tx_buffer_index_t tail = _tx_buffer_tail;
     c40:	44 8d       	ldd	r20, Z+28	; 0x1c
     c42:	25 2f       	mov	r18, r21
     c44:	30 e0       	ldi	r19, 0x00	; 0
     c46:	84 2f       	mov	r24, r20
     c48:	90 e0       	ldi	r25, 0x00	; 0
#if (SERIAL_TX_BUFFER_SIZE>256)
  SREG = oldSREG;
#endif
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
     c4a:	82 1b       	sub	r24, r18
     c4c:	93 0b       	sbc	r25, r19
     c4e:	54 17       	cp	r21, r20
     c50:	10 f0       	brcs	.+4      	; 0xc56 <_ZN14HardwareSerial17availableForWriteEv+0x1a>
     c52:	cf 96       	adiw	r24, 0x3f	; 63
     c54:	08 95       	ret
  return tail - head - 1;
     c56:	01 97       	sbiw	r24, 0x01	; 1
}
     c58:	08 95       	ret

00000c5a <_Z14serialEventRunv>:
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
     c5a:	83 eb       	ldi	r24, 0xB3	; 179
     c5c:	97 e0       	ldi	r25, 0x07	; 7
     c5e:	89 2b       	or	r24, r25
     c60:	39 f0       	breq	.+14     	; 0xc70 <_Z14serialEventRunv+0x16>
     c62:	80 e0       	ldi	r24, 0x00	; 0
     c64:	90 e0       	ldi	r25, 0x00	; 0
     c66:	89 2b       	or	r24, r25
     c68:	19 f0       	breq	.+6      	; 0xc70 <_Z14serialEventRunv+0x16>
     c6a:	7d d1       	rcall	.+762    	; 0xf66 <_Z17Serial0_availablev>
     c6c:	81 11       	cpse	r24, r1
#endif
#if defined(HAVE_HWSERIAL1)
  if (Serial1_available && serialEvent1 && Serial1_available()) serialEvent1();
     c6e:	25 c0       	rjmp	.+74     	; 0xcba <_Z14serialEventRunv+0x60>
     c70:	80 e0       	ldi	r24, 0x00	; 0
     c72:	90 e0       	ldi	r25, 0x00	; 0
     c74:	89 2b       	or	r24, r25
     c76:	41 f0       	breq	.+16     	; 0xc88 <_Z14serialEventRunv+0x2e>
     c78:	80 e0       	ldi	r24, 0x00	; 0
     c7a:	90 e0       	ldi	r25, 0x00	; 0
     c7c:	89 2b       	or	r24, r25
     c7e:	21 f0       	breq	.+8      	; 0xc88 <_Z14serialEventRunv+0x2e>
     c80:	0e 94 00 00 	call	0	; 0x0 <__vectors>
     c84:	81 11       	cpse	r24, r1
#endif
#if defined(HAVE_HWSERIAL2)
  if (Serial2_available && serialEvent2 && Serial2_available()) serialEvent2();
     c86:	1c c0       	rjmp	.+56     	; 0xcc0 <_Z14serialEventRunv+0x66>
     c88:	80 e0       	ldi	r24, 0x00	; 0
     c8a:	90 e0       	ldi	r25, 0x00	; 0
     c8c:	89 2b       	or	r24, r25
     c8e:	41 f0       	breq	.+16     	; 0xca0 <_Z14serialEventRunv+0x46>
     c90:	80 e0       	ldi	r24, 0x00	; 0
     c92:	90 e0       	ldi	r25, 0x00	; 0
     c94:	89 2b       	or	r24, r25
     c96:	21 f0       	breq	.+8      	; 0xca0 <_Z14serialEventRunv+0x46>
     c98:	0e 94 00 00 	call	0	; 0x0 <__vectors>
     c9c:	81 11       	cpse	r24, r1
#endif
#if defined(HAVE_HWSERIAL3)
  if (Serial3_available && serialEvent3 && Serial3_available()) serialEvent3();
     c9e:	13 c0       	rjmp	.+38     	; 0xcc6 <_Z14serialEventRunv+0x6c>
     ca0:	80 e0       	ldi	r24, 0x00	; 0
     ca2:	90 e0       	ldi	r25, 0x00	; 0
     ca4:	89 2b       	or	r24, r25
     ca6:	a1 f0       	breq	.+40     	; 0xcd0 <_Z14serialEventRunv+0x76>
     ca8:	80 e0       	ldi	r24, 0x00	; 0
     caa:	90 e0       	ldi	r25, 0x00	; 0
     cac:	89 2b       	or	r24, r25
     cae:	81 f0       	breq	.+32     	; 0xcd0 <_Z14serialEventRunv+0x76>
     cb0:	0e 94 00 00 	call	0	; 0x0 <__vectors>
     cb4:	81 11       	cpse	r24, r1
     cb6:	0a c0       	rjmp	.+20     	; 0xccc <_Z14serialEventRunv+0x72>
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
     cb8:	08 95       	ret
     cba:	0e 94 00 00 	call	0	; 0x0 <__vectors>
#endif
#if defined(HAVE_HWSERIAL1)
  if (Serial1_available && serialEvent1 && Serial1_available()) serialEvent1();
     cbe:	d8 cf       	rjmp	.-80     	; 0xc70 <_Z14serialEventRunv+0x16>
     cc0:	0e 94 00 00 	call	0	; 0x0 <__vectors>
#endif
#if defined(HAVE_HWSERIAL2)
  if (Serial2_available && serialEvent2 && Serial2_available()) serialEvent2();
     cc4:	e1 cf       	rjmp	.-62     	; 0xc88 <_Z14serialEventRunv+0x2e>
     cc6:	0e 94 00 00 	call	0	; 0x0 <__vectors>
#endif
#if defined(HAVE_HWSERIAL3)
  if (Serial3_available && serialEvent3 && Serial3_available()) serialEvent3();
     cca:	ea cf       	rjmp	.-44     	; 0xca0 <_Z14serialEventRunv+0x46>
     ccc:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
     cd0:	08 95       	ret

00000cd2 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
}

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
     cd2:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
     cd4:	84 8d       	ldd	r24, Z+28	; 0x1c
     cd6:	df 01       	movw	r26, r30
     cd8:	a8 0f       	add	r26, r24
     cda:	b1 1d       	adc	r27, r1
     cdc:	a3 5a       	subi	r26, 0xA3	; 163
     cde:	bf 4f       	sbci	r27, 0xFF	; 255
     ce0:	2c 91       	ld	r18, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
     ce2:	84 8d       	ldd	r24, Z+28	; 0x1c
     ce4:	90 e0       	ldi	r25, 0x00	; 0
     ce6:	01 96       	adiw	r24, 0x01	; 1
     ce8:	8f 73       	andi	r24, 0x3F	; 63
     cea:	99 27       	eor	r25, r25
     cec:	84 8f       	std	Z+28, r24	; 0x1c

  *_udr = c;
     cee:	a6 89       	ldd	r26, Z+22	; 0x16
     cf0:	b7 89       	ldd	r27, Z+23	; 0x17
     cf2:	2c 93       	st	X, r18

  // clear the TXC bit -- "can be cleared by writing a one to its bit
  // location". This makes sure flush() won't return until the bytes
  // actually got written
  sbi(*_ucsra, TXC0);
     cf4:	a0 89       	ldd	r26, Z+16	; 0x10
     cf6:	b1 89       	ldd	r27, Z+17	; 0x11
     cf8:	8c 91       	ld	r24, X
     cfa:	80 64       	ori	r24, 0x40	; 64
     cfc:	8c 93       	st	X, r24

  if (_tx_buffer_head == _tx_buffer_tail) {
     cfe:	93 8d       	ldd	r25, Z+27	; 0x1b
     d00:	84 8d       	ldd	r24, Z+28	; 0x1c
     d02:	98 13       	cpse	r25, r24
     d04:	06 c0       	rjmp	.+12     	; 0xd12 <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x40>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
     d06:	02 88       	ldd	r0, Z+18	; 0x12
     d08:	f3 89       	ldd	r31, Z+19	; 0x13
     d0a:	e0 2d       	mov	r30, r0
     d0c:	80 81       	ld	r24, Z
     d0e:	8f 7d       	andi	r24, 0xDF	; 223
     d10:	80 83       	st	Z, r24
     d12:	08 95       	ret

00000d14 <_ZN14HardwareSerial5writeEh>:
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}

size_t HardwareSerial::write(uint8_t c)
{
     d14:	ef 92       	push	r14
     d16:	ff 92       	push	r15
     d18:	0f 93       	push	r16
     d1a:	1f 93       	push	r17
     d1c:	cf 93       	push	r28
     d1e:	df 93       	push	r29
     d20:	ec 01       	movw	r28, r24
  _written = true;
     d22:	81 e0       	ldi	r24, 0x01	; 1
     d24:	88 8f       	std	Y+24, r24	; 0x18
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
     d26:	9b 8d       	ldd	r25, Y+27	; 0x1b
     d28:	8c 8d       	ldd	r24, Y+28	; 0x1c
     d2a:	98 13       	cpse	r25, r24
     d2c:	05 c0       	rjmp	.+10     	; 0xd38 <_ZN14HardwareSerial5writeEh+0x24>
     d2e:	e8 89       	ldd	r30, Y+16	; 0x10
     d30:	f9 89       	ldd	r31, Y+17	; 0x11
     d32:	80 81       	ld	r24, Z
     d34:	85 fd       	sbrc	r24, 5
     d36:	23 c0       	rjmp	.+70     	; 0xd7e <_ZN14HardwareSerial5writeEh+0x6a>
     d38:	f6 2e       	mov	r15, r22
    *_udr = c;
    sbi(*_ucsra, TXC0);
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
     d3a:	0b 8d       	ldd	r16, Y+27	; 0x1b
     d3c:	10 e0       	ldi	r17, 0x00	; 0
     d3e:	0f 5f       	subi	r16, 0xFF	; 255
     d40:	1f 4f       	sbci	r17, 0xFF	; 255
     d42:	0f 73       	andi	r16, 0x3F	; 63
     d44:	11 27       	eor	r17, r17
     d46:	e0 2e       	mov	r14, r16
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
     d48:	8c 8d       	ldd	r24, Y+28	; 0x1c
     d4a:	e8 12       	cpse	r14, r24
     d4c:	0b c0       	rjmp	.+22     	; 0xd64 <_ZN14HardwareSerial5writeEh+0x50>
    if (bit_is_clear(SREG, SREG_I)) {
     d4e:	0f b6       	in	r0, 0x3f	; 63
     d50:	07 fc       	sbrc	r0, 7
     d52:	fa cf       	rjmp	.-12     	; 0xd48 <_ZN14HardwareSerial5writeEh+0x34>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
     d54:	e8 89       	ldd	r30, Y+16	; 0x10
     d56:	f9 89       	ldd	r31, Y+17	; 0x11
     d58:	80 81       	ld	r24, Z
     d5a:	85 ff       	sbrs	r24, 5
     d5c:	f5 cf       	rjmp	.-22     	; 0xd48 <_ZN14HardwareSerial5writeEh+0x34>
	_tx_udr_empty_irq();
     d5e:	ce 01       	movw	r24, r28
     d60:	b8 df       	rcall	.-144    	; 0xcd2 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
     d62:	f2 cf       	rjmp	.-28     	; 0xd48 <_ZN14HardwareSerial5writeEh+0x34>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
     d64:	8b 8d       	ldd	r24, Y+27	; 0x1b
     d66:	fe 01       	movw	r30, r28
     d68:	e8 0f       	add	r30, r24
     d6a:	f1 1d       	adc	r31, r1
     d6c:	e3 5a       	subi	r30, 0xA3	; 163
     d6e:	ff 4f       	sbci	r31, 0xFF	; 255
     d70:	f0 82       	st	Z, r15
  _tx_buffer_head = i;
     d72:	0b 8f       	std	Y+27, r16	; 0x1b
	
  sbi(*_ucsrb, UDRIE0);
     d74:	ea 89       	ldd	r30, Y+18	; 0x12
     d76:	fb 89       	ldd	r31, Y+19	; 0x13
     d78:	80 81       	ld	r24, Z
     d7a:	80 62       	ori	r24, 0x20	; 32
     d7c:	07 c0       	rjmp	.+14     	; 0xd8c <_ZN14HardwareSerial5writeEh+0x78>
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    *_udr = c;
     d7e:	ee 89       	ldd	r30, Y+22	; 0x16
     d80:	ff 89       	ldd	r31, Y+23	; 0x17
     d82:	60 83       	st	Z, r22
    sbi(*_ucsra, TXC0);
     d84:	e8 89       	ldd	r30, Y+16	; 0x10
     d86:	f9 89       	ldd	r31, Y+17	; 0x11
     d88:	80 81       	ld	r24, Z
     d8a:	80 64       	ori	r24, 0x40	; 64
     d8c:	80 83       	st	Z, r24
  _tx_buffer_head = i;
	
  sbi(*_ucsrb, UDRIE0);
  
  return 1;
}
     d8e:	81 e0       	ldi	r24, 0x01	; 1
     d90:	90 e0       	ldi	r25, 0x00	; 0
     d92:	df 91       	pop	r29
     d94:	cf 91       	pop	r28
     d96:	1f 91       	pop	r17
     d98:	0f 91       	pop	r16
     d9a:	ff 90       	pop	r15
     d9c:	ef 90       	pop	r14
     d9e:	08 95       	ret

00000da0 <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
     da0:	cf 93       	push	r28
     da2:	df 93       	push	r29
     da4:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
     da6:	88 8d       	ldd	r24, Y+24	; 0x18
     da8:	88 23       	and	r24, r24
     daa:	c1 f0       	breq	.+48     	; 0xddc <_ZN14HardwareSerial5flushEv+0x3c>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
     dac:	ea 89       	ldd	r30, Y+18	; 0x12
     dae:	fb 89       	ldd	r31, Y+19	; 0x13
     db0:	80 81       	ld	r24, Z
     db2:	85 fd       	sbrc	r24, 5
     db4:	05 c0       	rjmp	.+10     	; 0xdc0 <_ZN14HardwareSerial5flushEv+0x20>
     db6:	a8 89       	ldd	r26, Y+16	; 0x10
     db8:	b9 89       	ldd	r27, Y+17	; 0x11
     dba:	8c 91       	ld	r24, X
     dbc:	86 fd       	sbrc	r24, 6
     dbe:	0e c0       	rjmp	.+28     	; 0xddc <_ZN14HardwareSerial5flushEv+0x3c>
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
     dc0:	0f b6       	in	r0, 0x3f	; 63
     dc2:	07 fc       	sbrc	r0, 7
     dc4:	f5 cf       	rjmp	.-22     	; 0xdb0 <_ZN14HardwareSerial5flushEv+0x10>
     dc6:	80 81       	ld	r24, Z
     dc8:	85 ff       	sbrs	r24, 5
     dca:	f2 cf       	rjmp	.-28     	; 0xdb0 <_ZN14HardwareSerial5flushEv+0x10>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
     dcc:	a8 89       	ldd	r26, Y+16	; 0x10
     dce:	b9 89       	ldd	r27, Y+17	; 0x11
     dd0:	8c 91       	ld	r24, X
     dd2:	85 ff       	sbrs	r24, 5
     dd4:	ed cf       	rjmp	.-38     	; 0xdb0 <_ZN14HardwareSerial5flushEv+0x10>
	  _tx_udr_empty_irq();
     dd6:	ce 01       	movw	r24, r28
     dd8:	7c df       	rcall	.-264    	; 0xcd2 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
     dda:	e8 cf       	rjmp	.-48     	; 0xdac <_ZN14HardwareSerial5flushEv+0xc>
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
     ddc:	df 91       	pop	r29
     dde:	cf 91       	pop	r28
     de0:	08 95       	ret

00000de2 <_ZN14HardwareSerial5beginEmh>:
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
     de2:	cf 92       	push	r12
     de4:	df 92       	push	r13
     de6:	ef 92       	push	r14
     de8:	ff 92       	push	r15
     dea:	1f 93       	push	r17
     dec:	cf 93       	push	r28
     dee:	df 93       	push	r29
     df0:	ec 01       	movw	r28, r24
     df2:	6a 01       	movw	r12, r20
     df4:	7b 01       	movw	r14, r22
     df6:	12 2f       	mov	r17, r18
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
     df8:	e8 89       	ldd	r30, Y+16	; 0x10
     dfa:	f9 89       	ldd	r31, Y+17	; 0x11
     dfc:	82 e0       	ldi	r24, 0x02	; 2
     dfe:	80 83       	st	Z, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
     e00:	41 15       	cp	r20, r1
     e02:	51 4e       	sbci	r21, 0xE1	; 225
     e04:	61 05       	cpc	r22, r1
     e06:	71 05       	cpc	r23, r1
     e08:	a9 f0       	breq	.+42     	; 0xe34 <_ZN14HardwareSerial5beginEmh+0x52>
// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
     e0a:	60 e0       	ldi	r22, 0x00	; 0
     e0c:	79 e0       	ldi	r23, 0x09	; 9
     e0e:	8d e3       	ldi	r24, 0x3D	; 61
     e10:	90 e0       	ldi	r25, 0x00	; 0
     e12:	a7 01       	movw	r20, r14
     e14:	96 01       	movw	r18, r12
     e16:	7f d4       	rcall	.+2302   	; 0x1716 <__udivmodsi4>
     e18:	da 01       	movw	r26, r20
     e1a:	c9 01       	movw	r24, r18
     e1c:	01 97       	sbiw	r24, 0x01	; 1
     e1e:	a1 09       	sbc	r26, r1
     e20:	b1 09       	sbc	r27, r1
     e22:	b6 95       	lsr	r27
     e24:	a7 95       	ror	r26
     e26:	97 95       	ror	r25
     e28:	87 95       	ror	r24
     e2a:	9c 01       	movw	r18, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
     e2c:	21 15       	cp	r18, r1
     e2e:	80 e1       	ldi	r24, 0x10	; 16
     e30:	38 07       	cpc	r19, r24
     e32:	a0 f0       	brcs	.+40     	; 0xe5c <_ZN14HardwareSerial5beginEmh+0x7a>
  {
    *_ucsra = 0;
     e34:	e8 89       	ldd	r30, Y+16	; 0x10
     e36:	f9 89       	ldd	r31, Y+17	; 0x11
     e38:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
     e3a:	60 e8       	ldi	r22, 0x80	; 128
     e3c:	74 e8       	ldi	r23, 0x84	; 132
     e3e:	8e e1       	ldi	r24, 0x1E	; 30
     e40:	90 e0       	ldi	r25, 0x00	; 0
     e42:	a7 01       	movw	r20, r14
     e44:	96 01       	movw	r18, r12
     e46:	67 d4       	rcall	.+2254   	; 0x1716 <__udivmodsi4>
     e48:	da 01       	movw	r26, r20
     e4a:	c9 01       	movw	r24, r18
     e4c:	01 97       	sbiw	r24, 0x01	; 1
     e4e:	a1 09       	sbc	r26, r1
     e50:	b1 09       	sbc	r27, r1
     e52:	b6 95       	lsr	r27
     e54:	a7 95       	ror	r26
     e56:	97 95       	ror	r25
     e58:	87 95       	ror	r24
     e5a:	9c 01       	movw	r18, r24
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
     e5c:	ec 85       	ldd	r30, Y+12	; 0x0c
     e5e:	fd 85       	ldd	r31, Y+13	; 0x0d
     e60:	30 83       	st	Z, r19
  *_ubrrl = baud_setting;
     e62:	ee 85       	ldd	r30, Y+14	; 0x0e
     e64:	ff 85       	ldd	r31, Y+15	; 0x0f
     e66:	20 83       	st	Z, r18

  _written = false;
     e68:	18 8e       	std	Y+24, r1	; 0x18

  //set the data bits, parity, and stop bits
#if defined(__AVR_ATmega8__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
     e6a:	ec 89       	ldd	r30, Y+20	; 0x14
     e6c:	fd 89       	ldd	r31, Y+21	; 0x15
     e6e:	10 83       	st	Z, r17
  
  sbi(*_ucsrb, RXEN0);
     e70:	ea 89       	ldd	r30, Y+18	; 0x12
     e72:	fb 89       	ldd	r31, Y+19	; 0x13
     e74:	80 81       	ld	r24, Z
     e76:	80 61       	ori	r24, 0x10	; 16
     e78:	80 83       	st	Z, r24
  sbi(*_ucsrb, TXEN0);
     e7a:	ea 89       	ldd	r30, Y+18	; 0x12
     e7c:	fb 89       	ldd	r31, Y+19	; 0x13
     e7e:	80 81       	ld	r24, Z
     e80:	88 60       	ori	r24, 0x08	; 8
     e82:	80 83       	st	Z, r24
  sbi(*_ucsrb, RXCIE0);
     e84:	ea 89       	ldd	r30, Y+18	; 0x12
     e86:	fb 89       	ldd	r31, Y+19	; 0x13
     e88:	80 81       	ld	r24, Z
     e8a:	80 68       	ori	r24, 0x80	; 128
     e8c:	80 83       	st	Z, r24
  cbi(*_ucsrb, UDRIE0);
     e8e:	ea 89       	ldd	r30, Y+18	; 0x12
     e90:	fb 89       	ldd	r31, Y+19	; 0x13
     e92:	80 81       	ld	r24, Z
     e94:	8f 7d       	andi	r24, 0xDF	; 223
     e96:	80 83       	st	Z, r24
}
     e98:	df 91       	pop	r29
     e9a:	cf 91       	pop	r28
     e9c:	1f 91       	pop	r17
     e9e:	ff 90       	pop	r15
     ea0:	ef 90       	pop	r14
     ea2:	df 90       	pop	r13
     ea4:	cf 90       	pop	r12
     ea6:	08 95       	ret

00000ea8 <__vector_25>:
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
     ea8:	1f 92       	push	r1
     eaa:	0f 92       	push	r0
     eac:	0f b6       	in	r0, 0x3f	; 63
     eae:	0f 92       	push	r0
     eb0:	11 24       	eor	r1, r1
     eb2:	0b b6       	in	r0, 0x3b	; 59
     eb4:	0f 92       	push	r0
     eb6:	2f 93       	push	r18
     eb8:	8f 93       	push	r24
     eba:	9f 93       	push	r25
     ebc:	ef 93       	push	r30
     ebe:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
     ec0:	e0 91 51 02 	lds	r30, 0x0251	; 0x800251 <Serial+0x10>
     ec4:	f0 91 52 02 	lds	r31, 0x0252	; 0x800252 <Serial+0x11>
     ec8:	80 81       	ld	r24, Z
     eca:	e0 91 57 02 	lds	r30, 0x0257	; 0x800257 <Serial+0x16>
     ece:	f0 91 58 02 	lds	r31, 0x0258	; 0x800258 <Serial+0x17>
     ed2:	82 fd       	sbrc	r24, 2
     ed4:	12 c0       	rjmp	.+36     	; 0xefa <__vector_25+0x52>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
     ed6:	90 81       	ld	r25, Z
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
     ed8:	80 91 5a 02 	lds	r24, 0x025A	; 0x80025a <Serial+0x19>
     edc:	8f 5f       	subi	r24, 0xFF	; 255
     ede:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
     ee0:	20 91 5b 02 	lds	r18, 0x025B	; 0x80025b <Serial+0x1a>
     ee4:	82 17       	cp	r24, r18
     ee6:	51 f0       	breq	.+20     	; 0xefc <__vector_25+0x54>
      _rx_buffer[_rx_buffer_head] = c;
     ee8:	e0 91 5a 02 	lds	r30, 0x025A	; 0x80025a <Serial+0x19>
     eec:	f0 e0       	ldi	r31, 0x00	; 0
     eee:	ef 5b       	subi	r30, 0xBF	; 191
     ef0:	fd 4f       	sbci	r31, 0xFD	; 253
     ef2:	95 8f       	std	Z+29, r25	; 0x1d
      _rx_buffer_head = i;
     ef4:	80 93 5a 02 	sts	0x025A, r24	; 0x80025a <Serial+0x19>
     ef8:	01 c0       	rjmp	.+2      	; 0xefc <__vector_25+0x54>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
     efa:	80 81       	ld	r24, Z
    Serial._rx_complete_irq();
  }
     efc:	ff 91       	pop	r31
     efe:	ef 91       	pop	r30
     f00:	9f 91       	pop	r25
     f02:	8f 91       	pop	r24
     f04:	2f 91       	pop	r18
     f06:	0f 90       	pop	r0
     f08:	0b be       	out	0x3b, r0	; 59
     f0a:	0f 90       	pop	r0
     f0c:	0f be       	out	0x3f, r0	; 63
     f0e:	0f 90       	pop	r0
     f10:	1f 90       	pop	r1
     f12:	18 95       	reti

00000f14 <__vector_26>:
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
     f14:	1f 92       	push	r1
     f16:	0f 92       	push	r0
     f18:	0f b6       	in	r0, 0x3f	; 63
     f1a:	0f 92       	push	r0
     f1c:	11 24       	eor	r1, r1
     f1e:	0b b6       	in	r0, 0x3b	; 59
     f20:	0f 92       	push	r0
     f22:	2f 93       	push	r18
     f24:	3f 93       	push	r19
     f26:	4f 93       	push	r20
     f28:	5f 93       	push	r21
     f2a:	6f 93       	push	r22
     f2c:	7f 93       	push	r23
     f2e:	8f 93       	push	r24
     f30:	9f 93       	push	r25
     f32:	af 93       	push	r26
     f34:	bf 93       	push	r27
     f36:	ef 93       	push	r30
     f38:	ff 93       	push	r31
  Serial._tx_udr_empty_irq();
     f3a:	81 e4       	ldi	r24, 0x41	; 65
     f3c:	92 e0       	ldi	r25, 0x02	; 2
     f3e:	c9 de       	rcall	.-622    	; 0xcd2 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
     f40:	ff 91       	pop	r31
     f42:	ef 91       	pop	r30
     f44:	bf 91       	pop	r27
     f46:	af 91       	pop	r26
     f48:	9f 91       	pop	r25
     f4a:	8f 91       	pop	r24
     f4c:	7f 91       	pop	r23
     f4e:	6f 91       	pop	r22
     f50:	5f 91       	pop	r21
     f52:	4f 91       	pop	r20
     f54:	3f 91       	pop	r19
     f56:	2f 91       	pop	r18
     f58:	0f 90       	pop	r0
     f5a:	0b be       	out	0x3b, r0	; 59
     f5c:	0f 90       	pop	r0
     f5e:	0f be       	out	0x3f, r0	; 63
     f60:	0f 90       	pop	r0
     f62:	1f 90       	pop	r1
     f64:	18 95       	reti

00000f66 <_Z17Serial0_availablev>:
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
     f66:	81 e4       	ldi	r24, 0x41	; 65
     f68:	92 e0       	ldi	r25, 0x02	; 2
     f6a:	3a de       	rcall	.-908    	; 0xbe0 <_ZN14HardwareSerial9availableEv>
     f6c:	21 e0       	ldi	r18, 0x01	; 1
     f6e:	89 2b       	or	r24, r25
     f70:	09 f4       	brne	.+2      	; 0xf74 <_Z17Serial0_availablev+0xe>
     f72:	20 e0       	ldi	r18, 0x00	; 0
}
     f74:	82 2f       	mov	r24, r18
     f76:	08 95       	ret

00000f78 <_GLOBAL__sub_I___vector_25>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
     f78:	e1 e4       	ldi	r30, 0x41	; 65
     f7a:	f2 e0       	ldi	r31, 0x02	; 2
     f7c:	13 82       	std	Z+3, r1	; 0x03
     f7e:	12 82       	std	Z+2, r1	; 0x02
  public:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;

    Stream() {_timeout=1000;}
     f80:	88 ee       	ldi	r24, 0xE8	; 232
     f82:	93 e0       	ldi	r25, 0x03	; 3
     f84:	a0 e0       	ldi	r26, 0x00	; 0
     f86:	b0 e0       	ldi	r27, 0x00	; 0
     f88:	84 83       	std	Z+4, r24	; 0x04
     f8a:	95 83       	std	Z+5, r25	; 0x05
     f8c:	a6 83       	std	Z+6, r26	; 0x06
     f8e:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
     f90:	8c e0       	ldi	r24, 0x0C	; 12
     f92:	92 e0       	ldi	r25, 0x02	; 2
     f94:	91 83       	std	Z+1, r25	; 0x01
     f96:	80 83       	st	Z, r24
     f98:	85 ec       	ldi	r24, 0xC5	; 197
     f9a:	90 e0       	ldi	r25, 0x00	; 0
     f9c:	95 87       	std	Z+13, r25	; 0x0d
     f9e:	84 87       	std	Z+12, r24	; 0x0c
     fa0:	84 ec       	ldi	r24, 0xC4	; 196
     fa2:	90 e0       	ldi	r25, 0x00	; 0
     fa4:	97 87       	std	Z+15, r25	; 0x0f
     fa6:	86 87       	std	Z+14, r24	; 0x0e
     fa8:	80 ec       	ldi	r24, 0xC0	; 192
     faa:	90 e0       	ldi	r25, 0x00	; 0
     fac:	91 8b       	std	Z+17, r25	; 0x11
     fae:	80 8b       	std	Z+16, r24	; 0x10
     fb0:	81 ec       	ldi	r24, 0xC1	; 193
     fb2:	90 e0       	ldi	r25, 0x00	; 0
     fb4:	93 8b       	std	Z+19, r25	; 0x13
     fb6:	82 8b       	std	Z+18, r24	; 0x12
     fb8:	82 ec       	ldi	r24, 0xC2	; 194
     fba:	90 e0       	ldi	r25, 0x00	; 0
     fbc:	95 8b       	std	Z+21, r25	; 0x15
     fbe:	84 8b       	std	Z+20, r24	; 0x14
     fc0:	86 ec       	ldi	r24, 0xC6	; 198
     fc2:	90 e0       	ldi	r25, 0x00	; 0
     fc4:	97 8b       	std	Z+23, r25	; 0x17
     fc6:	86 8b       	std	Z+22, r24	; 0x16
     fc8:	11 8e       	std	Z+25, r1	; 0x19
     fca:	12 8e       	std	Z+26, r1	; 0x1a
     fcc:	13 8e       	std	Z+27, r1	; 0x1b
     fce:	14 8e       	std	Z+28, r1	; 0x1c
     fd0:	08 95       	ret

00000fd2 <initVariant>:
     fd2:	08 95       	ret

00000fd4 <main>:
     fd4:	0c d1       	rcall	.+536    	; 0x11ee <init>
     fd6:	fd df       	rcall	.-6      	; 0xfd2 <initVariant>
     fd8:	79 d9       	rcall	.-3342   	; 0x2cc <setup>
     fda:	cd e2       	ldi	r28, 0x2D	; 45
     fdc:	d6 e0       	ldi	r29, 0x06	; 6
     fde:	89 d9       	rcall	.-3310   	; 0x2f2 <loop>
     fe0:	20 97       	sbiw	r28, 0x00	; 0
     fe2:	e9 f3       	breq	.-6      	; 0xfde <main+0xa>
     fe4:	3a de       	rcall	.-908    	; 0xc5a <_Z14serialEventRunv>
     fe6:	fb cf       	rjmp	.-10     	; 0xfde <main+0xa>

00000fe8 <_ZN5Print5writeEPKhj>:
size_t Print::println(const String &s)
{
  size_t n = print(s);
  n += println();
  return n;
}
     fe8:	cf 92       	push	r12
     fea:	df 92       	push	r13
     fec:	ef 92       	push	r14
     fee:	ff 92       	push	r15
     ff0:	0f 93       	push	r16
     ff2:	1f 93       	push	r17
     ff4:	cf 93       	push	r28
     ff6:	df 93       	push	r29
     ff8:	6c 01       	movw	r12, r24
     ffa:	7a 01       	movw	r14, r20
     ffc:	8b 01       	movw	r16, r22
     ffe:	c0 e0       	ldi	r28, 0x00	; 0
    1000:	d0 e0       	ldi	r29, 0x00	; 0
    1002:	ce 15       	cp	r28, r14
    1004:	df 05       	cpc	r29, r15
    1006:	81 f0       	breq	.+32     	; 0x1028 <_ZN5Print5writeEPKhj+0x40>
    1008:	d8 01       	movw	r26, r16
    100a:	6d 91       	ld	r22, X+
    100c:	8d 01       	movw	r16, r26
    100e:	d6 01       	movw	r26, r12
    1010:	ed 91       	ld	r30, X+
    1012:	fc 91       	ld	r31, X
    1014:	01 90       	ld	r0, Z+
    1016:	f0 81       	ld	r31, Z
    1018:	e0 2d       	mov	r30, r0
    101a:	c6 01       	movw	r24, r12
    101c:	19 95       	eicall
    101e:	89 2b       	or	r24, r25
    1020:	11 f0       	breq	.+4      	; 0x1026 <_ZN5Print5writeEPKhj+0x3e>
    1022:	21 96       	adiw	r28, 0x01	; 1
    1024:	ee cf       	rjmp	.-36     	; 0x1002 <_ZN5Print5writeEPKhj+0x1a>
    1026:	7e 01       	movw	r14, r28
    1028:	c7 01       	movw	r24, r14
    102a:	df 91       	pop	r29
    102c:	cf 91       	pop	r28
    102e:	1f 91       	pop	r17
    1030:	0f 91       	pop	r16
    1032:	ff 90       	pop	r15
    1034:	ef 90       	pop	r14
    1036:	df 90       	pop	r13
    1038:	cf 90       	pop	r12
    103a:	08 95       	ret

0000103c <_ZN5Print5writeEPKc>:
    103c:	61 15       	cp	r22, r1
    103e:	71 05       	cpc	r23, r1
    1040:	79 f0       	breq	.+30     	; 0x1060 <_ZN5Print5writeEPKc+0x24>
    1042:	fb 01       	movw	r30, r22
    1044:	01 90       	ld	r0, Z+
    1046:	00 20       	and	r0, r0
    1048:	e9 f7       	brne	.-6      	; 0x1044 <_ZN5Print5writeEPKc+0x8>
    104a:	31 97       	sbiw	r30, 0x01	; 1
    104c:	af 01       	movw	r20, r30
    104e:	46 1b       	sub	r20, r22
    1050:	57 0b       	sbc	r21, r23
    1052:	dc 01       	movw	r26, r24
    1054:	ed 91       	ld	r30, X+
    1056:	fc 91       	ld	r31, X
    1058:	02 80       	ldd	r0, Z+2	; 0x02
    105a:	f3 81       	ldd	r31, Z+3	; 0x03
    105c:	e0 2d       	mov	r30, r0
    105e:	19 94       	eijmp
    1060:	80 e0       	ldi	r24, 0x00	; 0
    1062:	90 e0       	ldi	r25, 0x00	; 0
    1064:	08 95       	ret

00001066 <_ZN5Print7printlnEv>:
    1066:	6a e1       	ldi	r22, 0x1A	; 26
    1068:	72 e0       	ldi	r23, 0x02	; 2
    106a:	e8 cf       	rjmp	.-48     	; 0x103c <_ZN5Print5writeEPKc>

0000106c <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
    106c:	0f 93       	push	r16
    106e:	1f 93       	push	r17
    1070:	cf 93       	push	r28
    1072:	df 93       	push	r29
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
    1074:	ec 01       	movw	r28, r24
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
    1076:	e2 df       	rcall	.-60     	; 0x103c <_ZN5Print5writeEPKc>
    1078:	8c 01       	movw	r16, r24
  return n;
}
    107a:	ce 01       	movw	r24, r28
    107c:	f4 df       	rcall	.-24     	; 0x1066 <_ZN5Print7printlnEv>
    107e:	80 0f       	add	r24, r16
    1080:	91 1f       	adc	r25, r17
    1082:	df 91       	pop	r29
    1084:	cf 91       	pop	r28
    1086:	1f 91       	pop	r17
    1088:	0f 91       	pop	r16
    108a:	08 95       	ret

0000108c <_ZN6Stream9timedReadEv>:
  {
    ret += (char)c;
    c = timedRead();
  }
  return ret;
}
    108c:	0f 93       	push	r16
    108e:	1f 93       	push	r17
    1090:	cf 93       	push	r28
    1092:	df 93       	push	r29
    1094:	ec 01       	movw	r28, r24
    1096:	94 d0       	rcall	.+296    	; 0x11c0 <millis>
    1098:	68 87       	std	Y+8, r22	; 0x08
    109a:	79 87       	std	Y+9, r23	; 0x09
    109c:	8a 87       	std	Y+10, r24	; 0x0a
    109e:	9b 87       	std	Y+11, r25	; 0x0b
    10a0:	e8 81       	ld	r30, Y
    10a2:	f9 81       	ldd	r31, Y+1	; 0x01
    10a4:	02 84       	ldd	r0, Z+10	; 0x0a
    10a6:	f3 85       	ldd	r31, Z+11	; 0x0b
    10a8:	e0 2d       	mov	r30, r0
    10aa:	ce 01       	movw	r24, r28
    10ac:	19 95       	eicall
    10ae:	97 ff       	sbrs	r25, 7
    10b0:	16 c0       	rjmp	.+44     	; 0x10de <_ZN6Stream9timedReadEv+0x52>
    10b2:	86 d0       	rcall	.+268    	; 0x11c0 <millis>
    10b4:	08 85       	ldd	r16, Y+8	; 0x08
    10b6:	19 85       	ldd	r17, Y+9	; 0x09
    10b8:	2a 85       	ldd	r18, Y+10	; 0x0a
    10ba:	3b 85       	ldd	r19, Y+11	; 0x0b
    10bc:	dc 01       	movw	r26, r24
    10be:	cb 01       	movw	r24, r22
    10c0:	80 1b       	sub	r24, r16
    10c2:	91 0b       	sbc	r25, r17
    10c4:	a2 0b       	sbc	r26, r18
    10c6:	b3 0b       	sbc	r27, r19
    10c8:	0c 81       	ldd	r16, Y+4	; 0x04
    10ca:	1d 81       	ldd	r17, Y+5	; 0x05
    10cc:	2e 81       	ldd	r18, Y+6	; 0x06
    10ce:	3f 81       	ldd	r19, Y+7	; 0x07
    10d0:	80 17       	cp	r24, r16
    10d2:	91 07       	cpc	r25, r17
    10d4:	a2 07       	cpc	r26, r18
    10d6:	b3 07       	cpc	r27, r19
    10d8:	18 f3       	brcs	.-58     	; 0x10a0 <_ZN6Stream9timedReadEv+0x14>
    10da:	8f ef       	ldi	r24, 0xFF	; 255
    10dc:	9f ef       	ldi	r25, 0xFF	; 255
    10de:	df 91       	pop	r29
    10e0:	cf 91       	pop	r28
    10e2:	1f 91       	pop	r17
    10e4:	0f 91       	pop	r16
    10e6:	08 95       	ret

000010e8 <_ZN6Stream15readStringUntilEc>:

String Stream::readStringUntil(char terminator)
{
    10e8:	ef 92       	push	r14
    10ea:	ff 92       	push	r15
    10ec:	0f 93       	push	r16
    10ee:	1f 93       	push	r17
    10f0:	cf 93       	push	r28
    10f2:	df 93       	push	r29
    10f4:	ec 01       	movw	r28, r24
    10f6:	7b 01       	movw	r14, r22
    10f8:	04 2f       	mov	r16, r20
  String ret;
    10fa:	6c e1       	ldi	r22, 0x1C	; 28
    10fc:	72 e0       	ldi	r23, 0x02	; 2
  int c = timedRead();
    10fe:	27 d2       	rcall	.+1102   	; 0x154e <_ZN6StringC1EPKc>
    1100:	c7 01       	movw	r24, r14
  while (c >= 0 && c != terminator)
    1102:	c4 df       	rcall	.-120    	; 0x108c <_ZN6Stream9timedReadEv>
    1104:	10 e0       	ldi	r17, 0x00	; 0
    1106:	97 fd       	sbrc	r25, 7
    1108:	09 c0       	rjmp	.+18     	; 0x111c <_ZN6Stream15readStringUntilEc+0x34>
    110a:	80 17       	cp	r24, r16

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
	String & operator += (char c)			{concat(c); return (*this);}
    110c:	91 07       	cpc	r25, r17
    110e:	31 f0       	breq	.+12     	; 0x111c <_ZN6Stream15readStringUntilEc+0x34>
  {
    ret += (char)c;
    c = timedRead();
    1110:	68 2f       	mov	r22, r24
    1112:	ce 01       	movw	r24, r28
    1114:	5c d2       	rcall	.+1208   	; 0x15ce <_ZN6String6concatEc>

String Stream::readStringUntil(char terminator)
{
  String ret;
  int c = timedRead();
  while (c >= 0 && c != terminator)
    1116:	c7 01       	movw	r24, r14
  {
    ret += (char)c;
    c = timedRead();
  }
  return ret;
}
    1118:	b9 df       	rcall	.-142    	; 0x108c <_ZN6Stream9timedReadEv>
    111a:	f5 cf       	rjmp	.-22     	; 0x1106 <_ZN6Stream15readStringUntilEc+0x1e>
    111c:	ce 01       	movw	r24, r28
    111e:	df 91       	pop	r29
    1120:	cf 91       	pop	r28
    1122:	1f 91       	pop	r17
    1124:	0f 91       	pop	r16
    1126:	ff 90       	pop	r15
    1128:	ef 90       	pop	r14
    112a:	08 95       	ret

0000112c <__vector_23>:
		while ( ms > 0 && (micros() - start) >= 1000) {
			ms--;
			start += 1000;
		}
	}
}
    112c:	1f 92       	push	r1
    112e:	0f 92       	push	r0
    1130:	0f b6       	in	r0, 0x3f	; 63
    1132:	0f 92       	push	r0
    1134:	11 24       	eor	r1, r1
    1136:	2f 93       	push	r18
    1138:	3f 93       	push	r19
    113a:	8f 93       	push	r24
    113c:	9f 93       	push	r25
    113e:	af 93       	push	r26
    1140:	bf 93       	push	r27
    1142:	80 91 df 02 	lds	r24, 0x02DF	; 0x8002df <timer0_millis>
    1146:	90 91 e0 02 	lds	r25, 0x02E0	; 0x8002e0 <timer0_millis+0x1>
    114a:	a0 91 e1 02 	lds	r26, 0x02E1	; 0x8002e1 <timer0_millis+0x2>
    114e:	b0 91 e2 02 	lds	r27, 0x02E2	; 0x8002e2 <timer0_millis+0x3>
    1152:	30 91 de 02 	lds	r19, 0x02DE	; 0x8002de <timer0_fract>
    1156:	23 e0       	ldi	r18, 0x03	; 3
    1158:	23 0f       	add	r18, r19
    115a:	2d 37       	cpi	r18, 0x7D	; 125
    115c:	20 f4       	brcc	.+8      	; 0x1166 <__vector_23+0x3a>
    115e:	01 96       	adiw	r24, 0x01	; 1
    1160:	a1 1d       	adc	r26, r1
    1162:	b1 1d       	adc	r27, r1
    1164:	05 c0       	rjmp	.+10     	; 0x1170 <__vector_23+0x44>
    1166:	26 e8       	ldi	r18, 0x86	; 134
    1168:	23 0f       	add	r18, r19
    116a:	02 96       	adiw	r24, 0x02	; 2
    116c:	a1 1d       	adc	r26, r1
    116e:	b1 1d       	adc	r27, r1
    1170:	20 93 de 02 	sts	0x02DE, r18	; 0x8002de <timer0_fract>
    1174:	80 93 df 02 	sts	0x02DF, r24	; 0x8002df <timer0_millis>
    1178:	90 93 e0 02 	sts	0x02E0, r25	; 0x8002e0 <timer0_millis+0x1>
    117c:	a0 93 e1 02 	sts	0x02E1, r26	; 0x8002e1 <timer0_millis+0x2>
    1180:	b0 93 e2 02 	sts	0x02E2, r27	; 0x8002e2 <timer0_millis+0x3>
    1184:	80 91 e3 02 	lds	r24, 0x02E3	; 0x8002e3 <timer0_overflow_count>
    1188:	90 91 e4 02 	lds	r25, 0x02E4	; 0x8002e4 <timer0_overflow_count+0x1>
    118c:	a0 91 e5 02 	lds	r26, 0x02E5	; 0x8002e5 <timer0_overflow_count+0x2>
    1190:	b0 91 e6 02 	lds	r27, 0x02E6	; 0x8002e6 <timer0_overflow_count+0x3>
    1194:	01 96       	adiw	r24, 0x01	; 1
    1196:	a1 1d       	adc	r26, r1
    1198:	b1 1d       	adc	r27, r1
    119a:	80 93 e3 02 	sts	0x02E3, r24	; 0x8002e3 <timer0_overflow_count>
    119e:	90 93 e4 02 	sts	0x02E4, r25	; 0x8002e4 <timer0_overflow_count+0x1>
    11a2:	a0 93 e5 02 	sts	0x02E5, r26	; 0x8002e5 <timer0_overflow_count+0x2>
    11a6:	b0 93 e6 02 	sts	0x02E6, r27	; 0x8002e6 <timer0_overflow_count+0x3>
    11aa:	bf 91       	pop	r27
    11ac:	af 91       	pop	r26
    11ae:	9f 91       	pop	r25
    11b0:	8f 91       	pop	r24
    11b2:	3f 91       	pop	r19
    11b4:	2f 91       	pop	r18
    11b6:	0f 90       	pop	r0
    11b8:	0f be       	out	0x3f, r0	; 63
    11ba:	0f 90       	pop	r0
    11bc:	1f 90       	pop	r1
    11be:	18 95       	reti

000011c0 <millis>:
    11c0:	2f b7       	in	r18, 0x3f	; 63
    11c2:	f8 94       	cli
    11c4:	60 91 df 02 	lds	r22, 0x02DF	; 0x8002df <timer0_millis>
    11c8:	70 91 e0 02 	lds	r23, 0x02E0	; 0x8002e0 <timer0_millis+0x1>
    11cc:	80 91 e1 02 	lds	r24, 0x02E1	; 0x8002e1 <timer0_millis+0x2>
    11d0:	90 91 e2 02 	lds	r25, 0x02E2	; 0x8002e2 <timer0_millis+0x3>
    11d4:	2f bf       	out	0x3f, r18	; 63
    11d6:	08 95       	ret

000011d8 <delayMicroseconds>:
#elif F_CPU >= 16000000L
	// for the 16 MHz clock on most Arduino boards

	// for a one-microsecond delay, simply return.  the overhead
	// of the function call takes 14 (16) cycles, which is 1us
	if (us <= 1) return; //  = 3 cycles, (4 when true)
    11d8:	82 30       	cpi	r24, 0x02	; 2
    11da:	91 05       	cpc	r25, r1
    11dc:	38 f0       	brcs	.+14     	; 0x11ec <delayMicroseconds+0x14>

	// the following loop takes 1/4 of a microsecond (4 cycles)
	// per iteration, so execute it four times for each microsecond of
	// delay requested.
	us <<= 2; // x4 us, = 4 cycles
    11de:	88 0f       	add	r24, r24
    11e0:	99 1f       	adc	r25, r25
    11e2:	88 0f       	add	r24, r24
    11e4:	99 1f       	adc	r25, r25

	// account for the time taken in the preceeding commands.
	// we just burned 19 (21) cycles above, remove 5, (5*4=20)
	// us is at least 8 so we can substract 5
	us -= 5; // = 2 cycles,
    11e6:	05 97       	sbiw	r24, 0x05	; 5
	

#endif

	// busy wait
	__asm__ __volatile__ (
    11e8:	01 97       	sbiw	r24, 0x01	; 1
    11ea:	f1 f7       	brne	.-4      	; 0x11e8 <delayMicroseconds+0x10>
    11ec:	08 95       	ret

000011ee <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
    11ee:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
    11f0:	84 b5       	in	r24, 0x24	; 36
    11f2:	82 60       	ori	r24, 0x02	; 2
    11f4:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
    11f6:	84 b5       	in	r24, 0x24	; 36
    11f8:	81 60       	ori	r24, 0x01	; 1
    11fa:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
    11fc:	85 b5       	in	r24, 0x25	; 37
    11fe:	82 60       	ori	r24, 0x02	; 2
    1200:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
    1202:	85 b5       	in	r24, 0x25	; 37
    1204:	81 60       	ori	r24, 0x01	; 1
    1206:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
    1208:	ee e6       	ldi	r30, 0x6E	; 110
    120a:	f0 e0       	ldi	r31, 0x00	; 0
    120c:	80 81       	ld	r24, Z
    120e:	81 60       	ori	r24, 0x01	; 1
    1210:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
    1212:	e1 e8       	ldi	r30, 0x81	; 129
    1214:	f0 e0       	ldi	r31, 0x00	; 0
    1216:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
    1218:	80 81       	ld	r24, Z
    121a:	82 60       	ori	r24, 0x02	; 2
    121c:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
    121e:	80 81       	ld	r24, Z
    1220:	81 60       	ori	r24, 0x01	; 1
    1222:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
    1224:	e0 e8       	ldi	r30, 0x80	; 128
    1226:	f0 e0       	ldi	r31, 0x00	; 0
    1228:	80 81       	ld	r24, Z
    122a:	81 60       	ori	r24, 0x01	; 1
    122c:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
    122e:	e1 eb       	ldi	r30, 0xB1	; 177
    1230:	f0 e0       	ldi	r31, 0x00	; 0
    1232:	80 81       	ld	r24, Z
    1234:	84 60       	ori	r24, 0x04	; 4
    1236:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
    1238:	e0 eb       	ldi	r30, 0xB0	; 176
    123a:	f0 e0       	ldi	r31, 0x00	; 0
    123c:	80 81       	ld	r24, Z
    123e:	81 60       	ori	r24, 0x01	; 1
    1240:	80 83       	st	Z, r24
//#else
	// Timer 2 not finished (may not be present on this CPU)
#endif

#if defined(TCCR3B) && defined(CS31) && defined(WGM30)
	sbi(TCCR3B, CS31);		// set timer 3 prescale factor to 64
    1242:	e1 e9       	ldi	r30, 0x91	; 145
    1244:	f0 e0       	ldi	r31, 0x00	; 0
    1246:	80 81       	ld	r24, Z
    1248:	82 60       	ori	r24, 0x02	; 2
    124a:	80 83       	st	Z, r24
	sbi(TCCR3B, CS30);
    124c:	80 81       	ld	r24, Z
    124e:	81 60       	ori	r24, 0x01	; 1
    1250:	80 83       	st	Z, r24
	sbi(TCCR3A, WGM30);		// put timer 3 in 8-bit phase correct pwm mode
    1252:	e0 e9       	ldi	r30, 0x90	; 144
    1254:	f0 e0       	ldi	r31, 0x00	; 0
    1256:	80 81       	ld	r24, Z
    1258:	81 60       	ori	r24, 0x01	; 1
    125a:	80 83       	st	Z, r24
	sbi(TCCR4D, WGM40);		// put timer 4 in phase- and frequency-correct PWM mode	
	sbi(TCCR4A, PWM4A);		// enable PWM mode for comparator OCR4A
	sbi(TCCR4C, PWM4D);		// enable PWM mode for comparator OCR4D
#else /* beginning of timer4 block for ATMEGA1280 and ATMEGA2560 */
#if defined(TCCR4B) && defined(CS41) && defined(WGM40)
	sbi(TCCR4B, CS41);		// set timer 4 prescale factor to 64
    125c:	e1 ea       	ldi	r30, 0xA1	; 161
    125e:	f0 e0       	ldi	r31, 0x00	; 0
    1260:	80 81       	ld	r24, Z
    1262:	82 60       	ori	r24, 0x02	; 2
    1264:	80 83       	st	Z, r24
	sbi(TCCR4B, CS40);
    1266:	80 81       	ld	r24, Z
    1268:	81 60       	ori	r24, 0x01	; 1
    126a:	80 83       	st	Z, r24
	sbi(TCCR4A, WGM40);		// put timer 4 in 8-bit phase correct pwm mode
    126c:	e0 ea       	ldi	r30, 0xA0	; 160
    126e:	f0 e0       	ldi	r31, 0x00	; 0
    1270:	80 81       	ld	r24, Z
    1272:	81 60       	ori	r24, 0x01	; 1
    1274:	80 83       	st	Z, r24
#endif
#endif /* end timer4 block for ATMEGA1280/2560 and similar */	

#if defined(TCCR5B) && defined(CS51) && defined(WGM50)
	sbi(TCCR5B, CS51);		// set timer 5 prescale factor to 64
    1276:	e1 e2       	ldi	r30, 0x21	; 33
    1278:	f1 e0       	ldi	r31, 0x01	; 1
    127a:	80 81       	ld	r24, Z
    127c:	82 60       	ori	r24, 0x02	; 2
    127e:	80 83       	st	Z, r24
	sbi(TCCR5B, CS50);
    1280:	80 81       	ld	r24, Z
    1282:	81 60       	ori	r24, 0x01	; 1
    1284:	80 83       	st	Z, r24
	sbi(TCCR5A, WGM50);		// put timer 5 in 8-bit phase correct pwm mode
    1286:	e0 e2       	ldi	r30, 0x20	; 32
    1288:	f1 e0       	ldi	r31, 0x01	; 1
    128a:	80 81       	ld	r24, Z
    128c:	81 60       	ori	r24, 0x01	; 1
    128e:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
    1290:	ea e7       	ldi	r30, 0x7A	; 122
    1292:	f0 e0       	ldi	r31, 0x00	; 0
    1294:	80 81       	ld	r24, Z
    1296:	84 60       	ori	r24, 0x04	; 4
    1298:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
    129a:	80 81       	ld	r24, Z
    129c:	82 60       	ori	r24, 0x02	; 2
    129e:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
    12a0:	80 81       	ld	r24, Z
    12a2:	81 60       	ori	r24, 0x01	; 1
    12a4:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    12a6:	80 81       	ld	r24, Z
    12a8:	80 68       	ori	r24, 0x80	; 128
    12aa:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
    12ac:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7000c1>
    12b0:	08 95       	ret

000012b2 <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    12b2:	90 e0       	ldi	r25, 0x00	; 0
    12b4:	fc 01       	movw	r30, r24
    12b6:	31 97       	sbiw	r30, 0x01	; 1
    12b8:	e2 31       	cpi	r30, 0x12	; 18
    12ba:	f1 05       	cpc	r31, r1
    12bc:	08 f0       	brcs	.+2      	; 0x12c0 <turnOffPWM+0xe>
    12be:	4d c0       	rjmp	.+154    	; 0x135a <turnOffPWM+0xa8>
    12c0:	88 27       	eor	r24, r24
    12c2:	ee 58       	subi	r30, 0x8E	; 142
    12c4:	ff 4f       	sbci	r31, 0xFF	; 255
    12c6:	8f 4f       	sbci	r24, 0xFF	; 255
    12c8:	48 c2       	rjmp	.+1168   	; 0x175a <__tablejump2__>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    12ca:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
    12ce:	8f 77       	andi	r24, 0x7F	; 127
    12d0:	03 c0       	rjmp	.+6      	; 0x12d8 <turnOffPWM+0x26>
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    12d2:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
    12d6:	8f 7d       	andi	r24, 0xDF	; 223
    12d8:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
    12dc:	08 95       	ret
		#endif
		#if defined(TCCR1A) && defined(COM1C1)
		case TIMER1C:   cbi(TCCR1A, COM1C1);    break;
    12de:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
    12e2:	87 7f       	andi	r24, 0xF7	; 247
    12e4:	f9 cf       	rjmp	.-14     	; 0x12d8 <turnOffPWM+0x26>
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    12e6:	84 b5       	in	r24, 0x24	; 36
    12e8:	8f 77       	andi	r24, 0x7F	; 127
    12ea:	02 c0       	rjmp	.+4      	; 0x12f0 <turnOffPWM+0x3e>
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    12ec:	84 b5       	in	r24, 0x24	; 36
    12ee:	8f 7d       	andi	r24, 0xDF	; 223
    12f0:	84 bd       	out	0x24, r24	; 36
    12f2:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
    12f4:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7000b0>
    12f8:	8f 77       	andi	r24, 0x7F	; 127
    12fa:	03 c0       	rjmp	.+6      	; 0x1302 <turnOffPWM+0x50>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
    12fc:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7000b0>
    1300:	8f 7d       	andi	r24, 0xDF	; 223
    1302:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7000b0>
    1306:	08 95       	ret
		#endif
		
		#if defined(TCCR3A) && defined(COM3A1)
		case  TIMER3A:  cbi(TCCR3A, COM3A1);    break;
    1308:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
    130c:	8f 77       	andi	r24, 0x7F	; 127
    130e:	07 c0       	rjmp	.+14     	; 0x131e <turnOffPWM+0x6c>
		#endif
		#if defined(TCCR3A) && defined(COM3B1)
		case  TIMER3B:  cbi(TCCR3A, COM3B1);    break;
    1310:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
    1314:	8f 7d       	andi	r24, 0xDF	; 223
    1316:	03 c0       	rjmp	.+6      	; 0x131e <turnOffPWM+0x6c>
		#endif
		#if defined(TCCR3A) && defined(COM3C1)
		case  TIMER3C:  cbi(TCCR3A, COM3C1);    break;
    1318:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
    131c:	87 7f       	andi	r24, 0xF7	; 247
    131e:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
    1322:	08 95       	ret
		#endif

		#if defined(TCCR4A) && defined(COM4A1)
		case  TIMER4A:  cbi(TCCR4A, COM4A1);    break;
    1324:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
    1328:	8f 77       	andi	r24, 0x7F	; 127
    132a:	07 c0       	rjmp	.+14     	; 0x133a <turnOffPWM+0x88>
		#endif					
		#if defined(TCCR4A) && defined(COM4B1)
		case  TIMER4B:  cbi(TCCR4A, COM4B1);    break;
    132c:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
    1330:	8f 7d       	andi	r24, 0xDF	; 223
    1332:	03 c0       	rjmp	.+6      	; 0x133a <turnOffPWM+0x88>
		#endif
		#if defined(TCCR4A) && defined(COM4C1)
		case  TIMER4C:  cbi(TCCR4A, COM4C1);    break;
    1334:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
    1338:	87 7f       	andi	r24, 0xF7	; 247
    133a:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
    133e:	08 95       	ret
		#if defined(TCCR4C) && defined(COM4D1)
		case TIMER4D:	cbi(TCCR4C, COM4D1);	break;
		#endif			
			
		#if defined(TCCR5A)
		case  TIMER5A:  cbi(TCCR5A, COM5A1);    break;
    1340:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
    1344:	8f 77       	andi	r24, 0x7F	; 127
    1346:	07 c0       	rjmp	.+14     	; 0x1356 <turnOffPWM+0xa4>
		case  TIMER5B:  cbi(TCCR5A, COM5B1);    break;
    1348:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
    134c:	8f 7d       	andi	r24, 0xDF	; 223
    134e:	03 c0       	rjmp	.+6      	; 0x1356 <turnOffPWM+0xa4>
		case  TIMER5C:  cbi(TCCR5A, COM5C1);    break;
    1350:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
    1354:	87 7f       	andi	r24, 0xF7	; 247
    1356:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
    135a:	08 95       	ret

0000135c <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    135c:	cf 93       	push	r28
    135e:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
    1360:	90 e0       	ldi	r25, 0x00	; 0
    1362:	fc 01       	movw	r30, r24
    1364:	e7 57       	subi	r30, 0x77	; 119
    1366:	fe 4f       	sbci	r31, 0xFE	; 254
    1368:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
    136a:	fc 01       	movw	r30, r24
    136c:	e1 53       	subi	r30, 0x31	; 49
    136e:	fe 4f       	sbci	r31, 0xFE	; 254
    1370:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
    1372:	88 23       	and	r24, r24
    1374:	61 f1       	breq	.+88     	; 0x13ce <pinMode+0x72>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
    1376:	90 e0       	ldi	r25, 0x00	; 0
    1378:	88 0f       	add	r24, r24
    137a:	99 1f       	adc	r25, r25
    137c:	fc 01       	movw	r30, r24
    137e:	e7 5b       	subi	r30, 0xB7	; 183
    1380:	fd 4f       	sbci	r31, 0xFD	; 253
    1382:	c5 91       	lpm	r28, Z+
    1384:	d4 91       	lpm	r29, Z
	out = portOutputRegister(port);
    1386:	fc 01       	movw	r30, r24
    1388:	e1 5d       	subi	r30, 0xD1	; 209
    138a:	fd 4f       	sbci	r31, 0xFD	; 253
    138c:	a5 91       	lpm	r26, Z+
    138e:	b4 91       	lpm	r27, Z

	if (mode == INPUT) { 
    1390:	61 11       	cpse	r22, r1
    1392:	09 c0       	rjmp	.+18     	; 0x13a6 <pinMode+0x4a>
		uint8_t oldSREG = SREG;
    1394:	9f b7       	in	r25, 0x3f	; 63
                cli();
    1396:	f8 94       	cli
		*reg &= ~bit;
    1398:	88 81       	ld	r24, Y
    139a:	20 95       	com	r18
    139c:	82 23       	and	r24, r18
    139e:	88 83       	st	Y, r24
		*out &= ~bit;
    13a0:	ec 91       	ld	r30, X
    13a2:	2e 23       	and	r18, r30
    13a4:	0b c0       	rjmp	.+22     	; 0x13bc <pinMode+0x60>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
    13a6:	62 30       	cpi	r22, 0x02	; 2
    13a8:	61 f4       	brne	.+24     	; 0x13c2 <pinMode+0x66>
		uint8_t oldSREG = SREG;
    13aa:	9f b7       	in	r25, 0x3f	; 63
                cli();
    13ac:	f8 94       	cli
		*reg &= ~bit;
    13ae:	88 81       	ld	r24, Y
    13b0:	32 2f       	mov	r19, r18
    13b2:	30 95       	com	r19
    13b4:	83 23       	and	r24, r19
    13b6:	88 83       	st	Y, r24
		*out |= bit;
    13b8:	ec 91       	ld	r30, X
    13ba:	2e 2b       	or	r18, r30
    13bc:	2c 93       	st	X, r18
		SREG = oldSREG;
    13be:	9f bf       	out	0x3f, r25	; 63
    13c0:	06 c0       	rjmp	.+12     	; 0x13ce <pinMode+0x72>
	} else {
		uint8_t oldSREG = SREG;
    13c2:	8f b7       	in	r24, 0x3f	; 63
                cli();
    13c4:	f8 94       	cli
		*reg |= bit;
    13c6:	e8 81       	ld	r30, Y
    13c8:	2e 2b       	or	r18, r30
    13ca:	28 83       	st	Y, r18
		SREG = oldSREG;
    13cc:	8f bf       	out	0x3f, r24	; 63
	}
}
    13ce:	df 91       	pop	r29
    13d0:	cf 91       	pop	r28
    13d2:	08 95       	ret

000013d4 <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
    13d4:	1f 93       	push	r17
    13d6:	cf 93       	push	r28
    13d8:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    13da:	28 2f       	mov	r18, r24
    13dc:	30 e0       	ldi	r19, 0x00	; 0
    13de:	f9 01       	movw	r30, r18
    13e0:	ed 5b       	subi	r30, 0xBD	; 189
    13e2:	fe 4f       	sbci	r31, 0xFE	; 254
    13e4:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    13e6:	f9 01       	movw	r30, r18
    13e8:	e7 57       	subi	r30, 0x77	; 119
    13ea:	fe 4f       	sbci	r31, 0xFE	; 254
    13ec:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    13ee:	f9 01       	movw	r30, r18
    13f0:	e1 53       	subi	r30, 0x31	; 49
    13f2:	fe 4f       	sbci	r31, 0xFE	; 254
    13f4:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    13f6:	cc 23       	and	r28, r28
    13f8:	b9 f0       	breq	.+46     	; 0x1428 <digitalWrite+0x54>
    13fa:	16 2f       	mov	r17, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    13fc:	81 11       	cpse	r24, r1

	out = portOutputRegister(port);
    13fe:	59 df       	rcall	.-334    	; 0x12b2 <turnOffPWM>
    1400:	ec 2f       	mov	r30, r28
    1402:	f0 e0       	ldi	r31, 0x00	; 0
    1404:	ee 0f       	add	r30, r30
    1406:	ff 1f       	adc	r31, r31
    1408:	e1 5d       	subi	r30, 0xD1	; 209
    140a:	fd 4f       	sbci	r31, 0xFD	; 253
    140c:	a5 91       	lpm	r26, Z+

	uint8_t oldSREG = SREG;
    140e:	b4 91       	lpm	r27, Z
	cli();
    1410:	9f b7       	in	r25, 0x3f	; 63

	if (val == LOW) {
    1412:	f8 94       	cli
    1414:	11 11       	cpse	r17, r1
		*out &= ~bit;
    1416:	04 c0       	rjmp	.+8      	; 0x1420 <digitalWrite+0x4c>
    1418:	8c 91       	ld	r24, X
    141a:	d0 95       	com	r29
    141c:	d8 23       	and	r29, r24
	} else {
		*out |= bit;
    141e:	02 c0       	rjmp	.+4      	; 0x1424 <digitalWrite+0x50>
    1420:	ec 91       	ld	r30, X
    1422:	de 2b       	or	r29, r30
	}

	SREG = oldSREG;
    1424:	dc 93       	st	X, r29
}
    1426:	9f bf       	out	0x3f, r25	; 63
    1428:	df 91       	pop	r29
    142a:	cf 91       	pop	r28
    142c:	1f 91       	pop	r17
    142e:	08 95       	ret

00001430 <digitalRead>:

int digitalRead(uint8_t pin)
{
    1430:	cf 93       	push	r28
    1432:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    1434:	28 2f       	mov	r18, r24
    1436:	30 e0       	ldi	r19, 0x00	; 0
    1438:	f9 01       	movw	r30, r18
    143a:	ed 5b       	subi	r30, 0xBD	; 189
    143c:	fe 4f       	sbci	r31, 0xFE	; 254
    143e:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    1440:	f9 01       	movw	r30, r18
    1442:	e7 57       	subi	r30, 0x77	; 119
    1444:	fe 4f       	sbci	r31, 0xFE	; 254
    1446:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    1448:	f9 01       	movw	r30, r18
    144a:	e1 53       	subi	r30, 0x31	; 49
    144c:	fe 4f       	sbci	r31, 0xFE	; 254
    144e:	c4 91       	lpm	r28, Z

	if (port == NOT_A_PIN) return LOW;
    1450:	cc 23       	and	r28, r28
    1452:	89 f0       	breq	.+34     	; 0x1476 <digitalRead+0x46>

	// If the pin that support PWM output, we need to turn it off
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    1454:	81 11       	cpse	r24, r1

	if (*portInputRegister(port) & bit) return HIGH;
    1456:	2d df       	rcall	.-422    	; 0x12b2 <turnOffPWM>
    1458:	ec 2f       	mov	r30, r28
    145a:	f0 e0       	ldi	r31, 0x00	; 0
    145c:	ee 0f       	add	r30, r30
    145e:	ff 1f       	adc	r31, r31
    1460:	eb 5e       	subi	r30, 0xEB	; 235
    1462:	fd 4f       	sbci	r31, 0xFD	; 253
    1464:	a5 91       	lpm	r26, Z+
    1466:	b4 91       	lpm	r27, Z
{
	uint8_t timer = digitalPinToTimer(pin);
	uint8_t bit = digitalPinToBitMask(pin);
	uint8_t port = digitalPinToPort(pin);

	if (port == NOT_A_PIN) return LOW;
    1468:	ec 91       	ld	r30, X
    146a:	ed 23       	and	r30, r29
    146c:	81 e0       	ldi	r24, 0x01	; 1
    146e:	90 e0       	ldi	r25, 0x00	; 0
    1470:	21 f4       	brne	.+8      	; 0x147a <digitalRead+0x4a>
    1472:	80 e0       	ldi	r24, 0x00	; 0
    1474:	02 c0       	rjmp	.+4      	; 0x147a <digitalRead+0x4a>
    1476:	80 e0       	ldi	r24, 0x00	; 0
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);

	if (*portInputRegister(port) & bit) return HIGH;
	return LOW;
}
    1478:	90 e0       	ldi	r25, 0x00	; 0
    147a:	df 91       	pop	r29
    147c:	cf 91       	pop	r28
    147e:	08 95       	ret

00001480 <_ZN6StringD1Ev>:
/*  Character Access                         */
/*********************************************/

char String::charAt(unsigned int loc) const
{
	return operator[](loc);
    1480:	fc 01       	movw	r30, r24
    1482:	80 81       	ld	r24, Z
    1484:	91 81       	ldd	r25, Z+1	; 0x01
    1486:	22 c2       	rjmp	.+1092   	; 0x18cc <free>

00001488 <_ZN6String10invalidateEv>:
    1488:	cf 93       	push	r28
    148a:	df 93       	push	r29
    148c:	ec 01       	movw	r28, r24
    148e:	88 81       	ld	r24, Y
    1490:	99 81       	ldd	r25, Y+1	; 0x01
    1492:	00 97       	sbiw	r24, 0x00	; 0
    1494:	09 f0       	breq	.+2      	; 0x1498 <_ZN6String10invalidateEv+0x10>
    1496:	1a d2       	rcall	.+1076   	; 0x18cc <free>
    1498:	19 82       	std	Y+1, r1	; 0x01
    149a:	18 82       	st	Y, r1
    149c:	1d 82       	std	Y+5, r1	; 0x05
    149e:	1c 82       	std	Y+4, r1	; 0x04
    14a0:	1b 82       	std	Y+3, r1	; 0x03
    14a2:	1a 82       	std	Y+2, r1	; 0x02
    14a4:	df 91       	pop	r29
    14a6:	cf 91       	pop	r28
    14a8:	08 95       	ret

000014aa <_ZN6String12changeBufferEj>:
    14aa:	0f 93       	push	r16
    14ac:	1f 93       	push	r17
    14ae:	cf 93       	push	r28
    14b0:	df 93       	push	r29
    14b2:	ec 01       	movw	r28, r24
    14b4:	8b 01       	movw	r16, r22
    14b6:	6f 5f       	subi	r22, 0xFF	; 255
    14b8:	7f 4f       	sbci	r23, 0xFF	; 255
    14ba:	88 81       	ld	r24, Y
    14bc:	99 81       	ldd	r25, Y+1	; 0x01
    14be:	8f d2       	rcall	.+1310   	; 0x19de <realloc>
    14c0:	00 97       	sbiw	r24, 0x00	; 0
    14c2:	31 f0       	breq	.+12     	; 0x14d0 <_ZN6String12changeBufferEj+0x26>
    14c4:	99 83       	std	Y+1, r25	; 0x01
    14c6:	88 83       	st	Y, r24
    14c8:	1b 83       	std	Y+3, r17	; 0x03
    14ca:	0a 83       	std	Y+2, r16	; 0x02
    14cc:	81 e0       	ldi	r24, 0x01	; 1
    14ce:	01 c0       	rjmp	.+2      	; 0x14d2 <_ZN6String12changeBufferEj+0x28>
    14d0:	80 e0       	ldi	r24, 0x00	; 0
    14d2:	df 91       	pop	r29
    14d4:	cf 91       	pop	r28
    14d6:	1f 91       	pop	r17
    14d8:	0f 91       	pop	r16
    14da:	08 95       	ret

000014dc <_ZN6String7reserveEj>:
    14dc:	cf 93       	push	r28
    14de:	df 93       	push	r29
    14e0:	ec 01       	movw	r28, r24
    14e2:	88 81       	ld	r24, Y
    14e4:	99 81       	ldd	r25, Y+1	; 0x01
    14e6:	89 2b       	or	r24, r25
    14e8:	29 f0       	breq	.+10     	; 0x14f4 <_ZN6String7reserveEj+0x18>
    14ea:	8a 81       	ldd	r24, Y+2	; 0x02
    14ec:	9b 81       	ldd	r25, Y+3	; 0x03
    14ee:	86 17       	cp	r24, r22
    14f0:	97 07       	cpc	r25, r23
    14f2:	58 f4       	brcc	.+22     	; 0x150a <_ZN6String7reserveEj+0x2e>
    14f4:	ce 01       	movw	r24, r28
    14f6:	d9 df       	rcall	.-78     	; 0x14aa <_ZN6String12changeBufferEj>
    14f8:	88 23       	and	r24, r24
    14fa:	41 f0       	breq	.+16     	; 0x150c <_ZN6String7reserveEj+0x30>
    14fc:	8c 81       	ldd	r24, Y+4	; 0x04
    14fe:	9d 81       	ldd	r25, Y+5	; 0x05
    1500:	89 2b       	or	r24, r25
    1502:	19 f4       	brne	.+6      	; 0x150a <_ZN6String7reserveEj+0x2e>
    1504:	e8 81       	ld	r30, Y
    1506:	f9 81       	ldd	r31, Y+1	; 0x01
    1508:	10 82       	st	Z, r1
    150a:	81 e0       	ldi	r24, 0x01	; 1
    150c:	df 91       	pop	r29
    150e:	cf 91       	pop	r28
    1510:	08 95       	ret

00001512 <_ZN6String4copyEPKcj>:
    1512:	ef 92       	push	r14
    1514:	ff 92       	push	r15
    1516:	0f 93       	push	r16
    1518:	1f 93       	push	r17
    151a:	cf 93       	push	r28
    151c:	df 93       	push	r29
    151e:	ec 01       	movw	r28, r24
    1520:	7b 01       	movw	r14, r22
    1522:	8a 01       	movw	r16, r20
    1524:	ba 01       	movw	r22, r20
    1526:	da df       	rcall	.-76     	; 0x14dc <_ZN6String7reserveEj>
    1528:	81 11       	cpse	r24, r1
    152a:	03 c0       	rjmp	.+6      	; 0x1532 <_ZN6String4copyEPKcj+0x20>
    152c:	ce 01       	movw	r24, r28
    152e:	ac df       	rcall	.-168    	; 0x1488 <_ZN6String10invalidateEv>
    1530:	06 c0       	rjmp	.+12     	; 0x153e <_ZN6String4copyEPKcj+0x2c>
    1532:	1d 83       	std	Y+5, r17	; 0x05
    1534:	0c 83       	std	Y+4, r16	; 0x04
    1536:	b7 01       	movw	r22, r14
    1538:	88 81       	ld	r24, Y
    153a:	99 81       	ldd	r25, Y+1	; 0x01
    153c:	af d4       	rcall	.+2398   	; 0x1e9c <strcpy>
    153e:	ce 01       	movw	r24, r28
    1540:	df 91       	pop	r29
    1542:	cf 91       	pop	r28
    1544:	1f 91       	pop	r17
    1546:	0f 91       	pop	r16
    1548:	ff 90       	pop	r15
    154a:	ef 90       	pop	r14
    154c:	08 95       	ret

0000154e <_ZN6StringC1EPKc>:
    154e:	fc 01       	movw	r30, r24
    1550:	11 82       	std	Z+1, r1	; 0x01
    1552:	10 82       	st	Z, r1
    1554:	13 82       	std	Z+3, r1	; 0x03
    1556:	12 82       	std	Z+2, r1	; 0x02
    1558:	15 82       	std	Z+5, r1	; 0x05
    155a:	14 82       	std	Z+4, r1	; 0x04
    155c:	61 15       	cp	r22, r1
    155e:	71 05       	cpc	r23, r1
    1560:	49 f0       	breq	.+18     	; 0x1574 <_ZN6StringC1EPKc+0x26>
    1562:	fb 01       	movw	r30, r22
    1564:	01 90       	ld	r0, Z+
    1566:	00 20       	and	r0, r0
    1568:	e9 f7       	brne	.-6      	; 0x1564 <_ZN6StringC1EPKc+0x16>
    156a:	31 97       	sbiw	r30, 0x01	; 1
    156c:	af 01       	movw	r20, r30
    156e:	46 1b       	sub	r20, r22
    1570:	57 0b       	sbc	r21, r23
    1572:	cf cf       	rjmp	.-98     	; 0x1512 <_ZN6String4copyEPKcj>
    1574:	08 95       	ret

00001576 <_ZN6String6concatEPKcj>:
    1576:	ef 92       	push	r14
    1578:	ff 92       	push	r15
    157a:	0f 93       	push	r16
    157c:	1f 93       	push	r17
    157e:	cf 93       	push	r28
    1580:	df 93       	push	r29
    1582:	61 15       	cp	r22, r1
    1584:	71 05       	cpc	r23, r1
    1586:	11 f4       	brne	.+4      	; 0x158c <_ZN6String6concatEPKcj+0x16>
    1588:	80 e0       	ldi	r24, 0x00	; 0
    158a:	1a c0       	rjmp	.+52     	; 0x15c0 <_ZN6String6concatEPKcj+0x4a>
    158c:	41 15       	cp	r20, r1
    158e:	51 05       	cpc	r21, r1
    1590:	b1 f0       	breq	.+44     	; 0x15be <_ZN6String6concatEPKcj+0x48>
    1592:	7b 01       	movw	r14, r22
    1594:	ec 01       	movw	r28, r24
    1596:	8c 81       	ldd	r24, Y+4	; 0x04
    1598:	9d 81       	ldd	r25, Y+5	; 0x05
    159a:	8a 01       	movw	r16, r20
    159c:	08 0f       	add	r16, r24
    159e:	19 1f       	adc	r17, r25
    15a0:	b8 01       	movw	r22, r16
    15a2:	ce 01       	movw	r24, r28
    15a4:	9b df       	rcall	.-202    	; 0x14dc <_ZN6String7reserveEj>
    15a6:	88 23       	and	r24, r24
    15a8:	79 f3       	breq	.-34     	; 0x1588 <_ZN6String6concatEPKcj+0x12>
    15aa:	28 81       	ld	r18, Y
    15ac:	39 81       	ldd	r19, Y+1	; 0x01
    15ae:	8c 81       	ldd	r24, Y+4	; 0x04
    15b0:	9d 81       	ldd	r25, Y+5	; 0x05
    15b2:	b7 01       	movw	r22, r14
    15b4:	82 0f       	add	r24, r18
    15b6:	93 1f       	adc	r25, r19
    15b8:	71 d4       	rcall	.+2274   	; 0x1e9c <strcpy>
    15ba:	1d 83       	std	Y+5, r17	; 0x05
    15bc:	0c 83       	std	Y+4, r16	; 0x04
    15be:	81 e0       	ldi	r24, 0x01	; 1
    15c0:	df 91       	pop	r29
    15c2:	cf 91       	pop	r28
    15c4:	1f 91       	pop	r17
    15c6:	0f 91       	pop	r16
    15c8:	ff 90       	pop	r15
    15ca:	ef 90       	pop	r14
    15cc:	08 95       	ret

000015ce <_ZN6String6concatEc>:
    15ce:	cf 93       	push	r28
    15d0:	df 93       	push	r29
    15d2:	1f 92       	push	r1
    15d4:	1f 92       	push	r1
    15d6:	cd b7       	in	r28, 0x3d	; 61
    15d8:	de b7       	in	r29, 0x3e	; 62
    15da:	69 83       	std	Y+1, r22	; 0x01
    15dc:	1a 82       	std	Y+2, r1	; 0x02
    15de:	41 e0       	ldi	r20, 0x01	; 1
    15e0:	50 e0       	ldi	r21, 0x00	; 0
    15e2:	be 01       	movw	r22, r28
    15e4:	6f 5f       	subi	r22, 0xFF	; 255
    15e6:	7f 4f       	sbci	r23, 0xFF	; 255
    15e8:	c6 df       	rcall	.-116    	; 0x1576 <_ZN6String6concatEPKcj>
    15ea:	0f 90       	pop	r0
    15ec:	0f 90       	pop	r0
    15ee:	df 91       	pop	r29
    15f0:	cf 91       	pop	r28
    15f2:	08 95       	ret

000015f4 <_ZNK6String8getBytesEPhjj>:
	if (index >= len || !buffer) return 0;
	return buffer[index];
}

void String::getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index) const
{
    15f4:	0f 93       	push	r16
    15f6:	1f 93       	push	r17
    15f8:	cf 93       	push	r28
    15fa:	df 93       	push	r29
	if (!bufsize || !buf) return;
    15fc:	41 15       	cp	r20, r1
    15fe:	51 05       	cpc	r21, r1
    1600:	11 f1       	breq	.+68     	; 0x1646 <_ZNK6String8getBytesEPhjj+0x52>
    1602:	61 15       	cp	r22, r1
    1604:	71 05       	cpc	r23, r1
    1606:	f9 f0       	breq	.+62     	; 0x1646 <_ZNK6String8getBytesEPhjj+0x52>
	if (index >= len) {
    1608:	dc 01       	movw	r26, r24
    160a:	14 96       	adiw	r26, 0x04	; 4
    160c:	ed 91       	ld	r30, X+
    160e:	fc 91       	ld	r31, X
    1610:	15 97       	sbiw	r26, 0x05	; 5
    1612:	2e 17       	cp	r18, r30
    1614:	3f 07       	cpc	r19, r31
    1616:	18 f0       	brcs	.+6      	; 0x161e <_ZNK6String8getBytesEPhjj+0x2a>
		buf[0] = 0;
    1618:	fb 01       	movw	r30, r22
    161a:	10 82       	st	Z, r1
		return;
    161c:	14 c0       	rjmp	.+40     	; 0x1646 <_ZNK6String8getBytesEPhjj+0x52>
	}
	unsigned int n = bufsize - 1;
	if (n > len - index) n = len - index;
    161e:	e2 1b       	sub	r30, r18
    1620:	f3 0b       	sbc	r31, r19
    1622:	ea 01       	movw	r28, r20
    1624:	21 97       	sbiw	r28, 0x01	; 1
    1626:	ec 17       	cp	r30, r28
    1628:	fd 07       	cpc	r31, r29
    162a:	08 f4       	brcc	.+2      	; 0x162e <_ZNK6String8getBytesEPhjj+0x3a>
    162c:	ef 01       	movw	r28, r30
    162e:	8b 01       	movw	r16, r22
    1630:	fc 01       	movw	r30, r24
	strncpy((char *)buf, buffer + index, n);
    1632:	60 81       	ld	r22, Z
    1634:	71 81       	ldd	r23, Z+1	; 0x01
    1636:	62 0f       	add	r22, r18
    1638:	73 1f       	adc	r23, r19
    163a:	ae 01       	movw	r20, r28
    163c:	c8 01       	movw	r24, r16
    163e:	3f d4       	rcall	.+2174   	; 0x1ebe <strncpy>
	buf[n] = 0;
    1640:	c0 0f       	add	r28, r16
    1642:	d1 1f       	adc	r29, r17
    1644:	18 82       	st	Y, r1
}
    1646:	df 91       	pop	r29
    1648:	cf 91       	pop	r28
    164a:	1f 91       	pop	r17
    164c:	0f 91       	pop	r16
    164e:	08 95       	ret

00001650 <__mulsf3>:
    1650:	0b d0       	rcall	.+22     	; 0x1668 <__mulsf3x>
    1652:	88 ca       	rjmp	.-2800   	; 0xb64 <__fp_round>
    1654:	79 da       	rcall	.-2830   	; 0xb48 <__fp_pscA>
    1656:	28 f0       	brcs	.+10     	; 0x1662 <__mulsf3+0x12>
    1658:	7e da       	rcall	.-2820   	; 0xb56 <__fp_pscB>
    165a:	18 f0       	brcs	.+6      	; 0x1662 <__mulsf3+0x12>
    165c:	95 23       	and	r25, r21
    165e:	09 f0       	breq	.+2      	; 0x1662 <__mulsf3+0x12>
    1660:	6a ca       	rjmp	.-2860   	; 0xb36 <__fp_inf>
    1662:	6f ca       	rjmp	.-2850   	; 0xb42 <__fp_nan>
    1664:	11 24       	eor	r1, r1
    1666:	b2 ca       	rjmp	.-2716   	; 0xbcc <__fp_szero>

00001668 <__mulsf3x>:
    1668:	8e da       	rcall	.-2788   	; 0xb86 <__fp_split3>
    166a:	a0 f3       	brcs	.-24     	; 0x1654 <__mulsf3+0x4>

0000166c <__mulsf3_pse>:
    166c:	95 9f       	mul	r25, r21
    166e:	d1 f3       	breq	.-12     	; 0x1664 <__mulsf3+0x14>
    1670:	95 0f       	add	r25, r21
    1672:	50 e0       	ldi	r21, 0x00	; 0
    1674:	55 1f       	adc	r21, r21
    1676:	62 9f       	mul	r22, r18
    1678:	f0 01       	movw	r30, r0
    167a:	72 9f       	mul	r23, r18
    167c:	bb 27       	eor	r27, r27
    167e:	f0 0d       	add	r31, r0
    1680:	b1 1d       	adc	r27, r1
    1682:	63 9f       	mul	r22, r19
    1684:	aa 27       	eor	r26, r26
    1686:	f0 0d       	add	r31, r0
    1688:	b1 1d       	adc	r27, r1
    168a:	aa 1f       	adc	r26, r26
    168c:	64 9f       	mul	r22, r20
    168e:	66 27       	eor	r22, r22
    1690:	b0 0d       	add	r27, r0
    1692:	a1 1d       	adc	r26, r1
    1694:	66 1f       	adc	r22, r22
    1696:	82 9f       	mul	r24, r18
    1698:	22 27       	eor	r18, r18
    169a:	b0 0d       	add	r27, r0
    169c:	a1 1d       	adc	r26, r1
    169e:	62 1f       	adc	r22, r18
    16a0:	73 9f       	mul	r23, r19
    16a2:	b0 0d       	add	r27, r0
    16a4:	a1 1d       	adc	r26, r1
    16a6:	62 1f       	adc	r22, r18
    16a8:	83 9f       	mul	r24, r19
    16aa:	a0 0d       	add	r26, r0
    16ac:	61 1d       	adc	r22, r1
    16ae:	22 1f       	adc	r18, r18
    16b0:	74 9f       	mul	r23, r20
    16b2:	33 27       	eor	r19, r19
    16b4:	a0 0d       	add	r26, r0
    16b6:	61 1d       	adc	r22, r1
    16b8:	23 1f       	adc	r18, r19
    16ba:	84 9f       	mul	r24, r20
    16bc:	60 0d       	add	r22, r0
    16be:	21 1d       	adc	r18, r1
    16c0:	82 2f       	mov	r24, r18
    16c2:	76 2f       	mov	r23, r22
    16c4:	6a 2f       	mov	r22, r26
    16c6:	11 24       	eor	r1, r1
    16c8:	9f 57       	subi	r25, 0x7F	; 127
    16ca:	50 40       	sbci	r21, 0x00	; 0
    16cc:	8a f0       	brmi	.+34     	; 0x16f0 <__mulsf3_pse+0x84>
    16ce:	e1 f0       	breq	.+56     	; 0x1708 <__mulsf3_pse+0x9c>
    16d0:	88 23       	and	r24, r24
    16d2:	4a f0       	brmi	.+18     	; 0x16e6 <__mulsf3_pse+0x7a>
    16d4:	ee 0f       	add	r30, r30
    16d6:	ff 1f       	adc	r31, r31
    16d8:	bb 1f       	adc	r27, r27
    16da:	66 1f       	adc	r22, r22
    16dc:	77 1f       	adc	r23, r23
    16de:	88 1f       	adc	r24, r24
    16e0:	91 50       	subi	r25, 0x01	; 1
    16e2:	50 40       	sbci	r21, 0x00	; 0
    16e4:	a9 f7       	brne	.-22     	; 0x16d0 <__mulsf3_pse+0x64>
    16e6:	9e 3f       	cpi	r25, 0xFE	; 254
    16e8:	51 05       	cpc	r21, r1
    16ea:	70 f0       	brcs	.+28     	; 0x1708 <__mulsf3_pse+0x9c>
    16ec:	24 ca       	rjmp	.-3000   	; 0xb36 <__fp_inf>
    16ee:	6e ca       	rjmp	.-2852   	; 0xbcc <__fp_szero>
    16f0:	5f 3f       	cpi	r21, 0xFF	; 255
    16f2:	ec f3       	brlt	.-6      	; 0x16ee <__mulsf3_pse+0x82>
    16f4:	98 3e       	cpi	r25, 0xE8	; 232
    16f6:	dc f3       	brlt	.-10     	; 0x16ee <__mulsf3_pse+0x82>
    16f8:	86 95       	lsr	r24
    16fa:	77 95       	ror	r23
    16fc:	67 95       	ror	r22
    16fe:	b7 95       	ror	r27
    1700:	f7 95       	ror	r31
    1702:	e7 95       	ror	r30
    1704:	9f 5f       	subi	r25, 0xFF	; 255
    1706:	c1 f7       	brne	.-16     	; 0x16f8 <__mulsf3_pse+0x8c>
    1708:	fe 2b       	or	r31, r30
    170a:	88 0f       	add	r24, r24
    170c:	91 1d       	adc	r25, r1
    170e:	96 95       	lsr	r25
    1710:	87 95       	ror	r24
    1712:	97 f9       	bld	r25, 7
    1714:	08 95       	ret

00001716 <__udivmodsi4>:
    1716:	a1 e2       	ldi	r26, 0x21	; 33
    1718:	1a 2e       	mov	r1, r26
    171a:	aa 1b       	sub	r26, r26
    171c:	bb 1b       	sub	r27, r27
    171e:	fd 01       	movw	r30, r26
    1720:	0d c0       	rjmp	.+26     	; 0x173c <__udivmodsi4_ep>

00001722 <__udivmodsi4_loop>:
    1722:	aa 1f       	adc	r26, r26
    1724:	bb 1f       	adc	r27, r27
    1726:	ee 1f       	adc	r30, r30
    1728:	ff 1f       	adc	r31, r31
    172a:	a2 17       	cp	r26, r18
    172c:	b3 07       	cpc	r27, r19
    172e:	e4 07       	cpc	r30, r20
    1730:	f5 07       	cpc	r31, r21
    1732:	20 f0       	brcs	.+8      	; 0x173c <__udivmodsi4_ep>
    1734:	a2 1b       	sub	r26, r18
    1736:	b3 0b       	sbc	r27, r19
    1738:	e4 0b       	sbc	r30, r20
    173a:	f5 0b       	sbc	r31, r21

0000173c <__udivmodsi4_ep>:
    173c:	66 1f       	adc	r22, r22
    173e:	77 1f       	adc	r23, r23
    1740:	88 1f       	adc	r24, r24
    1742:	99 1f       	adc	r25, r25
    1744:	1a 94       	dec	r1
    1746:	69 f7       	brne	.-38     	; 0x1722 <__udivmodsi4_loop>
    1748:	60 95       	com	r22
    174a:	70 95       	com	r23
    174c:	80 95       	com	r24
    174e:	90 95       	com	r25
    1750:	9b 01       	movw	r18, r22
    1752:	ac 01       	movw	r20, r24
    1754:	bd 01       	movw	r22, r26
    1756:	cf 01       	movw	r24, r30
    1758:	08 95       	ret

0000175a <__tablejump2__>:
    175a:	ee 0f       	add	r30, r30
    175c:	ff 1f       	adc	r31, r31
    175e:	88 1f       	adc	r24, r24
    1760:	8b bf       	out	0x3b, r24	; 59
    1762:	07 90       	elpm	r0, Z+
    1764:	f6 91       	elpm	r31, Z
    1766:	e0 2d       	mov	r30, r0
    1768:	19 94       	eijmp

0000176a <__muluhisi3>:
    176a:	09 d0       	rcall	.+18     	; 0x177e <__umulhisi3>
    176c:	a5 9f       	mul	r26, r21
    176e:	90 0d       	add	r25, r0
    1770:	b4 9f       	mul	r27, r20
    1772:	90 0d       	add	r25, r0
    1774:	a4 9f       	mul	r26, r20
    1776:	80 0d       	add	r24, r0
    1778:	91 1d       	adc	r25, r1
    177a:	11 24       	eor	r1, r1
    177c:	08 95       	ret

0000177e <__umulhisi3>:
    177e:	a2 9f       	mul	r26, r18
    1780:	b0 01       	movw	r22, r0
    1782:	b3 9f       	mul	r27, r19
    1784:	c0 01       	movw	r24, r0
    1786:	a3 9f       	mul	r26, r19
    1788:	70 0d       	add	r23, r0
    178a:	81 1d       	adc	r24, r1
    178c:	11 24       	eor	r1, r1
    178e:	91 1d       	adc	r25, r1
    1790:	b2 9f       	mul	r27, r18
    1792:	70 0d       	add	r23, r0
    1794:	81 1d       	adc	r24, r1
    1796:	11 24       	eor	r1, r1
    1798:	91 1d       	adc	r25, r1
    179a:	08 95       	ret

0000179c <malloc>:
    179c:	0f 93       	push	r16
    179e:	1f 93       	push	r17
    17a0:	cf 93       	push	r28
    17a2:	df 93       	push	r29
    17a4:	82 30       	cpi	r24, 0x02	; 2
    17a6:	91 05       	cpc	r25, r1
    17a8:	10 f4       	brcc	.+4      	; 0x17ae <malloc+0x12>
    17aa:	82 e0       	ldi	r24, 0x02	; 2
    17ac:	90 e0       	ldi	r25, 0x00	; 0
    17ae:	e0 91 e9 02 	lds	r30, 0x02E9	; 0x8002e9 <__flp>
    17b2:	f0 91 ea 02 	lds	r31, 0x02EA	; 0x8002ea <__flp+0x1>
    17b6:	20 e0       	ldi	r18, 0x00	; 0
    17b8:	30 e0       	ldi	r19, 0x00	; 0
    17ba:	a0 e0       	ldi	r26, 0x00	; 0
    17bc:	b0 e0       	ldi	r27, 0x00	; 0
    17be:	30 97       	sbiw	r30, 0x00	; 0
    17c0:	19 f1       	breq	.+70     	; 0x1808 <malloc+0x6c>
    17c2:	40 81       	ld	r20, Z
    17c4:	51 81       	ldd	r21, Z+1	; 0x01
    17c6:	02 81       	ldd	r16, Z+2	; 0x02
    17c8:	13 81       	ldd	r17, Z+3	; 0x03
    17ca:	48 17       	cp	r20, r24
    17cc:	59 07       	cpc	r21, r25
    17ce:	c8 f0       	brcs	.+50     	; 0x1802 <malloc+0x66>
    17d0:	84 17       	cp	r24, r20
    17d2:	95 07       	cpc	r25, r21
    17d4:	69 f4       	brne	.+26     	; 0x17f0 <malloc+0x54>
    17d6:	10 97       	sbiw	r26, 0x00	; 0
    17d8:	31 f0       	breq	.+12     	; 0x17e6 <malloc+0x4a>
    17da:	12 96       	adiw	r26, 0x02	; 2
    17dc:	0c 93       	st	X, r16
    17de:	12 97       	sbiw	r26, 0x02	; 2
    17e0:	13 96       	adiw	r26, 0x03	; 3
    17e2:	1c 93       	st	X, r17
    17e4:	27 c0       	rjmp	.+78     	; 0x1834 <malloc+0x98>
    17e6:	00 93 e9 02 	sts	0x02E9, r16	; 0x8002e9 <__flp>
    17ea:	10 93 ea 02 	sts	0x02EA, r17	; 0x8002ea <__flp+0x1>
    17ee:	22 c0       	rjmp	.+68     	; 0x1834 <malloc+0x98>
    17f0:	21 15       	cp	r18, r1
    17f2:	31 05       	cpc	r19, r1
    17f4:	19 f0       	breq	.+6      	; 0x17fc <malloc+0x60>
    17f6:	42 17       	cp	r20, r18
    17f8:	53 07       	cpc	r21, r19
    17fa:	18 f4       	brcc	.+6      	; 0x1802 <malloc+0x66>
    17fc:	9a 01       	movw	r18, r20
    17fe:	bd 01       	movw	r22, r26
    1800:	ef 01       	movw	r28, r30
    1802:	df 01       	movw	r26, r30
    1804:	f8 01       	movw	r30, r16
    1806:	db cf       	rjmp	.-74     	; 0x17be <malloc+0x22>
    1808:	21 15       	cp	r18, r1
    180a:	31 05       	cpc	r19, r1
    180c:	f9 f0       	breq	.+62     	; 0x184c <malloc+0xb0>
    180e:	28 1b       	sub	r18, r24
    1810:	39 0b       	sbc	r19, r25
    1812:	24 30       	cpi	r18, 0x04	; 4
    1814:	31 05       	cpc	r19, r1
    1816:	80 f4       	brcc	.+32     	; 0x1838 <malloc+0x9c>
    1818:	8a 81       	ldd	r24, Y+2	; 0x02
    181a:	9b 81       	ldd	r25, Y+3	; 0x03
    181c:	61 15       	cp	r22, r1
    181e:	71 05       	cpc	r23, r1
    1820:	21 f0       	breq	.+8      	; 0x182a <malloc+0x8e>
    1822:	fb 01       	movw	r30, r22
    1824:	93 83       	std	Z+3, r25	; 0x03
    1826:	82 83       	std	Z+2, r24	; 0x02
    1828:	04 c0       	rjmp	.+8      	; 0x1832 <malloc+0x96>
    182a:	90 93 ea 02 	sts	0x02EA, r25	; 0x8002ea <__flp+0x1>
    182e:	80 93 e9 02 	sts	0x02E9, r24	; 0x8002e9 <__flp>
    1832:	fe 01       	movw	r30, r28
    1834:	32 96       	adiw	r30, 0x02	; 2
    1836:	44 c0       	rjmp	.+136    	; 0x18c0 <malloc+0x124>
    1838:	fe 01       	movw	r30, r28
    183a:	e2 0f       	add	r30, r18
    183c:	f3 1f       	adc	r31, r19
    183e:	81 93       	st	Z+, r24
    1840:	91 93       	st	Z+, r25
    1842:	22 50       	subi	r18, 0x02	; 2
    1844:	31 09       	sbc	r19, r1
    1846:	39 83       	std	Y+1, r19	; 0x01
    1848:	28 83       	st	Y, r18
    184a:	3a c0       	rjmp	.+116    	; 0x18c0 <malloc+0x124>
    184c:	20 91 e7 02 	lds	r18, 0x02E7	; 0x8002e7 <__brkval>
    1850:	30 91 e8 02 	lds	r19, 0x02E8	; 0x8002e8 <__brkval+0x1>
    1854:	23 2b       	or	r18, r19
    1856:	41 f4       	brne	.+16     	; 0x1868 <malloc+0xcc>
    1858:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <__malloc_heap_start>
    185c:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <__malloc_heap_start+0x1>
    1860:	30 93 e8 02 	sts	0x02E8, r19	; 0x8002e8 <__brkval+0x1>
    1864:	20 93 e7 02 	sts	0x02E7, r18	; 0x8002e7 <__brkval>
    1868:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__data_start>
    186c:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__data_start+0x1>
    1870:	21 15       	cp	r18, r1
    1872:	31 05       	cpc	r19, r1
    1874:	41 f4       	brne	.+16     	; 0x1886 <malloc+0xea>
    1876:	2d b7       	in	r18, 0x3d	; 61
    1878:	3e b7       	in	r19, 0x3e	; 62
    187a:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
    187e:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
    1882:	24 1b       	sub	r18, r20
    1884:	35 0b       	sbc	r19, r21
    1886:	e0 91 e7 02 	lds	r30, 0x02E7	; 0x8002e7 <__brkval>
    188a:	f0 91 e8 02 	lds	r31, 0x02E8	; 0x8002e8 <__brkval+0x1>
    188e:	e2 17       	cp	r30, r18
    1890:	f3 07       	cpc	r31, r19
    1892:	a0 f4       	brcc	.+40     	; 0x18bc <malloc+0x120>
    1894:	2e 1b       	sub	r18, r30
    1896:	3f 0b       	sbc	r19, r31
    1898:	28 17       	cp	r18, r24
    189a:	39 07       	cpc	r19, r25
    189c:	78 f0       	brcs	.+30     	; 0x18bc <malloc+0x120>
    189e:	ac 01       	movw	r20, r24
    18a0:	4e 5f       	subi	r20, 0xFE	; 254
    18a2:	5f 4f       	sbci	r21, 0xFF	; 255
    18a4:	24 17       	cp	r18, r20
    18a6:	35 07       	cpc	r19, r21
    18a8:	48 f0       	brcs	.+18     	; 0x18bc <malloc+0x120>
    18aa:	4e 0f       	add	r20, r30
    18ac:	5f 1f       	adc	r21, r31
    18ae:	50 93 e8 02 	sts	0x02E8, r21	; 0x8002e8 <__brkval+0x1>
    18b2:	40 93 e7 02 	sts	0x02E7, r20	; 0x8002e7 <__brkval>
    18b6:	81 93       	st	Z+, r24
    18b8:	91 93       	st	Z+, r25
    18ba:	02 c0       	rjmp	.+4      	; 0x18c0 <malloc+0x124>
    18bc:	e0 e0       	ldi	r30, 0x00	; 0
    18be:	f0 e0       	ldi	r31, 0x00	; 0
    18c0:	cf 01       	movw	r24, r30
    18c2:	df 91       	pop	r29
    18c4:	cf 91       	pop	r28
    18c6:	1f 91       	pop	r17
    18c8:	0f 91       	pop	r16
    18ca:	08 95       	ret

000018cc <free>:
    18cc:	cf 93       	push	r28
    18ce:	df 93       	push	r29
    18d0:	00 97       	sbiw	r24, 0x00	; 0
    18d2:	09 f4       	brne	.+2      	; 0x18d6 <free+0xa>
    18d4:	81 c0       	rjmp	.+258    	; 0x19d8 <free+0x10c>
    18d6:	fc 01       	movw	r30, r24
    18d8:	32 97       	sbiw	r30, 0x02	; 2
    18da:	13 82       	std	Z+3, r1	; 0x03
    18dc:	12 82       	std	Z+2, r1	; 0x02
    18de:	a0 91 e9 02 	lds	r26, 0x02E9	; 0x8002e9 <__flp>
    18e2:	b0 91 ea 02 	lds	r27, 0x02EA	; 0x8002ea <__flp+0x1>
    18e6:	10 97       	sbiw	r26, 0x00	; 0
    18e8:	81 f4       	brne	.+32     	; 0x190a <free+0x3e>
    18ea:	20 81       	ld	r18, Z
    18ec:	31 81       	ldd	r19, Z+1	; 0x01
    18ee:	82 0f       	add	r24, r18
    18f0:	93 1f       	adc	r25, r19
    18f2:	20 91 e7 02 	lds	r18, 0x02E7	; 0x8002e7 <__brkval>
    18f6:	30 91 e8 02 	lds	r19, 0x02E8	; 0x8002e8 <__brkval+0x1>
    18fa:	28 17       	cp	r18, r24
    18fc:	39 07       	cpc	r19, r25
    18fe:	51 f5       	brne	.+84     	; 0x1954 <free+0x88>
    1900:	f0 93 e8 02 	sts	0x02E8, r31	; 0x8002e8 <__brkval+0x1>
    1904:	e0 93 e7 02 	sts	0x02E7, r30	; 0x8002e7 <__brkval>
    1908:	67 c0       	rjmp	.+206    	; 0x19d8 <free+0x10c>
    190a:	ed 01       	movw	r28, r26
    190c:	20 e0       	ldi	r18, 0x00	; 0
    190e:	30 e0       	ldi	r19, 0x00	; 0
    1910:	ce 17       	cp	r28, r30
    1912:	df 07       	cpc	r29, r31
    1914:	40 f4       	brcc	.+16     	; 0x1926 <free+0x5a>
    1916:	4a 81       	ldd	r20, Y+2	; 0x02
    1918:	5b 81       	ldd	r21, Y+3	; 0x03
    191a:	9e 01       	movw	r18, r28
    191c:	41 15       	cp	r20, r1
    191e:	51 05       	cpc	r21, r1
    1920:	f1 f0       	breq	.+60     	; 0x195e <free+0x92>
    1922:	ea 01       	movw	r28, r20
    1924:	f5 cf       	rjmp	.-22     	; 0x1910 <free+0x44>
    1926:	d3 83       	std	Z+3, r29	; 0x03
    1928:	c2 83       	std	Z+2, r28	; 0x02
    192a:	40 81       	ld	r20, Z
    192c:	51 81       	ldd	r21, Z+1	; 0x01
    192e:	84 0f       	add	r24, r20
    1930:	95 1f       	adc	r25, r21
    1932:	c8 17       	cp	r28, r24
    1934:	d9 07       	cpc	r29, r25
    1936:	59 f4       	brne	.+22     	; 0x194e <free+0x82>
    1938:	88 81       	ld	r24, Y
    193a:	99 81       	ldd	r25, Y+1	; 0x01
    193c:	84 0f       	add	r24, r20
    193e:	95 1f       	adc	r25, r21
    1940:	02 96       	adiw	r24, 0x02	; 2
    1942:	91 83       	std	Z+1, r25	; 0x01
    1944:	80 83       	st	Z, r24
    1946:	8a 81       	ldd	r24, Y+2	; 0x02
    1948:	9b 81       	ldd	r25, Y+3	; 0x03
    194a:	93 83       	std	Z+3, r25	; 0x03
    194c:	82 83       	std	Z+2, r24	; 0x02
    194e:	21 15       	cp	r18, r1
    1950:	31 05       	cpc	r19, r1
    1952:	29 f4       	brne	.+10     	; 0x195e <free+0x92>
    1954:	f0 93 ea 02 	sts	0x02EA, r31	; 0x8002ea <__flp+0x1>
    1958:	e0 93 e9 02 	sts	0x02E9, r30	; 0x8002e9 <__flp>
    195c:	3d c0       	rjmp	.+122    	; 0x19d8 <free+0x10c>
    195e:	e9 01       	movw	r28, r18
    1960:	fb 83       	std	Y+3, r31	; 0x03
    1962:	ea 83       	std	Y+2, r30	; 0x02
    1964:	49 91       	ld	r20, Y+
    1966:	59 91       	ld	r21, Y+
    1968:	c4 0f       	add	r28, r20
    196a:	d5 1f       	adc	r29, r21
    196c:	ec 17       	cp	r30, r28
    196e:	fd 07       	cpc	r31, r29
    1970:	61 f4       	brne	.+24     	; 0x198a <free+0xbe>
    1972:	80 81       	ld	r24, Z
    1974:	91 81       	ldd	r25, Z+1	; 0x01
    1976:	84 0f       	add	r24, r20
    1978:	95 1f       	adc	r25, r21
    197a:	02 96       	adiw	r24, 0x02	; 2
    197c:	e9 01       	movw	r28, r18
    197e:	99 83       	std	Y+1, r25	; 0x01
    1980:	88 83       	st	Y, r24
    1982:	82 81       	ldd	r24, Z+2	; 0x02
    1984:	93 81       	ldd	r25, Z+3	; 0x03
    1986:	9b 83       	std	Y+3, r25	; 0x03
    1988:	8a 83       	std	Y+2, r24	; 0x02
    198a:	e0 e0       	ldi	r30, 0x00	; 0
    198c:	f0 e0       	ldi	r31, 0x00	; 0
    198e:	12 96       	adiw	r26, 0x02	; 2
    1990:	8d 91       	ld	r24, X+
    1992:	9c 91       	ld	r25, X
    1994:	13 97       	sbiw	r26, 0x03	; 3
    1996:	00 97       	sbiw	r24, 0x00	; 0
    1998:	19 f0       	breq	.+6      	; 0x19a0 <free+0xd4>
    199a:	fd 01       	movw	r30, r26
    199c:	dc 01       	movw	r26, r24
    199e:	f7 cf       	rjmp	.-18     	; 0x198e <free+0xc2>
    19a0:	8d 91       	ld	r24, X+
    19a2:	9c 91       	ld	r25, X
    19a4:	11 97       	sbiw	r26, 0x01	; 1
    19a6:	9d 01       	movw	r18, r26
    19a8:	2e 5f       	subi	r18, 0xFE	; 254
    19aa:	3f 4f       	sbci	r19, 0xFF	; 255
    19ac:	82 0f       	add	r24, r18
    19ae:	93 1f       	adc	r25, r19
    19b0:	20 91 e7 02 	lds	r18, 0x02E7	; 0x8002e7 <__brkval>
    19b4:	30 91 e8 02 	lds	r19, 0x02E8	; 0x8002e8 <__brkval+0x1>
    19b8:	28 17       	cp	r18, r24
    19ba:	39 07       	cpc	r19, r25
    19bc:	69 f4       	brne	.+26     	; 0x19d8 <free+0x10c>
    19be:	30 97       	sbiw	r30, 0x00	; 0
    19c0:	29 f4       	brne	.+10     	; 0x19cc <free+0x100>
    19c2:	10 92 ea 02 	sts	0x02EA, r1	; 0x8002ea <__flp+0x1>
    19c6:	10 92 e9 02 	sts	0x02E9, r1	; 0x8002e9 <__flp>
    19ca:	02 c0       	rjmp	.+4      	; 0x19d0 <free+0x104>
    19cc:	13 82       	std	Z+3, r1	; 0x03
    19ce:	12 82       	std	Z+2, r1	; 0x02
    19d0:	b0 93 e8 02 	sts	0x02E8, r27	; 0x8002e8 <__brkval+0x1>
    19d4:	a0 93 e7 02 	sts	0x02E7, r26	; 0x8002e7 <__brkval>
    19d8:	df 91       	pop	r29
    19da:	cf 91       	pop	r28
    19dc:	08 95       	ret

000019de <realloc>:
    19de:	6f 92       	push	r6
    19e0:	7f 92       	push	r7
    19e2:	8f 92       	push	r8
    19e4:	9f 92       	push	r9
    19e6:	af 92       	push	r10
    19e8:	bf 92       	push	r11
    19ea:	cf 92       	push	r12
    19ec:	df 92       	push	r13
    19ee:	ef 92       	push	r14
    19f0:	ff 92       	push	r15
    19f2:	0f 93       	push	r16
    19f4:	1f 93       	push	r17
    19f6:	cf 93       	push	r28
    19f8:	df 93       	push	r29
    19fa:	00 97       	sbiw	r24, 0x00	; 0
    19fc:	81 f4       	brne	.+32     	; 0x1a1e <realloc+0x40>
    19fe:	cb 01       	movw	r24, r22
    1a00:	df 91       	pop	r29
    1a02:	cf 91       	pop	r28
    1a04:	1f 91       	pop	r17
    1a06:	0f 91       	pop	r16
    1a08:	ff 90       	pop	r15
    1a0a:	ef 90       	pop	r14
    1a0c:	df 90       	pop	r13
    1a0e:	cf 90       	pop	r12
    1a10:	bf 90       	pop	r11
    1a12:	af 90       	pop	r10
    1a14:	9f 90       	pop	r9
    1a16:	8f 90       	pop	r8
    1a18:	7f 90       	pop	r7
    1a1a:	6f 90       	pop	r6
    1a1c:	bf ce       	rjmp	.-642    	; 0x179c <malloc>
    1a1e:	fc 01       	movw	r30, r24
    1a20:	e6 0f       	add	r30, r22
    1a22:	f7 1f       	adc	r31, r23
    1a24:	9c 01       	movw	r18, r24
    1a26:	22 50       	subi	r18, 0x02	; 2
    1a28:	31 09       	sbc	r19, r1
    1a2a:	e2 17       	cp	r30, r18
    1a2c:	f3 07       	cpc	r31, r19
    1a2e:	08 f4       	brcc	.+2      	; 0x1a32 <realloc+0x54>
    1a30:	a5 c0       	rjmp	.+330    	; 0x1b7c <realloc+0x19e>
    1a32:	ec 01       	movw	r28, r24
    1a34:	d9 01       	movw	r26, r18
    1a36:	0d 91       	ld	r16, X+
    1a38:	1c 91       	ld	r17, X
    1a3a:	11 97       	sbiw	r26, 0x01	; 1
    1a3c:	06 17       	cp	r16, r22
    1a3e:	17 07       	cpc	r17, r23
    1a40:	a8 f0       	brcs	.+42     	; 0x1a6c <realloc+0x8e>
    1a42:	05 30       	cpi	r16, 0x05	; 5
    1a44:	11 05       	cpc	r17, r1
    1a46:	08 f4       	brcc	.+2      	; 0x1a4a <realloc+0x6c>
    1a48:	97 c0       	rjmp	.+302    	; 0x1b78 <realloc+0x19a>
    1a4a:	c8 01       	movw	r24, r16
    1a4c:	04 97       	sbiw	r24, 0x04	; 4
    1a4e:	86 17       	cp	r24, r22
    1a50:	97 07       	cpc	r25, r23
    1a52:	08 f4       	brcc	.+2      	; 0x1a56 <realloc+0x78>
    1a54:	91 c0       	rjmp	.+290    	; 0x1b78 <realloc+0x19a>
    1a56:	02 50       	subi	r16, 0x02	; 2
    1a58:	11 09       	sbc	r17, r1
    1a5a:	06 1b       	sub	r16, r22
    1a5c:	17 0b       	sbc	r17, r23
    1a5e:	01 93       	st	Z+, r16
    1a60:	11 93       	st	Z+, r17
    1a62:	6d 93       	st	X+, r22
    1a64:	7c 93       	st	X, r23
    1a66:	cf 01       	movw	r24, r30
    1a68:	31 df       	rcall	.-414    	; 0x18cc <free>
    1a6a:	86 c0       	rjmp	.+268    	; 0x1b78 <realloc+0x19a>
    1a6c:	5b 01       	movw	r10, r22
    1a6e:	a0 1a       	sub	r10, r16
    1a70:	b1 0a       	sbc	r11, r17
    1a72:	4c 01       	movw	r8, r24
    1a74:	80 0e       	add	r8, r16
    1a76:	91 1e       	adc	r9, r17
    1a78:	a0 91 e9 02 	lds	r26, 0x02E9	; 0x8002e9 <__flp>
    1a7c:	b0 91 ea 02 	lds	r27, 0x02EA	; 0x8002ea <__flp+0x1>
    1a80:	61 2c       	mov	r6, r1
    1a82:	71 2c       	mov	r7, r1
    1a84:	e1 2c       	mov	r14, r1
    1a86:	f1 2c       	mov	r15, r1
    1a88:	10 97       	sbiw	r26, 0x00	; 0
    1a8a:	09 f4       	brne	.+2      	; 0x1a8e <realloc+0xb0>
    1a8c:	46 c0       	rjmp	.+140    	; 0x1b1a <realloc+0x13c>
    1a8e:	8d 91       	ld	r24, X+
    1a90:	9c 91       	ld	r25, X
    1a92:	11 97       	sbiw	r26, 0x01	; 1
    1a94:	a8 15       	cp	r26, r8
    1a96:	b9 05       	cpc	r27, r9
    1a98:	b1 f5       	brne	.+108    	; 0x1b06 <realloc+0x128>
    1a9a:	6c 01       	movw	r12, r24
    1a9c:	42 e0       	ldi	r20, 0x02	; 2
    1a9e:	c4 0e       	add	r12, r20
    1aa0:	d1 1c       	adc	r13, r1
    1aa2:	ca 14       	cp	r12, r10
    1aa4:	db 04       	cpc	r13, r11
    1aa6:	78 f1       	brcs	.+94     	; 0x1b06 <realloc+0x128>
    1aa8:	4c 01       	movw	r8, r24
    1aaa:	8a 18       	sub	r8, r10
    1aac:	9b 08       	sbc	r9, r11
    1aae:	64 01       	movw	r12, r8
    1ab0:	42 e0       	ldi	r20, 0x02	; 2
    1ab2:	c4 0e       	add	r12, r20
    1ab4:	d1 1c       	adc	r13, r1
    1ab6:	12 96       	adiw	r26, 0x02	; 2
    1ab8:	bc 90       	ld	r11, X
    1aba:	12 97       	sbiw	r26, 0x02	; 2
    1abc:	13 96       	adiw	r26, 0x03	; 3
    1abe:	ac 91       	ld	r26, X
    1ac0:	b5 e0       	ldi	r27, 0x05	; 5
    1ac2:	cb 16       	cp	r12, r27
    1ac4:	d1 04       	cpc	r13, r1
    1ac6:	40 f0       	brcs	.+16     	; 0x1ad8 <realloc+0xfa>
    1ac8:	b2 82       	std	Z+2, r11	; 0x02
    1aca:	a3 83       	std	Z+3, r26	; 0x03
    1acc:	91 82       	std	Z+1, r9	; 0x01
    1ace:	80 82       	st	Z, r8
    1ad0:	d9 01       	movw	r26, r18
    1ad2:	6d 93       	st	X+, r22
    1ad4:	7c 93       	st	X, r23
    1ad6:	09 c0       	rjmp	.+18     	; 0x1aea <realloc+0x10c>
    1ad8:	0e 5f       	subi	r16, 0xFE	; 254
    1ada:	1f 4f       	sbci	r17, 0xFF	; 255
    1adc:	80 0f       	add	r24, r16
    1ade:	91 1f       	adc	r25, r17
    1ae0:	f9 01       	movw	r30, r18
    1ae2:	91 83       	std	Z+1, r25	; 0x01
    1ae4:	80 83       	st	Z, r24
    1ae6:	eb 2d       	mov	r30, r11
    1ae8:	fa 2f       	mov	r31, r26
    1aea:	e1 14       	cp	r14, r1
    1aec:	f1 04       	cpc	r15, r1
    1aee:	31 f0       	breq	.+12     	; 0x1afc <realloc+0x11e>
    1af0:	d7 01       	movw	r26, r14
    1af2:	13 96       	adiw	r26, 0x03	; 3
    1af4:	fc 93       	st	X, r31
    1af6:	ee 93       	st	-X, r30
    1af8:	12 97       	sbiw	r26, 0x02	; 2
    1afa:	3e c0       	rjmp	.+124    	; 0x1b78 <realloc+0x19a>
    1afc:	f0 93 ea 02 	sts	0x02EA, r31	; 0x8002ea <__flp+0x1>
    1b00:	e0 93 e9 02 	sts	0x02E9, r30	; 0x8002e9 <__flp>
    1b04:	39 c0       	rjmp	.+114    	; 0x1b78 <realloc+0x19a>
    1b06:	68 16       	cp	r6, r24
    1b08:	79 06       	cpc	r7, r25
    1b0a:	08 f4       	brcc	.+2      	; 0x1b0e <realloc+0x130>
    1b0c:	3c 01       	movw	r6, r24
    1b0e:	7d 01       	movw	r14, r26
    1b10:	12 96       	adiw	r26, 0x02	; 2
    1b12:	0d 90       	ld	r0, X+
    1b14:	bc 91       	ld	r27, X
    1b16:	a0 2d       	mov	r26, r0
    1b18:	b7 cf       	rjmp	.-146    	; 0x1a88 <realloc+0xaa>
    1b1a:	80 91 e7 02 	lds	r24, 0x02E7	; 0x8002e7 <__brkval>
    1b1e:	90 91 e8 02 	lds	r25, 0x02E8	; 0x8002e8 <__brkval+0x1>
    1b22:	88 16       	cp	r8, r24
    1b24:	99 06       	cpc	r9, r25
    1b26:	e1 f4       	brne	.+56     	; 0x1b60 <realloc+0x182>
    1b28:	66 16       	cp	r6, r22
    1b2a:	77 06       	cpc	r7, r23
    1b2c:	c8 f4       	brcc	.+50     	; 0x1b60 <realloc+0x182>
    1b2e:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__data_start>
    1b32:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <__data_start+0x1>
    1b36:	00 97       	sbiw	r24, 0x00	; 0
    1b38:	41 f4       	brne	.+16     	; 0x1b4a <realloc+0x16c>
    1b3a:	8d b7       	in	r24, 0x3d	; 61
    1b3c:	9e b7       	in	r25, 0x3e	; 62
    1b3e:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
    1b42:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
    1b46:	84 1b       	sub	r24, r20
    1b48:	95 0b       	sbc	r25, r21
    1b4a:	e8 17       	cp	r30, r24
    1b4c:	f9 07       	cpc	r31, r25
    1b4e:	b0 f4       	brcc	.+44     	; 0x1b7c <realloc+0x19e>
    1b50:	f0 93 e8 02 	sts	0x02E8, r31	; 0x8002e8 <__brkval+0x1>
    1b54:	e0 93 e7 02 	sts	0x02E7, r30	; 0x8002e7 <__brkval>
    1b58:	f9 01       	movw	r30, r18
    1b5a:	71 83       	std	Z+1, r23	; 0x01
    1b5c:	60 83       	st	Z, r22
    1b5e:	0c c0       	rjmp	.+24     	; 0x1b78 <realloc+0x19a>
    1b60:	cb 01       	movw	r24, r22
    1b62:	1c de       	rcall	.-968    	; 0x179c <malloc>
    1b64:	7c 01       	movw	r14, r24
    1b66:	00 97       	sbiw	r24, 0x00	; 0
    1b68:	49 f0       	breq	.+18     	; 0x1b7c <realloc+0x19e>
    1b6a:	a8 01       	movw	r20, r16
    1b6c:	be 01       	movw	r22, r28
    1b6e:	8d d1       	rcall	.+794    	; 0x1e8a <memcpy>
    1b70:	ce 01       	movw	r24, r28
    1b72:	ac de       	rcall	.-680    	; 0x18cc <free>
    1b74:	c7 01       	movw	r24, r14
    1b76:	04 c0       	rjmp	.+8      	; 0x1b80 <realloc+0x1a2>
    1b78:	ce 01       	movw	r24, r28
    1b7a:	02 c0       	rjmp	.+4      	; 0x1b80 <realloc+0x1a2>
    1b7c:	80 e0       	ldi	r24, 0x00	; 0
    1b7e:	90 e0       	ldi	r25, 0x00	; 0
    1b80:	df 91       	pop	r29
    1b82:	cf 91       	pop	r28
    1b84:	1f 91       	pop	r17
    1b86:	0f 91       	pop	r16
    1b88:	ff 90       	pop	r15
    1b8a:	ef 90       	pop	r14
    1b8c:	df 90       	pop	r13
    1b8e:	cf 90       	pop	r12
    1b90:	bf 90       	pop	r11
    1b92:	af 90       	pop	r10
    1b94:	9f 90       	pop	r9
    1b96:	8f 90       	pop	r8
    1b98:	7f 90       	pop	r7
    1b9a:	6f 90       	pop	r6
    1b9c:	08 95       	ret

00001b9e <strtod>:
    1b9e:	8f 92       	push	r8
    1ba0:	9f 92       	push	r9
    1ba2:	af 92       	push	r10
    1ba4:	bf 92       	push	r11
    1ba6:	cf 92       	push	r12
    1ba8:	df 92       	push	r13
    1baa:	ef 92       	push	r14
    1bac:	ff 92       	push	r15
    1bae:	0f 93       	push	r16
    1bb0:	1f 93       	push	r17
    1bb2:	cf 93       	push	r28
    1bb4:	df 93       	push	r29
    1bb6:	ec 01       	movw	r28, r24
    1bb8:	6b 01       	movw	r12, r22
    1bba:	61 15       	cp	r22, r1
    1bbc:	71 05       	cpc	r23, r1
    1bbe:	19 f0       	breq	.+6      	; 0x1bc6 <strtod+0x28>
    1bc0:	fb 01       	movw	r30, r22
    1bc2:	91 83       	std	Z+1, r25	; 0x01
    1bc4:	80 83       	st	Z, r24
    1bc6:	7e 01       	movw	r14, r28
    1bc8:	ff ef       	ldi	r31, 0xFF	; 255
    1bca:	ef 1a       	sub	r14, r31
    1bcc:	ff 0a       	sbc	r15, r31
    1bce:	08 81       	ld	r16, Y
    1bd0:	80 2f       	mov	r24, r16
    1bd2:	90 e0       	ldi	r25, 0x00	; 0
    1bd4:	3a d1       	rcall	.+628    	; 0x1e4a <isspace>
    1bd6:	89 2b       	or	r24, r25
    1bd8:	11 f0       	breq	.+4      	; 0x1bde <strtod+0x40>
    1bda:	e7 01       	movw	r28, r14
    1bdc:	f4 cf       	rjmp	.-24     	; 0x1bc6 <strtod+0x28>
    1bde:	0d 32       	cpi	r16, 0x2D	; 45
    1be0:	39 f4       	brne	.+14     	; 0x1bf0 <strtod+0x52>
    1be2:	7e 01       	movw	r14, r28
    1be4:	82 e0       	ldi	r24, 0x02	; 2
    1be6:	e8 0e       	add	r14, r24
    1be8:	f1 1c       	adc	r15, r1
    1bea:	09 81       	ldd	r16, Y+1	; 0x01
    1bec:	11 e0       	ldi	r17, 0x01	; 1
    1bee:	08 c0       	rjmp	.+16     	; 0x1c00 <strtod+0x62>
    1bf0:	0b 32       	cpi	r16, 0x2B	; 43
    1bf2:	29 f4       	brne	.+10     	; 0x1bfe <strtod+0x60>
    1bf4:	7e 01       	movw	r14, r28
    1bf6:	92 e0       	ldi	r25, 0x02	; 2
    1bf8:	e9 0e       	add	r14, r25
    1bfa:	f1 1c       	adc	r15, r1
    1bfc:	09 81       	ldd	r16, Y+1	; 0x01
    1bfe:	10 e0       	ldi	r17, 0x00	; 0
    1c00:	e7 01       	movw	r28, r14
    1c02:	21 97       	sbiw	r28, 0x01	; 1
    1c04:	43 e0       	ldi	r20, 0x03	; 3
    1c06:	50 e0       	ldi	r21, 0x00	; 0
    1c08:	60 e1       	ldi	r22, 0x10	; 16
    1c0a:	71 e0       	ldi	r23, 0x01	; 1
    1c0c:	ce 01       	movw	r24, r28
    1c0e:	25 d1       	rcall	.+586    	; 0x1e5a <strncasecmp_P>
    1c10:	89 2b       	or	r24, r25
    1c12:	b9 f4       	brne	.+46     	; 0x1c42 <strtod+0xa4>
    1c14:	23 96       	adiw	r28, 0x03	; 3
    1c16:	45 e0       	ldi	r20, 0x05	; 5
    1c18:	50 e0       	ldi	r21, 0x00	; 0
    1c1a:	6b e0       	ldi	r22, 0x0B	; 11
    1c1c:	71 e0       	ldi	r23, 0x01	; 1
    1c1e:	ce 01       	movw	r24, r28
    1c20:	1c d1       	rcall	.+568    	; 0x1e5a <strncasecmp_P>
    1c22:	89 2b       	or	r24, r25
    1c24:	09 f4       	brne	.+2      	; 0x1c28 <strtod+0x8a>
    1c26:	25 96       	adiw	r28, 0x05	; 5
    1c28:	c1 14       	cp	r12, r1
    1c2a:	d1 04       	cpc	r13, r1
    1c2c:	19 f0       	breq	.+6      	; 0x1c34 <strtod+0x96>
    1c2e:	f6 01       	movw	r30, r12
    1c30:	d1 83       	std	Z+1, r29	; 0x01
    1c32:	c0 83       	st	Z, r28
    1c34:	11 11       	cpse	r17, r1
    1c36:	f3 c0       	rjmp	.+486    	; 0x1e1e <strtod+0x280>
    1c38:	60 e0       	ldi	r22, 0x00	; 0
    1c3a:	70 e0       	ldi	r23, 0x00	; 0
    1c3c:	80 e8       	ldi	r24, 0x80	; 128
    1c3e:	9f e7       	ldi	r25, 0x7F	; 127
    1c40:	f7 c0       	rjmp	.+494    	; 0x1e30 <strtod+0x292>
    1c42:	43 e0       	ldi	r20, 0x03	; 3
    1c44:	50 e0       	ldi	r21, 0x00	; 0
    1c46:	68 e0       	ldi	r22, 0x08	; 8
    1c48:	71 e0       	ldi	r23, 0x01	; 1
    1c4a:	ce 01       	movw	r24, r28
    1c4c:	06 d1       	rcall	.+524    	; 0x1e5a <strncasecmp_P>
    1c4e:	89 2b       	or	r24, r25
    1c50:	59 f4       	brne	.+22     	; 0x1c68 <strtod+0xca>
    1c52:	c1 14       	cp	r12, r1
    1c54:	d1 04       	cpc	r13, r1
    1c56:	09 f4       	brne	.+2      	; 0x1c5a <strtod+0xbc>
    1c58:	e7 c0       	rjmp	.+462    	; 0x1e28 <strtod+0x28a>
    1c5a:	f2 e0       	ldi	r31, 0x02	; 2
    1c5c:	ef 0e       	add	r14, r31
    1c5e:	f1 1c       	adc	r15, r1
    1c60:	f6 01       	movw	r30, r12
    1c62:	f1 82       	std	Z+1, r15	; 0x01
    1c64:	e0 82       	st	Z, r14
    1c66:	e0 c0       	rjmp	.+448    	; 0x1e28 <strtod+0x28a>
    1c68:	20 e0       	ldi	r18, 0x00	; 0
    1c6a:	30 e0       	ldi	r19, 0x00	; 0
    1c6c:	a9 01       	movw	r20, r18
    1c6e:	c0 e0       	ldi	r28, 0x00	; 0
    1c70:	d0 e0       	ldi	r29, 0x00	; 0
    1c72:	f7 01       	movw	r30, r14
    1c74:	60 ed       	ldi	r22, 0xD0	; 208
    1c76:	a6 2e       	mov	r10, r22
    1c78:	a0 0e       	add	r10, r16
    1c7a:	89 e0       	ldi	r24, 0x09	; 9
    1c7c:	8a 15       	cp	r24, r10
    1c7e:	28 f1       	brcs	.+74     	; 0x1cca <strtod+0x12c>
    1c80:	91 2f       	mov	r25, r17
    1c82:	92 60       	ori	r25, 0x02	; 2
    1c84:	b9 2e       	mov	r11, r25
    1c86:	81 2f       	mov	r24, r17
    1c88:	88 70       	andi	r24, 0x08	; 8
    1c8a:	12 ff       	sbrs	r17, 2
    1c8c:	04 c0       	rjmp	.+8      	; 0x1c96 <strtod+0xf8>
    1c8e:	81 11       	cpse	r24, r1
    1c90:	23 c0       	rjmp	.+70     	; 0x1cd8 <strtod+0x13a>
    1c92:	21 96       	adiw	r28, 0x01	; 1
    1c94:	21 c0       	rjmp	.+66     	; 0x1cd8 <strtod+0x13a>
    1c96:	81 11       	cpse	r24, r1
    1c98:	21 97       	sbiw	r28, 0x01	; 1
    1c9a:	a5 e0       	ldi	r26, 0x05	; 5
    1c9c:	b0 e0       	ldi	r27, 0x00	; 0
    1c9e:	65 dd       	rcall	.-1334   	; 0x176a <__muluhisi3>
    1ca0:	dc 01       	movw	r26, r24
    1ca2:	cb 01       	movw	r24, r22
    1ca4:	88 0f       	add	r24, r24
    1ca6:	99 1f       	adc	r25, r25
    1ca8:	aa 1f       	adc	r26, r26
    1caa:	bb 1f       	adc	r27, r27
    1cac:	9c 01       	movw	r18, r24
    1cae:	ad 01       	movw	r20, r26
    1cb0:	2a 0d       	add	r18, r10
    1cb2:	31 1d       	adc	r19, r1
    1cb4:	41 1d       	adc	r20, r1
    1cb6:	51 1d       	adc	r21, r1
    1cb8:	28 39       	cpi	r18, 0x98	; 152
    1cba:	89 e9       	ldi	r24, 0x99	; 153
    1cbc:	38 07       	cpc	r19, r24
    1cbe:	48 07       	cpc	r20, r24
    1cc0:	89 e1       	ldi	r24, 0x19	; 25
    1cc2:	58 07       	cpc	r21, r24
    1cc4:	48 f0       	brcs	.+18     	; 0x1cd8 <strtod+0x13a>
    1cc6:	16 60       	ori	r17, 0x06	; 6
    1cc8:	06 c0       	rjmp	.+12     	; 0x1cd6 <strtod+0x138>
    1cca:	9e ef       	ldi	r25, 0xFE	; 254
    1ccc:	a9 12       	cpse	r10, r25
    1cce:	0a c0       	rjmp	.+20     	; 0x1ce4 <strtod+0x146>
    1cd0:	13 fd       	sbrc	r17, 3
    1cd2:	40 c0       	rjmp	.+128    	; 0x1d54 <strtod+0x1b6>
    1cd4:	18 60       	ori	r17, 0x08	; 8
    1cd6:	b1 2e       	mov	r11, r17
    1cd8:	8f ef       	ldi	r24, 0xFF	; 255
    1cda:	e8 1a       	sub	r14, r24
    1cdc:	f8 0a       	sbc	r15, r24
    1cde:	00 81       	ld	r16, Z
    1ce0:	1b 2d       	mov	r17, r11
    1ce2:	c7 cf       	rjmp	.-114    	; 0x1c72 <strtod+0xd4>
    1ce4:	80 2f       	mov	r24, r16
    1ce6:	8f 7d       	andi	r24, 0xDF	; 223
    1ce8:	85 34       	cpi	r24, 0x45	; 69
    1cea:	a1 f5       	brne	.+104    	; 0x1d54 <strtod+0x1b6>
    1cec:	80 81       	ld	r24, Z
    1cee:	8d 32       	cpi	r24, 0x2D	; 45
    1cf0:	11 f4       	brne	.+4      	; 0x1cf6 <strtod+0x158>
    1cf2:	10 61       	ori	r17, 0x10	; 16
    1cf4:	06 c0       	rjmp	.+12     	; 0x1d02 <strtod+0x164>
    1cf6:	8b 32       	cpi	r24, 0x2B	; 43
    1cf8:	21 f0       	breq	.+8      	; 0x1d02 <strtod+0x164>
    1cfa:	31 96       	adiw	r30, 0x01	; 1
    1cfc:	61 e0       	ldi	r22, 0x01	; 1
    1cfe:	70 e0       	ldi	r23, 0x00	; 0
    1d00:	04 c0       	rjmp	.+8      	; 0x1d0a <strtod+0x16c>
    1d02:	81 81       	ldd	r24, Z+1	; 0x01
    1d04:	32 96       	adiw	r30, 0x02	; 2
    1d06:	62 e0       	ldi	r22, 0x02	; 2
    1d08:	70 e0       	ldi	r23, 0x00	; 0
    1d0a:	80 53       	subi	r24, 0x30	; 48
    1d0c:	8a 30       	cpi	r24, 0x0A	; 10
    1d0e:	18 f0       	brcs	.+6      	; 0x1d16 <strtod+0x178>
    1d10:	e6 1b       	sub	r30, r22
    1d12:	f7 0b       	sbc	r31, r23
    1d14:	1f c0       	rjmp	.+62     	; 0x1d54 <strtod+0x1b6>
    1d16:	60 e0       	ldi	r22, 0x00	; 0
    1d18:	70 e0       	ldi	r23, 0x00	; 0
    1d1a:	60 38       	cpi	r22, 0x80	; 128
    1d1c:	9c e0       	ldi	r25, 0x0C	; 12
    1d1e:	79 07       	cpc	r23, r25
    1d20:	5c f4       	brge	.+22     	; 0x1d38 <strtod+0x19a>
    1d22:	db 01       	movw	r26, r22
    1d24:	aa 0f       	add	r26, r26
    1d26:	bb 1f       	adc	r27, r27
    1d28:	aa 0f       	add	r26, r26
    1d2a:	bb 1f       	adc	r27, r27
    1d2c:	6a 0f       	add	r22, r26
    1d2e:	7b 1f       	adc	r23, r27
    1d30:	66 0f       	add	r22, r22
    1d32:	77 1f       	adc	r23, r23
    1d34:	68 0f       	add	r22, r24
    1d36:	71 1d       	adc	r23, r1
    1d38:	31 96       	adiw	r30, 0x01	; 1
    1d3a:	df 01       	movw	r26, r30
    1d3c:	11 97       	sbiw	r26, 0x01	; 1
    1d3e:	8c 91       	ld	r24, X
    1d40:	80 53       	subi	r24, 0x30	; 48
    1d42:	8a 30       	cpi	r24, 0x0A	; 10
    1d44:	50 f3       	brcs	.-44     	; 0x1d1a <strtod+0x17c>
    1d46:	14 ff       	sbrs	r17, 4
    1d48:	03 c0       	rjmp	.+6      	; 0x1d50 <strtod+0x1b2>
    1d4a:	71 95       	neg	r23
    1d4c:	61 95       	neg	r22
    1d4e:	71 09       	sbc	r23, r1
    1d50:	c6 0f       	add	r28, r22
    1d52:	d7 1f       	adc	r29, r23
    1d54:	11 ff       	sbrs	r17, 1
    1d56:	08 c0       	rjmp	.+16     	; 0x1d68 <strtod+0x1ca>
    1d58:	c1 14       	cp	r12, r1
    1d5a:	d1 04       	cpc	r13, r1
    1d5c:	29 f0       	breq	.+10     	; 0x1d68 <strtod+0x1ca>
    1d5e:	cf 01       	movw	r24, r30
    1d60:	01 97       	sbiw	r24, 0x01	; 1
    1d62:	f6 01       	movw	r30, r12
    1d64:	91 83       	std	Z+1, r25	; 0x01
    1d66:	80 83       	st	Z, r24
    1d68:	ca 01       	movw	r24, r20
    1d6a:	b9 01       	movw	r22, r18
    1d6c:	0e 94 3a 05 	call	0xa74	; 0xa74 <__floatunsisf>
    1d70:	21 2f       	mov	r18, r17
    1d72:	23 70       	andi	r18, 0x03	; 3
    1d74:	23 30       	cpi	r18, 0x03	; 3
    1d76:	19 f0       	breq	.+6      	; 0x1d7e <strtod+0x1e0>
    1d78:	4b 01       	movw	r8, r22
    1d7a:	5c 01       	movw	r10, r24
    1d7c:	06 c0       	rjmp	.+12     	; 0x1d8a <strtod+0x1ec>
    1d7e:	4b 01       	movw	r8, r22
    1d80:	5c 01       	movw	r10, r24
    1d82:	b7 fa       	bst	r11, 7
    1d84:	b0 94       	com	r11
    1d86:	b7 f8       	bld	r11, 7
    1d88:	b0 94       	com	r11
    1d8a:	20 e0       	ldi	r18, 0x00	; 0
    1d8c:	30 e0       	ldi	r19, 0x00	; 0
    1d8e:	a9 01       	movw	r20, r18
    1d90:	c5 01       	movw	r24, r10
    1d92:	b4 01       	movw	r22, r8
    1d94:	0e 94 05 05 	call	0xa0a	; 0xa0a <__cmpsf2>
    1d98:	88 23       	and	r24, r24
    1d9a:	09 f4       	brne	.+2      	; 0x1d9e <strtod+0x200>
    1d9c:	3d c0       	rjmp	.+122    	; 0x1e18 <strtod+0x27a>
    1d9e:	d7 ff       	sbrs	r29, 7
    1da0:	06 c0       	rjmp	.+12     	; 0x1dae <strtod+0x210>
    1da2:	d1 95       	neg	r29
    1da4:	c1 95       	neg	r28
    1da6:	d1 09       	sbc	r29, r1
    1da8:	07 e2       	ldi	r16, 0x27	; 39
    1daa:	11 e0       	ldi	r17, 0x01	; 1
    1dac:	02 c0       	rjmp	.+4      	; 0x1db2 <strtod+0x214>
    1dae:	0f e3       	ldi	r16, 0x3F	; 63
    1db0:	11 e0       	ldi	r17, 0x01	; 1
    1db2:	68 01       	movw	r12, r16
    1db4:	f8 e1       	ldi	r31, 0x18	; 24
    1db6:	cf 1a       	sub	r12, r31
    1db8:	d1 08       	sbc	r13, r1
    1dba:	90 e2       	ldi	r25, 0x20	; 32
    1dbc:	e9 2e       	mov	r14, r25
    1dbe:	f1 2c       	mov	r15, r1
    1dc0:	ce 15       	cp	r28, r14
    1dc2:	df 05       	cpc	r29, r15
    1dc4:	6c f0       	brlt	.+26     	; 0x1de0 <strtod+0x242>
    1dc6:	f8 01       	movw	r30, r16
    1dc8:	25 91       	lpm	r18, Z+
    1dca:	35 91       	lpm	r19, Z+
    1dcc:	45 91       	lpm	r20, Z+
    1dce:	54 91       	lpm	r21, Z
    1dd0:	c5 01       	movw	r24, r10
    1dd2:	b4 01       	movw	r22, r8
    1dd4:	3d dc       	rcall	.-1926   	; 0x1650 <__mulsf3>
    1dd6:	4b 01       	movw	r8, r22
    1dd8:	5c 01       	movw	r10, r24
    1dda:	ce 19       	sub	r28, r14
    1ddc:	df 09       	sbc	r29, r15
    1dde:	f0 cf       	rjmp	.-32     	; 0x1dc0 <strtod+0x222>
    1de0:	04 50       	subi	r16, 0x04	; 4
    1de2:	11 09       	sbc	r17, r1
    1de4:	f5 94       	asr	r15
    1de6:	e7 94       	ror	r14
    1de8:	0c 15       	cp	r16, r12
    1dea:	1d 05       	cpc	r17, r13
    1dec:	49 f7       	brne	.-46     	; 0x1dc0 <strtod+0x222>
    1dee:	8a 2d       	mov	r24, r10
    1df0:	88 0f       	add	r24, r24
    1df2:	8b 2d       	mov	r24, r11
    1df4:	88 1f       	adc	r24, r24
    1df6:	8f 3f       	cpi	r24, 0xFF	; 255
    1df8:	49 f0       	breq	.+18     	; 0x1e0c <strtod+0x26e>
    1dfa:	20 e0       	ldi	r18, 0x00	; 0
    1dfc:	30 e0       	ldi	r19, 0x00	; 0
    1dfe:	a9 01       	movw	r20, r18
    1e00:	c5 01       	movw	r24, r10
    1e02:	b4 01       	movw	r22, r8
    1e04:	0e 94 05 05 	call	0xa0a	; 0xa0a <__cmpsf2>
    1e08:	81 11       	cpse	r24, r1
    1e0a:	06 c0       	rjmp	.+12     	; 0x1e18 <strtod+0x27a>
    1e0c:	82 e2       	ldi	r24, 0x22	; 34
    1e0e:	90 e0       	ldi	r25, 0x00	; 0
    1e10:	90 93 ec 02 	sts	0x02EC, r25	; 0x8002ec <errno+0x1>
    1e14:	80 93 eb 02 	sts	0x02EB, r24	; 0x8002eb <errno>
    1e18:	c5 01       	movw	r24, r10
    1e1a:	b4 01       	movw	r22, r8
    1e1c:	09 c0       	rjmp	.+18     	; 0x1e30 <strtod+0x292>
    1e1e:	60 e0       	ldi	r22, 0x00	; 0
    1e20:	70 e0       	ldi	r23, 0x00	; 0
    1e22:	80 e8       	ldi	r24, 0x80	; 128
    1e24:	9f ef       	ldi	r25, 0xFF	; 255
    1e26:	04 c0       	rjmp	.+8      	; 0x1e30 <strtod+0x292>
    1e28:	60 e0       	ldi	r22, 0x00	; 0
    1e2a:	70 e0       	ldi	r23, 0x00	; 0
    1e2c:	80 ec       	ldi	r24, 0xC0	; 192
    1e2e:	9f e7       	ldi	r25, 0x7F	; 127
    1e30:	df 91       	pop	r29
    1e32:	cf 91       	pop	r28
    1e34:	1f 91       	pop	r17
    1e36:	0f 91       	pop	r16
    1e38:	ff 90       	pop	r15
    1e3a:	ef 90       	pop	r14
    1e3c:	df 90       	pop	r13
    1e3e:	cf 90       	pop	r12
    1e40:	bf 90       	pop	r11
    1e42:	af 90       	pop	r10
    1e44:	9f 90       	pop	r9
    1e46:	8f 90       	pop	r8
    1e48:	08 95       	ret

00001e4a <isspace>:
    1e4a:	91 11       	cpse	r25, r1
    1e4c:	47 c0       	rjmp	.+142    	; 0x1edc <__ctype_isfalse>
    1e4e:	80 32       	cpi	r24, 0x20	; 32
    1e50:	19 f0       	breq	.+6      	; 0x1e58 <isspace+0xe>
    1e52:	89 50       	subi	r24, 0x09	; 9
    1e54:	85 50       	subi	r24, 0x05	; 5
    1e56:	d0 f7       	brcc	.-12     	; 0x1e4c <isspace+0x2>
    1e58:	08 95       	ret

00001e5a <strncasecmp_P>:
    1e5a:	fb 01       	movw	r30, r22
    1e5c:	dc 01       	movw	r26, r24
    1e5e:	41 50       	subi	r20, 0x01	; 1
    1e60:	50 40       	sbci	r21, 0x00	; 0
    1e62:	88 f0       	brcs	.+34     	; 0x1e86 <strncasecmp_P+0x2c>
    1e64:	8d 91       	ld	r24, X+
    1e66:	81 34       	cpi	r24, 0x41	; 65
    1e68:	1c f0       	brlt	.+6      	; 0x1e70 <strncasecmp_P+0x16>
    1e6a:	8b 35       	cpi	r24, 0x5B	; 91
    1e6c:	0c f4       	brge	.+2      	; 0x1e70 <strncasecmp_P+0x16>
    1e6e:	80 5e       	subi	r24, 0xE0	; 224
    1e70:	65 91       	lpm	r22, Z+
    1e72:	61 34       	cpi	r22, 0x41	; 65
    1e74:	1c f0       	brlt	.+6      	; 0x1e7c <strncasecmp_P+0x22>
    1e76:	6b 35       	cpi	r22, 0x5B	; 91
    1e78:	0c f4       	brge	.+2      	; 0x1e7c <strncasecmp_P+0x22>
    1e7a:	60 5e       	subi	r22, 0xE0	; 224
    1e7c:	86 1b       	sub	r24, r22
    1e7e:	61 11       	cpse	r22, r1
    1e80:	71 f3       	breq	.-36     	; 0x1e5e <strncasecmp_P+0x4>
    1e82:	99 0b       	sbc	r25, r25
    1e84:	08 95       	ret
    1e86:	88 1b       	sub	r24, r24
    1e88:	fc cf       	rjmp	.-8      	; 0x1e82 <strncasecmp_P+0x28>

00001e8a <memcpy>:
    1e8a:	fb 01       	movw	r30, r22
    1e8c:	dc 01       	movw	r26, r24
    1e8e:	02 c0       	rjmp	.+4      	; 0x1e94 <memcpy+0xa>
    1e90:	01 90       	ld	r0, Z+
    1e92:	0d 92       	st	X+, r0
    1e94:	41 50       	subi	r20, 0x01	; 1
    1e96:	50 40       	sbci	r21, 0x00	; 0
    1e98:	d8 f7       	brcc	.-10     	; 0x1e90 <memcpy+0x6>
    1e9a:	08 95       	ret

00001e9c <strcpy>:
    1e9c:	fb 01       	movw	r30, r22
    1e9e:	dc 01       	movw	r26, r24
    1ea0:	01 90       	ld	r0, Z+
    1ea2:	0d 92       	st	X+, r0
    1ea4:	00 20       	and	r0, r0
    1ea6:	e1 f7       	brne	.-8      	; 0x1ea0 <strcpy+0x4>
    1ea8:	08 95       	ret

00001eaa <strlwr>:
    1eaa:	dc 01       	movw	r26, r24
    1eac:	6c 91       	ld	r22, X
    1eae:	61 54       	subi	r22, 0x41	; 65
    1eb0:	6a 31       	cpi	r22, 0x1A	; 26
    1eb2:	08 f0       	brcs	.+2      	; 0x1eb6 <strlwr+0xc>
    1eb4:	60 52       	subi	r22, 0x20	; 32
    1eb6:	6f 59       	subi	r22, 0x9F	; 159
    1eb8:	6d 93       	st	X+, r22
    1eba:	c1 f7       	brne	.-16     	; 0x1eac <strlwr+0x2>
    1ebc:	08 95       	ret

00001ebe <strncpy>:
    1ebe:	fb 01       	movw	r30, r22
    1ec0:	dc 01       	movw	r26, r24
    1ec2:	41 50       	subi	r20, 0x01	; 1
    1ec4:	50 40       	sbci	r21, 0x00	; 0
    1ec6:	48 f0       	brcs	.+18     	; 0x1eda <strncpy+0x1c>
    1ec8:	01 90       	ld	r0, Z+
    1eca:	0d 92       	st	X+, r0
    1ecc:	00 20       	and	r0, r0
    1ece:	c9 f7       	brne	.-14     	; 0x1ec2 <strncpy+0x4>
    1ed0:	01 c0       	rjmp	.+2      	; 0x1ed4 <strncpy+0x16>
    1ed2:	1d 92       	st	X+, r1
    1ed4:	41 50       	subi	r20, 0x01	; 1
    1ed6:	50 40       	sbci	r21, 0x00	; 0
    1ed8:	e0 f7       	brcc	.-8      	; 0x1ed2 <strncpy+0x14>
    1eda:	08 95       	ret

00001edc <__ctype_isfalse>:
    1edc:	99 27       	eor	r25, r25
    1ede:	88 27       	eor	r24, r24

00001ee0 <__ctype_istrue>:
    1ee0:	08 95       	ret

00001ee2 <__do_global_dtors>:
    1ee2:	11 e0       	ldi	r17, 0x01	; 1
    1ee4:	c4 e3       	ldi	r28, 0x34	; 52
    1ee6:	d1 e0       	ldi	r29, 0x01	; 1
    1ee8:	00 e0       	ldi	r16, 0x00	; 0
    1eea:	05 c0       	rjmp	.+10     	; 0x1ef6 <__do_global_dtors+0x14>
    1eec:	80 2f       	mov	r24, r16
    1eee:	fe 01       	movw	r30, r28
    1ef0:	34 dc       	rcall	.-1944   	; 0x175a <__tablejump2__>
    1ef2:	21 96       	adiw	r28, 0x01	; 1
    1ef4:	01 1d       	adc	r16, r1
    1ef6:	c5 33       	cpi	r28, 0x35	; 53
    1ef8:	d1 07       	cpc	r29, r17
    1efa:	80 e0       	ldi	r24, 0x00	; 0
    1efc:	08 07       	cpc	r16, r24
    1efe:	b1 f7       	brne	.-20     	; 0x1eec <__do_global_dtors+0xa>
    1f00:	f8 94       	cli

00001f02 <__stop_program>:
    1f02:	ff cf       	rjmp	.-2      	; 0x1f02 <__stop_program>
