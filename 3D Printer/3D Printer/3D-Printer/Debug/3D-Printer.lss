
3D-Printer.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000034  00800200  000007c4  00000858  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000007c4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000a6  00800234  00800234  0000088c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000088c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000008bc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000250  00000000  00000000  000008fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000791a  00000000  00000000  00000b4c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001b8c  00000000  00000000  00008466  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000014ac  00000000  00000000  00009ff2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000006e8  00000000  00000000  0000b4a0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000020c7  00000000  00000000  0000bb88  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000255c  00000000  00000000  0000dc4f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000220  00000000  00000000  000101ab  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	72 c0       	rjmp	.+228    	; 0xe6 <__ctors_end>
   2:	00 00       	nop
   4:	9e c0       	rjmp	.+316    	; 0x142 <__bad_interrupt>
   6:	00 00       	nop
   8:	9c c0       	rjmp	.+312    	; 0x142 <__bad_interrupt>
   a:	00 00       	nop
   c:	9a c0       	rjmp	.+308    	; 0x142 <__bad_interrupt>
   e:	00 00       	nop
  10:	98 c0       	rjmp	.+304    	; 0x142 <__bad_interrupt>
  12:	00 00       	nop
  14:	96 c0       	rjmp	.+300    	; 0x142 <__bad_interrupt>
  16:	00 00       	nop
  18:	94 c0       	rjmp	.+296    	; 0x142 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	92 c0       	rjmp	.+292    	; 0x142 <__bad_interrupt>
  1e:	00 00       	nop
  20:	90 c0       	rjmp	.+288    	; 0x142 <__bad_interrupt>
  22:	00 00       	nop
  24:	8e c0       	rjmp	.+284    	; 0x142 <__bad_interrupt>
  26:	00 00       	nop
  28:	8c c0       	rjmp	.+280    	; 0x142 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	8a c0       	rjmp	.+276    	; 0x142 <__bad_interrupt>
  2e:	00 00       	nop
  30:	88 c0       	rjmp	.+272    	; 0x142 <__bad_interrupt>
  32:	00 00       	nop
  34:	86 c0       	rjmp	.+268    	; 0x142 <__bad_interrupt>
  36:	00 00       	nop
  38:	84 c0       	rjmp	.+264    	; 0x142 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	82 c0       	rjmp	.+260    	; 0x142 <__bad_interrupt>
  3e:	00 00       	nop
  40:	80 c0       	rjmp	.+256    	; 0x142 <__bad_interrupt>
  42:	00 00       	nop
  44:	7e c0       	rjmp	.+252    	; 0x142 <__bad_interrupt>
  46:	00 00       	nop
  48:	7c c0       	rjmp	.+248    	; 0x142 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	7a c0       	rjmp	.+244    	; 0x142 <__bad_interrupt>
  4e:	00 00       	nop
  50:	78 c0       	rjmp	.+240    	; 0x142 <__bad_interrupt>
  52:	00 00       	nop
  54:	76 c0       	rjmp	.+236    	; 0x142 <__bad_interrupt>
  56:	00 00       	nop
  58:	74 c0       	rjmp	.+232    	; 0x142 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	db c2       	rjmp	.+1462   	; 0x614 <__vector_23>
  5e:	00 00       	nop
  60:	70 c0       	rjmp	.+224    	; 0x142 <__bad_interrupt>
  62:	00 00       	nop
  64:	e5 c1       	rjmp	.+970    	; 0x430 <__vector_25>
  66:	00 00       	nop
  68:	19 c2       	rjmp	.+1074   	; 0x49c <__vector_26>
  6a:	00 00       	nop
  6c:	6a c0       	rjmp	.+212    	; 0x142 <__bad_interrupt>
  6e:	00 00       	nop
  70:	68 c0       	rjmp	.+208    	; 0x142 <__bad_interrupt>
  72:	00 00       	nop
  74:	66 c0       	rjmp	.+204    	; 0x142 <__bad_interrupt>
  76:	00 00       	nop
  78:	64 c0       	rjmp	.+200    	; 0x142 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	62 c0       	rjmp	.+196    	; 0x142 <__bad_interrupt>
  7e:	00 00       	nop
  80:	60 c0       	rjmp	.+192    	; 0x142 <__bad_interrupt>
  82:	00 00       	nop
  84:	5e c0       	rjmp	.+188    	; 0x142 <__bad_interrupt>
  86:	00 00       	nop
  88:	5c c0       	rjmp	.+184    	; 0x142 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	5a c0       	rjmp	.+180    	; 0x142 <__bad_interrupt>
  8e:	00 00       	nop
  90:	58 c0       	rjmp	.+176    	; 0x142 <__bad_interrupt>
  92:	00 00       	nop
  94:	56 c0       	rjmp	.+172    	; 0x142 <__bad_interrupt>
  96:	00 00       	nop
  98:	54 c0       	rjmp	.+168    	; 0x142 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	52 c0       	rjmp	.+164    	; 0x142 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	50 c0       	rjmp	.+160    	; 0x142 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	4e c0       	rjmp	.+156    	; 0x142 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	4c c0       	rjmp	.+152    	; 0x142 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	4a c0       	rjmp	.+148    	; 0x142 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	48 c0       	rjmp	.+144    	; 0x142 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	46 c0       	rjmp	.+140    	; 0x142 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	44 c0       	rjmp	.+136    	; 0x142 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	42 c0       	rjmp	.+132    	; 0x142 <__bad_interrupt>
  be:	00 00       	nop
  c0:	40 c0       	rjmp	.+128    	; 0x142 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	3e c0       	rjmp	.+124    	; 0x142 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	3c c0       	rjmp	.+120    	; 0x142 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	3a c0       	rjmp	.+116    	; 0x142 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	38 c0       	rjmp	.+112    	; 0x142 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	36 c0       	rjmp	.+108    	; 0x142 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	34 c0       	rjmp	.+104    	; 0x142 <__bad_interrupt>
  da:	00 00       	nop
  dc:	32 c0       	rjmp	.+100    	; 0x142 <__bad_interrupt>
  de:	00 00       	nop
  e0:	30 c0       	rjmp	.+96     	; 0x142 <__bad_interrupt>
	...

000000e4 <__ctors_start>:
  e4:	80 02       	muls	r24, r16

000000e6 <__ctors_end>:
  e6:	11 24       	eor	r1, r1
  e8:	1f be       	out	0x3f, r1	; 63
  ea:	cf ef       	ldi	r28, 0xFF	; 255
  ec:	d1 e2       	ldi	r29, 0x21	; 33
  ee:	de bf       	out	0x3e, r29	; 62
  f0:	cd bf       	out	0x3d, r28	; 61
  f2:	00 e0       	ldi	r16, 0x00	; 0
  f4:	0c bf       	out	0x3c, r16	; 60

000000f6 <__do_copy_data>:
  f6:	12 e0       	ldi	r17, 0x02	; 2
  f8:	a0 e0       	ldi	r26, 0x00	; 0
  fa:	b2 e0       	ldi	r27, 0x02	; 2
  fc:	e4 ec       	ldi	r30, 0xC4	; 196
  fe:	f7 e0       	ldi	r31, 0x07	; 7
 100:	00 e0       	ldi	r16, 0x00	; 0
 102:	0b bf       	out	0x3b, r16	; 59
 104:	02 c0       	rjmp	.+4      	; 0x10a <__do_copy_data+0x14>
 106:	07 90       	elpm	r0, Z+
 108:	0d 92       	st	X+, r0
 10a:	a4 33       	cpi	r26, 0x34	; 52
 10c:	b1 07       	cpc	r27, r17
 10e:	d9 f7       	brne	.-10     	; 0x106 <__do_copy_data+0x10>

00000110 <__do_clear_bss>:
 110:	22 e0       	ldi	r18, 0x02	; 2
 112:	a4 e3       	ldi	r26, 0x34	; 52
 114:	b2 e0       	ldi	r27, 0x02	; 2
 116:	01 c0       	rjmp	.+2      	; 0x11a <.do_clear_bss_start>

00000118 <.do_clear_bss_loop>:
 118:	1d 92       	st	X+, r1

0000011a <.do_clear_bss_start>:
 11a:	aa 3d       	cpi	r26, 0xDA	; 218
 11c:	b2 07       	cpc	r27, r18
 11e:	e1 f7       	brne	.-8      	; 0x118 <.do_clear_bss_loop>

00000120 <__do_global_ctors>:
 120:	10 e0       	ldi	r17, 0x00	; 0
 122:	c3 e7       	ldi	r28, 0x73	; 115
 124:	d0 e0       	ldi	r29, 0x00	; 0
 126:	00 e0       	ldi	r16, 0x00	; 0
 128:	05 c0       	rjmp	.+10     	; 0x134 <__do_global_ctors+0x14>
 12a:	21 97       	sbiw	r28, 0x01	; 1
 12c:	01 09       	sbc	r16, r1
 12e:	80 2f       	mov	r24, r16
 130:	fe 01       	movw	r30, r28
 132:	3e d3       	rcall	.+1660   	; 0x7b0 <__tablejump2__>
 134:	c2 37       	cpi	r28, 0x72	; 114
 136:	d1 07       	cpc	r29, r17
 138:	80 e0       	ldi	r24, 0x00	; 0
 13a:	08 07       	cpc	r16, r24
 13c:	b1 f7       	brne	.-20     	; 0x12a <__do_global_ctors+0xa>
 13e:	0e d2       	rcall	.+1052   	; 0x55c <main>
 140:	3f c3       	rjmp	.+1662   	; 0x7c0 <_exit>

00000142 <__bad_interrupt>:
 142:	5e cf       	rjmp	.-324    	; 0x0 <__vectors>

00000144 <setup>:
  public:
    inline HardwareSerial(
      volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
      volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
      volatile uint8_t *ucsrc, volatile uint8_t *udr);
    void begin(unsigned long baud) { begin(baud, SERIAL_8N1); }
 144:	26 e0       	ldi	r18, 0x06	; 6
 146:	40 e0       	ldi	r20, 0x00	; 0
 148:	51 ee       	ldi	r21, 0xE1	; 225
 14a:	60 e0       	ldi	r22, 0x00	; 0
 14c:	70 e0       	ldi	r23, 0x00	; 0
 14e:	84 e3       	ldi	r24, 0x34	; 52
 150:	92 e0       	ldi	r25, 0x02	; 2
 152:	0b d1       	rcall	.+534    	; 0x36a <_ZN14HardwareSerial5beginEmh>
///CREDIT: Adam Baniuszewicz, Bartosz Flis, Jakub Sybidlo
void setup()
{
	//StepperInit();
	Serial.begin(57600);
	Serial.println("Connected.");
 154:	60 e0       	ldi	r22, 0x00	; 0
 156:	72 e0       	ldi	r23, 0x02	; 2
 158:	84 e3       	ldi	r24, 0x34	; 52
 15a:	92 e0       	ldi	r25, 0x02	; 2
 15c:	4b c2       	rjmp	.+1174   	; 0x5f4 <_ZN5Print7printlnEPKc>

0000015e <loop>:


///CREDIT: Adam Baniuszewicz, Bartosz Flis, Jakub Sybidlo
void loop()
{	
	Serial.println("lololol");
 15e:	6b e0       	ldi	r22, 0x0B	; 11
 160:	72 e0       	ldi	r23, 0x02	; 2
 162:	84 e3       	ldi	r24, 0x34	; 52
 164:	92 e0       	ldi	r25, 0x02	; 2
 166:	46 c2       	rjmp	.+1164   	; 0x5f4 <_ZN5Print7printlnEPKc>

00000168 <_ZN14HardwareSerial9availableEv>:
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
 168:	fc 01       	movw	r30, r24
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
 16a:	91 8d       	ldd	r25, Z+25	; 0x19
 16c:	22 8d       	ldd	r18, Z+26	; 0x1a
 16e:	89 2f       	mov	r24, r25
 170:	90 e0       	ldi	r25, 0x00	; 0
 172:	80 5c       	subi	r24, 0xC0	; 192
 174:	9f 4f       	sbci	r25, 0xFF	; 255
 176:	82 1b       	sub	r24, r18
 178:	91 09       	sbc	r25, r1
}
 17a:	8f 73       	andi	r24, 0x3F	; 63
 17c:	99 27       	eor	r25, r25
 17e:	08 95       	ret

00000180 <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
 180:	fc 01       	movw	r30, r24
  if (_rx_buffer_head == _rx_buffer_tail) {
 182:	91 8d       	ldd	r25, Z+25	; 0x19
 184:	82 8d       	ldd	r24, Z+26	; 0x1a
 186:	98 17       	cp	r25, r24
 188:	31 f0       	breq	.+12     	; 0x196 <_ZN14HardwareSerial4peekEv+0x16>
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
 18a:	82 8d       	ldd	r24, Z+26	; 0x1a
 18c:	e8 0f       	add	r30, r24
 18e:	f1 1d       	adc	r31, r1
 190:	85 8d       	ldd	r24, Z+29	; 0x1d
 192:	90 e0       	ldi	r25, 0x00	; 0
 194:	08 95       	ret
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
 196:	8f ef       	ldi	r24, 0xFF	; 255
 198:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
 19a:	08 95       	ret

0000019c <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
 19c:	fc 01       	movw	r30, r24
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
 19e:	91 8d       	ldd	r25, Z+25	; 0x19
 1a0:	82 8d       	ldd	r24, Z+26	; 0x1a
 1a2:	98 17       	cp	r25, r24
 1a4:	61 f0       	breq	.+24     	; 0x1be <_ZN14HardwareSerial4readEv+0x22>
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
 1a6:	82 8d       	ldd	r24, Z+26	; 0x1a
 1a8:	df 01       	movw	r26, r30
 1aa:	a8 0f       	add	r26, r24
 1ac:	b1 1d       	adc	r27, r1
 1ae:	5d 96       	adiw	r26, 0x1d	; 29
 1b0:	8c 91       	ld	r24, X
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
 1b2:	92 8d       	ldd	r25, Z+26	; 0x1a
 1b4:	9f 5f       	subi	r25, 0xFF	; 255
 1b6:	9f 73       	andi	r25, 0x3F	; 63
 1b8:	92 8f       	std	Z+26, r25	; 0x1a
    return c;
 1ba:	90 e0       	ldi	r25, 0x00	; 0
 1bc:	08 95       	ret

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
 1be:	8f ef       	ldi	r24, 0xFF	; 255
 1c0:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
 1c2:	08 95       	ret

000001c4 <_ZN14HardwareSerial17availableForWriteEv>:
{
#if (SERIAL_TX_BUFFER_SIZE>256)
  uint8_t oldSREG = SREG;
  cli();
#endif
  tx_buffer_index_t head = _tx_buffer_head;
 1c4:	fc 01       	movw	r30, r24
 1c6:	53 8d       	ldd	r21, Z+27	; 0x1b
  tx_buffer_index_t tail = _tx_buffer_tail;
 1c8:	44 8d       	ldd	r20, Z+28	; 0x1c
 1ca:	25 2f       	mov	r18, r21
 1cc:	30 e0       	ldi	r19, 0x00	; 0
 1ce:	84 2f       	mov	r24, r20
 1d0:	90 e0       	ldi	r25, 0x00	; 0
#if (SERIAL_TX_BUFFER_SIZE>256)
  SREG = oldSREG;
#endif
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
 1d2:	82 1b       	sub	r24, r18
 1d4:	93 0b       	sbc	r25, r19
 1d6:	54 17       	cp	r21, r20
 1d8:	10 f0       	brcs	.+4      	; 0x1de <_ZN14HardwareSerial17availableForWriteEv+0x1a>
 1da:	cf 96       	adiw	r24, 0x3f	; 63
 1dc:	08 95       	ret
  return tail - head - 1;
 1de:	01 97       	sbiw	r24, 0x01	; 1
}
 1e0:	08 95       	ret

000001e2 <_Z14serialEventRunv>:
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
 1e2:	87 e7       	ldi	r24, 0x77	; 119
 1e4:	92 e0       	ldi	r25, 0x02	; 2
 1e6:	89 2b       	or	r24, r25
 1e8:	39 f0       	breq	.+14     	; 0x1f8 <_Z14serialEventRunv+0x16>
 1ea:	80 e0       	ldi	r24, 0x00	; 0
 1ec:	90 e0       	ldi	r25, 0x00	; 0
 1ee:	89 2b       	or	r24, r25
 1f0:	19 f0       	breq	.+6      	; 0x1f8 <_Z14serialEventRunv+0x16>
 1f2:	7d d1       	rcall	.+762    	; 0x4ee <_Z17Serial0_availablev>
 1f4:	81 11       	cpse	r24, r1
#endif
#if defined(HAVE_HWSERIAL1)
  if (Serial1_available && serialEvent1 && Serial1_available()) serialEvent1();
 1f6:	25 c0       	rjmp	.+74     	; 0x242 <_Z14serialEventRunv+0x60>
 1f8:	80 e0       	ldi	r24, 0x00	; 0
 1fa:	90 e0       	ldi	r25, 0x00	; 0
 1fc:	89 2b       	or	r24, r25
 1fe:	41 f0       	breq	.+16     	; 0x210 <_Z14serialEventRunv+0x2e>
 200:	80 e0       	ldi	r24, 0x00	; 0
 202:	90 e0       	ldi	r25, 0x00	; 0
 204:	89 2b       	or	r24, r25
 206:	21 f0       	breq	.+8      	; 0x210 <_Z14serialEventRunv+0x2e>
 208:	0e 94 00 00 	call	0	; 0x0 <__vectors>
 20c:	81 11       	cpse	r24, r1
#endif
#if defined(HAVE_HWSERIAL2)
  if (Serial2_available && serialEvent2 && Serial2_available()) serialEvent2();
 20e:	1c c0       	rjmp	.+56     	; 0x248 <_Z14serialEventRunv+0x66>
 210:	80 e0       	ldi	r24, 0x00	; 0
 212:	90 e0       	ldi	r25, 0x00	; 0
 214:	89 2b       	or	r24, r25
 216:	41 f0       	breq	.+16     	; 0x228 <_Z14serialEventRunv+0x46>
 218:	80 e0       	ldi	r24, 0x00	; 0
 21a:	90 e0       	ldi	r25, 0x00	; 0
 21c:	89 2b       	or	r24, r25
 21e:	21 f0       	breq	.+8      	; 0x228 <_Z14serialEventRunv+0x46>
 220:	0e 94 00 00 	call	0	; 0x0 <__vectors>
 224:	81 11       	cpse	r24, r1
#endif
#if defined(HAVE_HWSERIAL3)
  if (Serial3_available && serialEvent3 && Serial3_available()) serialEvent3();
 226:	13 c0       	rjmp	.+38     	; 0x24e <_Z14serialEventRunv+0x6c>
 228:	80 e0       	ldi	r24, 0x00	; 0
 22a:	90 e0       	ldi	r25, 0x00	; 0
 22c:	89 2b       	or	r24, r25
 22e:	a1 f0       	breq	.+40     	; 0x258 <_Z14serialEventRunv+0x76>
 230:	80 e0       	ldi	r24, 0x00	; 0
 232:	90 e0       	ldi	r25, 0x00	; 0
 234:	89 2b       	or	r24, r25
 236:	81 f0       	breq	.+32     	; 0x258 <_Z14serialEventRunv+0x76>
 238:	0e 94 00 00 	call	0	; 0x0 <__vectors>
 23c:	81 11       	cpse	r24, r1
 23e:	0a c0       	rjmp	.+20     	; 0x254 <_Z14serialEventRunv+0x72>
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
 240:	08 95       	ret
 242:	0e 94 00 00 	call	0	; 0x0 <__vectors>
#endif
#if defined(HAVE_HWSERIAL1)
  if (Serial1_available && serialEvent1 && Serial1_available()) serialEvent1();
 246:	d8 cf       	rjmp	.-80     	; 0x1f8 <_Z14serialEventRunv+0x16>
 248:	0e 94 00 00 	call	0	; 0x0 <__vectors>
#endif
#if defined(HAVE_HWSERIAL2)
  if (Serial2_available && serialEvent2 && Serial2_available()) serialEvent2();
 24c:	e1 cf       	rjmp	.-62     	; 0x210 <_Z14serialEventRunv+0x2e>
 24e:	0e 94 00 00 	call	0	; 0x0 <__vectors>
#endif
#if defined(HAVE_HWSERIAL3)
  if (Serial3_available && serialEvent3 && Serial3_available()) serialEvent3();
 252:	ea cf       	rjmp	.-44     	; 0x228 <_Z14serialEventRunv+0x46>
 254:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
 258:	08 95       	ret

0000025a <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
}

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
 25a:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
 25c:	84 8d       	ldd	r24, Z+28	; 0x1c
 25e:	df 01       	movw	r26, r30
 260:	a8 0f       	add	r26, r24
 262:	b1 1d       	adc	r27, r1
 264:	a3 5a       	subi	r26, 0xA3	; 163
 266:	bf 4f       	sbci	r27, 0xFF	; 255
 268:	2c 91       	ld	r18, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
 26a:	84 8d       	ldd	r24, Z+28	; 0x1c
 26c:	90 e0       	ldi	r25, 0x00	; 0
 26e:	01 96       	adiw	r24, 0x01	; 1
 270:	8f 73       	andi	r24, 0x3F	; 63
 272:	99 27       	eor	r25, r25
 274:	84 8f       	std	Z+28, r24	; 0x1c

  *_udr = c;
 276:	a6 89       	ldd	r26, Z+22	; 0x16
 278:	b7 89       	ldd	r27, Z+23	; 0x17
 27a:	2c 93       	st	X, r18

  // clear the TXC bit -- "can be cleared by writing a one to its bit
  // location". This makes sure flush() won't return until the bytes
  // actually got written
  sbi(*_ucsra, TXC0);
 27c:	a0 89       	ldd	r26, Z+16	; 0x10
 27e:	b1 89       	ldd	r27, Z+17	; 0x11
 280:	8c 91       	ld	r24, X
 282:	80 64       	ori	r24, 0x40	; 64
 284:	8c 93       	st	X, r24

  if (_tx_buffer_head == _tx_buffer_tail) {
 286:	93 8d       	ldd	r25, Z+27	; 0x1b
 288:	84 8d       	ldd	r24, Z+28	; 0x1c
 28a:	98 13       	cpse	r25, r24
 28c:	06 c0       	rjmp	.+12     	; 0x29a <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x40>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
 28e:	02 88       	ldd	r0, Z+18	; 0x12
 290:	f3 89       	ldd	r31, Z+19	; 0x13
 292:	e0 2d       	mov	r30, r0
 294:	80 81       	ld	r24, Z
 296:	8f 7d       	andi	r24, 0xDF	; 223
 298:	80 83       	st	Z, r24
 29a:	08 95       	ret

0000029c <_ZN14HardwareSerial5writeEh>:
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}

size_t HardwareSerial::write(uint8_t c)
{
 29c:	ef 92       	push	r14
 29e:	ff 92       	push	r15
 2a0:	0f 93       	push	r16
 2a2:	1f 93       	push	r17
 2a4:	cf 93       	push	r28
 2a6:	df 93       	push	r29
 2a8:	ec 01       	movw	r28, r24
  _written = true;
 2aa:	81 e0       	ldi	r24, 0x01	; 1
 2ac:	88 8f       	std	Y+24, r24	; 0x18
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
 2ae:	9b 8d       	ldd	r25, Y+27	; 0x1b
 2b0:	8c 8d       	ldd	r24, Y+28	; 0x1c
 2b2:	98 13       	cpse	r25, r24
 2b4:	05 c0       	rjmp	.+10     	; 0x2c0 <_ZN14HardwareSerial5writeEh+0x24>
 2b6:	e8 89       	ldd	r30, Y+16	; 0x10
 2b8:	f9 89       	ldd	r31, Y+17	; 0x11
 2ba:	80 81       	ld	r24, Z
 2bc:	85 fd       	sbrc	r24, 5
 2be:	23 c0       	rjmp	.+70     	; 0x306 <_ZN14HardwareSerial5writeEh+0x6a>
 2c0:	f6 2e       	mov	r15, r22
    *_udr = c;
    sbi(*_ucsra, TXC0);
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
 2c2:	0b 8d       	ldd	r16, Y+27	; 0x1b
 2c4:	10 e0       	ldi	r17, 0x00	; 0
 2c6:	0f 5f       	subi	r16, 0xFF	; 255
 2c8:	1f 4f       	sbci	r17, 0xFF	; 255
 2ca:	0f 73       	andi	r16, 0x3F	; 63
 2cc:	11 27       	eor	r17, r17
 2ce:	e0 2e       	mov	r14, r16
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
 2d0:	8c 8d       	ldd	r24, Y+28	; 0x1c
 2d2:	e8 12       	cpse	r14, r24
 2d4:	0b c0       	rjmp	.+22     	; 0x2ec <_ZN14HardwareSerial5writeEh+0x50>
    if (bit_is_clear(SREG, SREG_I)) {
 2d6:	0f b6       	in	r0, 0x3f	; 63
 2d8:	07 fc       	sbrc	r0, 7
 2da:	fa cf       	rjmp	.-12     	; 0x2d0 <_ZN14HardwareSerial5writeEh+0x34>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
 2dc:	e8 89       	ldd	r30, Y+16	; 0x10
 2de:	f9 89       	ldd	r31, Y+17	; 0x11
 2e0:	80 81       	ld	r24, Z
 2e2:	85 ff       	sbrs	r24, 5
 2e4:	f5 cf       	rjmp	.-22     	; 0x2d0 <_ZN14HardwareSerial5writeEh+0x34>
	_tx_udr_empty_irq();
 2e6:	ce 01       	movw	r24, r28
 2e8:	b8 df       	rcall	.-144    	; 0x25a <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
 2ea:	f2 cf       	rjmp	.-28     	; 0x2d0 <_ZN14HardwareSerial5writeEh+0x34>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
 2ec:	8b 8d       	ldd	r24, Y+27	; 0x1b
 2ee:	fe 01       	movw	r30, r28
 2f0:	e8 0f       	add	r30, r24
 2f2:	f1 1d       	adc	r31, r1
 2f4:	e3 5a       	subi	r30, 0xA3	; 163
 2f6:	ff 4f       	sbci	r31, 0xFF	; 255
 2f8:	f0 82       	st	Z, r15
  _tx_buffer_head = i;
 2fa:	0b 8f       	std	Y+27, r16	; 0x1b
	
  sbi(*_ucsrb, UDRIE0);
 2fc:	ea 89       	ldd	r30, Y+18	; 0x12
 2fe:	fb 89       	ldd	r31, Y+19	; 0x13
 300:	80 81       	ld	r24, Z
 302:	80 62       	ori	r24, 0x20	; 32
 304:	07 c0       	rjmp	.+14     	; 0x314 <_ZN14HardwareSerial5writeEh+0x78>
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    *_udr = c;
 306:	ee 89       	ldd	r30, Y+22	; 0x16
 308:	ff 89       	ldd	r31, Y+23	; 0x17
 30a:	60 83       	st	Z, r22
    sbi(*_ucsra, TXC0);
 30c:	e8 89       	ldd	r30, Y+16	; 0x10
 30e:	f9 89       	ldd	r31, Y+17	; 0x11
 310:	80 81       	ld	r24, Z
 312:	80 64       	ori	r24, 0x40	; 64
 314:	80 83       	st	Z, r24
  _tx_buffer_head = i;
	
  sbi(*_ucsrb, UDRIE0);
  
  return 1;
}
 316:	81 e0       	ldi	r24, 0x01	; 1
 318:	90 e0       	ldi	r25, 0x00	; 0
 31a:	df 91       	pop	r29
 31c:	cf 91       	pop	r28
 31e:	1f 91       	pop	r17
 320:	0f 91       	pop	r16
 322:	ff 90       	pop	r15
 324:	ef 90       	pop	r14
 326:	08 95       	ret

00000328 <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
 328:	cf 93       	push	r28
 32a:	df 93       	push	r29
 32c:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
 32e:	88 8d       	ldd	r24, Y+24	; 0x18
 330:	88 23       	and	r24, r24
 332:	c1 f0       	breq	.+48     	; 0x364 <_ZN14HardwareSerial5flushEv+0x3c>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
 334:	ea 89       	ldd	r30, Y+18	; 0x12
 336:	fb 89       	ldd	r31, Y+19	; 0x13
 338:	80 81       	ld	r24, Z
 33a:	85 fd       	sbrc	r24, 5
 33c:	05 c0       	rjmp	.+10     	; 0x348 <_ZN14HardwareSerial5flushEv+0x20>
 33e:	a8 89       	ldd	r26, Y+16	; 0x10
 340:	b9 89       	ldd	r27, Y+17	; 0x11
 342:	8c 91       	ld	r24, X
 344:	86 fd       	sbrc	r24, 6
 346:	0e c0       	rjmp	.+28     	; 0x364 <_ZN14HardwareSerial5flushEv+0x3c>
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
 348:	0f b6       	in	r0, 0x3f	; 63
 34a:	07 fc       	sbrc	r0, 7
 34c:	f5 cf       	rjmp	.-22     	; 0x338 <_ZN14HardwareSerial5flushEv+0x10>
 34e:	80 81       	ld	r24, Z
 350:	85 ff       	sbrs	r24, 5
 352:	f2 cf       	rjmp	.-28     	; 0x338 <_ZN14HardwareSerial5flushEv+0x10>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
 354:	a8 89       	ldd	r26, Y+16	; 0x10
 356:	b9 89       	ldd	r27, Y+17	; 0x11
 358:	8c 91       	ld	r24, X
 35a:	85 ff       	sbrs	r24, 5
 35c:	ed cf       	rjmp	.-38     	; 0x338 <_ZN14HardwareSerial5flushEv+0x10>
	  _tx_udr_empty_irq();
 35e:	ce 01       	movw	r24, r28
 360:	7c df       	rcall	.-264    	; 0x25a <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
 362:	e8 cf       	rjmp	.-48     	; 0x334 <_ZN14HardwareSerial5flushEv+0xc>
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
 364:	df 91       	pop	r29
 366:	cf 91       	pop	r28
 368:	08 95       	ret

0000036a <_ZN14HardwareSerial5beginEmh>:
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
 36a:	cf 92       	push	r12
 36c:	df 92       	push	r13
 36e:	ef 92       	push	r14
 370:	ff 92       	push	r15
 372:	1f 93       	push	r17
 374:	cf 93       	push	r28
 376:	df 93       	push	r29
 378:	ec 01       	movw	r28, r24
 37a:	6a 01       	movw	r12, r20
 37c:	7b 01       	movw	r14, r22
 37e:	12 2f       	mov	r17, r18
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
 380:	e8 89       	ldd	r30, Y+16	; 0x10
 382:	f9 89       	ldd	r31, Y+17	; 0x11
 384:	82 e0       	ldi	r24, 0x02	; 2
 386:	80 83       	st	Z, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
 388:	41 15       	cp	r20, r1
 38a:	51 4e       	sbci	r21, 0xE1	; 225
 38c:	61 05       	cpc	r22, r1
 38e:	71 05       	cpc	r23, r1
 390:	a9 f0       	breq	.+42     	; 0x3bc <_ZN14HardwareSerial5beginEmh+0x52>
// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
 392:	60 e0       	ldi	r22, 0x00	; 0
 394:	79 e0       	ldi	r23, 0x09	; 9
 396:	8d e3       	ldi	r24, 0x3D	; 61
 398:	90 e0       	ldi	r25, 0x00	; 0
 39a:	a7 01       	movw	r20, r14
 39c:	96 01       	movw	r18, r12
 39e:	e6 d1       	rcall	.+972    	; 0x76c <__udivmodsi4>
 3a0:	da 01       	movw	r26, r20
 3a2:	c9 01       	movw	r24, r18
 3a4:	01 97       	sbiw	r24, 0x01	; 1
 3a6:	a1 09       	sbc	r26, r1
 3a8:	b1 09       	sbc	r27, r1
 3aa:	b6 95       	lsr	r27
 3ac:	a7 95       	ror	r26
 3ae:	97 95       	ror	r25
 3b0:	87 95       	ror	r24
 3b2:	9c 01       	movw	r18, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
 3b4:	21 15       	cp	r18, r1
 3b6:	80 e1       	ldi	r24, 0x10	; 16
 3b8:	38 07       	cpc	r19, r24
 3ba:	a0 f0       	brcs	.+40     	; 0x3e4 <_ZN14HardwareSerial5beginEmh+0x7a>
  {
    *_ucsra = 0;
 3bc:	e8 89       	ldd	r30, Y+16	; 0x10
 3be:	f9 89       	ldd	r31, Y+17	; 0x11
 3c0:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
 3c2:	60 e8       	ldi	r22, 0x80	; 128
 3c4:	74 e8       	ldi	r23, 0x84	; 132
 3c6:	8e e1       	ldi	r24, 0x1E	; 30
 3c8:	90 e0       	ldi	r25, 0x00	; 0
 3ca:	a7 01       	movw	r20, r14
 3cc:	96 01       	movw	r18, r12
 3ce:	ce d1       	rcall	.+924    	; 0x76c <__udivmodsi4>
 3d0:	da 01       	movw	r26, r20
 3d2:	c9 01       	movw	r24, r18
 3d4:	01 97       	sbiw	r24, 0x01	; 1
 3d6:	a1 09       	sbc	r26, r1
 3d8:	b1 09       	sbc	r27, r1
 3da:	b6 95       	lsr	r27
 3dc:	a7 95       	ror	r26
 3de:	97 95       	ror	r25
 3e0:	87 95       	ror	r24
 3e2:	9c 01       	movw	r18, r24
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
 3e4:	ec 85       	ldd	r30, Y+12	; 0x0c
 3e6:	fd 85       	ldd	r31, Y+13	; 0x0d
 3e8:	30 83       	st	Z, r19
  *_ubrrl = baud_setting;
 3ea:	ee 85       	ldd	r30, Y+14	; 0x0e
 3ec:	ff 85       	ldd	r31, Y+15	; 0x0f
 3ee:	20 83       	st	Z, r18

  _written = false;
 3f0:	18 8e       	std	Y+24, r1	; 0x18

  //set the data bits, parity, and stop bits
#if defined(__AVR_ATmega8__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
 3f2:	ec 89       	ldd	r30, Y+20	; 0x14
 3f4:	fd 89       	ldd	r31, Y+21	; 0x15
 3f6:	10 83       	st	Z, r17
  
  sbi(*_ucsrb, RXEN0);
 3f8:	ea 89       	ldd	r30, Y+18	; 0x12
 3fa:	fb 89       	ldd	r31, Y+19	; 0x13
 3fc:	80 81       	ld	r24, Z
 3fe:	80 61       	ori	r24, 0x10	; 16
 400:	80 83       	st	Z, r24
  sbi(*_ucsrb, TXEN0);
 402:	ea 89       	ldd	r30, Y+18	; 0x12
 404:	fb 89       	ldd	r31, Y+19	; 0x13
 406:	80 81       	ld	r24, Z
 408:	88 60       	ori	r24, 0x08	; 8
 40a:	80 83       	st	Z, r24
  sbi(*_ucsrb, RXCIE0);
 40c:	ea 89       	ldd	r30, Y+18	; 0x12
 40e:	fb 89       	ldd	r31, Y+19	; 0x13
 410:	80 81       	ld	r24, Z
 412:	80 68       	ori	r24, 0x80	; 128
 414:	80 83       	st	Z, r24
  cbi(*_ucsrb, UDRIE0);
 416:	ea 89       	ldd	r30, Y+18	; 0x12
 418:	fb 89       	ldd	r31, Y+19	; 0x13
 41a:	80 81       	ld	r24, Z
 41c:	8f 7d       	andi	r24, 0xDF	; 223
 41e:	80 83       	st	Z, r24
}
 420:	df 91       	pop	r29
 422:	cf 91       	pop	r28
 424:	1f 91       	pop	r17
 426:	ff 90       	pop	r15
 428:	ef 90       	pop	r14
 42a:	df 90       	pop	r13
 42c:	cf 90       	pop	r12
 42e:	08 95       	ret

00000430 <__vector_25>:
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
 430:	1f 92       	push	r1
 432:	0f 92       	push	r0
 434:	0f b6       	in	r0, 0x3f	; 63
 436:	0f 92       	push	r0
 438:	11 24       	eor	r1, r1
 43a:	0b b6       	in	r0, 0x3b	; 59
 43c:	0f 92       	push	r0
 43e:	2f 93       	push	r18
 440:	8f 93       	push	r24
 442:	9f 93       	push	r25
 444:	ef 93       	push	r30
 446:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
 448:	e0 91 44 02 	lds	r30, 0x0244	; 0x800244 <__data_end+0x10>
 44c:	f0 91 45 02 	lds	r31, 0x0245	; 0x800245 <__data_end+0x11>
 450:	80 81       	ld	r24, Z
 452:	e0 91 4a 02 	lds	r30, 0x024A	; 0x80024a <__data_end+0x16>
 456:	f0 91 4b 02 	lds	r31, 0x024B	; 0x80024b <__data_end+0x17>
 45a:	82 fd       	sbrc	r24, 2
 45c:	12 c0       	rjmp	.+36     	; 0x482 <__vector_25+0x52>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
 45e:	90 81       	ld	r25, Z
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
 460:	80 91 4d 02 	lds	r24, 0x024D	; 0x80024d <__data_end+0x19>
 464:	8f 5f       	subi	r24, 0xFF	; 255
 466:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
 468:	20 91 4e 02 	lds	r18, 0x024E	; 0x80024e <__data_end+0x1a>
 46c:	82 17       	cp	r24, r18
 46e:	51 f0       	breq	.+20     	; 0x484 <__vector_25+0x54>
      _rx_buffer[_rx_buffer_head] = c;
 470:	e0 91 4d 02 	lds	r30, 0x024D	; 0x80024d <__data_end+0x19>
 474:	f0 e0       	ldi	r31, 0x00	; 0
 476:	ec 5c       	subi	r30, 0xCC	; 204
 478:	fd 4f       	sbci	r31, 0xFD	; 253
 47a:	95 8f       	std	Z+29, r25	; 0x1d
      _rx_buffer_head = i;
 47c:	80 93 4d 02 	sts	0x024D, r24	; 0x80024d <__data_end+0x19>
 480:	01 c0       	rjmp	.+2      	; 0x484 <__vector_25+0x54>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
 482:	80 81       	ld	r24, Z
    Serial._rx_complete_irq();
  }
 484:	ff 91       	pop	r31
 486:	ef 91       	pop	r30
 488:	9f 91       	pop	r25
 48a:	8f 91       	pop	r24
 48c:	2f 91       	pop	r18
 48e:	0f 90       	pop	r0
 490:	0b be       	out	0x3b, r0	; 59
 492:	0f 90       	pop	r0
 494:	0f be       	out	0x3f, r0	; 63
 496:	0f 90       	pop	r0
 498:	1f 90       	pop	r1
 49a:	18 95       	reti

0000049c <__vector_26>:
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
 49c:	1f 92       	push	r1
 49e:	0f 92       	push	r0
 4a0:	0f b6       	in	r0, 0x3f	; 63
 4a2:	0f 92       	push	r0
 4a4:	11 24       	eor	r1, r1
 4a6:	0b b6       	in	r0, 0x3b	; 59
 4a8:	0f 92       	push	r0
 4aa:	2f 93       	push	r18
 4ac:	3f 93       	push	r19
 4ae:	4f 93       	push	r20
 4b0:	5f 93       	push	r21
 4b2:	6f 93       	push	r22
 4b4:	7f 93       	push	r23
 4b6:	8f 93       	push	r24
 4b8:	9f 93       	push	r25
 4ba:	af 93       	push	r26
 4bc:	bf 93       	push	r27
 4be:	ef 93       	push	r30
 4c0:	ff 93       	push	r31
  Serial._tx_udr_empty_irq();
 4c2:	84 e3       	ldi	r24, 0x34	; 52
 4c4:	92 e0       	ldi	r25, 0x02	; 2
 4c6:	c9 de       	rcall	.-622    	; 0x25a <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
 4c8:	ff 91       	pop	r31
 4ca:	ef 91       	pop	r30
 4cc:	bf 91       	pop	r27
 4ce:	af 91       	pop	r26
 4d0:	9f 91       	pop	r25
 4d2:	8f 91       	pop	r24
 4d4:	7f 91       	pop	r23
 4d6:	6f 91       	pop	r22
 4d8:	5f 91       	pop	r21
 4da:	4f 91       	pop	r20
 4dc:	3f 91       	pop	r19
 4de:	2f 91       	pop	r18
 4e0:	0f 90       	pop	r0
 4e2:	0b be       	out	0x3b, r0	; 59
 4e4:	0f 90       	pop	r0
 4e6:	0f be       	out	0x3f, r0	; 63
 4e8:	0f 90       	pop	r0
 4ea:	1f 90       	pop	r1
 4ec:	18 95       	reti

000004ee <_Z17Serial0_availablev>:
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
 4ee:	84 e3       	ldi	r24, 0x34	; 52
 4f0:	92 e0       	ldi	r25, 0x02	; 2
 4f2:	3a de       	rcall	.-908    	; 0x168 <_ZN14HardwareSerial9availableEv>
 4f4:	21 e0       	ldi	r18, 0x01	; 1
 4f6:	89 2b       	or	r24, r25
 4f8:	09 f4       	brne	.+2      	; 0x4fc <_Z17Serial0_availablev+0xe>
 4fa:	20 e0       	ldi	r18, 0x00	; 0
}
 4fc:	82 2f       	mov	r24, r18
 4fe:	08 95       	ret

00000500 <_GLOBAL__sub_I___vector_25>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
 500:	e4 e3       	ldi	r30, 0x34	; 52
 502:	f2 e0       	ldi	r31, 0x02	; 2
 504:	13 82       	std	Z+3, r1	; 0x03
 506:	12 82       	std	Z+2, r1	; 0x02
  public:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;

    Stream() {_timeout=1000;}
 508:	88 ee       	ldi	r24, 0xE8	; 232
 50a:	93 e0       	ldi	r25, 0x03	; 3
 50c:	a0 e0       	ldi	r26, 0x00	; 0
 50e:	b0 e0       	ldi	r27, 0x00	; 0
 510:	84 83       	std	Z+4, r24	; 0x04
 512:	95 83       	std	Z+5, r25	; 0x05
 514:	a6 83       	std	Z+6, r26	; 0x06
 516:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
 518:	87 e1       	ldi	r24, 0x17	; 23
 51a:	92 e0       	ldi	r25, 0x02	; 2
 51c:	91 83       	std	Z+1, r25	; 0x01
 51e:	80 83       	st	Z, r24
 520:	85 ec       	ldi	r24, 0xC5	; 197
 522:	90 e0       	ldi	r25, 0x00	; 0
 524:	95 87       	std	Z+13, r25	; 0x0d
 526:	84 87       	std	Z+12, r24	; 0x0c
 528:	84 ec       	ldi	r24, 0xC4	; 196
 52a:	90 e0       	ldi	r25, 0x00	; 0
 52c:	97 87       	std	Z+15, r25	; 0x0f
 52e:	86 87       	std	Z+14, r24	; 0x0e
 530:	80 ec       	ldi	r24, 0xC0	; 192
 532:	90 e0       	ldi	r25, 0x00	; 0
 534:	91 8b       	std	Z+17, r25	; 0x11
 536:	80 8b       	std	Z+16, r24	; 0x10
 538:	81 ec       	ldi	r24, 0xC1	; 193
 53a:	90 e0       	ldi	r25, 0x00	; 0
 53c:	93 8b       	std	Z+19, r25	; 0x13
 53e:	82 8b       	std	Z+18, r24	; 0x12
 540:	82 ec       	ldi	r24, 0xC2	; 194
 542:	90 e0       	ldi	r25, 0x00	; 0
 544:	95 8b       	std	Z+21, r25	; 0x15
 546:	84 8b       	std	Z+20, r24	; 0x14
 548:	86 ec       	ldi	r24, 0xC6	; 198
 54a:	90 e0       	ldi	r25, 0x00	; 0
 54c:	97 8b       	std	Z+23, r25	; 0x17
 54e:	86 8b       	std	Z+22, r24	; 0x16
 550:	11 8e       	std	Z+25, r1	; 0x19
 552:	12 8e       	std	Z+26, r1	; 0x1a
 554:	13 8e       	std	Z+27, r1	; 0x1b
 556:	14 8e       	std	Z+28, r1	; 0x1c
 558:	08 95       	ret

0000055a <initVariant>:
 55a:	08 95       	ret

0000055c <main>:
void setupUSB() __attribute__((weak));
void setupUSB() { }

int main(void)
{
	init();
 55c:	a5 d0       	rcall	.+330    	; 0x6a8 <init>
 55e:	fd df       	rcall	.-6      	; 0x55a <initVariant>
 560:	f1 dd       	rcall	.-1054   	; 0x144 <setup>
 562:	c1 ef       	ldi	r28, 0xF1	; 241
 564:	d0 e0       	ldi	r29, 0x00	; 0
 566:	fb dd       	rcall	.-1034   	; 0x15e <loop>
 568:	20 97       	sbiw	r28, 0x00	; 0
 56a:	e9 f3       	breq	.-6      	; 0x566 <main+0xa>
 56c:	3a de       	rcall	.-908    	; 0x1e2 <_Z14serialEventRunv>
 56e:	fb cf       	rjmp	.-10     	; 0x566 <main+0xa>

00000570 <_ZN5Print5writeEPKhj>:
size_t Print::println(const String &s)
{
  size_t n = print(s);
  n += println();
  return n;
}
 570:	cf 92       	push	r12
 572:	df 92       	push	r13
 574:	ef 92       	push	r14
 576:	ff 92       	push	r15
 578:	0f 93       	push	r16
 57a:	1f 93       	push	r17
 57c:	cf 93       	push	r28
 57e:	df 93       	push	r29
 580:	6c 01       	movw	r12, r24
 582:	7a 01       	movw	r14, r20
 584:	8b 01       	movw	r16, r22
 586:	c0 e0       	ldi	r28, 0x00	; 0
 588:	d0 e0       	ldi	r29, 0x00	; 0
 58a:	ce 15       	cp	r28, r14
 58c:	df 05       	cpc	r29, r15
 58e:	81 f0       	breq	.+32     	; 0x5b0 <_ZN5Print5writeEPKhj+0x40>
 590:	d8 01       	movw	r26, r16
 592:	6d 91       	ld	r22, X+
 594:	8d 01       	movw	r16, r26
 596:	d6 01       	movw	r26, r12
 598:	ed 91       	ld	r30, X+
 59a:	fc 91       	ld	r31, X
 59c:	01 90       	ld	r0, Z+
 59e:	f0 81       	ld	r31, Z
 5a0:	e0 2d       	mov	r30, r0
 5a2:	c6 01       	movw	r24, r12
 5a4:	19 95       	eicall
 5a6:	89 2b       	or	r24, r25
 5a8:	11 f0       	breq	.+4      	; 0x5ae <_ZN5Print5writeEPKhj+0x3e>
 5aa:	21 96       	adiw	r28, 0x01	; 1
 5ac:	ee cf       	rjmp	.-36     	; 0x58a <_ZN5Print5writeEPKhj+0x1a>
 5ae:	7e 01       	movw	r14, r28
 5b0:	c7 01       	movw	r24, r14
 5b2:	df 91       	pop	r29
 5b4:	cf 91       	pop	r28
 5b6:	1f 91       	pop	r17
 5b8:	0f 91       	pop	r16
 5ba:	ff 90       	pop	r15
 5bc:	ef 90       	pop	r14
 5be:	df 90       	pop	r13
 5c0:	cf 90       	pop	r12
 5c2:	08 95       	ret

000005c4 <_ZN5Print5writeEPKc>:
 5c4:	61 15       	cp	r22, r1
 5c6:	71 05       	cpc	r23, r1
 5c8:	79 f0       	breq	.+30     	; 0x5e8 <_ZN5Print5writeEPKc+0x24>
 5ca:	fb 01       	movw	r30, r22
 5cc:	01 90       	ld	r0, Z+
 5ce:	00 20       	and	r0, r0
 5d0:	e9 f7       	brne	.-6      	; 0x5cc <_ZN5Print5writeEPKc+0x8>
 5d2:	31 97       	sbiw	r30, 0x01	; 1
 5d4:	af 01       	movw	r20, r30
 5d6:	46 1b       	sub	r20, r22
 5d8:	57 0b       	sbc	r21, r23
 5da:	dc 01       	movw	r26, r24
 5dc:	ed 91       	ld	r30, X+
 5de:	fc 91       	ld	r31, X
 5e0:	02 80       	ldd	r0, Z+2	; 0x02
 5e2:	f3 81       	ldd	r31, Z+3	; 0x03
 5e4:	e0 2d       	mov	r30, r0
 5e6:	19 94       	eijmp
 5e8:	80 e0       	ldi	r24, 0x00	; 0
 5ea:	90 e0       	ldi	r25, 0x00	; 0
 5ec:	08 95       	ret

000005ee <_ZN5Print7printlnEv>:
 5ee:	65 e2       	ldi	r22, 0x25	; 37
 5f0:	72 e0       	ldi	r23, 0x02	; 2
 5f2:	e8 cf       	rjmp	.-48     	; 0x5c4 <_ZN5Print5writeEPKc>

000005f4 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
 5f4:	0f 93       	push	r16
 5f6:	1f 93       	push	r17
 5f8:	cf 93       	push	r28
 5fa:	df 93       	push	r29
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
 5fc:	ec 01       	movw	r28, r24
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
 5fe:	e2 df       	rcall	.-60     	; 0x5c4 <_ZN5Print5writeEPKc>
 600:	8c 01       	movw	r16, r24
  return n;
}
 602:	ce 01       	movw	r24, r28
 604:	f4 df       	rcall	.-24     	; 0x5ee <_ZN5Print7printlnEv>
 606:	80 0f       	add	r24, r16
 608:	91 1f       	adc	r25, r17
 60a:	df 91       	pop	r29
 60c:	cf 91       	pop	r28
 60e:	1f 91       	pop	r17
 610:	0f 91       	pop	r16
 612:	08 95       	ret

00000614 <__vector_23>:
	

#endif

	// busy wait
	__asm__ __volatile__ (
 614:	1f 92       	push	r1
 616:	0f 92       	push	r0
 618:	0f b6       	in	r0, 0x3f	; 63
 61a:	0f 92       	push	r0
 61c:	11 24       	eor	r1, r1
 61e:	2f 93       	push	r18
 620:	3f 93       	push	r19
 622:	8f 93       	push	r24
 624:	9f 93       	push	r25
 626:	af 93       	push	r26
 628:	bf 93       	push	r27
 62a:	80 91 d2 02 	lds	r24, 0x02D2	; 0x8002d2 <timer0_millis>
 62e:	90 91 d3 02 	lds	r25, 0x02D3	; 0x8002d3 <timer0_millis+0x1>
 632:	a0 91 d4 02 	lds	r26, 0x02D4	; 0x8002d4 <timer0_millis+0x2>
 636:	b0 91 d5 02 	lds	r27, 0x02D5	; 0x8002d5 <timer0_millis+0x3>
 63a:	30 91 d1 02 	lds	r19, 0x02D1	; 0x8002d1 <timer0_fract>
 63e:	23 e0       	ldi	r18, 0x03	; 3
 640:	23 0f       	add	r18, r19
 642:	2d 37       	cpi	r18, 0x7D	; 125
 644:	20 f4       	brcc	.+8      	; 0x64e <__vector_23+0x3a>
 646:	01 96       	adiw	r24, 0x01	; 1
 648:	a1 1d       	adc	r26, r1
 64a:	b1 1d       	adc	r27, r1
 64c:	05 c0       	rjmp	.+10     	; 0x658 <__vector_23+0x44>
 64e:	26 e8       	ldi	r18, 0x86	; 134
 650:	23 0f       	add	r18, r19
 652:	02 96       	adiw	r24, 0x02	; 2
 654:	a1 1d       	adc	r26, r1
 656:	b1 1d       	adc	r27, r1
 658:	20 93 d1 02 	sts	0x02D1, r18	; 0x8002d1 <timer0_fract>
 65c:	80 93 d2 02 	sts	0x02D2, r24	; 0x8002d2 <timer0_millis>
 660:	90 93 d3 02 	sts	0x02D3, r25	; 0x8002d3 <timer0_millis+0x1>
 664:	a0 93 d4 02 	sts	0x02D4, r26	; 0x8002d4 <timer0_millis+0x2>
 668:	b0 93 d5 02 	sts	0x02D5, r27	; 0x8002d5 <timer0_millis+0x3>
 66c:	80 91 d6 02 	lds	r24, 0x02D6	; 0x8002d6 <timer0_overflow_count>
 670:	90 91 d7 02 	lds	r25, 0x02D7	; 0x8002d7 <timer0_overflow_count+0x1>
 674:	a0 91 d8 02 	lds	r26, 0x02D8	; 0x8002d8 <timer0_overflow_count+0x2>
 678:	b0 91 d9 02 	lds	r27, 0x02D9	; 0x8002d9 <timer0_overflow_count+0x3>
 67c:	01 96       	adiw	r24, 0x01	; 1
 67e:	a1 1d       	adc	r26, r1
 680:	b1 1d       	adc	r27, r1
 682:	80 93 d6 02 	sts	0x02D6, r24	; 0x8002d6 <timer0_overflow_count>
 686:	90 93 d7 02 	sts	0x02D7, r25	; 0x8002d7 <timer0_overflow_count+0x1>
 68a:	a0 93 d8 02 	sts	0x02D8, r26	; 0x8002d8 <timer0_overflow_count+0x2>
 68e:	b0 93 d9 02 	sts	0x02D9, r27	; 0x8002d9 <timer0_overflow_count+0x3>
 692:	bf 91       	pop	r27
 694:	af 91       	pop	r26
 696:	9f 91       	pop	r25
 698:	8f 91       	pop	r24
 69a:	3f 91       	pop	r19
 69c:	2f 91       	pop	r18
 69e:	0f 90       	pop	r0
 6a0:	0f be       	out	0x3f, r0	; 63
 6a2:	0f 90       	pop	r0
 6a4:	1f 90       	pop	r1
 6a6:	18 95       	reti

000006a8 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
 6a8:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
 6aa:	84 b5       	in	r24, 0x24	; 36
 6ac:	82 60       	ori	r24, 0x02	; 2
 6ae:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
 6b0:	84 b5       	in	r24, 0x24	; 36
 6b2:	81 60       	ori	r24, 0x01	; 1
 6b4:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
 6b6:	85 b5       	in	r24, 0x25	; 37
 6b8:	82 60       	ori	r24, 0x02	; 2
 6ba:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
 6bc:	85 b5       	in	r24, 0x25	; 37
 6be:	81 60       	ori	r24, 0x01	; 1
 6c0:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
 6c2:	ee e6       	ldi	r30, 0x6E	; 110
 6c4:	f0 e0       	ldi	r31, 0x00	; 0
 6c6:	80 81       	ld	r24, Z
 6c8:	81 60       	ori	r24, 0x01	; 1
 6ca:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
 6cc:	e1 e8       	ldi	r30, 0x81	; 129
 6ce:	f0 e0       	ldi	r31, 0x00	; 0
 6d0:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
 6d2:	80 81       	ld	r24, Z
 6d4:	82 60       	ori	r24, 0x02	; 2
 6d6:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
 6d8:	80 81       	ld	r24, Z
 6da:	81 60       	ori	r24, 0x01	; 1
 6dc:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
 6de:	e0 e8       	ldi	r30, 0x80	; 128
 6e0:	f0 e0       	ldi	r31, 0x00	; 0
 6e2:	80 81       	ld	r24, Z
 6e4:	81 60       	ori	r24, 0x01	; 1
 6e6:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
 6e8:	e1 eb       	ldi	r30, 0xB1	; 177
 6ea:	f0 e0       	ldi	r31, 0x00	; 0
 6ec:	80 81       	ld	r24, Z
 6ee:	84 60       	ori	r24, 0x04	; 4
 6f0:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
 6f2:	e0 eb       	ldi	r30, 0xB0	; 176
 6f4:	f0 e0       	ldi	r31, 0x00	; 0
 6f6:	80 81       	ld	r24, Z
 6f8:	81 60       	ori	r24, 0x01	; 1
 6fa:	80 83       	st	Z, r24
//#else
	// Timer 2 not finished (may not be present on this CPU)
#endif

#if defined(TCCR3B) && defined(CS31) && defined(WGM30)
	sbi(TCCR3B, CS31);		// set timer 3 prescale factor to 64
 6fc:	e1 e9       	ldi	r30, 0x91	; 145
 6fe:	f0 e0       	ldi	r31, 0x00	; 0
 700:	80 81       	ld	r24, Z
 702:	82 60       	ori	r24, 0x02	; 2
 704:	80 83       	st	Z, r24
	sbi(TCCR3B, CS30);
 706:	80 81       	ld	r24, Z
 708:	81 60       	ori	r24, 0x01	; 1
 70a:	80 83       	st	Z, r24
	sbi(TCCR3A, WGM30);		// put timer 3 in 8-bit phase correct pwm mode
 70c:	e0 e9       	ldi	r30, 0x90	; 144
 70e:	f0 e0       	ldi	r31, 0x00	; 0
 710:	80 81       	ld	r24, Z
 712:	81 60       	ori	r24, 0x01	; 1
 714:	80 83       	st	Z, r24
	sbi(TCCR4D, WGM40);		// put timer 4 in phase- and frequency-correct PWM mode	
	sbi(TCCR4A, PWM4A);		// enable PWM mode for comparator OCR4A
	sbi(TCCR4C, PWM4D);		// enable PWM mode for comparator OCR4D
#else /* beginning of timer4 block for ATMEGA1280 and ATMEGA2560 */
#if defined(TCCR4B) && defined(CS41) && defined(WGM40)
	sbi(TCCR4B, CS41);		// set timer 4 prescale factor to 64
 716:	e1 ea       	ldi	r30, 0xA1	; 161
 718:	f0 e0       	ldi	r31, 0x00	; 0
 71a:	80 81       	ld	r24, Z
 71c:	82 60       	ori	r24, 0x02	; 2
 71e:	80 83       	st	Z, r24
	sbi(TCCR4B, CS40);
 720:	80 81       	ld	r24, Z
 722:	81 60       	ori	r24, 0x01	; 1
 724:	80 83       	st	Z, r24
	sbi(TCCR4A, WGM40);		// put timer 4 in 8-bit phase correct pwm mode
 726:	e0 ea       	ldi	r30, 0xA0	; 160
 728:	f0 e0       	ldi	r31, 0x00	; 0
 72a:	80 81       	ld	r24, Z
 72c:	81 60       	ori	r24, 0x01	; 1
 72e:	80 83       	st	Z, r24
#endif
#endif /* end timer4 block for ATMEGA1280/2560 and similar */	

#if defined(TCCR5B) && defined(CS51) && defined(WGM50)
	sbi(TCCR5B, CS51);		// set timer 5 prescale factor to 64
 730:	e1 e2       	ldi	r30, 0x21	; 33
 732:	f1 e0       	ldi	r31, 0x01	; 1
 734:	80 81       	ld	r24, Z
 736:	82 60       	ori	r24, 0x02	; 2
 738:	80 83       	st	Z, r24
	sbi(TCCR5B, CS50);
 73a:	80 81       	ld	r24, Z
 73c:	81 60       	ori	r24, 0x01	; 1
 73e:	80 83       	st	Z, r24
	sbi(TCCR5A, WGM50);		// put timer 5 in 8-bit phase correct pwm mode
 740:	e0 e2       	ldi	r30, 0x20	; 32
 742:	f1 e0       	ldi	r31, 0x01	; 1
 744:	80 81       	ld	r24, Z
 746:	81 60       	ori	r24, 0x01	; 1
 748:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
 74a:	ea e7       	ldi	r30, 0x7A	; 122
 74c:	f0 e0       	ldi	r31, 0x00	; 0
 74e:	80 81       	ld	r24, Z
 750:	84 60       	ori	r24, 0x04	; 4
 752:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
 754:	80 81       	ld	r24, Z
 756:	82 60       	ori	r24, 0x02	; 2
 758:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
 75a:	80 81       	ld	r24, Z
 75c:	81 60       	ori	r24, 0x01	; 1
 75e:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
 760:	80 81       	ld	r24, Z
 762:	80 68       	ori	r24, 0x80	; 128
 764:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
 766:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7000c1>
 76a:	08 95       	ret

0000076c <__udivmodsi4>:
 76c:	a1 e2       	ldi	r26, 0x21	; 33
 76e:	1a 2e       	mov	r1, r26
 770:	aa 1b       	sub	r26, r26
 772:	bb 1b       	sub	r27, r27
 774:	fd 01       	movw	r30, r26
 776:	0d c0       	rjmp	.+26     	; 0x792 <__udivmodsi4_ep>

00000778 <__udivmodsi4_loop>:
 778:	aa 1f       	adc	r26, r26
 77a:	bb 1f       	adc	r27, r27
 77c:	ee 1f       	adc	r30, r30
 77e:	ff 1f       	adc	r31, r31
 780:	a2 17       	cp	r26, r18
 782:	b3 07       	cpc	r27, r19
 784:	e4 07       	cpc	r30, r20
 786:	f5 07       	cpc	r31, r21
 788:	20 f0       	brcs	.+8      	; 0x792 <__udivmodsi4_ep>
 78a:	a2 1b       	sub	r26, r18
 78c:	b3 0b       	sbc	r27, r19
 78e:	e4 0b       	sbc	r30, r20
 790:	f5 0b       	sbc	r31, r21

00000792 <__udivmodsi4_ep>:
 792:	66 1f       	adc	r22, r22
 794:	77 1f       	adc	r23, r23
 796:	88 1f       	adc	r24, r24
 798:	99 1f       	adc	r25, r25
 79a:	1a 94       	dec	r1
 79c:	69 f7       	brne	.-38     	; 0x778 <__udivmodsi4_loop>
 79e:	60 95       	com	r22
 7a0:	70 95       	com	r23
 7a2:	80 95       	com	r24
 7a4:	90 95       	com	r25
 7a6:	9b 01       	movw	r18, r22
 7a8:	ac 01       	movw	r20, r24
 7aa:	bd 01       	movw	r22, r26
 7ac:	cf 01       	movw	r24, r30
 7ae:	08 95       	ret

000007b0 <__tablejump2__>:
 7b0:	ee 0f       	add	r30, r30
 7b2:	ff 1f       	adc	r31, r31
 7b4:	88 1f       	adc	r24, r24
 7b6:	8b bf       	out	0x3b, r24	; 59
 7b8:	07 90       	elpm	r0, Z+
 7ba:	f6 91       	elpm	r31, Z
 7bc:	e0 2d       	mov	r30, r0
 7be:	19 94       	eijmp

000007c0 <_exit>:
 7c0:	f8 94       	cli

000007c2 <__stop_program>:
 7c2:	ff cf       	rjmp	.-2      	; 0x7c2 <__stop_program>
