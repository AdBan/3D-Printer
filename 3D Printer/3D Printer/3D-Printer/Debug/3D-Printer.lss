
3D-Printer.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000002a  00800200  00001ffe  00002092  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001ffe  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000bc  0080022a  0080022a  000020bc  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000020bc  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002118  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000006d8  00000000  00000000  00002158  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00011dcc  00000000  00000000  00002830  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002fa2  00000000  00000000  000145fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00003b76  00000000  00000000  0001759e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001788  00000000  00000000  0001b114  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000029e6  00000000  00000000  0001c89c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00008cc2  00000000  00000000  0001f282  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000006b8  00000000  00000000  00027f44  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	33 c1       	rjmp	.+614    	; 0x268 <__ctors_end>
       2:	00 00       	nop
       4:	61 c1       	rjmp	.+706    	; 0x2c8 <__bad_interrupt>
       6:	00 00       	nop
       8:	5f c1       	rjmp	.+702    	; 0x2c8 <__bad_interrupt>
       a:	00 00       	nop
       c:	5d c1       	rjmp	.+698    	; 0x2c8 <__bad_interrupt>
       e:	00 00       	nop
      10:	5b c1       	rjmp	.+694    	; 0x2c8 <__bad_interrupt>
      12:	00 00       	nop
      14:	59 c1       	rjmp	.+690    	; 0x2c8 <__bad_interrupt>
      16:	00 00       	nop
      18:	57 c1       	rjmp	.+686    	; 0x2c8 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	55 c1       	rjmp	.+682    	; 0x2c8 <__bad_interrupt>
      1e:	00 00       	nop
      20:	53 c1       	rjmp	.+678    	; 0x2c8 <__bad_interrupt>
      22:	00 00       	nop
      24:	51 c1       	rjmp	.+674    	; 0x2c8 <__bad_interrupt>
      26:	00 00       	nop
      28:	4f c1       	rjmp	.+670    	; 0x2c8 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	4d c1       	rjmp	.+666    	; 0x2c8 <__bad_interrupt>
      2e:	00 00       	nop
      30:	4b c1       	rjmp	.+662    	; 0x2c8 <__bad_interrupt>
      32:	00 00       	nop
      34:	49 c1       	rjmp	.+658    	; 0x2c8 <__bad_interrupt>
      36:	00 00       	nop
      38:	47 c1       	rjmp	.+654    	; 0x2c8 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	45 c1       	rjmp	.+650    	; 0x2c8 <__bad_interrupt>
      3e:	00 00       	nop
      40:	43 c1       	rjmp	.+646    	; 0x2c8 <__bad_interrupt>
      42:	00 00       	nop
      44:	41 c1       	rjmp	.+642    	; 0x2c8 <__bad_interrupt>
      46:	00 00       	nop
      48:	3f c1       	rjmp	.+638    	; 0x2c8 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	3d c1       	rjmp	.+634    	; 0x2c8 <__bad_interrupt>
      4e:	00 00       	nop
      50:	3b c1       	rjmp	.+630    	; 0x2c8 <__bad_interrupt>
      52:	00 00       	nop
      54:	39 c1       	rjmp	.+626    	; 0x2c8 <__bad_interrupt>
      56:	00 00       	nop
      58:	37 c1       	rjmp	.+622    	; 0x2c8 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	0c 94 b8 08 	jmp	0x1170	; 0x1170 <__vector_23>
      60:	33 c1       	rjmp	.+614    	; 0x2c8 <__bad_interrupt>
      62:	00 00       	nop
      64:	43 c7       	rjmp	.+3718   	; 0xeec <__vector_25>
      66:	00 00       	nop
      68:	77 c7       	rjmp	.+3822   	; 0xf58 <__vector_26>
      6a:	00 00       	nop
      6c:	2d c1       	rjmp	.+602    	; 0x2c8 <__bad_interrupt>
      6e:	00 00       	nop
      70:	2b c1       	rjmp	.+598    	; 0x2c8 <__bad_interrupt>
      72:	00 00       	nop
      74:	29 c1       	rjmp	.+594    	; 0x2c8 <__bad_interrupt>
      76:	00 00       	nop
      78:	27 c1       	rjmp	.+590    	; 0x2c8 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	25 c1       	rjmp	.+586    	; 0x2c8 <__bad_interrupt>
      7e:	00 00       	nop
      80:	23 c1       	rjmp	.+582    	; 0x2c8 <__bad_interrupt>
      82:	00 00       	nop
      84:	21 c1       	rjmp	.+578    	; 0x2c8 <__bad_interrupt>
      86:	00 00       	nop
      88:	1f c1       	rjmp	.+574    	; 0x2c8 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	1d c1       	rjmp	.+570    	; 0x2c8 <__bad_interrupt>
      8e:	00 00       	nop
      90:	1b c1       	rjmp	.+566    	; 0x2c8 <__bad_interrupt>
      92:	00 00       	nop
      94:	19 c1       	rjmp	.+562    	; 0x2c8 <__bad_interrupt>
      96:	00 00       	nop
      98:	17 c1       	rjmp	.+558    	; 0x2c8 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	15 c1       	rjmp	.+554    	; 0x2c8 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	13 c1       	rjmp	.+550    	; 0x2c8 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	11 c1       	rjmp	.+546    	; 0x2c8 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	0f c1       	rjmp	.+542    	; 0x2c8 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	0d c1       	rjmp	.+538    	; 0x2c8 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	0b c1       	rjmp	.+534    	; 0x2c8 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	09 c1       	rjmp	.+530    	; 0x2c8 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	07 c1       	rjmp	.+526    	; 0x2c8 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	05 c1       	rjmp	.+522    	; 0x2c8 <__bad_interrupt>
      be:	00 00       	nop
      c0:	03 c1       	rjmp	.+518    	; 0x2c8 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	01 c1       	rjmp	.+514    	; 0x2c8 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	ff c0       	rjmp	.+510    	; 0x2c8 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	fd c0       	rjmp	.+506    	; 0x2c8 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	fb c0       	rjmp	.+502    	; 0x2c8 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	f9 c0       	rjmp	.+498    	; 0x2c8 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	f7 c0       	rjmp	.+494    	; 0x2c8 <__bad_interrupt>
      da:	00 00       	nop
      dc:	f5 c0       	rjmp	.+490    	; 0x2c8 <__bad_interrupt>
      de:	00 00       	nop
      e0:	f3 c0       	rjmp	.+486    	; 0x2c8 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	95 09       	sbc	r25, r5
      e6:	98 09       	sbc	r25, r8
      e8:	87 09       	sbc	r24, r7
      ea:	8b 09       	sbc	r24, r11
      ec:	91 09       	sbc	r25, r1
      ee:	cf 09       	sbc	r28, r15
      f0:	9c 09       	sbc	r25, r12
      f2:	a0 09       	sbc	r26, r0
      f4:	a6 09       	sbc	r26, r6
      f6:	aa 09       	sbc	r26, r10
      f8:	ae 09       	sbc	r26, r14
      fa:	b4 09       	sbc	r27, r4
      fc:	b8 09       	sbc	r27, r8
      fe:	bc 09       	sbc	r27, r12
     100:	cf 09       	sbc	r28, r15
     102:	c2 09       	sbc	r28, r2
     104:	c6 09       	sbc	r28, r6
     106:	ca 09       	sbc	r28, r10

00000108 <__trampolines_end>:
     108:	4e 41       	sbci	r20, 0x1E	; 30
     10a:	4e 49       	Address 0x0000010a is out of bounds.
.word	0xffff	; ????

0000010b <pstr_inity>:
     10b:	49 4e 49 54 59                                      INITY

00000110 <pstr_inf>:
     110:	49 4e 46                                            INF

00000113 <pwr_m10>:
     113:	cd cc cc 3d 0a d7 23 3c 17 b7 d1 38 77 cc 2b 32     ...=..#<...8w.+2
     123:	95 95 e6 24 1f b1 4f 0a                             ...$..O.

0000012b <pwr_p10>:
     12b:	00 00 20 41 00 00 c8 42 00 40 1c 46 20 bc be 4c     .. A...B.@.F ..L
     13b:	ca 1b 0e 5a ae c5 9d 74                             ...Z...t

00000143 <digital_pin_to_timer_PGM>:
     143:	00 00 0a 0b 02 09 0c 0d 0e 08 07 03 04 01 00 00     ................
	...
     16f:	12 11 10 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...

00000189 <digital_pin_to_bit_mask_PGM>:
     189:	01 02 10 20 20 08 08 10 20 40 10 20 40 80 02 01     ...  ... @. @...
     199:	02 01 08 04 02 01 01 02 04 08 10 20 40 80 80 40     ........... @..@
     1a9:	20 10 08 04 02 01 80 04 02 01 80 40 20 10 08 04      ..........@ ...
     1b9:	02 01 08 04 02 01 01 02 04 08 10 20 40 80 01 02     ........... @...
     1c9:	04 08 10 20 40 80                                   ... @.

000001cf <digital_pin_to_port_PGM>:
     1cf:	05 05 05 05 07 05 08 08 08 08 02 02 02 02 0a 0a     ................
     1df:	08 08 04 04 04 04 01 01 01 01 01 01 01 01 03 03     ................
     1ef:	03 03 03 03 03 03 04 07 07 07 0c 0c 0c 0c 0c 0c     ................
     1ff:	0c 0c 02 02 02 02 06 06 06 06 06 06 06 06 0b 0b     ................
     20f:	0b 0b 0b 0b 0b 0b                                   ......

00000215 <port_to_input_PGM>:
     215:	00 00 20 00 23 00 26 00 29 00 2c 00 2f 00 32 00     .. .#.&.).,./.2.
     225:	00 01 00 00 03 01 06 01 09 01                       ..........

0000022f <port_to_output_PGM>:
     22f:	00 00 22 00 25 00 28 00 2b 00 2e 00 31 00 34 00     ..".%.(.+...1.4.
     23f:	02 01 00 00 05 01 08 01 0b 01                       ..........

00000249 <port_to_mode_PGM>:
     249:	00 00 21 00 24 00 27 00 2a 00 2d 00 30 00 33 00     ..!.$.'.*.-.0.3.
     259:	01 01 00 00 04 01 07 01 0a 01 00                    ...........

00000264 <__ctors_start>:
     264:	6e 01       	movw	r12, r28
     266:	de 07       	cpc	r29, r30

00000268 <__ctors_end>:
     268:	11 24       	eor	r1, r1
     26a:	1f be       	out	0x3f, r1	; 63
     26c:	cf ef       	ldi	r28, 0xFF	; 255
     26e:	d1 e2       	ldi	r29, 0x21	; 33
     270:	de bf       	out	0x3e, r29	; 62
     272:	cd bf       	out	0x3d, r28	; 61
     274:	00 e0       	ldi	r16, 0x00	; 0
     276:	0c bf       	out	0x3c, r16	; 60

00000278 <__do_copy_data>:
     278:	12 e0       	ldi	r17, 0x02	; 2
     27a:	a0 e0       	ldi	r26, 0x00	; 0
     27c:	b2 e0       	ldi	r27, 0x02	; 2
     27e:	ee ef       	ldi	r30, 0xFE	; 254
     280:	ff e1       	ldi	r31, 0x1F	; 31
     282:	00 e0       	ldi	r16, 0x00	; 0
     284:	0b bf       	out	0x3b, r16	; 59
     286:	02 c0       	rjmp	.+4      	; 0x28c <__do_copy_data+0x14>
     288:	07 90       	elpm	r0, Z+
     28a:	0d 92       	st	X+, r0
     28c:	aa 32       	cpi	r26, 0x2A	; 42
     28e:	b1 07       	cpc	r27, r17
     290:	d9 f7       	brne	.-10     	; 0x288 <__do_copy_data+0x10>

00000292 <__do_clear_bss>:
     292:	22 e0       	ldi	r18, 0x02	; 2
     294:	aa e2       	ldi	r26, 0x2A	; 42
     296:	b2 e0       	ldi	r27, 0x02	; 2
     298:	01 c0       	rjmp	.+2      	; 0x29c <.do_clear_bss_start>

0000029a <.do_clear_bss_loop>:
     29a:	1d 92       	st	X+, r1

0000029c <.do_clear_bss_start>:
     29c:	a6 3e       	cpi	r26, 0xE6	; 230
     29e:	b2 07       	cpc	r27, r18
     2a0:	e1 f7       	brne	.-8      	; 0x29a <.do_clear_bss_loop>

000002a2 <__do_global_ctors>:
     2a2:	11 e0       	ldi	r17, 0x01	; 1
     2a4:	c4 e3       	ldi	r28, 0x34	; 52
     2a6:	d1 e0       	ldi	r29, 0x01	; 1
     2a8:	00 e0       	ldi	r16, 0x00	; 0
     2aa:	06 c0       	rjmp	.+12     	; 0x2b8 <__do_global_ctors+0x16>
     2ac:	21 97       	sbiw	r28, 0x01	; 1
     2ae:	01 09       	sbc	r16, r1
     2b0:	80 2f       	mov	r24, r16
     2b2:	fe 01       	movw	r30, r28
     2b4:	0e 94 39 0c 	call	0x1872	; 0x1872 <__tablejump2__>
     2b8:	c2 33       	cpi	r28, 0x32	; 50
     2ba:	d1 07       	cpc	r29, r17
     2bc:	80 e0       	ldi	r24, 0x00	; 0
     2be:	08 07       	cpc	r16, r24
     2c0:	a9 f7       	brne	.-22     	; 0x2ac <__do_global_ctors+0xa>
     2c2:	aa d6       	rcall	.+3412   	; 0x1018 <main>
     2c4:	0c 94 fd 0f 	jmp	0x1ffa	; 0x1ffa <_exit>

000002c8 <__bad_interrupt>:
     2c8:	9b ce       	rjmp	.-714    	; 0x0 <__vectors>

000002ca <setup>:
bool okFlag = true;


///CREDIT: Adam Baniuszewicz, Bartosz Flis, Jakub Sybidlo
void setup()
{
     2ca:	5c d1       	rcall	.+696    	; 0x584 <_Z11StepperInitv>
     2cc:	26 e0       	ldi	r18, 0x06	; 6
     2ce:	40 e0       	ldi	r20, 0x00	; 0
     2d0:	51 ee       	ldi	r21, 0xE1	; 225
     2d2:	60 e0       	ldi	r22, 0x00	; 0
     2d4:	70 e0       	ldi	r23, 0x00	; 0
     2d6:	8a e3       	ldi	r24, 0x3A	; 58
     2d8:	92 e0       	ldi	r25, 0x02	; 2
     2da:	a5 c5       	rjmp	.+2890   	; 0xe26 <_ZN14HardwareSerial5beginEmh>

000002dc <_GLOBAL__sub_I_steps>:
     2dc:	86 e0       	ldi	r24, 0x06	; 6
     2de:	90 e0       	ldi	r25, 0x00	; 0
     2e0:	17 d3       	rcall	.+1582   	; 0x910 <_Z8SetSpeedi>
     2e2:	bc 01       	movw	r22, r24
     2e4:	99 0f       	add	r25, r25
     2e6:	88 0b       	sbc	r24, r24
     2e8:	99 0b       	sbc	r25, r25
     2ea:	e8 d3       	rcall	.+2000   	; 0xabc <__floatsisf>
     2ec:	60 93 36 02 	sts	0x0236, r22	; 0x800236 <__data_end+0xc>
     2f0:	70 93 37 02 	sts	0x0237, r23	; 0x800237 <__data_end+0xd>
     2f4:	80 93 38 02 	sts	0x0238, r24	; 0x800238 <__data_end+0xe>
     2f8:	90 93 39 02 	sts	0x0239, r25	; 0x800239 <__data_end+0xf>
     2fc:	08 95       	ret

000002fe <loop>:
     2fe:	cf 93       	push	r28
     300:	df 93       	push	r29
     302:	00 d0       	rcall	.+0      	; 0x304 <loop+0x6>
     304:	00 d0       	rcall	.+0      	; 0x306 <loop+0x8>
     306:	cd b7       	in	r28, 0x3d	; 61
     308:	de b7       	in	r29, 0x3e	; 62
     30a:	8a e3       	ldi	r24, 0x3A	; 58
     30c:	92 e0       	ldi	r25, 0x02	; 2
     30e:	8a d4       	rcall	.+2324   	; 0xc24 <_ZN14HardwareSerial9availableEv>
     310:	89 2b       	or	r24, r25
     312:	c9 f0       	breq	.+50     	; 0x346 <loop+0x48>
     314:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <okFlag>
     318:	88 23       	and	r24, r24
     31a:	a9 f0       	breq	.+42     	; 0x346 <loop+0x48>
     31c:	10 92 06 02 	sts	0x0206, r1	; 0x800206 <okFlag>
     320:	4a e0       	ldi	r20, 0x0A	; 10
     322:	6a e3       	ldi	r22, 0x3A	; 58
     324:	72 e0       	ldi	r23, 0x02	; 2
     326:	ce 01       	movw	r24, r28
     328:	01 96       	adiw	r24, 0x01	; 1
     32a:	00 d7       	rcall	.+3584   	; 0x112c <_ZN6Stream15readStringUntilEc>
     32c:	6a e2       	ldi	r22, 0x2A	; 42
     32e:	72 e0       	ldi	r23, 0x02	; 2
     330:	ce 01       	movw	r24, r28
     332:	01 96       	adiw	r24, 0x01	; 1
     334:	95 d0       	rcall	.+298    	; 0x460 <_Z11DecodeFrame6StringP5Steps>
     336:	ce 01       	movw	r24, r28
     338:	01 96       	adiw	r24, 0x01	; 1
     33a:	0e 94 a1 0a 	call	0x1542	; 0x1542 <_ZN6StringD1Ev>
     33e:	8a e2       	ldi	r24, 0x2A	; 42
     340:	92 e0       	ldi	r25, 0x02	; 2
     342:	81 d1       	rcall	.+770    	; 0x646 <_Z17ChangeSteppersDirP5Steps>
     344:	e2 cf       	rjmp	.-60     	; 0x30a <loop+0xc>
     346:	20 e0       	ldi	r18, 0x00	; 0
     348:	30 e0       	ldi	r19, 0x00	; 0
     34a:	a9 01       	movw	r20, r18
     34c:	60 91 2a 02 	lds	r22, 0x022A	; 0x80022a <__data_end>
     350:	70 91 2b 02 	lds	r23, 0x022B	; 0x80022b <__data_end+0x1>
     354:	80 91 2c 02 	lds	r24, 0x022C	; 0x80022c <__data_end+0x2>
     358:	90 91 2d 02 	lds	r25, 0x022D	; 0x80022d <__data_end+0x3>
     35c:	78 d3       	rcall	.+1776   	; 0xa4e <__cmpsf2>
     35e:	81 11       	cpse	r24, r1
     360:	28 c0       	rjmp	.+80     	; 0x3b2 <loop+0xb4>
     362:	20 e0       	ldi	r18, 0x00	; 0
     364:	30 e0       	ldi	r19, 0x00	; 0
     366:	a9 01       	movw	r20, r18
     368:	60 91 2e 02 	lds	r22, 0x022E	; 0x80022e <__data_end+0x4>
     36c:	70 91 2f 02 	lds	r23, 0x022F	; 0x80022f <__data_end+0x5>
     370:	80 91 30 02 	lds	r24, 0x0230	; 0x800230 <__data_end+0x6>
     374:	90 91 31 02 	lds	r25, 0x0231	; 0x800231 <__data_end+0x7>
     378:	6a d3       	rcall	.+1748   	; 0xa4e <__cmpsf2>
     37a:	81 11       	cpse	r24, r1
     37c:	1a c0       	rjmp	.+52     	; 0x3b2 <loop+0xb4>
     37e:	20 e0       	ldi	r18, 0x00	; 0
     380:	30 e0       	ldi	r19, 0x00	; 0
     382:	a9 01       	movw	r20, r18
     384:	60 91 32 02 	lds	r22, 0x0232	; 0x800232 <__data_end+0x8>
     388:	70 91 33 02 	lds	r23, 0x0233	; 0x800233 <__data_end+0x9>
     38c:	80 91 34 02 	lds	r24, 0x0234	; 0x800234 <__data_end+0xa>
     390:	90 91 35 02 	lds	r25, 0x0235	; 0x800235 <__data_end+0xb>
     394:	5c d3       	rcall	.+1720   	; 0xa4e <__cmpsf2>
     396:	81 11       	cpse	r24, r1
     398:	0c c0       	rjmp	.+24     	; 0x3b2 <loop+0xb4>
     39a:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <okFlag>
     39e:	81 11       	cpse	r24, r1
     3a0:	08 c0       	rjmp	.+16     	; 0x3b2 <loop+0xb4>
     3a2:	81 e0       	ldi	r24, 0x01	; 1
     3a4:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <okFlag>
     3a8:	67 e0       	ldi	r22, 0x07	; 7
     3aa:	72 e0       	ldi	r23, 0x02	; 2
     3ac:	8a e3       	ldi	r24, 0x3A	; 58
     3ae:	92 e0       	ldi	r25, 0x02	; 2
     3b0:	7f d6       	rcall	.+3326   	; 0x10b0 <_ZN5Print7printlnEPKc>
     3b2:	8a e2       	ldi	r24, 0x2A	; 42
     3b4:	92 e0       	ldi	r25, 0x02	; 2
     3b6:	c6 d1       	rcall	.+908    	; 0x744 <_Z11MovementXYZP5Steps>
     3b8:	26 96       	adiw	r28, 0x06	; 6
     3ba:	0f b6       	in	r0, 0x3f	; 63
     3bc:	f8 94       	cli
     3be:	de bf       	out	0x3e, r29	; 62
     3c0:	0f be       	out	0x3f, r0	; 63
     3c2:	cd bf       	out	0x3d, r28	; 61
     3c4:	df 91       	pop	r29
     3c6:	cf 91       	pop	r28
     3c8:	08 95       	ret

000003ca <_Z18LimitSwitchPinInitv>:
#include "..\Header Files\LimitSwitch.h"

///CREDIT: Adam Baniuszewicz, Bartosz Flis, Jakub Sybidlo
void LimitSwitchPinInit()
{
	pinMode(pinLimitSwitchX, INPUT);
     3ca:	60 e0       	ldi	r22, 0x00	; 0
     3cc:	82 e0       	ldi	r24, 0x02	; 2
     3ce:	e8 d7       	rcall	.+4048   	; 0x13a0 <pinMode>
	pinMode(pinLimitSwitchY, INPUT);
     3d0:	60 e0       	ldi	r22, 0x00	; 0
     3d2:	8f e0       	ldi	r24, 0x0F	; 15
	pinMode(pinLimitSwitchZ, INPUT);
     3d4:	e5 d7       	rcall	.+4042   	; 0x13a0 <pinMode>
     3d6:	60 e0       	ldi	r22, 0x00	; 0
     3d8:	83 e1       	ldi	r24, 0x13	; 19
	digitalWrite(pinLimitSwitchX, HIGH);
     3da:	e2 d7       	rcall	.+4036   	; 0x13a0 <pinMode>
     3dc:	61 e0       	ldi	r22, 0x01	; 1
     3de:	82 e0       	ldi	r24, 0x02	; 2
     3e0:	0e 94 0c 0a 	call	0x1418	; 0x1418 <digitalWrite>
	digitalWrite(pinLimitSwitchY, HIGH);
     3e4:	61 e0       	ldi	r22, 0x01	; 1
     3e6:	8f e0       	ldi	r24, 0x0F	; 15
     3e8:	0e 94 0c 0a 	call	0x1418	; 0x1418 <digitalWrite>
	digitalWrite(pinLimitSwitchZ, HIGH);
     3ec:	61 e0       	ldi	r22, 0x01	; 1
     3ee:	83 e1       	ldi	r24, 0x13	; 19
     3f0:	0c 94 0c 0a 	jmp	0x1418	; 0x1418 <digitalWrite>

000003f4 <_Z12RemoveSpacesPc>:
#include "stdlib.h"


///CREDIT: Adam Baniuszewicz, Bartosz Flis, Jakub Sybidlo
void RemoveSpaces(char* source)
{
     3f4:	fc 01       	movw	r30, r24
	char* i = source;
	char* j = source;

	while(*j != '\0')
     3f6:	21 91       	ld	r18, Z+
     3f8:	22 23       	and	r18, r18
     3fa:	31 f0       	breq	.+12     	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
	{
		*i = *j++;
     3fc:	dc 01       	movw	r26, r24
     3fe:	2c 93       	st	X, r18
		if(*i != ' ')
     400:	20 32       	cpi	r18, 0x20	; 32
     402:	c9 f3       	breq	.-14     	; 0x3f6 <_Z12RemoveSpacesPc+0x2>
		i++;
     404:	01 96       	adiw	r24, 0x01	; 1
     406:	f7 cf       	rjmp	.-18     	; 0x3f6 <_Z12RemoveSpacesPc+0x2>
	}
	*i = 0;
     408:	fc 01       	movw	r30, r24
     40a:	10 82       	st	Z, r1
     40c:	08 95       	ret

0000040e <_Z23GetNumberAfterCharacterPcc>:
}

///CREDIT: Adam Baniuszewicz, Bartosz Flis, Jakub Sybidlo
double GetNumberAfterCharacter(char* source, char character)
{
	while (*source != '\0')
     40e:	fc 01       	movw	r30, r24
     410:	21 91       	ld	r18, Z+
     412:	cf 01       	movw	r24, r30
     414:	22 23       	and	r18, r18
     416:	31 f0       	breq	.+12     	; 0x424 <_Z23GetNumberAfterCharacterPcc+0x16>
	{
		if (*source++ == character)
     418:	26 13       	cpse	r18, r22
     41a:	f9 cf       	rjmp	.-14     	; 0x40e <_Z23GetNumberAfterCharacterPcc>
		{
			//extract all digits after desired character
			return strtod(source, NULL);
     41c:	60 e0       	ldi	r22, 0x00	; 0
     41e:	70 e0       	ldi	r23, 0x00	; 0
     420:	0c 94 5b 0e 	jmp	0x1cb6	; 0x1cb6 <strtod>
		}
	}
	return 0; //returning '0' won't cause any movement
}
     424:	60 e0       	ldi	r22, 0x00	; 0
     426:	70 e0       	ldi	r23, 0x00	; 0
     428:	cb 01       	movw	r24, r22
     42a:	08 95       	ret

0000042c <_Z7GetCodePc>:
	(*steps).z = (int)GetNumberAfterCharacter(readDataChar, 'z');
}

///CREDIT: Adam Baniuszewicz, Bartosz Flis, Jakub Sybidlo
int GetCode(char* readBuffer)
{
     42c:	fc 01       	movw	r30, r24
	if (readBuffer[0] == 'g' && readBuffer[1] == '0' && readBuffer[2] == '0')
     42e:	80 81       	ld	r24, Z
     430:	87 36       	cpi	r24, 0x67	; 103
     432:	59 f4       	brne	.+22     	; 0x44a <_Z7GetCodePc+0x1e>
     434:	81 81       	ldd	r24, Z+1	; 0x01
     436:	80 33       	cpi	r24, 0x30	; 48
     438:	81 f4       	brne	.+32     	; 0x45a <_Z7GetCodePc+0x2e>
     43a:	82 81       	ldd	r24, Z+2	; 0x02
     43c:	80 33       	cpi	r24, 0x30	; 48
     43e:	51 f0       	breq	.+20     	; 0x454 <_Z7GetCodePc+0x28>
		return 0;
	if (readBuffer[0] == 'g' && readBuffer[1] == '0' && readBuffer[2] == '1')
     440:	81 33       	cpi	r24, 0x31	; 49
     442:	59 f4       	brne	.+22     	; 0x45a <_Z7GetCodePc+0x2e>
		return 1;
     444:	81 e0       	ldi	r24, 0x01	; 1
     446:	90 e0       	ldi	r25, 0x00	; 0
     448:	08 95       	ret
	if (readBuffer[0] == 'f')
     44a:	86 36       	cpi	r24, 0x66	; 102
     44c:	31 f4       	brne	.+12     	; 0x45a <_Z7GetCodePc+0x2e>
		return 99;
     44e:	83 e6       	ldi	r24, 0x63	; 99
     450:	90 e0       	ldi	r25, 0x00	; 0
     452:	08 95       	ret

///CREDIT: Adam Baniuszewicz, Bartosz Flis, Jakub Sybidlo
int GetCode(char* readBuffer)
{
	if (readBuffer[0] == 'g' && readBuffer[1] == '0' && readBuffer[2] == '0')
		return 0;
     454:	80 e0       	ldi	r24, 0x00	; 0
     456:	90 e0       	ldi	r25, 0x00	; 0
     458:	08 95       	ret
	if (readBuffer[0] == 'g' && readBuffer[1] == '0' && readBuffer[2] == '1')
		return 1;
	if (readBuffer[0] == 'f')
		return 99;
	
	return -1;	 
     45a:	8f ef       	ldi	r24, 0xFF	; 255
     45c:	9f ef       	ldi	r25, 0xFF	; 255
     45e:	08 95       	ret

00000460 <_Z11DecodeFrame6StringP5Steps>:
	return 0; //returning '0' won't cause any movement
}

///CREDIT: Adam Baniuszewicz, Bartosz Flis, Jakub Sybidlo
void DecodeFrame(String frame, Steps *steps)
{
     460:	cf 92       	push	r12
     462:	df 92       	push	r13
     464:	ef 92       	push	r14
     466:	ff 92       	push	r15
     468:	0f 93       	push	r16
     46a:	1f 93       	push	r17
     46c:	cf 93       	push	r28
     46e:	df 93       	push	r29
     470:	cd b7       	in	r28, 0x3d	; 61
     472:	de b7       	in	r29, 0x3e	; 62
     474:	7b 01       	movw	r14, r22
			break;
	}
	(*steps).x = (int)GetNumberAfterCharacter(readDataChar, 'x');
	(*steps).y = (int)GetNumberAfterCharacter(readDataChar, 'y');
	(*steps).z = (int)GetNumberAfterCharacter(readDataChar, 'z');
}
     476:	cd b6       	in	r12, 0x3d	; 61
     478:	de b6       	in	r13, 0x3e	; 62

///CREDIT: Adam Baniuszewicz, Bartosz Flis, Jakub Sybidlo
void DecodeFrame(String frame, Steps *steps)
{
	//convert string to char
	char readDataChar[frame.length() + 1];
     47a:	fc 01       	movw	r30, r24
     47c:	44 81       	ldd	r20, Z+4	; 0x04
     47e:	55 81       	ldd	r21, Z+5	; 0x05
     480:	4f 5f       	subi	r20, 0xFF	; 255
     482:	5f 4f       	sbci	r21, 0xFF	; 255
     484:	2d b7       	in	r18, 0x3d	; 61
     486:	3e b7       	in	r19, 0x3e	; 62
     488:	24 1b       	sub	r18, r20
     48a:	35 0b       	sbc	r19, r21
     48c:	0f b6       	in	r0, 0x3f	; 63
     48e:	f8 94       	cli
     490:	3e bf       	out	0x3e, r19	; 62
     492:	0f be       	out	0x3f, r0	; 63
     494:	2d bf       	out	0x3d, r18	; 61
     496:	0d b7       	in	r16, 0x3d	; 61
     498:	1e b7       	in	r17, 0x3e	; 62
     49a:	0f 5f       	subi	r16, 0xFF	; 255
     49c:	1f 4f       	sbci	r17, 0xFF	; 255
	void setCharAt(unsigned int index, char c);
	char operator [] (unsigned int index) const;
	char& operator [] (unsigned int index);
	void getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index=0) const;
	void toCharArray(char *buf, unsigned int bufsize, unsigned int index=0) const
		{ getBytes((unsigned char *)buf, bufsize, index); }
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	30 e0       	ldi	r19, 0x00	; 0
     4a2:	b8 01       	movw	r22, r16
     4a4:	0e 94 5b 0b 	call	0x16b6	; 0x16b6 <_ZNK6String8getBytesEPhjj>
	frame.toCharArray(readDataChar, frame.length() + 1);
			
	RemoveSpaces(readDataChar);
     4a8:	c8 01       	movw	r24, r16
     4aa:	a4 df       	rcall	.-184    	; 0x3f4 <_Z12RemoveSpacesPc>
	strlwr(readDataChar); //convert data to lowercase
     4ac:	c8 01       	movw	r24, r16
     4ae:	0e 94 e1 0f 	call	0x1fc2	; 0x1fc2 <strlwr>

	switch (GetCode(readDataChar))
     4b2:	c8 01       	movw	r24, r16
     4b4:	bb df       	rcall	.-138    	; 0x42c <_Z7GetCodePc>
     4b6:	81 30       	cpi	r24, 0x01	; 1
     4b8:	91 05       	cpc	r25, r1
     4ba:	41 f0       	breq	.+16     	; 0x4cc <_Z11DecodeFrame6StringP5Steps+0x6c>
     4bc:	83 36       	cpi	r24, 0x63	; 99
     4be:	91 05       	cpc	r25, r1
     4c0:	99 f0       	breq	.+38     	; 0x4e8 <_Z11DecodeFrame6StringP5Steps+0x88>
     4c2:	89 2b       	or	r24, r25
	{
		case 0:		//G00
			(*steps).speed = SetSpeed((int)G00SPEED);
     4c4:	11 f5       	brne	.+68     	; 0x50a <_Z11DecodeFrame6StringP5Steps+0xaa>
     4c6:	89 e0       	ldi	r24, 0x09	; 9
			break;
		case 1:		//G01
			(*steps).speed = SetSpeed((int)G01SPEED);
     4c8:	90 e0       	ldi	r25, 0x00	; 0
     4ca:	02 c0       	rjmp	.+4      	; 0x4d0 <_Z11DecodeFrame6StringP5Steps+0x70>
     4cc:	84 e0       	ldi	r24, 0x04	; 4
     4ce:	90 e0       	ldi	r25, 0x00	; 0
     4d0:	1f d2       	rcall	.+1086   	; 0x910 <_Z8SetSpeedi>
     4d2:	bc 01       	movw	r22, r24
     4d4:	99 0f       	add	r25, r25
     4d6:	88 0b       	sbc	r24, r24
     4d8:	99 0b       	sbc	r25, r25
     4da:	f0 d2       	rcall	.+1504   	; 0xabc <__floatsisf>
     4dc:	f7 01       	movw	r30, r14
			break;
		case 99:	//F
			(*steps).speed = SetSpeed((int)GetNumberAfterCharacter(readDataChar, 'f'));
     4de:	64 87       	std	Z+12, r22	; 0x0c
     4e0:	75 87       	std	Z+13, r23	; 0x0d
     4e2:	86 87       	std	Z+14, r24	; 0x0e
     4e4:	97 87       	std	Z+15, r25	; 0x0f
     4e6:	11 c0       	rjmp	.+34     	; 0x50a <_Z11DecodeFrame6StringP5Steps+0xaa>
     4e8:	66 e6       	ldi	r22, 0x66	; 102
     4ea:	c8 01       	movw	r24, r16
     4ec:	90 df       	rcall	.-224    	; 0x40e <_Z23GetNumberAfterCharacterPcc>
     4ee:	b3 d2       	rcall	.+1382   	; 0xa56 <__fixsfsi>
     4f0:	cb 01       	movw	r24, r22
     4f2:	0e d2       	rcall	.+1052   	; 0x910 <_Z8SetSpeedi>
     4f4:	bc 01       	movw	r22, r24
     4f6:	99 0f       	add	r25, r25
     4f8:	88 0b       	sbc	r24, r24
     4fa:	99 0b       	sbc	r25, r25
     4fc:	df d2       	rcall	.+1470   	; 0xabc <__floatsisf>
			return;
		default:
			break;
	}
	(*steps).x = (int)GetNumberAfterCharacter(readDataChar, 'x');
     4fe:	f7 01       	movw	r30, r14
     500:	64 87       	std	Z+12, r22	; 0x0c
     502:	75 87       	std	Z+13, r23	; 0x0d
     504:	86 87       	std	Z+14, r24	; 0x0e
     506:	97 87       	std	Z+15, r25	; 0x0f
     508:	2a c0       	rjmp	.+84     	; 0x55e <_Z11DecodeFrame6StringP5Steps+0xfe>
     50a:	68 e7       	ldi	r22, 0x78	; 120
     50c:	c8 01       	movw	r24, r16
     50e:	7f df       	rcall	.-258    	; 0x40e <_Z23GetNumberAfterCharacterPcc>
     510:	a2 d2       	rcall	.+1348   	; 0xa56 <__fixsfsi>
     512:	07 2e       	mov	r0, r23
     514:	00 0c       	add	r0, r0
     516:	88 0b       	sbc	r24, r24
	(*steps).y = (int)GetNumberAfterCharacter(readDataChar, 'y');
     518:	99 0b       	sbc	r25, r25
     51a:	d0 d2       	rcall	.+1440   	; 0xabc <__floatsisf>
     51c:	f7 01       	movw	r30, r14
     51e:	60 83       	st	Z, r22
     520:	71 83       	std	Z+1, r23	; 0x01
     522:	82 83       	std	Z+2, r24	; 0x02
     524:	93 83       	std	Z+3, r25	; 0x03
     526:	69 e7       	ldi	r22, 0x79	; 121
     528:	c8 01       	movw	r24, r16
     52a:	71 df       	rcall	.-286    	; 0x40e <_Z23GetNumberAfterCharacterPcc>
     52c:	94 d2       	rcall	.+1320   	; 0xa56 <__fixsfsi>
     52e:	07 2e       	mov	r0, r23
     530:	00 0c       	add	r0, r0
     532:	88 0b       	sbc	r24, r24
	(*steps).z = (int)GetNumberAfterCharacter(readDataChar, 'z');
     534:	99 0b       	sbc	r25, r25
     536:	c2 d2       	rcall	.+1412   	; 0xabc <__floatsisf>
     538:	f7 01       	movw	r30, r14
     53a:	64 83       	std	Z+4, r22	; 0x04
     53c:	75 83       	std	Z+5, r23	; 0x05
     53e:	86 83       	std	Z+6, r24	; 0x06
     540:	97 83       	std	Z+7, r25	; 0x07
     542:	6a e7       	ldi	r22, 0x7A	; 122
     544:	c8 01       	movw	r24, r16
     546:	63 df       	rcall	.-314    	; 0x40e <_Z23GetNumberAfterCharacterPcc>
     548:	86 d2       	rcall	.+1292   	; 0xa56 <__fixsfsi>
     54a:	07 2e       	mov	r0, r23
     54c:	00 0c       	add	r0, r0
     54e:	88 0b       	sbc	r24, r24
     550:	99 0b       	sbc	r25, r25
     552:	b4 d2       	rcall	.+1384   	; 0xabc <__floatsisf>
     554:	f7 01       	movw	r30, r14
     556:	60 87       	std	Z+8, r22	; 0x08
     558:	71 87       	std	Z+9, r23	; 0x09
     55a:	82 87       	std	Z+10, r24	; 0x0a
     55c:	93 87       	std	Z+11, r25	; 0x0b
     55e:	0f b6       	in	r0, 0x3f	; 63
}
     560:	f8 94       	cli
     562:	de be       	out	0x3e, r13	; 62
     564:	0f be       	out	0x3f, r0	; 63
     566:	cd be       	out	0x3d, r12	; 61
     568:	0f b6       	in	r0, 0x3f	; 63
     56a:	f8 94       	cli
     56c:	de be       	out	0x3e, r13	; 62
     56e:	0f be       	out	0x3f, r0	; 63
     570:	cd be       	out	0x3d, r12	; 61
     572:	df 91       	pop	r29
     574:	cf 91       	pop	r28
     576:	1f 91       	pop	r17
     578:	0f 91       	pop	r16
     57a:	ff 90       	pop	r15
     57c:	ef 90       	pop	r14
     57e:	df 90       	pop	r13
     580:	cf 90       	pop	r12
     582:	08 95       	ret

00000584 <_Z11StepperInitv>:
     584:	22 df       	rcall	.-444    	; 0x3ca <_Z18LimitSwitchPinInitv>
     586:	61 e0       	ldi	r22, 0x01	; 1
     588:	87 e3       	ldi	r24, 0x37	; 55
     58a:	0a d7       	rcall	.+3604   	; 0x13a0 <pinMode>
     58c:	61 e0       	ldi	r22, 0x01	; 1
     58e:	8d e3       	ldi	r24, 0x3D	; 61
     590:	07 d7       	rcall	.+3598   	; 0x13a0 <pinMode>
     592:	61 e0       	ldi	r22, 0x01	; 1
     594:	80 e3       	ldi	r24, 0x30	; 48
     596:	04 d7       	rcall	.+3592   	; 0x13a0 <pinMode>
     598:	61 e0       	ldi	r22, 0x01	; 1
     59a:	86 e2       	ldi	r24, 0x26	; 38
     59c:	01 d7       	rcall	.+3586   	; 0x13a0 <pinMode>
     59e:	61 e0       	ldi	r22, 0x01	; 1
     5a0:	88 e3       	ldi	r24, 0x38	; 56
     5a2:	fe d6       	rcall	.+3580   	; 0x13a0 <pinMode>
     5a4:	61 e0       	ldi	r22, 0x01	; 1
     5a6:	8e e3       	ldi	r24, 0x3E	; 62
     5a8:	fb d6       	rcall	.+3574   	; 0x13a0 <pinMode>
     5aa:	61 e0       	ldi	r22, 0x01	; 1
     5ac:	85 e3       	ldi	r24, 0x35	; 53
     5ae:	f8 d6       	rcall	.+3568   	; 0x13a0 <pinMode>
     5b0:	61 e0       	ldi	r22, 0x01	; 1
     5b2:	81 e3       	ldi	r24, 0x31	; 49
     5b4:	f5 d6       	rcall	.+3562   	; 0x13a0 <pinMode>
     5b6:	61 e0       	ldi	r22, 0x01	; 1
     5b8:	88 e2       	ldi	r24, 0x28	; 40
     5ba:	f2 d6       	rcall	.+3556   	; 0x13a0 <pinMode>
     5bc:	61 e0       	ldi	r22, 0x01	; 1
     5be:	86 e3       	ldi	r24, 0x36	; 54
     5c0:	ef d6       	rcall	.+3550   	; 0x13a0 <pinMode>
     5c2:	61 e0       	ldi	r22, 0x01	; 1
     5c4:	8c e3       	ldi	r24, 0x3C	; 60
     5c6:	ec d6       	rcall	.+3544   	; 0x13a0 <pinMode>
     5c8:	61 e0       	ldi	r22, 0x01	; 1
     5ca:	8e e2       	ldi	r24, 0x2E	; 46
     5cc:	e9 c6       	rjmp	.+3538   	; 0x13a0 <pinMode>

000005ce <_Z15ReadLimitSwitchPbS_S_>:
     5ce:	ef 92       	push	r14
     5d0:	ff 92       	push	r15
     5d2:	0f 93       	push	r16
     5d4:	1f 93       	push	r17
     5d6:	cf 93       	push	r28
     5d8:	df 93       	push	r29
     5da:	7c 01       	movw	r14, r24
     5dc:	8b 01       	movw	r16, r22
     5de:	ea 01       	movw	r28, r20
     5e0:	82 e0       	ldi	r24, 0x02	; 2
     5e2:	48 d7       	rcall	.+3728   	; 0x1474 <digitalRead>
     5e4:	21 e0       	ldi	r18, 0x01	; 1
     5e6:	89 2b       	or	r24, r25
     5e8:	09 f4       	brne	.+2      	; 0x5ec <_Z15ReadLimitSwitchPbS_S_+0x1e>
     5ea:	20 e0       	ldi	r18, 0x00	; 0
     5ec:	f7 01       	movw	r30, r14
     5ee:	20 83       	st	Z, r18
     5f0:	8f e0       	ldi	r24, 0x0F	; 15
     5f2:	40 d7       	rcall	.+3712   	; 0x1474 <digitalRead>
     5f4:	21 e0       	ldi	r18, 0x01	; 1
     5f6:	89 2b       	or	r24, r25
     5f8:	09 f4       	brne	.+2      	; 0x5fc <_Z15ReadLimitSwitchPbS_S_+0x2e>
     5fa:	20 e0       	ldi	r18, 0x00	; 0
     5fc:	f8 01       	movw	r30, r16
     5fe:	20 83       	st	Z, r18
     600:	83 e1       	ldi	r24, 0x13	; 19
     602:	38 d7       	rcall	.+3696   	; 0x1474 <digitalRead>
     604:	21 e0       	ldi	r18, 0x01	; 1
     606:	89 2b       	or	r24, r25
     608:	09 f4       	brne	.+2      	; 0x60c <_Z15ReadLimitSwitchPbS_S_+0x3e>
     60a:	20 e0       	ldi	r18, 0x00	; 0
     60c:	28 83       	st	Y, r18
     60e:	df 91       	pop	r29
     610:	cf 91       	pop	r28
     612:	1f 91       	pop	r17
     614:	0f 91       	pop	r16
     616:	ff 90       	pop	r15
     618:	ef 90       	pop	r14
     61a:	08 95       	ret

0000061c <_Z17ChangeStepperXDirb>:
     61c:	88 23       	and	r24, r24
     61e:	11 f0       	breq	.+4      	; 0x624 <_Z17ChangeStepperXDirb+0x8>
     620:	61 e0       	ldi	r22, 0x01	; 1
     622:	01 c0       	rjmp	.+2      	; 0x626 <_Z17ChangeStepperXDirb+0xa>
     624:	60 e0       	ldi	r22, 0x00	; 0
     626:	87 e3       	ldi	r24, 0x37	; 55
     628:	f7 c6       	rjmp	.+3566   	; 0x1418 <digitalWrite>

0000062a <_Z17ChangeStepperYDirb>:
     62a:	88 23       	and	r24, r24
     62c:	11 f0       	breq	.+4      	; 0x632 <_Z17ChangeStepperYDirb+0x8>
     62e:	61 e0       	ldi	r22, 0x01	; 1
     630:	01 c0       	rjmp	.+2      	; 0x634 <_Z17ChangeStepperYDirb+0xa>
     632:	60 e0       	ldi	r22, 0x00	; 0
     634:	8d e3       	ldi	r24, 0x3D	; 61
     636:	f0 c6       	rjmp	.+3552   	; 0x1418 <digitalWrite>

00000638 <_Z17ChangeStepperZDirb>:
     638:	88 23       	and	r24, r24
     63a:	11 f0       	breq	.+4      	; 0x640 <_Z17ChangeStepperZDirb+0x8>
     63c:	61 e0       	ldi	r22, 0x01	; 1
     63e:	01 c0       	rjmp	.+2      	; 0x642 <_Z17ChangeStepperZDirb+0xa>
     640:	60 e0       	ldi	r22, 0x00	; 0
     642:	80 e3       	ldi	r24, 0x30	; 48
     644:	e9 c6       	rjmp	.+3538   	; 0x1418 <digitalWrite>

00000646 <_Z17ChangeSteppersDirP5Steps>:
     646:	cf 92       	push	r12
     648:	df 92       	push	r13
     64a:	ef 92       	push	r14
     64c:	ff 92       	push	r15
     64e:	cf 93       	push	r28
     650:	df 93       	push	r29
     652:	ec 01       	movw	r28, r24
     654:	20 e0       	ldi	r18, 0x00	; 0
     656:	30 e0       	ldi	r19, 0x00	; 0
     658:	a9 01       	movw	r20, r18
     65a:	68 81       	ld	r22, Y
     65c:	79 81       	ldd	r23, Y+1	; 0x01
     65e:	8a 81       	ldd	r24, Y+2	; 0x02
     660:	9b 81       	ldd	r25, Y+3	; 0x03
     662:	dc d2       	rcall	.+1464   	; 0xc1c <__gesf2>
     664:	18 16       	cp	r1, r24
     666:	1c f4       	brge	.+6      	; 0x66e <_Z17ChangeSteppersDirP5Steps+0x28>
     668:	80 e0       	ldi	r24, 0x00	; 0
     66a:	d8 df       	rcall	.-80     	; 0x61c <_Z17ChangeStepperXDirb>
     66c:	17 c0       	rjmp	.+46     	; 0x69c <_Z17ChangeSteppersDirP5Steps+0x56>
     66e:	61 e0       	ldi	r22, 0x01	; 1
     670:	87 e3       	ldi	r24, 0x37	; 55
     672:	d2 d6       	rcall	.+3492   	; 0x1418 <digitalWrite>
     674:	c8 80       	ld	r12, Y
     676:	d9 80       	ldd	r13, Y+1	; 0x01
     678:	ea 80       	ldd	r14, Y+2	; 0x02
     67a:	fb 80       	ldd	r15, Y+3	; 0x03
     67c:	20 e0       	ldi	r18, 0x00	; 0
     67e:	30 e0       	ldi	r19, 0x00	; 0
     680:	a9 01       	movw	r20, r18
     682:	c7 01       	movw	r24, r14
     684:	b6 01       	movw	r22, r12
     686:	ca d2       	rcall	.+1428   	; 0xc1c <__gesf2>
     688:	18 16       	cp	r1, r24
     68a:	24 f0       	brlt	.+8      	; 0x694 <_Z17ChangeSteppersDirP5Steps+0x4e>
     68c:	f7 fa       	bst	r15, 7
     68e:	f0 94       	com	r15
     690:	f7 f8       	bld	r15, 7
     692:	f0 94       	com	r15
     694:	c8 82       	st	Y, r12
     696:	d9 82       	std	Y+1, r13	; 0x01
     698:	ea 82       	std	Y+2, r14	; 0x02
     69a:	fb 82       	std	Y+3, r15	; 0x03
     69c:	20 e0       	ldi	r18, 0x00	; 0
     69e:	30 e0       	ldi	r19, 0x00	; 0
     6a0:	a9 01       	movw	r20, r18
     6a2:	6c 81       	ldd	r22, Y+4	; 0x04
     6a4:	7d 81       	ldd	r23, Y+5	; 0x05
     6a6:	8e 81       	ldd	r24, Y+6	; 0x06
     6a8:	9f 81       	ldd	r25, Y+7	; 0x07
     6aa:	b8 d2       	rcall	.+1392   	; 0xc1c <__gesf2>
     6ac:	18 16       	cp	r1, r24
     6ae:	1c f4       	brge	.+6      	; 0x6b6 <_Z17ChangeSteppersDirP5Steps+0x70>
     6b0:	80 e0       	ldi	r24, 0x00	; 0
     6b2:	bb df       	rcall	.-138    	; 0x62a <_Z17ChangeStepperYDirb>
     6b4:	17 c0       	rjmp	.+46     	; 0x6e4 <_Z17ChangeSteppersDirP5Steps+0x9e>
     6b6:	61 e0       	ldi	r22, 0x01	; 1
     6b8:	8d e3       	ldi	r24, 0x3D	; 61
     6ba:	ae d6       	rcall	.+3420   	; 0x1418 <digitalWrite>
     6bc:	cc 80       	ldd	r12, Y+4	; 0x04
     6be:	dd 80       	ldd	r13, Y+5	; 0x05
     6c0:	ee 80       	ldd	r14, Y+6	; 0x06
     6c2:	ff 80       	ldd	r15, Y+7	; 0x07
     6c4:	20 e0       	ldi	r18, 0x00	; 0
     6c6:	30 e0       	ldi	r19, 0x00	; 0
     6c8:	a9 01       	movw	r20, r18
     6ca:	c7 01       	movw	r24, r14
     6cc:	b6 01       	movw	r22, r12
     6ce:	a6 d2       	rcall	.+1356   	; 0xc1c <__gesf2>
     6d0:	18 16       	cp	r1, r24
     6d2:	24 f0       	brlt	.+8      	; 0x6dc <_Z17ChangeSteppersDirP5Steps+0x96>
     6d4:	f7 fa       	bst	r15, 7
     6d6:	f0 94       	com	r15
     6d8:	f7 f8       	bld	r15, 7
     6da:	f0 94       	com	r15
     6dc:	cc 82       	std	Y+4, r12	; 0x04
     6de:	dd 82       	std	Y+5, r13	; 0x05
     6e0:	ee 82       	std	Y+6, r14	; 0x06
     6e2:	ff 82       	std	Y+7, r15	; 0x07
     6e4:	20 e0       	ldi	r18, 0x00	; 0
     6e6:	30 e0       	ldi	r19, 0x00	; 0
     6e8:	a9 01       	movw	r20, r18
     6ea:	68 85       	ldd	r22, Y+8	; 0x08
     6ec:	79 85       	ldd	r23, Y+9	; 0x09
     6ee:	8a 85       	ldd	r24, Y+10	; 0x0a
     6f0:	9b 85       	ldd	r25, Y+11	; 0x0b
     6f2:	94 d2       	rcall	.+1320   	; 0xc1c <__gesf2>
     6f4:	18 16       	cp	r1, r24
     6f6:	44 f4       	brge	.+16     	; 0x708 <_Z17ChangeSteppersDirP5Steps+0xc2>
     6f8:	80 e0       	ldi	r24, 0x00	; 0
     6fa:	df 91       	pop	r29
     6fc:	cf 91       	pop	r28
     6fe:	ff 90       	pop	r15
     700:	ef 90       	pop	r14
     702:	df 90       	pop	r13
     704:	cf 90       	pop	r12
     706:	98 cf       	rjmp	.-208    	; 0x638 <_Z17ChangeStepperZDirb>
     708:	61 e0       	ldi	r22, 0x01	; 1
     70a:	80 e3       	ldi	r24, 0x30	; 48
     70c:	85 d6       	rcall	.+3338   	; 0x1418 <digitalWrite>
     70e:	c8 84       	ldd	r12, Y+8	; 0x08
     710:	d9 84       	ldd	r13, Y+9	; 0x09
     712:	ea 84       	ldd	r14, Y+10	; 0x0a
     714:	fb 84       	ldd	r15, Y+11	; 0x0b
     716:	20 e0       	ldi	r18, 0x00	; 0
     718:	30 e0       	ldi	r19, 0x00	; 0
     71a:	a9 01       	movw	r20, r18
     71c:	c7 01       	movw	r24, r14
     71e:	b6 01       	movw	r22, r12
     720:	7d d2       	rcall	.+1274   	; 0xc1c <__gesf2>
     722:	18 16       	cp	r1, r24
     724:	24 f0       	brlt	.+8      	; 0x72e <_Z17ChangeSteppersDirP5Steps+0xe8>
     726:	f7 fa       	bst	r15, 7
     728:	f0 94       	com	r15
     72a:	f7 f8       	bld	r15, 7
     72c:	f0 94       	com	r15
     72e:	c8 86       	std	Y+8, r12	; 0x08
     730:	d9 86       	std	Y+9, r13	; 0x09
     732:	ea 86       	std	Y+10, r14	; 0x0a
     734:	fb 86       	std	Y+11, r15	; 0x0b
     736:	df 91       	pop	r29
     738:	cf 91       	pop	r28
     73a:	ff 90       	pop	r15
     73c:	ef 90       	pop	r14
     73e:	df 90       	pop	r13
     740:	cf 90       	pop	r12
     742:	08 95       	ret

00000744 <_Z11MovementXYZP5Steps>:
     744:	0f 93       	push	r16
     746:	1f 93       	push	r17
     748:	cf 93       	push	r28
     74a:	df 93       	push	r29
     74c:	00 d0       	rcall	.+0      	; 0x74e <_Z11MovementXYZP5Steps+0xa>
     74e:	cd b7       	in	r28, 0x3d	; 61
     750:	de b7       	in	r29, 0x3e	; 62
     752:	8c 01       	movw	r16, r24
     754:	ae 01       	movw	r20, r28
     756:	4f 5f       	subi	r20, 0xFF	; 255
     758:	5f 4f       	sbci	r21, 0xFF	; 255
     75a:	be 01       	movw	r22, r28
     75c:	6e 5f       	subi	r22, 0xFE	; 254
     75e:	7f 4f       	sbci	r23, 0xFF	; 255
     760:	ce 01       	movw	r24, r28
     762:	03 96       	adiw	r24, 0x03	; 3
     764:	34 df       	rcall	.-408    	; 0x5ce <_Z15ReadLimitSwitchPbS_S_>
     766:	20 e0       	ldi	r18, 0x00	; 0
     768:	30 e0       	ldi	r19, 0x00	; 0
     76a:	a9 01       	movw	r20, r18
     76c:	f8 01       	movw	r30, r16
     76e:	60 81       	ld	r22, Z
     770:	71 81       	ldd	r23, Z+1	; 0x01
     772:	82 81       	ldd	r24, Z+2	; 0x02
     774:	93 81       	ldd	r25, Z+3	; 0x03
     776:	52 d2       	rcall	.+1188   	; 0xc1c <__gesf2>
     778:	18 16       	cp	r1, r24
     77a:	4c f4       	brge	.+18     	; 0x78e <_Z11MovementXYZP5Steps+0x4a>
     77c:	8b 81       	ldd	r24, Y+3	; 0x03
     77e:	88 23       	and	r24, r24
     780:	09 f4       	brne	.+2      	; 0x784 <_Z11MovementXYZP5Steps+0x40>
     782:	81 c0       	rjmp	.+258    	; 0x886 <_Z11MovementXYZP5Steps+0x142>
     784:	87 e3       	ldi	r24, 0x37	; 55
     786:	76 d6       	rcall	.+3308   	; 0x1474 <digitalRead>
     788:	89 2b       	or	r24, r25
     78a:	09 f0       	breq	.+2      	; 0x78e <_Z11MovementXYZP5Steps+0x4a>
     78c:	7c c0       	rjmp	.+248    	; 0x886 <_Z11MovementXYZP5Steps+0x142>
     78e:	20 e0       	ldi	r18, 0x00	; 0
     790:	30 e0       	ldi	r19, 0x00	; 0
     792:	a9 01       	movw	r20, r18
     794:	f8 01       	movw	r30, r16
     796:	64 81       	ldd	r22, Z+4	; 0x04
     798:	75 81       	ldd	r23, Z+5	; 0x05
     79a:	86 81       	ldd	r24, Z+6	; 0x06
     79c:	97 81       	ldd	r25, Z+7	; 0x07
     79e:	3e d2       	rcall	.+1148   	; 0xc1c <__gesf2>
     7a0:	18 16       	cp	r1, r24
     7a2:	4c f4       	brge	.+18     	; 0x7b6 <_Z11MovementXYZP5Steps+0x72>
     7a4:	8a 81       	ldd	r24, Y+2	; 0x02
     7a6:	88 23       	and	r24, r24
     7a8:	09 f4       	brne	.+2      	; 0x7ac <_Z11MovementXYZP5Steps+0x68>
     7aa:	71 c0       	rjmp	.+226    	; 0x88e <_Z11MovementXYZP5Steps+0x14a>
     7ac:	8d e3       	ldi	r24, 0x3D	; 61
     7ae:	62 d6       	rcall	.+3268   	; 0x1474 <digitalRead>
     7b0:	89 2b       	or	r24, r25
     7b2:	09 f0       	breq	.+2      	; 0x7b6 <_Z11MovementXYZP5Steps+0x72>
     7b4:	6c c0       	rjmp	.+216    	; 0x88e <_Z11MovementXYZP5Steps+0x14a>
     7b6:	20 e0       	ldi	r18, 0x00	; 0
     7b8:	30 e0       	ldi	r19, 0x00	; 0
     7ba:	a9 01       	movw	r20, r18
     7bc:	f8 01       	movw	r30, r16
     7be:	60 85       	ldd	r22, Z+8	; 0x08
     7c0:	71 85       	ldd	r23, Z+9	; 0x09
     7c2:	82 85       	ldd	r24, Z+10	; 0x0a
     7c4:	93 85       	ldd	r25, Z+11	; 0x0b
     7c6:	2a d2       	rcall	.+1108   	; 0xc1c <__gesf2>
     7c8:	18 16       	cp	r1, r24
     7ca:	4c f4       	brge	.+18     	; 0x7de <_Z11MovementXYZP5Steps+0x9a>
     7cc:	89 81       	ldd	r24, Y+1	; 0x01
     7ce:	88 23       	and	r24, r24
     7d0:	09 f4       	brne	.+2      	; 0x7d4 <_Z11MovementXYZP5Steps+0x90>
     7d2:	61 c0       	rjmp	.+194    	; 0x896 <_Z11MovementXYZP5Steps+0x152>
     7d4:	80 e3       	ldi	r24, 0x30	; 48
     7d6:	4e d6       	rcall	.+3228   	; 0x1474 <digitalRead>
     7d8:	89 2b       	or	r24, r25
     7da:	09 f0       	breq	.+2      	; 0x7de <_Z11MovementXYZP5Steps+0x9a>
     7dc:	5c c0       	rjmp	.+184    	; 0x896 <_Z11MovementXYZP5Steps+0x152>
     7de:	f8 01       	movw	r30, r16
     7e0:	64 85       	ldd	r22, Z+12	; 0x0c
     7e2:	75 85       	ldd	r23, Z+13	; 0x0d
     7e4:	86 85       	ldd	r24, Z+14	; 0x0e
     7e6:	97 85       	ldd	r25, Z+15	; 0x0f
     7e8:	3b d1       	rcall	.+630    	; 0xa60 <__fixunssfsi>
     7ea:	cb 01       	movw	r24, r22
     7ec:	17 d5       	rcall	.+2606   	; 0x121c <delayMicroseconds>
     7ee:	20 e0       	ldi	r18, 0x00	; 0
     7f0:	30 e0       	ldi	r19, 0x00	; 0
     7f2:	a9 01       	movw	r20, r18
     7f4:	f8 01       	movw	r30, r16
     7f6:	60 81       	ld	r22, Z
     7f8:	71 81       	ldd	r23, Z+1	; 0x01
     7fa:	82 81       	ldd	r24, Z+2	; 0x02
     7fc:	93 81       	ldd	r25, Z+3	; 0x03
     7fe:	0e d2       	rcall	.+1052   	; 0xc1c <__gesf2>
     800:	18 16       	cp	r1, r24
     802:	4c f4       	brge	.+18     	; 0x816 <_Z11MovementXYZP5Steps+0xd2>
     804:	8b 81       	ldd	r24, Y+3	; 0x03
     806:	88 23       	and	r24, r24
     808:	09 f4       	brne	.+2      	; 0x80c <_Z11MovementXYZP5Steps+0xc8>
     80a:	49 c0       	rjmp	.+146    	; 0x89e <_Z11MovementXYZP5Steps+0x15a>
     80c:	87 e3       	ldi	r24, 0x37	; 55
     80e:	32 d6       	rcall	.+3172   	; 0x1474 <digitalRead>
     810:	89 2b       	or	r24, r25
     812:	09 f0       	breq	.+2      	; 0x816 <_Z11MovementXYZP5Steps+0xd2>
     814:	44 c0       	rjmp	.+136    	; 0x89e <_Z11MovementXYZP5Steps+0x15a>
     816:	20 e0       	ldi	r18, 0x00	; 0
     818:	30 e0       	ldi	r19, 0x00	; 0
     81a:	a9 01       	movw	r20, r18
     81c:	f8 01       	movw	r30, r16
     81e:	64 81       	ldd	r22, Z+4	; 0x04
     820:	75 81       	ldd	r23, Z+5	; 0x05
     822:	86 81       	ldd	r24, Z+6	; 0x06
     824:	97 81       	ldd	r25, Z+7	; 0x07
     826:	fa d1       	rcall	.+1012   	; 0xc1c <__gesf2>
     828:	18 16       	cp	r1, r24
     82a:	4c f4       	brge	.+18     	; 0x83e <_Z11MovementXYZP5Steps+0xfa>
     82c:	8a 81       	ldd	r24, Y+2	; 0x02
     82e:	88 23       	and	r24, r24
     830:	09 f4       	brne	.+2      	; 0x834 <_Z11MovementXYZP5Steps+0xf0>
     832:	48 c0       	rjmp	.+144    	; 0x8c4 <_Z11MovementXYZP5Steps+0x180>
     834:	8d e3       	ldi	r24, 0x3D	; 61
     836:	1e d6       	rcall	.+3132   	; 0x1474 <digitalRead>
     838:	89 2b       	or	r24, r25
     83a:	09 f0       	breq	.+2      	; 0x83e <_Z11MovementXYZP5Steps+0xfa>
     83c:	43 c0       	rjmp	.+134    	; 0x8c4 <_Z11MovementXYZP5Steps+0x180>
     83e:	20 e0       	ldi	r18, 0x00	; 0
     840:	30 e0       	ldi	r19, 0x00	; 0
     842:	a9 01       	movw	r20, r18
     844:	f8 01       	movw	r30, r16
     846:	60 85       	ldd	r22, Z+8	; 0x08
     848:	71 85       	ldd	r23, Z+9	; 0x09
     84a:	82 85       	ldd	r24, Z+10	; 0x0a
     84c:	93 85       	ldd	r25, Z+11	; 0x0b
     84e:	e6 d1       	rcall	.+972    	; 0xc1c <__gesf2>
     850:	18 16       	cp	r1, r24
     852:	4c f4       	brge	.+18     	; 0x866 <_Z11MovementXYZP5Steps+0x122>
     854:	89 81       	ldd	r24, Y+1	; 0x01
     856:	88 23       	and	r24, r24
     858:	09 f4       	brne	.+2      	; 0x85c <_Z11MovementXYZP5Steps+0x118>
     85a:	47 c0       	rjmp	.+142    	; 0x8ea <_Z11MovementXYZP5Steps+0x1a6>
     85c:	80 e3       	ldi	r24, 0x30	; 48
     85e:	0a d6       	rcall	.+3092   	; 0x1474 <digitalRead>
     860:	89 2b       	or	r24, r25
     862:	09 f0       	breq	.+2      	; 0x866 <_Z11MovementXYZP5Steps+0x122>
     864:	42 c0       	rjmp	.+132    	; 0x8ea <_Z11MovementXYZP5Steps+0x1a6>
     866:	f8 01       	movw	r30, r16
     868:	64 85       	ldd	r22, Z+12	; 0x0c
     86a:	75 85       	ldd	r23, Z+13	; 0x0d
     86c:	86 85       	ldd	r24, Z+14	; 0x0e
     86e:	97 85       	ldd	r25, Z+15	; 0x0f
     870:	f7 d0       	rcall	.+494    	; 0xa60 <__fixunssfsi>
     872:	cb 01       	movw	r24, r22
     874:	d3 d4       	rcall	.+2470   	; 0x121c <delayMicroseconds>
     876:	0f 90       	pop	r0
     878:	0f 90       	pop	r0
     87a:	0f 90       	pop	r0
     87c:	df 91       	pop	r29
     87e:	cf 91       	pop	r28
     880:	1f 91       	pop	r17
     882:	0f 91       	pop	r16
     884:	08 95       	ret
     886:	60 e0       	ldi	r22, 0x00	; 0
     888:	86 e3       	ldi	r24, 0x36	; 54
     88a:	c6 d5       	rcall	.+2956   	; 0x1418 <digitalWrite>
     88c:	80 cf       	rjmp	.-256    	; 0x78e <_Z11MovementXYZP5Steps+0x4a>
     88e:	60 e0       	ldi	r22, 0x00	; 0
     890:	8c e3       	ldi	r24, 0x3C	; 60
     892:	c2 d5       	rcall	.+2948   	; 0x1418 <digitalWrite>
     894:	90 cf       	rjmp	.-224    	; 0x7b6 <_Z11MovementXYZP5Steps+0x72>
     896:	60 e0       	ldi	r22, 0x00	; 0
     898:	8e e2       	ldi	r24, 0x2E	; 46
     89a:	be d5       	rcall	.+2940   	; 0x1418 <digitalWrite>
     89c:	a0 cf       	rjmp	.-192    	; 0x7de <_Z11MovementXYZP5Steps+0x9a>
     89e:	61 e0       	ldi	r22, 0x01	; 1
     8a0:	86 e3       	ldi	r24, 0x36	; 54
     8a2:	ba d5       	rcall	.+2932   	; 0x1418 <digitalWrite>
     8a4:	20 e0       	ldi	r18, 0x00	; 0
     8a6:	30 e0       	ldi	r19, 0x00	; 0
     8a8:	40 e8       	ldi	r20, 0x80	; 128
     8aa:	5f e3       	ldi	r21, 0x3F	; 63
     8ac:	f8 01       	movw	r30, r16
     8ae:	60 81       	ld	r22, Z
     8b0:	71 81       	ldd	r23, Z+1	; 0x01
     8b2:	82 81       	ldd	r24, Z+2	; 0x02
     8b4:	93 81       	ldd	r25, Z+3	; 0x03
     8b6:	66 d0       	rcall	.+204    	; 0x984 <__subsf3>
     8b8:	f8 01       	movw	r30, r16
     8ba:	60 83       	st	Z, r22
     8bc:	71 83       	std	Z+1, r23	; 0x01
     8be:	82 83       	std	Z+2, r24	; 0x02
     8c0:	93 83       	std	Z+3, r25	; 0x03
     8c2:	a9 cf       	rjmp	.-174    	; 0x816 <_Z11MovementXYZP5Steps+0xd2>
     8c4:	61 e0       	ldi	r22, 0x01	; 1
     8c6:	8c e3       	ldi	r24, 0x3C	; 60
     8c8:	a7 d5       	rcall	.+2894   	; 0x1418 <digitalWrite>
     8ca:	20 e0       	ldi	r18, 0x00	; 0
     8cc:	30 e0       	ldi	r19, 0x00	; 0
     8ce:	40 e8       	ldi	r20, 0x80	; 128
     8d0:	5f e3       	ldi	r21, 0x3F	; 63
     8d2:	f8 01       	movw	r30, r16
     8d4:	64 81       	ldd	r22, Z+4	; 0x04
     8d6:	75 81       	ldd	r23, Z+5	; 0x05
     8d8:	86 81       	ldd	r24, Z+6	; 0x06
     8da:	97 81       	ldd	r25, Z+7	; 0x07
     8dc:	53 d0       	rcall	.+166    	; 0x984 <__subsf3>
     8de:	f8 01       	movw	r30, r16
     8e0:	64 83       	std	Z+4, r22	; 0x04
     8e2:	75 83       	std	Z+5, r23	; 0x05
     8e4:	86 83       	std	Z+6, r24	; 0x06
     8e6:	97 83       	std	Z+7, r25	; 0x07
     8e8:	aa cf       	rjmp	.-172    	; 0x83e <_Z11MovementXYZP5Steps+0xfa>
     8ea:	61 e0       	ldi	r22, 0x01	; 1
     8ec:	8e e2       	ldi	r24, 0x2E	; 46
     8ee:	94 d5       	rcall	.+2856   	; 0x1418 <digitalWrite>
     8f0:	20 e0       	ldi	r18, 0x00	; 0
     8f2:	30 e0       	ldi	r19, 0x00	; 0
     8f4:	40 e8       	ldi	r20, 0x80	; 128
     8f6:	5f e3       	ldi	r21, 0x3F	; 63
     8f8:	f8 01       	movw	r30, r16
     8fa:	60 85       	ldd	r22, Z+8	; 0x08
     8fc:	71 85       	ldd	r23, Z+9	; 0x09
     8fe:	82 85       	ldd	r24, Z+10	; 0x0a
     900:	93 85       	ldd	r25, Z+11	; 0x0b
     902:	40 d0       	rcall	.+128    	; 0x984 <__subsf3>
     904:	f8 01       	movw	r30, r16
     906:	60 87       	std	Z+8, r22	; 0x08
     908:	71 87       	std	Z+9, r23	; 0x09
     90a:	82 87       	std	Z+10, r24	; 0x0a
     90c:	93 87       	std	Z+11, r25	; 0x0b
     90e:	ab cf       	rjmp	.-170    	; 0x866 <_Z11MovementXYZP5Steps+0x122>

00000910 <_Z8SetSpeedi>:
     910:	af 92       	push	r10
     912:	bf 92       	push	r11
     914:	cf 92       	push	r12
     916:	df 92       	push	r13
     918:	ef 92       	push	r14
     91a:	ff 92       	push	r15
     91c:	0f 93       	push	r16
     91e:	1f 93       	push	r17
     920:	8b 30       	cpi	r24, 0x0B	; 11
     922:	91 05       	cpc	r25, r1
     924:	14 f0       	brlt	.+4      	; 0x92a <_Z8SetSpeedi+0x1a>
     926:	8a e0       	ldi	r24, 0x0A	; 10
     928:	90 e0       	ldi	r25, 0x00	; 0
     92a:	bc 01       	movw	r22, r24
     92c:	97 ff       	sbrs	r25, 7
     92e:	02 c0       	rjmp	.+4      	; 0x934 <_Z8SetSpeedi+0x24>
     930:	60 e0       	ldi	r22, 0x00	; 0
     932:	70 e0       	ldi	r23, 0x00	; 0
     934:	07 2e       	mov	r0, r23
     936:	00 0c       	add	r0, r0
     938:	88 0b       	sbc	r24, r24
     93a:	99 0b       	sbc	r25, r25
     93c:	1f 92       	push	r1
     93e:	1f 92       	push	r1
     940:	23 e0       	ldi	r18, 0x03	; 3
     942:	2f 93       	push	r18
     944:	27 ee       	ldi	r18, 0xE7	; 231
     946:	2f 93       	push	r18
     948:	a1 2c       	mov	r10, r1
     94a:	b1 2c       	mov	r11, r1
     94c:	65 01       	movw	r12, r10
     94e:	1a e0       	ldi	r17, 0x0A	; 10
     950:	e1 2e       	mov	r14, r17
     952:	f1 2c       	mov	r15, r1
     954:	00 e0       	ldi	r16, 0x00	; 0
     956:	10 e0       	ldi	r17, 0x00	; 0
     958:	20 e0       	ldi	r18, 0x00	; 0
     95a:	30 e0       	ldi	r19, 0x00	; 0
     95c:	a9 01       	movw	r20, r18
     95e:	b2 d5       	rcall	.+2916   	; 0x14c4 <_Z3maplllll>
     960:	28 ee       	ldi	r18, 0xE8	; 232
     962:	33 e0       	ldi	r19, 0x03	; 3
     964:	c9 01       	movw	r24, r18
     966:	86 1b       	sub	r24, r22
     968:	97 0b       	sbc	r25, r23
     96a:	0f 90       	pop	r0
     96c:	0f 90       	pop	r0
     96e:	0f 90       	pop	r0
     970:	0f 90       	pop	r0
     972:	1f 91       	pop	r17
     974:	0f 91       	pop	r16
     976:	ff 90       	pop	r15
     978:	ef 90       	pop	r14
     97a:	df 90       	pop	r13
     97c:	cf 90       	pop	r12
     97e:	bf 90       	pop	r11
     980:	af 90       	pop	r10
     982:	08 95       	ret

00000984 <__subsf3>:
     984:	50 58       	subi	r21, 0x80	; 128

00000986 <__addsf3>:
     986:	bb 27       	eor	r27, r27
     988:	aa 27       	eor	r26, r26
     98a:	0e d0       	rcall	.+28     	; 0x9a8 <__addsf3x>
     98c:	0d c1       	rjmp	.+538    	; 0xba8 <__fp_round>
     98e:	fe d0       	rcall	.+508    	; 0xb8c <__fp_pscA>
     990:	30 f0       	brcs	.+12     	; 0x99e <__addsf3+0x18>
     992:	03 d1       	rcall	.+518    	; 0xb9a <__fp_pscB>
     994:	20 f0       	brcs	.+8      	; 0x99e <__addsf3+0x18>
     996:	31 f4       	brne	.+12     	; 0x9a4 <__addsf3+0x1e>
     998:	9f 3f       	cpi	r25, 0xFF	; 255
     99a:	11 f4       	brne	.+4      	; 0x9a0 <__addsf3+0x1a>
     99c:	1e f4       	brtc	.+6      	; 0x9a4 <__addsf3+0x1e>
     99e:	f3 c0       	rjmp	.+486    	; 0xb86 <__fp_nan>
     9a0:	0e f4       	brtc	.+2      	; 0x9a4 <__addsf3+0x1e>
     9a2:	e0 95       	com	r30
     9a4:	e7 fb       	bst	r30, 7
     9a6:	e9 c0       	rjmp	.+466    	; 0xb7a <__fp_inf>

000009a8 <__addsf3x>:
     9a8:	e9 2f       	mov	r30, r25
     9aa:	0f d1       	rcall	.+542    	; 0xbca <__fp_split3>
     9ac:	80 f3       	brcs	.-32     	; 0x98e <__addsf3+0x8>
     9ae:	ba 17       	cp	r27, r26
     9b0:	62 07       	cpc	r22, r18
     9b2:	73 07       	cpc	r23, r19
     9b4:	84 07       	cpc	r24, r20
     9b6:	95 07       	cpc	r25, r21
     9b8:	18 f0       	brcs	.+6      	; 0x9c0 <__addsf3x+0x18>
     9ba:	71 f4       	brne	.+28     	; 0x9d8 <__addsf3x+0x30>
     9bc:	9e f5       	brtc	.+102    	; 0xa24 <__addsf3x+0x7c>
     9be:	27 c1       	rjmp	.+590    	; 0xc0e <__fp_zero>
     9c0:	0e f4       	brtc	.+2      	; 0x9c4 <__addsf3x+0x1c>
     9c2:	e0 95       	com	r30
     9c4:	0b 2e       	mov	r0, r27
     9c6:	ba 2f       	mov	r27, r26
     9c8:	a0 2d       	mov	r26, r0
     9ca:	0b 01       	movw	r0, r22
     9cc:	b9 01       	movw	r22, r18
     9ce:	90 01       	movw	r18, r0
     9d0:	0c 01       	movw	r0, r24
     9d2:	ca 01       	movw	r24, r20
     9d4:	a0 01       	movw	r20, r0
     9d6:	11 24       	eor	r1, r1
     9d8:	ff 27       	eor	r31, r31
     9da:	59 1b       	sub	r21, r25
     9dc:	99 f0       	breq	.+38     	; 0xa04 <__addsf3x+0x5c>
     9de:	59 3f       	cpi	r21, 0xF9	; 249
     9e0:	50 f4       	brcc	.+20     	; 0x9f6 <__addsf3x+0x4e>
     9e2:	50 3e       	cpi	r21, 0xE0	; 224
     9e4:	68 f1       	brcs	.+90     	; 0xa40 <__addsf3x+0x98>
     9e6:	1a 16       	cp	r1, r26
     9e8:	f0 40       	sbci	r31, 0x00	; 0
     9ea:	a2 2f       	mov	r26, r18
     9ec:	23 2f       	mov	r18, r19
     9ee:	34 2f       	mov	r19, r20
     9f0:	44 27       	eor	r20, r20
     9f2:	58 5f       	subi	r21, 0xF8	; 248
     9f4:	f3 cf       	rjmp	.-26     	; 0x9dc <__addsf3x+0x34>
     9f6:	46 95       	lsr	r20
     9f8:	37 95       	ror	r19
     9fa:	27 95       	ror	r18
     9fc:	a7 95       	ror	r26
     9fe:	f0 40       	sbci	r31, 0x00	; 0
     a00:	53 95       	inc	r21
     a02:	c9 f7       	brne	.-14     	; 0x9f6 <__addsf3x+0x4e>
     a04:	7e f4       	brtc	.+30     	; 0xa24 <__addsf3x+0x7c>
     a06:	1f 16       	cp	r1, r31
     a08:	ba 0b       	sbc	r27, r26
     a0a:	62 0b       	sbc	r22, r18
     a0c:	73 0b       	sbc	r23, r19
     a0e:	84 0b       	sbc	r24, r20
     a10:	ba f0       	brmi	.+46     	; 0xa40 <__addsf3x+0x98>
     a12:	91 50       	subi	r25, 0x01	; 1
     a14:	a1 f0       	breq	.+40     	; 0xa3e <__addsf3x+0x96>
     a16:	ff 0f       	add	r31, r31
     a18:	bb 1f       	adc	r27, r27
     a1a:	66 1f       	adc	r22, r22
     a1c:	77 1f       	adc	r23, r23
     a1e:	88 1f       	adc	r24, r24
     a20:	c2 f7       	brpl	.-16     	; 0xa12 <__addsf3x+0x6a>
     a22:	0e c0       	rjmp	.+28     	; 0xa40 <__addsf3x+0x98>
     a24:	ba 0f       	add	r27, r26
     a26:	62 1f       	adc	r22, r18
     a28:	73 1f       	adc	r23, r19
     a2a:	84 1f       	adc	r24, r20
     a2c:	48 f4       	brcc	.+18     	; 0xa40 <__addsf3x+0x98>
     a2e:	87 95       	ror	r24
     a30:	77 95       	ror	r23
     a32:	67 95       	ror	r22
     a34:	b7 95       	ror	r27
     a36:	f7 95       	ror	r31
     a38:	9e 3f       	cpi	r25, 0xFE	; 254
     a3a:	08 f0       	brcs	.+2      	; 0xa3e <__addsf3x+0x96>
     a3c:	b3 cf       	rjmp	.-154    	; 0x9a4 <__addsf3+0x1e>
     a3e:	93 95       	inc	r25
     a40:	88 0f       	add	r24, r24
     a42:	08 f0       	brcs	.+2      	; 0xa46 <__addsf3x+0x9e>
     a44:	99 27       	eor	r25, r25
     a46:	ee 0f       	add	r30, r30
     a48:	97 95       	ror	r25
     a4a:	87 95       	ror	r24
     a4c:	08 95       	ret

00000a4e <__cmpsf2>:
     a4e:	71 d0       	rcall	.+226    	; 0xb32 <__fp_cmp>
     a50:	08 f4       	brcc	.+2      	; 0xa54 <__cmpsf2+0x6>
     a52:	81 e0       	ldi	r24, 0x01	; 1
     a54:	08 95       	ret

00000a56 <__fixsfsi>:
     a56:	04 d0       	rcall	.+8      	; 0xa60 <__fixunssfsi>
     a58:	68 94       	set
     a5a:	b1 11       	cpse	r27, r1
     a5c:	d9 c0       	rjmp	.+434    	; 0xc10 <__fp_szero>
     a5e:	08 95       	ret

00000a60 <__fixunssfsi>:
     a60:	bc d0       	rcall	.+376    	; 0xbda <__fp_splitA>
     a62:	88 f0       	brcs	.+34     	; 0xa86 <__fixunssfsi+0x26>
     a64:	9f 57       	subi	r25, 0x7F	; 127
     a66:	90 f0       	brcs	.+36     	; 0xa8c <__fixunssfsi+0x2c>
     a68:	b9 2f       	mov	r27, r25
     a6a:	99 27       	eor	r25, r25
     a6c:	b7 51       	subi	r27, 0x17	; 23
     a6e:	a0 f0       	brcs	.+40     	; 0xa98 <__fixunssfsi+0x38>
     a70:	d1 f0       	breq	.+52     	; 0xaa6 <__fixunssfsi+0x46>
     a72:	66 0f       	add	r22, r22
     a74:	77 1f       	adc	r23, r23
     a76:	88 1f       	adc	r24, r24
     a78:	99 1f       	adc	r25, r25
     a7a:	1a f0       	brmi	.+6      	; 0xa82 <__fixunssfsi+0x22>
     a7c:	ba 95       	dec	r27
     a7e:	c9 f7       	brne	.-14     	; 0xa72 <__fixunssfsi+0x12>
     a80:	12 c0       	rjmp	.+36     	; 0xaa6 <__fixunssfsi+0x46>
     a82:	b1 30       	cpi	r27, 0x01	; 1
     a84:	81 f0       	breq	.+32     	; 0xaa6 <__fixunssfsi+0x46>
     a86:	c3 d0       	rcall	.+390    	; 0xc0e <__fp_zero>
     a88:	b1 e0       	ldi	r27, 0x01	; 1
     a8a:	08 95       	ret
     a8c:	c0 c0       	rjmp	.+384    	; 0xc0e <__fp_zero>
     a8e:	67 2f       	mov	r22, r23
     a90:	78 2f       	mov	r23, r24
     a92:	88 27       	eor	r24, r24
     a94:	b8 5f       	subi	r27, 0xF8	; 248
     a96:	39 f0       	breq	.+14     	; 0xaa6 <__fixunssfsi+0x46>
     a98:	b9 3f       	cpi	r27, 0xF9	; 249
     a9a:	cc f3       	brlt	.-14     	; 0xa8e <__fixunssfsi+0x2e>
     a9c:	86 95       	lsr	r24
     a9e:	77 95       	ror	r23
     aa0:	67 95       	ror	r22
     aa2:	b3 95       	inc	r27
     aa4:	d9 f7       	brne	.-10     	; 0xa9c <__fixunssfsi+0x3c>
     aa6:	3e f4       	brtc	.+14     	; 0xab6 <__fixunssfsi+0x56>
     aa8:	90 95       	com	r25
     aaa:	80 95       	com	r24
     aac:	70 95       	com	r23
     aae:	61 95       	neg	r22
     ab0:	7f 4f       	sbci	r23, 0xFF	; 255
     ab2:	8f 4f       	sbci	r24, 0xFF	; 255
     ab4:	9f 4f       	sbci	r25, 0xFF	; 255
     ab6:	08 95       	ret

00000ab8 <__floatunsisf>:
     ab8:	e8 94       	clt
     aba:	09 c0       	rjmp	.+18     	; 0xace <__floatsisf+0x12>

00000abc <__floatsisf>:
     abc:	97 fb       	bst	r25, 7
     abe:	3e f4       	brtc	.+14     	; 0xace <__floatsisf+0x12>
     ac0:	90 95       	com	r25
     ac2:	80 95       	com	r24
     ac4:	70 95       	com	r23
     ac6:	61 95       	neg	r22
     ac8:	7f 4f       	sbci	r23, 0xFF	; 255
     aca:	8f 4f       	sbci	r24, 0xFF	; 255
     acc:	9f 4f       	sbci	r25, 0xFF	; 255
     ace:	99 23       	and	r25, r25
     ad0:	a9 f0       	breq	.+42     	; 0xafc <__floatsisf+0x40>
     ad2:	f9 2f       	mov	r31, r25
     ad4:	96 e9       	ldi	r25, 0x96	; 150
     ad6:	bb 27       	eor	r27, r27
     ad8:	93 95       	inc	r25
     ada:	f6 95       	lsr	r31
     adc:	87 95       	ror	r24
     ade:	77 95       	ror	r23
     ae0:	67 95       	ror	r22
     ae2:	b7 95       	ror	r27
     ae4:	f1 11       	cpse	r31, r1
     ae6:	f8 cf       	rjmp	.-16     	; 0xad8 <__floatsisf+0x1c>
     ae8:	fa f4       	brpl	.+62     	; 0xb28 <__floatsisf+0x6c>
     aea:	bb 0f       	add	r27, r27
     aec:	11 f4       	brne	.+4      	; 0xaf2 <__floatsisf+0x36>
     aee:	60 ff       	sbrs	r22, 0
     af0:	1b c0       	rjmp	.+54     	; 0xb28 <__floatsisf+0x6c>
     af2:	6f 5f       	subi	r22, 0xFF	; 255
     af4:	7f 4f       	sbci	r23, 0xFF	; 255
     af6:	8f 4f       	sbci	r24, 0xFF	; 255
     af8:	9f 4f       	sbci	r25, 0xFF	; 255
     afa:	16 c0       	rjmp	.+44     	; 0xb28 <__floatsisf+0x6c>
     afc:	88 23       	and	r24, r24
     afe:	11 f0       	breq	.+4      	; 0xb04 <__floatsisf+0x48>
     b00:	96 e9       	ldi	r25, 0x96	; 150
     b02:	11 c0       	rjmp	.+34     	; 0xb26 <__floatsisf+0x6a>
     b04:	77 23       	and	r23, r23
     b06:	21 f0       	breq	.+8      	; 0xb10 <__floatsisf+0x54>
     b08:	9e e8       	ldi	r25, 0x8E	; 142
     b0a:	87 2f       	mov	r24, r23
     b0c:	76 2f       	mov	r23, r22
     b0e:	05 c0       	rjmp	.+10     	; 0xb1a <__floatsisf+0x5e>
     b10:	66 23       	and	r22, r22
     b12:	71 f0       	breq	.+28     	; 0xb30 <__floatsisf+0x74>
     b14:	96 e8       	ldi	r25, 0x86	; 134
     b16:	86 2f       	mov	r24, r22
     b18:	70 e0       	ldi	r23, 0x00	; 0
     b1a:	60 e0       	ldi	r22, 0x00	; 0
     b1c:	2a f0       	brmi	.+10     	; 0xb28 <__floatsisf+0x6c>
     b1e:	9a 95       	dec	r25
     b20:	66 0f       	add	r22, r22
     b22:	77 1f       	adc	r23, r23
     b24:	88 1f       	adc	r24, r24
     b26:	da f7       	brpl	.-10     	; 0xb1e <__floatsisf+0x62>
     b28:	88 0f       	add	r24, r24
     b2a:	96 95       	lsr	r25
     b2c:	87 95       	ror	r24
     b2e:	97 f9       	bld	r25, 7
     b30:	08 95       	ret

00000b32 <__fp_cmp>:
     b32:	99 0f       	add	r25, r25
     b34:	00 08       	sbc	r0, r0
     b36:	55 0f       	add	r21, r21
     b38:	aa 0b       	sbc	r26, r26
     b3a:	e0 e8       	ldi	r30, 0x80	; 128
     b3c:	fe ef       	ldi	r31, 0xFE	; 254
     b3e:	16 16       	cp	r1, r22
     b40:	17 06       	cpc	r1, r23
     b42:	e8 07       	cpc	r30, r24
     b44:	f9 07       	cpc	r31, r25
     b46:	c0 f0       	brcs	.+48     	; 0xb78 <__fp_cmp+0x46>
     b48:	12 16       	cp	r1, r18
     b4a:	13 06       	cpc	r1, r19
     b4c:	e4 07       	cpc	r30, r20
     b4e:	f5 07       	cpc	r31, r21
     b50:	98 f0       	brcs	.+38     	; 0xb78 <__fp_cmp+0x46>
     b52:	62 1b       	sub	r22, r18
     b54:	73 0b       	sbc	r23, r19
     b56:	84 0b       	sbc	r24, r20
     b58:	95 0b       	sbc	r25, r21
     b5a:	39 f4       	brne	.+14     	; 0xb6a <__fp_cmp+0x38>
     b5c:	0a 26       	eor	r0, r26
     b5e:	61 f0       	breq	.+24     	; 0xb78 <__fp_cmp+0x46>
     b60:	23 2b       	or	r18, r19
     b62:	24 2b       	or	r18, r20
     b64:	25 2b       	or	r18, r21
     b66:	21 f4       	brne	.+8      	; 0xb70 <__fp_cmp+0x3e>
     b68:	08 95       	ret
     b6a:	0a 26       	eor	r0, r26
     b6c:	09 f4       	brne	.+2      	; 0xb70 <__fp_cmp+0x3e>
     b6e:	a1 40       	sbci	r26, 0x01	; 1
     b70:	a6 95       	lsr	r26
     b72:	8f ef       	ldi	r24, 0xFF	; 255
     b74:	81 1d       	adc	r24, r1
     b76:	81 1d       	adc	r24, r1
     b78:	08 95       	ret

00000b7a <__fp_inf>:
     b7a:	97 f9       	bld	r25, 7
     b7c:	9f 67       	ori	r25, 0x7F	; 127
     b7e:	80 e8       	ldi	r24, 0x80	; 128
     b80:	70 e0       	ldi	r23, 0x00	; 0
     b82:	60 e0       	ldi	r22, 0x00	; 0
     b84:	08 95       	ret

00000b86 <__fp_nan>:
     b86:	9f ef       	ldi	r25, 0xFF	; 255
     b88:	80 ec       	ldi	r24, 0xC0	; 192
     b8a:	08 95       	ret

00000b8c <__fp_pscA>:
     b8c:	00 24       	eor	r0, r0
     b8e:	0a 94       	dec	r0
     b90:	16 16       	cp	r1, r22
     b92:	17 06       	cpc	r1, r23
     b94:	18 06       	cpc	r1, r24
     b96:	09 06       	cpc	r0, r25
     b98:	08 95       	ret

00000b9a <__fp_pscB>:
     b9a:	00 24       	eor	r0, r0
     b9c:	0a 94       	dec	r0
     b9e:	12 16       	cp	r1, r18
     ba0:	13 06       	cpc	r1, r19
     ba2:	14 06       	cpc	r1, r20
     ba4:	05 06       	cpc	r0, r21
     ba6:	08 95       	ret

00000ba8 <__fp_round>:
     ba8:	09 2e       	mov	r0, r25
     baa:	03 94       	inc	r0
     bac:	00 0c       	add	r0, r0
     bae:	11 f4       	brne	.+4      	; 0xbb4 <__fp_round+0xc>
     bb0:	88 23       	and	r24, r24
     bb2:	52 f0       	brmi	.+20     	; 0xbc8 <__fp_round+0x20>
     bb4:	bb 0f       	add	r27, r27
     bb6:	40 f4       	brcc	.+16     	; 0xbc8 <__fp_round+0x20>
     bb8:	bf 2b       	or	r27, r31
     bba:	11 f4       	brne	.+4      	; 0xbc0 <__fp_round+0x18>
     bbc:	60 ff       	sbrs	r22, 0
     bbe:	04 c0       	rjmp	.+8      	; 0xbc8 <__fp_round+0x20>
     bc0:	6f 5f       	subi	r22, 0xFF	; 255
     bc2:	7f 4f       	sbci	r23, 0xFF	; 255
     bc4:	8f 4f       	sbci	r24, 0xFF	; 255
     bc6:	9f 4f       	sbci	r25, 0xFF	; 255
     bc8:	08 95       	ret

00000bca <__fp_split3>:
     bca:	57 fd       	sbrc	r21, 7
     bcc:	90 58       	subi	r25, 0x80	; 128
     bce:	44 0f       	add	r20, r20
     bd0:	55 1f       	adc	r21, r21
     bd2:	59 f0       	breq	.+22     	; 0xbea <__fp_splitA+0x10>
     bd4:	5f 3f       	cpi	r21, 0xFF	; 255
     bd6:	71 f0       	breq	.+28     	; 0xbf4 <__fp_splitA+0x1a>
     bd8:	47 95       	ror	r20

00000bda <__fp_splitA>:
     bda:	88 0f       	add	r24, r24
     bdc:	97 fb       	bst	r25, 7
     bde:	99 1f       	adc	r25, r25
     be0:	61 f0       	breq	.+24     	; 0xbfa <__fp_splitA+0x20>
     be2:	9f 3f       	cpi	r25, 0xFF	; 255
     be4:	79 f0       	breq	.+30     	; 0xc04 <__fp_splitA+0x2a>
     be6:	87 95       	ror	r24
     be8:	08 95       	ret
     bea:	12 16       	cp	r1, r18
     bec:	13 06       	cpc	r1, r19
     bee:	14 06       	cpc	r1, r20
     bf0:	55 1f       	adc	r21, r21
     bf2:	f2 cf       	rjmp	.-28     	; 0xbd8 <__fp_split3+0xe>
     bf4:	46 95       	lsr	r20
     bf6:	f1 df       	rcall	.-30     	; 0xbda <__fp_splitA>
     bf8:	08 c0       	rjmp	.+16     	; 0xc0a <__fp_splitA+0x30>
     bfa:	16 16       	cp	r1, r22
     bfc:	17 06       	cpc	r1, r23
     bfe:	18 06       	cpc	r1, r24
     c00:	99 1f       	adc	r25, r25
     c02:	f1 cf       	rjmp	.-30     	; 0xbe6 <__fp_splitA+0xc>
     c04:	86 95       	lsr	r24
     c06:	71 05       	cpc	r23, r1
     c08:	61 05       	cpc	r22, r1
     c0a:	08 94       	sec
     c0c:	08 95       	ret

00000c0e <__fp_zero>:
     c0e:	e8 94       	clt

00000c10 <__fp_szero>:
     c10:	bb 27       	eor	r27, r27
     c12:	66 27       	eor	r22, r22
     c14:	77 27       	eor	r23, r23
     c16:	cb 01       	movw	r24, r22
     c18:	97 f9       	bld	r25, 7
     c1a:	08 95       	ret

00000c1c <__gesf2>:
     c1c:	8a df       	rcall	.-236    	; 0xb32 <__fp_cmp>
     c1e:	08 f4       	brcc	.+2      	; 0xc22 <__gesf2+0x6>
     c20:	8f ef       	ldi	r24, 0xFF	; 255
     c22:	08 95       	ret

00000c24 <_ZN14HardwareSerial9availableEv>:
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
     c24:	fc 01       	movw	r30, r24
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
     c26:	91 8d       	ldd	r25, Z+25	; 0x19
     c28:	22 8d       	ldd	r18, Z+26	; 0x1a
     c2a:	89 2f       	mov	r24, r25
     c2c:	90 e0       	ldi	r25, 0x00	; 0
     c2e:	80 5c       	subi	r24, 0xC0	; 192
     c30:	9f 4f       	sbci	r25, 0xFF	; 255
     c32:	82 1b       	sub	r24, r18
     c34:	91 09       	sbc	r25, r1
}
     c36:	8f 73       	andi	r24, 0x3F	; 63
     c38:	99 27       	eor	r25, r25
     c3a:	08 95       	ret

00000c3c <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
     c3c:	fc 01       	movw	r30, r24
  if (_rx_buffer_head == _rx_buffer_tail) {
     c3e:	91 8d       	ldd	r25, Z+25	; 0x19
     c40:	82 8d       	ldd	r24, Z+26	; 0x1a
     c42:	98 17       	cp	r25, r24
     c44:	31 f0       	breq	.+12     	; 0xc52 <_ZN14HardwareSerial4peekEv+0x16>
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
     c46:	82 8d       	ldd	r24, Z+26	; 0x1a
     c48:	e8 0f       	add	r30, r24
     c4a:	f1 1d       	adc	r31, r1
     c4c:	85 8d       	ldd	r24, Z+29	; 0x1d
     c4e:	90 e0       	ldi	r25, 0x00	; 0
     c50:	08 95       	ret
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
     c52:	8f ef       	ldi	r24, 0xFF	; 255
     c54:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
     c56:	08 95       	ret

00000c58 <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
     c58:	fc 01       	movw	r30, r24
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
     c5a:	91 8d       	ldd	r25, Z+25	; 0x19
     c5c:	82 8d       	ldd	r24, Z+26	; 0x1a
     c5e:	98 17       	cp	r25, r24
     c60:	61 f0       	breq	.+24     	; 0xc7a <_ZN14HardwareSerial4readEv+0x22>
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
     c62:	82 8d       	ldd	r24, Z+26	; 0x1a
     c64:	df 01       	movw	r26, r30
     c66:	a8 0f       	add	r26, r24
     c68:	b1 1d       	adc	r27, r1
     c6a:	5d 96       	adiw	r26, 0x1d	; 29
     c6c:	8c 91       	ld	r24, X
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
     c6e:	92 8d       	ldd	r25, Z+26	; 0x1a
     c70:	9f 5f       	subi	r25, 0xFF	; 255
     c72:	9f 73       	andi	r25, 0x3F	; 63
     c74:	92 8f       	std	Z+26, r25	; 0x1a
    return c;
     c76:	90 e0       	ldi	r25, 0x00	; 0
     c78:	08 95       	ret

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
     c7a:	8f ef       	ldi	r24, 0xFF	; 255
     c7c:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
     c7e:	08 95       	ret

00000c80 <_ZN14HardwareSerial17availableForWriteEv>:
{
#if (SERIAL_TX_BUFFER_SIZE>256)
  uint8_t oldSREG = SREG;
  cli();
#endif
  tx_buffer_index_t head = _tx_buffer_head;
     c80:	fc 01       	movw	r30, r24
     c82:	53 8d       	ldd	r21, Z+27	; 0x1b
  tx_buffer_index_t tail = _tx_buffer_tail;
     c84:	44 8d       	ldd	r20, Z+28	; 0x1c
     c86:	25 2f       	mov	r18, r21
     c88:	30 e0       	ldi	r19, 0x00	; 0
     c8a:	84 2f       	mov	r24, r20
     c8c:	90 e0       	ldi	r25, 0x00	; 0
#if (SERIAL_TX_BUFFER_SIZE>256)
  SREG = oldSREG;
#endif
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
     c8e:	82 1b       	sub	r24, r18
     c90:	93 0b       	sbc	r25, r19
     c92:	54 17       	cp	r21, r20
     c94:	10 f0       	brcs	.+4      	; 0xc9a <_ZN14HardwareSerial17availableForWriteEv+0x1a>
     c96:	cf 96       	adiw	r24, 0x3f	; 63
     c98:	08 95       	ret
  return tail - head - 1;
     c9a:	01 97       	sbiw	r24, 0x01	; 1
}
     c9c:	08 95       	ret

00000c9e <_Z14serialEventRunv>:
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
     c9e:	85 ed       	ldi	r24, 0xD5	; 213
     ca0:	97 e0       	ldi	r25, 0x07	; 7
     ca2:	89 2b       	or	r24, r25
     ca4:	39 f0       	breq	.+14     	; 0xcb4 <_Z14serialEventRunv+0x16>
     ca6:	80 e0       	ldi	r24, 0x00	; 0
     ca8:	90 e0       	ldi	r25, 0x00	; 0
     caa:	89 2b       	or	r24, r25
     cac:	19 f0       	breq	.+6      	; 0xcb4 <_Z14serialEventRunv+0x16>
     cae:	7d d1       	rcall	.+762    	; 0xfaa <_Z17Serial0_availablev>
     cb0:	81 11       	cpse	r24, r1
#endif
#if defined(HAVE_HWSERIAL1)
  if (Serial1_available && serialEvent1 && Serial1_available()) serialEvent1();
     cb2:	25 c0       	rjmp	.+74     	; 0xcfe <_Z14serialEventRunv+0x60>
     cb4:	80 e0       	ldi	r24, 0x00	; 0
     cb6:	90 e0       	ldi	r25, 0x00	; 0
     cb8:	89 2b       	or	r24, r25
     cba:	41 f0       	breq	.+16     	; 0xccc <_Z14serialEventRunv+0x2e>
     cbc:	80 e0       	ldi	r24, 0x00	; 0
     cbe:	90 e0       	ldi	r25, 0x00	; 0
     cc0:	89 2b       	or	r24, r25
     cc2:	21 f0       	breq	.+8      	; 0xccc <_Z14serialEventRunv+0x2e>
     cc4:	0e 94 00 00 	call	0	; 0x0 <__vectors>
     cc8:	81 11       	cpse	r24, r1
#endif
#if defined(HAVE_HWSERIAL2)
  if (Serial2_available && serialEvent2 && Serial2_available()) serialEvent2();
     cca:	1c c0       	rjmp	.+56     	; 0xd04 <_Z14serialEventRunv+0x66>
     ccc:	80 e0       	ldi	r24, 0x00	; 0
     cce:	90 e0       	ldi	r25, 0x00	; 0
     cd0:	89 2b       	or	r24, r25
     cd2:	41 f0       	breq	.+16     	; 0xce4 <_Z14serialEventRunv+0x46>
     cd4:	80 e0       	ldi	r24, 0x00	; 0
     cd6:	90 e0       	ldi	r25, 0x00	; 0
     cd8:	89 2b       	or	r24, r25
     cda:	21 f0       	breq	.+8      	; 0xce4 <_Z14serialEventRunv+0x46>
     cdc:	0e 94 00 00 	call	0	; 0x0 <__vectors>
     ce0:	81 11       	cpse	r24, r1
#endif
#if defined(HAVE_HWSERIAL3)
  if (Serial3_available && serialEvent3 && Serial3_available()) serialEvent3();
     ce2:	13 c0       	rjmp	.+38     	; 0xd0a <_Z14serialEventRunv+0x6c>
     ce4:	80 e0       	ldi	r24, 0x00	; 0
     ce6:	90 e0       	ldi	r25, 0x00	; 0
     ce8:	89 2b       	or	r24, r25
     cea:	a1 f0       	breq	.+40     	; 0xd14 <_Z14serialEventRunv+0x76>
     cec:	80 e0       	ldi	r24, 0x00	; 0
     cee:	90 e0       	ldi	r25, 0x00	; 0
     cf0:	89 2b       	or	r24, r25
     cf2:	81 f0       	breq	.+32     	; 0xd14 <_Z14serialEventRunv+0x76>
     cf4:	0e 94 00 00 	call	0	; 0x0 <__vectors>
     cf8:	81 11       	cpse	r24, r1
     cfa:	0a c0       	rjmp	.+20     	; 0xd10 <_Z14serialEventRunv+0x72>
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
     cfc:	08 95       	ret
     cfe:	0e 94 00 00 	call	0	; 0x0 <__vectors>
#endif
#if defined(HAVE_HWSERIAL1)
  if (Serial1_available && serialEvent1 && Serial1_available()) serialEvent1();
     d02:	d8 cf       	rjmp	.-80     	; 0xcb4 <_Z14serialEventRunv+0x16>
     d04:	0e 94 00 00 	call	0	; 0x0 <__vectors>
#endif
#if defined(HAVE_HWSERIAL2)
  if (Serial2_available && serialEvent2 && Serial2_available()) serialEvent2();
     d08:	e1 cf       	rjmp	.-62     	; 0xccc <_Z14serialEventRunv+0x2e>
     d0a:	0e 94 00 00 	call	0	; 0x0 <__vectors>
#endif
#if defined(HAVE_HWSERIAL3)
  if (Serial3_available && serialEvent3 && Serial3_available()) serialEvent3();
     d0e:	ea cf       	rjmp	.-44     	; 0xce4 <_Z14serialEventRunv+0x46>
     d10:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
     d14:	08 95       	ret

00000d16 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
}

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
     d16:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
     d18:	84 8d       	ldd	r24, Z+28	; 0x1c
     d1a:	df 01       	movw	r26, r30
     d1c:	a8 0f       	add	r26, r24
     d1e:	b1 1d       	adc	r27, r1
     d20:	a3 5a       	subi	r26, 0xA3	; 163
     d22:	bf 4f       	sbci	r27, 0xFF	; 255
     d24:	2c 91       	ld	r18, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
     d26:	84 8d       	ldd	r24, Z+28	; 0x1c
     d28:	90 e0       	ldi	r25, 0x00	; 0
     d2a:	01 96       	adiw	r24, 0x01	; 1
     d2c:	8f 73       	andi	r24, 0x3F	; 63
     d2e:	99 27       	eor	r25, r25
     d30:	84 8f       	std	Z+28, r24	; 0x1c

  *_udr = c;
     d32:	a6 89       	ldd	r26, Z+22	; 0x16
     d34:	b7 89       	ldd	r27, Z+23	; 0x17
     d36:	2c 93       	st	X, r18

  // clear the TXC bit -- "can be cleared by writing a one to its bit
  // location". This makes sure flush() won't return until the bytes
  // actually got written
  sbi(*_ucsra, TXC0);
     d38:	a0 89       	ldd	r26, Z+16	; 0x10
     d3a:	b1 89       	ldd	r27, Z+17	; 0x11
     d3c:	8c 91       	ld	r24, X
     d3e:	80 64       	ori	r24, 0x40	; 64
     d40:	8c 93       	st	X, r24

  if (_tx_buffer_head == _tx_buffer_tail) {
     d42:	93 8d       	ldd	r25, Z+27	; 0x1b
     d44:	84 8d       	ldd	r24, Z+28	; 0x1c
     d46:	98 13       	cpse	r25, r24
     d48:	06 c0       	rjmp	.+12     	; 0xd56 <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x40>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
     d4a:	02 88       	ldd	r0, Z+18	; 0x12
     d4c:	f3 89       	ldd	r31, Z+19	; 0x13
     d4e:	e0 2d       	mov	r30, r0
     d50:	80 81       	ld	r24, Z
     d52:	8f 7d       	andi	r24, 0xDF	; 223
     d54:	80 83       	st	Z, r24
     d56:	08 95       	ret

00000d58 <_ZN14HardwareSerial5writeEh>:
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}

size_t HardwareSerial::write(uint8_t c)
{
     d58:	ef 92       	push	r14
     d5a:	ff 92       	push	r15
     d5c:	0f 93       	push	r16
     d5e:	1f 93       	push	r17
     d60:	cf 93       	push	r28
     d62:	df 93       	push	r29
     d64:	ec 01       	movw	r28, r24
  _written = true;
     d66:	81 e0       	ldi	r24, 0x01	; 1
     d68:	88 8f       	std	Y+24, r24	; 0x18
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
     d6a:	9b 8d       	ldd	r25, Y+27	; 0x1b
     d6c:	8c 8d       	ldd	r24, Y+28	; 0x1c
     d6e:	98 13       	cpse	r25, r24
     d70:	05 c0       	rjmp	.+10     	; 0xd7c <_ZN14HardwareSerial5writeEh+0x24>
     d72:	e8 89       	ldd	r30, Y+16	; 0x10
     d74:	f9 89       	ldd	r31, Y+17	; 0x11
     d76:	80 81       	ld	r24, Z
     d78:	85 fd       	sbrc	r24, 5
     d7a:	23 c0       	rjmp	.+70     	; 0xdc2 <_ZN14HardwareSerial5writeEh+0x6a>
     d7c:	f6 2e       	mov	r15, r22
    *_udr = c;
    sbi(*_ucsra, TXC0);
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
     d7e:	0b 8d       	ldd	r16, Y+27	; 0x1b
     d80:	10 e0       	ldi	r17, 0x00	; 0
     d82:	0f 5f       	subi	r16, 0xFF	; 255
     d84:	1f 4f       	sbci	r17, 0xFF	; 255
     d86:	0f 73       	andi	r16, 0x3F	; 63
     d88:	11 27       	eor	r17, r17
     d8a:	e0 2e       	mov	r14, r16
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
     d8c:	8c 8d       	ldd	r24, Y+28	; 0x1c
     d8e:	e8 12       	cpse	r14, r24
     d90:	0b c0       	rjmp	.+22     	; 0xda8 <_ZN14HardwareSerial5writeEh+0x50>
    if (bit_is_clear(SREG, SREG_I)) {
     d92:	0f b6       	in	r0, 0x3f	; 63
     d94:	07 fc       	sbrc	r0, 7
     d96:	fa cf       	rjmp	.-12     	; 0xd8c <_ZN14HardwareSerial5writeEh+0x34>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
     d98:	e8 89       	ldd	r30, Y+16	; 0x10
     d9a:	f9 89       	ldd	r31, Y+17	; 0x11
     d9c:	80 81       	ld	r24, Z
     d9e:	85 ff       	sbrs	r24, 5
     da0:	f5 cf       	rjmp	.-22     	; 0xd8c <_ZN14HardwareSerial5writeEh+0x34>
	_tx_udr_empty_irq();
     da2:	ce 01       	movw	r24, r28
     da4:	b8 df       	rcall	.-144    	; 0xd16 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
     da6:	f2 cf       	rjmp	.-28     	; 0xd8c <_ZN14HardwareSerial5writeEh+0x34>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
     da8:	8b 8d       	ldd	r24, Y+27	; 0x1b
     daa:	fe 01       	movw	r30, r28
     dac:	e8 0f       	add	r30, r24
     dae:	f1 1d       	adc	r31, r1
     db0:	e3 5a       	subi	r30, 0xA3	; 163
     db2:	ff 4f       	sbci	r31, 0xFF	; 255
     db4:	f0 82       	st	Z, r15
  _tx_buffer_head = i;
     db6:	0b 8f       	std	Y+27, r16	; 0x1b
	
  sbi(*_ucsrb, UDRIE0);
     db8:	ea 89       	ldd	r30, Y+18	; 0x12
     dba:	fb 89       	ldd	r31, Y+19	; 0x13
     dbc:	80 81       	ld	r24, Z
     dbe:	80 62       	ori	r24, 0x20	; 32
     dc0:	07 c0       	rjmp	.+14     	; 0xdd0 <_ZN14HardwareSerial5writeEh+0x78>
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    *_udr = c;
     dc2:	ee 89       	ldd	r30, Y+22	; 0x16
     dc4:	ff 89       	ldd	r31, Y+23	; 0x17
     dc6:	60 83       	st	Z, r22
    sbi(*_ucsra, TXC0);
     dc8:	e8 89       	ldd	r30, Y+16	; 0x10
     dca:	f9 89       	ldd	r31, Y+17	; 0x11
     dcc:	80 81       	ld	r24, Z
     dce:	80 64       	ori	r24, 0x40	; 64
     dd0:	80 83       	st	Z, r24
  _tx_buffer_head = i;
	
  sbi(*_ucsrb, UDRIE0);
  
  return 1;
}
     dd2:	81 e0       	ldi	r24, 0x01	; 1
     dd4:	90 e0       	ldi	r25, 0x00	; 0
     dd6:	df 91       	pop	r29
     dd8:	cf 91       	pop	r28
     dda:	1f 91       	pop	r17
     ddc:	0f 91       	pop	r16
     dde:	ff 90       	pop	r15
     de0:	ef 90       	pop	r14
     de2:	08 95       	ret

00000de4 <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
     de4:	cf 93       	push	r28
     de6:	df 93       	push	r29
     de8:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
     dea:	88 8d       	ldd	r24, Y+24	; 0x18
     dec:	88 23       	and	r24, r24
     dee:	c1 f0       	breq	.+48     	; 0xe20 <_ZN14HardwareSerial5flushEv+0x3c>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
     df0:	ea 89       	ldd	r30, Y+18	; 0x12
     df2:	fb 89       	ldd	r31, Y+19	; 0x13
     df4:	80 81       	ld	r24, Z
     df6:	85 fd       	sbrc	r24, 5
     df8:	05 c0       	rjmp	.+10     	; 0xe04 <_ZN14HardwareSerial5flushEv+0x20>
     dfa:	a8 89       	ldd	r26, Y+16	; 0x10
     dfc:	b9 89       	ldd	r27, Y+17	; 0x11
     dfe:	8c 91       	ld	r24, X
     e00:	86 fd       	sbrc	r24, 6
     e02:	0e c0       	rjmp	.+28     	; 0xe20 <_ZN14HardwareSerial5flushEv+0x3c>
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
     e04:	0f b6       	in	r0, 0x3f	; 63
     e06:	07 fc       	sbrc	r0, 7
     e08:	f5 cf       	rjmp	.-22     	; 0xdf4 <_ZN14HardwareSerial5flushEv+0x10>
     e0a:	80 81       	ld	r24, Z
     e0c:	85 ff       	sbrs	r24, 5
     e0e:	f2 cf       	rjmp	.-28     	; 0xdf4 <_ZN14HardwareSerial5flushEv+0x10>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
     e10:	a8 89       	ldd	r26, Y+16	; 0x10
     e12:	b9 89       	ldd	r27, Y+17	; 0x11
     e14:	8c 91       	ld	r24, X
     e16:	85 ff       	sbrs	r24, 5
     e18:	ed cf       	rjmp	.-38     	; 0xdf4 <_ZN14HardwareSerial5flushEv+0x10>
	  _tx_udr_empty_irq();
     e1a:	ce 01       	movw	r24, r28
     e1c:	7c df       	rcall	.-264    	; 0xd16 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
     e1e:	e8 cf       	rjmp	.-48     	; 0xdf0 <_ZN14HardwareSerial5flushEv+0xc>
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
     e20:	df 91       	pop	r29
     e22:	cf 91       	pop	r28
     e24:	08 95       	ret

00000e26 <_ZN14HardwareSerial5beginEmh>:
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
     e26:	cf 92       	push	r12
     e28:	df 92       	push	r13
     e2a:	ef 92       	push	r14
     e2c:	ff 92       	push	r15
     e2e:	1f 93       	push	r17
     e30:	cf 93       	push	r28
     e32:	df 93       	push	r29
     e34:	ec 01       	movw	r28, r24
     e36:	6a 01       	movw	r12, r20
     e38:	7b 01       	movw	r14, r22
     e3a:	12 2f       	mov	r17, r18
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
     e3c:	e8 89       	ldd	r30, Y+16	; 0x10
     e3e:	f9 89       	ldd	r31, Y+17	; 0x11
     e40:	82 e0       	ldi	r24, 0x02	; 2
     e42:	80 83       	st	Z, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
     e44:	41 15       	cp	r20, r1
     e46:	51 4e       	sbci	r21, 0xE1	; 225
     e48:	61 05       	cpc	r22, r1
     e4a:	71 05       	cpc	r23, r1
     e4c:	a9 f0       	breq	.+42     	; 0xe78 <_ZN14HardwareSerial5beginEmh+0x52>
// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
     e4e:	60 e0       	ldi	r22, 0x00	; 0
     e50:	79 e0       	ldi	r23, 0x09	; 9
     e52:	8d e3       	ldi	r24, 0x3D	; 61
     e54:	90 e0       	ldi	r25, 0x00	; 0
     e56:	a7 01       	movw	r20, r14
     e58:	96 01       	movw	r18, r12
     e5a:	cd d4       	rcall	.+2458   	; 0x17f6 <__udivmodsi4>
     e5c:	da 01       	movw	r26, r20
     e5e:	c9 01       	movw	r24, r18
     e60:	01 97       	sbiw	r24, 0x01	; 1
     e62:	a1 09       	sbc	r26, r1
     e64:	b1 09       	sbc	r27, r1
     e66:	b6 95       	lsr	r27
     e68:	a7 95       	ror	r26
     e6a:	97 95       	ror	r25
     e6c:	87 95       	ror	r24
     e6e:	9c 01       	movw	r18, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
     e70:	21 15       	cp	r18, r1
     e72:	80 e1       	ldi	r24, 0x10	; 16
     e74:	38 07       	cpc	r19, r24
     e76:	a0 f0       	brcs	.+40     	; 0xea0 <_ZN14HardwareSerial5beginEmh+0x7a>
  {
    *_ucsra = 0;
     e78:	e8 89       	ldd	r30, Y+16	; 0x10
     e7a:	f9 89       	ldd	r31, Y+17	; 0x11
     e7c:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
     e7e:	60 e8       	ldi	r22, 0x80	; 128
     e80:	74 e8       	ldi	r23, 0x84	; 132
     e82:	8e e1       	ldi	r24, 0x1E	; 30
     e84:	90 e0       	ldi	r25, 0x00	; 0
     e86:	a7 01       	movw	r20, r14
     e88:	96 01       	movw	r18, r12
     e8a:	b5 d4       	rcall	.+2410   	; 0x17f6 <__udivmodsi4>
     e8c:	da 01       	movw	r26, r20
     e8e:	c9 01       	movw	r24, r18
     e90:	01 97       	sbiw	r24, 0x01	; 1
     e92:	a1 09       	sbc	r26, r1
     e94:	b1 09       	sbc	r27, r1
     e96:	b6 95       	lsr	r27
     e98:	a7 95       	ror	r26
     e9a:	97 95       	ror	r25
     e9c:	87 95       	ror	r24
     e9e:	9c 01       	movw	r18, r24
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
     ea0:	ec 85       	ldd	r30, Y+12	; 0x0c
     ea2:	fd 85       	ldd	r31, Y+13	; 0x0d
     ea4:	30 83       	st	Z, r19
  *_ubrrl = baud_setting;
     ea6:	ee 85       	ldd	r30, Y+14	; 0x0e
     ea8:	ff 85       	ldd	r31, Y+15	; 0x0f
     eaa:	20 83       	st	Z, r18

  _written = false;
     eac:	18 8e       	std	Y+24, r1	; 0x18

  //set the data bits, parity, and stop bits
#if defined(__AVR_ATmega8__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
     eae:	ec 89       	ldd	r30, Y+20	; 0x14
     eb0:	fd 89       	ldd	r31, Y+21	; 0x15
     eb2:	10 83       	st	Z, r17
  
  sbi(*_ucsrb, RXEN0);
     eb4:	ea 89       	ldd	r30, Y+18	; 0x12
     eb6:	fb 89       	ldd	r31, Y+19	; 0x13
     eb8:	80 81       	ld	r24, Z
     eba:	80 61       	ori	r24, 0x10	; 16
     ebc:	80 83       	st	Z, r24
  sbi(*_ucsrb, TXEN0);
     ebe:	ea 89       	ldd	r30, Y+18	; 0x12
     ec0:	fb 89       	ldd	r31, Y+19	; 0x13
     ec2:	80 81       	ld	r24, Z
     ec4:	88 60       	ori	r24, 0x08	; 8
     ec6:	80 83       	st	Z, r24
  sbi(*_ucsrb, RXCIE0);
     ec8:	ea 89       	ldd	r30, Y+18	; 0x12
     eca:	fb 89       	ldd	r31, Y+19	; 0x13
     ecc:	80 81       	ld	r24, Z
     ece:	80 68       	ori	r24, 0x80	; 128
     ed0:	80 83       	st	Z, r24
  cbi(*_ucsrb, UDRIE0);
     ed2:	ea 89       	ldd	r30, Y+18	; 0x12
     ed4:	fb 89       	ldd	r31, Y+19	; 0x13
     ed6:	80 81       	ld	r24, Z
     ed8:	8f 7d       	andi	r24, 0xDF	; 223
     eda:	80 83       	st	Z, r24
}
     edc:	df 91       	pop	r29
     ede:	cf 91       	pop	r28
     ee0:	1f 91       	pop	r17
     ee2:	ff 90       	pop	r15
     ee4:	ef 90       	pop	r14
     ee6:	df 90       	pop	r13
     ee8:	cf 90       	pop	r12
     eea:	08 95       	ret

00000eec <__vector_25>:
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
     eec:	1f 92       	push	r1
     eee:	0f 92       	push	r0
     ef0:	0f b6       	in	r0, 0x3f	; 63
     ef2:	0f 92       	push	r0
     ef4:	11 24       	eor	r1, r1
     ef6:	0b b6       	in	r0, 0x3b	; 59
     ef8:	0f 92       	push	r0
     efa:	2f 93       	push	r18
     efc:	8f 93       	push	r24
     efe:	9f 93       	push	r25
     f00:	ef 93       	push	r30
     f02:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
     f04:	e0 91 4a 02 	lds	r30, 0x024A	; 0x80024a <Serial+0x10>
     f08:	f0 91 4b 02 	lds	r31, 0x024B	; 0x80024b <Serial+0x11>
     f0c:	80 81       	ld	r24, Z
     f0e:	e0 91 50 02 	lds	r30, 0x0250	; 0x800250 <Serial+0x16>
     f12:	f0 91 51 02 	lds	r31, 0x0251	; 0x800251 <Serial+0x17>
     f16:	82 fd       	sbrc	r24, 2
     f18:	12 c0       	rjmp	.+36     	; 0xf3e <__vector_25+0x52>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
     f1a:	90 81       	ld	r25, Z
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
     f1c:	80 91 53 02 	lds	r24, 0x0253	; 0x800253 <Serial+0x19>
     f20:	8f 5f       	subi	r24, 0xFF	; 255
     f22:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
     f24:	20 91 54 02 	lds	r18, 0x0254	; 0x800254 <Serial+0x1a>
     f28:	82 17       	cp	r24, r18
     f2a:	51 f0       	breq	.+20     	; 0xf40 <__vector_25+0x54>
      _rx_buffer[_rx_buffer_head] = c;
     f2c:	e0 91 53 02 	lds	r30, 0x0253	; 0x800253 <Serial+0x19>
     f30:	f0 e0       	ldi	r31, 0x00	; 0
     f32:	e6 5c       	subi	r30, 0xC6	; 198
     f34:	fd 4f       	sbci	r31, 0xFD	; 253
     f36:	95 8f       	std	Z+29, r25	; 0x1d
      _rx_buffer_head = i;
     f38:	80 93 53 02 	sts	0x0253, r24	; 0x800253 <Serial+0x19>
     f3c:	01 c0       	rjmp	.+2      	; 0xf40 <__vector_25+0x54>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
     f3e:	80 81       	ld	r24, Z
    Serial._rx_complete_irq();
  }
     f40:	ff 91       	pop	r31
     f42:	ef 91       	pop	r30
     f44:	9f 91       	pop	r25
     f46:	8f 91       	pop	r24
     f48:	2f 91       	pop	r18
     f4a:	0f 90       	pop	r0
     f4c:	0b be       	out	0x3b, r0	; 59
     f4e:	0f 90       	pop	r0
     f50:	0f be       	out	0x3f, r0	; 63
     f52:	0f 90       	pop	r0
     f54:	1f 90       	pop	r1
     f56:	18 95       	reti

00000f58 <__vector_26>:
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
     f58:	1f 92       	push	r1
     f5a:	0f 92       	push	r0
     f5c:	0f b6       	in	r0, 0x3f	; 63
     f5e:	0f 92       	push	r0
     f60:	11 24       	eor	r1, r1
     f62:	0b b6       	in	r0, 0x3b	; 59
     f64:	0f 92       	push	r0
     f66:	2f 93       	push	r18
     f68:	3f 93       	push	r19
     f6a:	4f 93       	push	r20
     f6c:	5f 93       	push	r21
     f6e:	6f 93       	push	r22
     f70:	7f 93       	push	r23
     f72:	8f 93       	push	r24
     f74:	9f 93       	push	r25
     f76:	af 93       	push	r26
     f78:	bf 93       	push	r27
     f7a:	ef 93       	push	r30
     f7c:	ff 93       	push	r31
  Serial._tx_udr_empty_irq();
     f7e:	8a e3       	ldi	r24, 0x3A	; 58
     f80:	92 e0       	ldi	r25, 0x02	; 2
     f82:	c9 de       	rcall	.-622    	; 0xd16 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
     f84:	ff 91       	pop	r31
     f86:	ef 91       	pop	r30
     f88:	bf 91       	pop	r27
     f8a:	af 91       	pop	r26
     f8c:	9f 91       	pop	r25
     f8e:	8f 91       	pop	r24
     f90:	7f 91       	pop	r23
     f92:	6f 91       	pop	r22
     f94:	5f 91       	pop	r21
     f96:	4f 91       	pop	r20
     f98:	3f 91       	pop	r19
     f9a:	2f 91       	pop	r18
     f9c:	0f 90       	pop	r0
     f9e:	0b be       	out	0x3b, r0	; 59
     fa0:	0f 90       	pop	r0
     fa2:	0f be       	out	0x3f, r0	; 63
     fa4:	0f 90       	pop	r0
     fa6:	1f 90       	pop	r1
     fa8:	18 95       	reti

00000faa <_Z17Serial0_availablev>:
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
     faa:	8a e3       	ldi	r24, 0x3A	; 58
     fac:	92 e0       	ldi	r25, 0x02	; 2
     fae:	3a de       	rcall	.-908    	; 0xc24 <_ZN14HardwareSerial9availableEv>
     fb0:	21 e0       	ldi	r18, 0x01	; 1
     fb2:	89 2b       	or	r24, r25
     fb4:	09 f4       	brne	.+2      	; 0xfb8 <_Z17Serial0_availablev+0xe>
     fb6:	20 e0       	ldi	r18, 0x00	; 0
}
     fb8:	82 2f       	mov	r24, r18
     fba:	08 95       	ret

00000fbc <_GLOBAL__sub_I___vector_25>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
     fbc:	ea e3       	ldi	r30, 0x3A	; 58
     fbe:	f2 e0       	ldi	r31, 0x02	; 2
     fc0:	13 82       	std	Z+3, r1	; 0x03
     fc2:	12 82       	std	Z+2, r1	; 0x02
  public:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;

    Stream() {_timeout=1000;}
     fc4:	88 ee       	ldi	r24, 0xE8	; 232
     fc6:	93 e0       	ldi	r25, 0x03	; 3
     fc8:	a0 e0       	ldi	r26, 0x00	; 0
     fca:	b0 e0       	ldi	r27, 0x00	; 0
     fcc:	84 83       	std	Z+4, r24	; 0x04
     fce:	95 83       	std	Z+5, r25	; 0x05
     fd0:	a6 83       	std	Z+6, r26	; 0x06
     fd2:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
     fd4:	8d e0       	ldi	r24, 0x0D	; 13
     fd6:	92 e0       	ldi	r25, 0x02	; 2
     fd8:	91 83       	std	Z+1, r25	; 0x01
     fda:	80 83       	st	Z, r24
     fdc:	85 ec       	ldi	r24, 0xC5	; 197
     fde:	90 e0       	ldi	r25, 0x00	; 0
     fe0:	95 87       	std	Z+13, r25	; 0x0d
     fe2:	84 87       	std	Z+12, r24	; 0x0c
     fe4:	84 ec       	ldi	r24, 0xC4	; 196
     fe6:	90 e0       	ldi	r25, 0x00	; 0
     fe8:	97 87       	std	Z+15, r25	; 0x0f
     fea:	86 87       	std	Z+14, r24	; 0x0e
     fec:	80 ec       	ldi	r24, 0xC0	; 192
     fee:	90 e0       	ldi	r25, 0x00	; 0
     ff0:	91 8b       	std	Z+17, r25	; 0x11
     ff2:	80 8b       	std	Z+16, r24	; 0x10
     ff4:	81 ec       	ldi	r24, 0xC1	; 193
     ff6:	90 e0       	ldi	r25, 0x00	; 0
     ff8:	93 8b       	std	Z+19, r25	; 0x13
     ffa:	82 8b       	std	Z+18, r24	; 0x12
     ffc:	82 ec       	ldi	r24, 0xC2	; 194
     ffe:	90 e0       	ldi	r25, 0x00	; 0
    1000:	95 8b       	std	Z+21, r25	; 0x15
    1002:	84 8b       	std	Z+20, r24	; 0x14
    1004:	86 ec       	ldi	r24, 0xC6	; 198
    1006:	90 e0       	ldi	r25, 0x00	; 0
    1008:	97 8b       	std	Z+23, r25	; 0x17
    100a:	86 8b       	std	Z+22, r24	; 0x16
    100c:	11 8e       	std	Z+25, r1	; 0x19
    100e:	12 8e       	std	Z+26, r1	; 0x1a
    1010:	13 8e       	std	Z+27, r1	; 0x1b
    1012:	14 8e       	std	Z+28, r1	; 0x1c
    1014:	08 95       	ret

00001016 <initVariant>:
    1016:	08 95       	ret

00001018 <main>:
    1018:	0c d1       	rcall	.+536    	; 0x1232 <init>
    101a:	fd df       	rcall	.-6      	; 0x1016 <initVariant>
    101c:	56 d9       	rcall	.-3412   	; 0x2ca <setup>
    101e:	cf e4       	ldi	r28, 0x4F	; 79
    1020:	d6 e0       	ldi	r29, 0x06	; 6
    1022:	6d d9       	rcall	.-3366   	; 0x2fe <loop>
    1024:	20 97       	sbiw	r28, 0x00	; 0
    1026:	e9 f3       	breq	.-6      	; 0x1022 <main+0xa>
    1028:	3a de       	rcall	.-908    	; 0xc9e <_Z14serialEventRunv>
    102a:	fb cf       	rjmp	.-10     	; 0x1022 <main+0xa>

0000102c <_ZN5Print5writeEPKhj>:
size_t Print::println(const String &s)
{
  size_t n = print(s);
  n += println();
  return n;
}
    102c:	cf 92       	push	r12
    102e:	df 92       	push	r13
    1030:	ef 92       	push	r14
    1032:	ff 92       	push	r15
    1034:	0f 93       	push	r16
    1036:	1f 93       	push	r17
    1038:	cf 93       	push	r28
    103a:	df 93       	push	r29
    103c:	6c 01       	movw	r12, r24
    103e:	7a 01       	movw	r14, r20
    1040:	8b 01       	movw	r16, r22
    1042:	c0 e0       	ldi	r28, 0x00	; 0
    1044:	d0 e0       	ldi	r29, 0x00	; 0
    1046:	ce 15       	cp	r28, r14
    1048:	df 05       	cpc	r29, r15
    104a:	81 f0       	breq	.+32     	; 0x106c <_ZN5Print5writeEPKhj+0x40>
    104c:	d8 01       	movw	r26, r16
    104e:	6d 91       	ld	r22, X+
    1050:	8d 01       	movw	r16, r26
    1052:	d6 01       	movw	r26, r12
    1054:	ed 91       	ld	r30, X+
    1056:	fc 91       	ld	r31, X
    1058:	01 90       	ld	r0, Z+
    105a:	f0 81       	ld	r31, Z
    105c:	e0 2d       	mov	r30, r0
    105e:	c6 01       	movw	r24, r12
    1060:	19 95       	eicall
    1062:	89 2b       	or	r24, r25
    1064:	11 f0       	breq	.+4      	; 0x106a <_ZN5Print5writeEPKhj+0x3e>
    1066:	21 96       	adiw	r28, 0x01	; 1
    1068:	ee cf       	rjmp	.-36     	; 0x1046 <_ZN5Print5writeEPKhj+0x1a>
    106a:	7e 01       	movw	r14, r28
    106c:	c7 01       	movw	r24, r14
    106e:	df 91       	pop	r29
    1070:	cf 91       	pop	r28
    1072:	1f 91       	pop	r17
    1074:	0f 91       	pop	r16
    1076:	ff 90       	pop	r15
    1078:	ef 90       	pop	r14
    107a:	df 90       	pop	r13
    107c:	cf 90       	pop	r12
    107e:	08 95       	ret

00001080 <_ZN5Print5writeEPKc>:
    1080:	61 15       	cp	r22, r1
    1082:	71 05       	cpc	r23, r1
    1084:	79 f0       	breq	.+30     	; 0x10a4 <_ZN5Print5writeEPKc+0x24>
    1086:	fb 01       	movw	r30, r22
    1088:	01 90       	ld	r0, Z+
    108a:	00 20       	and	r0, r0
    108c:	e9 f7       	brne	.-6      	; 0x1088 <_ZN5Print5writeEPKc+0x8>
    108e:	31 97       	sbiw	r30, 0x01	; 1
    1090:	af 01       	movw	r20, r30
    1092:	46 1b       	sub	r20, r22
    1094:	57 0b       	sbc	r21, r23
    1096:	dc 01       	movw	r26, r24
    1098:	ed 91       	ld	r30, X+
    109a:	fc 91       	ld	r31, X
    109c:	02 80       	ldd	r0, Z+2	; 0x02
    109e:	f3 81       	ldd	r31, Z+3	; 0x03
    10a0:	e0 2d       	mov	r30, r0
    10a2:	19 94       	eijmp
    10a4:	80 e0       	ldi	r24, 0x00	; 0
    10a6:	90 e0       	ldi	r25, 0x00	; 0
    10a8:	08 95       	ret

000010aa <_ZN5Print7printlnEv>:
    10aa:	6b e1       	ldi	r22, 0x1B	; 27
    10ac:	72 e0       	ldi	r23, 0x02	; 2
    10ae:	e8 cf       	rjmp	.-48     	; 0x1080 <_ZN5Print5writeEPKc>

000010b0 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
    10b0:	0f 93       	push	r16
    10b2:	1f 93       	push	r17
    10b4:	cf 93       	push	r28
    10b6:	df 93       	push	r29
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
    10b8:	ec 01       	movw	r28, r24
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
    10ba:	e2 df       	rcall	.-60     	; 0x1080 <_ZN5Print5writeEPKc>
    10bc:	8c 01       	movw	r16, r24
  return n;
}
    10be:	ce 01       	movw	r24, r28
    10c0:	f4 df       	rcall	.-24     	; 0x10aa <_ZN5Print7printlnEv>
    10c2:	80 0f       	add	r24, r16
    10c4:	91 1f       	adc	r25, r17
    10c6:	df 91       	pop	r29
    10c8:	cf 91       	pop	r28
    10ca:	1f 91       	pop	r17
    10cc:	0f 91       	pop	r16
    10ce:	08 95       	ret

000010d0 <_ZN6Stream9timedReadEv>:
  {
    ret += (char)c;
    c = timedRead();
  }
  return ret;
}
    10d0:	0f 93       	push	r16
    10d2:	1f 93       	push	r17
    10d4:	cf 93       	push	r28
    10d6:	df 93       	push	r29
    10d8:	ec 01       	movw	r28, r24
    10da:	94 d0       	rcall	.+296    	; 0x1204 <millis>
    10dc:	68 87       	std	Y+8, r22	; 0x08
    10de:	79 87       	std	Y+9, r23	; 0x09
    10e0:	8a 87       	std	Y+10, r24	; 0x0a
    10e2:	9b 87       	std	Y+11, r25	; 0x0b
    10e4:	e8 81       	ld	r30, Y
    10e6:	f9 81       	ldd	r31, Y+1	; 0x01
    10e8:	02 84       	ldd	r0, Z+10	; 0x0a
    10ea:	f3 85       	ldd	r31, Z+11	; 0x0b
    10ec:	e0 2d       	mov	r30, r0
    10ee:	ce 01       	movw	r24, r28
    10f0:	19 95       	eicall
    10f2:	97 ff       	sbrs	r25, 7
    10f4:	16 c0       	rjmp	.+44     	; 0x1122 <_ZN6Stream9timedReadEv+0x52>
    10f6:	86 d0       	rcall	.+268    	; 0x1204 <millis>
    10f8:	08 85       	ldd	r16, Y+8	; 0x08
    10fa:	19 85       	ldd	r17, Y+9	; 0x09
    10fc:	2a 85       	ldd	r18, Y+10	; 0x0a
    10fe:	3b 85       	ldd	r19, Y+11	; 0x0b
    1100:	dc 01       	movw	r26, r24
    1102:	cb 01       	movw	r24, r22
    1104:	80 1b       	sub	r24, r16
    1106:	91 0b       	sbc	r25, r17
    1108:	a2 0b       	sbc	r26, r18
    110a:	b3 0b       	sbc	r27, r19
    110c:	0c 81       	ldd	r16, Y+4	; 0x04
    110e:	1d 81       	ldd	r17, Y+5	; 0x05
    1110:	2e 81       	ldd	r18, Y+6	; 0x06
    1112:	3f 81       	ldd	r19, Y+7	; 0x07
    1114:	80 17       	cp	r24, r16
    1116:	91 07       	cpc	r25, r17
    1118:	a2 07       	cpc	r26, r18
    111a:	b3 07       	cpc	r27, r19
    111c:	18 f3       	brcs	.-58     	; 0x10e4 <_ZN6Stream9timedReadEv+0x14>
    111e:	8f ef       	ldi	r24, 0xFF	; 255
    1120:	9f ef       	ldi	r25, 0xFF	; 255
    1122:	df 91       	pop	r29
    1124:	cf 91       	pop	r28
    1126:	1f 91       	pop	r17
    1128:	0f 91       	pop	r16
    112a:	08 95       	ret

0000112c <_ZN6Stream15readStringUntilEc>:

String Stream::readStringUntil(char terminator)
{
    112c:	ef 92       	push	r14
    112e:	ff 92       	push	r15
    1130:	0f 93       	push	r16
    1132:	1f 93       	push	r17
    1134:	cf 93       	push	r28
    1136:	df 93       	push	r29
    1138:	ec 01       	movw	r28, r24
    113a:	7b 01       	movw	r14, r22
    113c:	04 2f       	mov	r16, r20
  String ret;
    113e:	6d e1       	ldi	r22, 0x1D	; 29
    1140:	72 e0       	ldi	r23, 0x02	; 2
  int c = timedRead();
    1142:	66 d2       	rcall	.+1228   	; 0x1610 <_ZN6StringC1EPKc>
    1144:	c7 01       	movw	r24, r14
  while (c >= 0 && c != terminator)
    1146:	c4 df       	rcall	.-120    	; 0x10d0 <_ZN6Stream9timedReadEv>
    1148:	10 e0       	ldi	r17, 0x00	; 0
    114a:	97 fd       	sbrc	r25, 7
    114c:	09 c0       	rjmp	.+18     	; 0x1160 <_ZN6Stream15readStringUntilEc+0x34>
    114e:	80 17       	cp	r24, r16

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
	String & operator += (char c)			{concat(c); return (*this);}
    1150:	91 07       	cpc	r25, r17
    1152:	31 f0       	breq	.+12     	; 0x1160 <_ZN6Stream15readStringUntilEc+0x34>
  {
    ret += (char)c;
    c = timedRead();
    1154:	68 2f       	mov	r22, r24
    1156:	ce 01       	movw	r24, r28
    1158:	9b d2       	rcall	.+1334   	; 0x1690 <_ZN6String6concatEc>

String Stream::readStringUntil(char terminator)
{
  String ret;
  int c = timedRead();
  while (c >= 0 && c != terminator)
    115a:	c7 01       	movw	r24, r14
  {
    ret += (char)c;
    c = timedRead();
  }
  return ret;
}
    115c:	b9 df       	rcall	.-142    	; 0x10d0 <_ZN6Stream9timedReadEv>
    115e:	f5 cf       	rjmp	.-22     	; 0x114a <_ZN6Stream15readStringUntilEc+0x1e>
    1160:	ce 01       	movw	r24, r28
    1162:	df 91       	pop	r29
    1164:	cf 91       	pop	r28
    1166:	1f 91       	pop	r17
    1168:	0f 91       	pop	r16
    116a:	ff 90       	pop	r15
    116c:	ef 90       	pop	r14
    116e:	08 95       	ret

00001170 <__vector_23>:
		while ( ms > 0 && (micros() - start) >= 1000) {
			ms--;
			start += 1000;
		}
	}
}
    1170:	1f 92       	push	r1
    1172:	0f 92       	push	r0
    1174:	0f b6       	in	r0, 0x3f	; 63
    1176:	0f 92       	push	r0
    1178:	11 24       	eor	r1, r1
    117a:	2f 93       	push	r18
    117c:	3f 93       	push	r19
    117e:	8f 93       	push	r24
    1180:	9f 93       	push	r25
    1182:	af 93       	push	r26
    1184:	bf 93       	push	r27
    1186:	80 91 d8 02 	lds	r24, 0x02D8	; 0x8002d8 <timer0_millis>
    118a:	90 91 d9 02 	lds	r25, 0x02D9	; 0x8002d9 <timer0_millis+0x1>
    118e:	a0 91 da 02 	lds	r26, 0x02DA	; 0x8002da <timer0_millis+0x2>
    1192:	b0 91 db 02 	lds	r27, 0x02DB	; 0x8002db <timer0_millis+0x3>
    1196:	30 91 d7 02 	lds	r19, 0x02D7	; 0x8002d7 <timer0_fract>
    119a:	23 e0       	ldi	r18, 0x03	; 3
    119c:	23 0f       	add	r18, r19
    119e:	2d 37       	cpi	r18, 0x7D	; 125
    11a0:	20 f4       	brcc	.+8      	; 0x11aa <__vector_23+0x3a>
    11a2:	01 96       	adiw	r24, 0x01	; 1
    11a4:	a1 1d       	adc	r26, r1
    11a6:	b1 1d       	adc	r27, r1
    11a8:	05 c0       	rjmp	.+10     	; 0x11b4 <__vector_23+0x44>
    11aa:	26 e8       	ldi	r18, 0x86	; 134
    11ac:	23 0f       	add	r18, r19
    11ae:	02 96       	adiw	r24, 0x02	; 2
    11b0:	a1 1d       	adc	r26, r1
    11b2:	b1 1d       	adc	r27, r1
    11b4:	20 93 d7 02 	sts	0x02D7, r18	; 0x8002d7 <timer0_fract>
    11b8:	80 93 d8 02 	sts	0x02D8, r24	; 0x8002d8 <timer0_millis>
    11bc:	90 93 d9 02 	sts	0x02D9, r25	; 0x8002d9 <timer0_millis+0x1>
    11c0:	a0 93 da 02 	sts	0x02DA, r26	; 0x8002da <timer0_millis+0x2>
    11c4:	b0 93 db 02 	sts	0x02DB, r27	; 0x8002db <timer0_millis+0x3>
    11c8:	80 91 dc 02 	lds	r24, 0x02DC	; 0x8002dc <timer0_overflow_count>
    11cc:	90 91 dd 02 	lds	r25, 0x02DD	; 0x8002dd <timer0_overflow_count+0x1>
    11d0:	a0 91 de 02 	lds	r26, 0x02DE	; 0x8002de <timer0_overflow_count+0x2>
    11d4:	b0 91 df 02 	lds	r27, 0x02DF	; 0x8002df <timer0_overflow_count+0x3>
    11d8:	01 96       	adiw	r24, 0x01	; 1
    11da:	a1 1d       	adc	r26, r1
    11dc:	b1 1d       	adc	r27, r1
    11de:	80 93 dc 02 	sts	0x02DC, r24	; 0x8002dc <timer0_overflow_count>
    11e2:	90 93 dd 02 	sts	0x02DD, r25	; 0x8002dd <timer0_overflow_count+0x1>
    11e6:	a0 93 de 02 	sts	0x02DE, r26	; 0x8002de <timer0_overflow_count+0x2>
    11ea:	b0 93 df 02 	sts	0x02DF, r27	; 0x8002df <timer0_overflow_count+0x3>
    11ee:	bf 91       	pop	r27
    11f0:	af 91       	pop	r26
    11f2:	9f 91       	pop	r25
    11f4:	8f 91       	pop	r24
    11f6:	3f 91       	pop	r19
    11f8:	2f 91       	pop	r18
    11fa:	0f 90       	pop	r0
    11fc:	0f be       	out	0x3f, r0	; 63
    11fe:	0f 90       	pop	r0
    1200:	1f 90       	pop	r1
    1202:	18 95       	reti

00001204 <millis>:
    1204:	2f b7       	in	r18, 0x3f	; 63
    1206:	f8 94       	cli
    1208:	60 91 d8 02 	lds	r22, 0x02D8	; 0x8002d8 <timer0_millis>
    120c:	70 91 d9 02 	lds	r23, 0x02D9	; 0x8002d9 <timer0_millis+0x1>
    1210:	80 91 da 02 	lds	r24, 0x02DA	; 0x8002da <timer0_millis+0x2>
    1214:	90 91 db 02 	lds	r25, 0x02DB	; 0x8002db <timer0_millis+0x3>
    1218:	2f bf       	out	0x3f, r18	; 63
    121a:	08 95       	ret

0000121c <delayMicroseconds>:
#elif F_CPU >= 16000000L
	// for the 16 MHz clock on most Arduino boards

	// for a one-microsecond delay, simply return.  the overhead
	// of the function call takes 14 (16) cycles, which is 1us
	if (us <= 1) return; //  = 3 cycles, (4 when true)
    121c:	82 30       	cpi	r24, 0x02	; 2
    121e:	91 05       	cpc	r25, r1
    1220:	38 f0       	brcs	.+14     	; 0x1230 <delayMicroseconds+0x14>

	// the following loop takes 1/4 of a microsecond (4 cycles)
	// per iteration, so execute it four times for each microsecond of
	// delay requested.
	us <<= 2; // x4 us, = 4 cycles
    1222:	88 0f       	add	r24, r24
    1224:	99 1f       	adc	r25, r25
    1226:	88 0f       	add	r24, r24
    1228:	99 1f       	adc	r25, r25

	// account for the time taken in the preceeding commands.
	// we just burned 19 (21) cycles above, remove 5, (5*4=20)
	// us is at least 8 so we can substract 5
	us -= 5; // = 2 cycles,
    122a:	05 97       	sbiw	r24, 0x05	; 5
	

#endif

	// busy wait
	__asm__ __volatile__ (
    122c:	01 97       	sbiw	r24, 0x01	; 1
    122e:	f1 f7       	brne	.-4      	; 0x122c <delayMicroseconds+0x10>
    1230:	08 95       	ret

00001232 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
    1232:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
    1234:	84 b5       	in	r24, 0x24	; 36
    1236:	82 60       	ori	r24, 0x02	; 2
    1238:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
    123a:	84 b5       	in	r24, 0x24	; 36
    123c:	81 60       	ori	r24, 0x01	; 1
    123e:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
    1240:	85 b5       	in	r24, 0x25	; 37
    1242:	82 60       	ori	r24, 0x02	; 2
    1244:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
    1246:	85 b5       	in	r24, 0x25	; 37
    1248:	81 60       	ori	r24, 0x01	; 1
    124a:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
    124c:	ee e6       	ldi	r30, 0x6E	; 110
    124e:	f0 e0       	ldi	r31, 0x00	; 0
    1250:	80 81       	ld	r24, Z
    1252:	81 60       	ori	r24, 0x01	; 1
    1254:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
    1256:	e1 e8       	ldi	r30, 0x81	; 129
    1258:	f0 e0       	ldi	r31, 0x00	; 0
    125a:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
    125c:	80 81       	ld	r24, Z
    125e:	82 60       	ori	r24, 0x02	; 2
    1260:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
    1262:	80 81       	ld	r24, Z
    1264:	81 60       	ori	r24, 0x01	; 1
    1266:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
    1268:	e0 e8       	ldi	r30, 0x80	; 128
    126a:	f0 e0       	ldi	r31, 0x00	; 0
    126c:	80 81       	ld	r24, Z
    126e:	81 60       	ori	r24, 0x01	; 1
    1270:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
    1272:	e1 eb       	ldi	r30, 0xB1	; 177
    1274:	f0 e0       	ldi	r31, 0x00	; 0
    1276:	80 81       	ld	r24, Z
    1278:	84 60       	ori	r24, 0x04	; 4
    127a:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
    127c:	e0 eb       	ldi	r30, 0xB0	; 176
    127e:	f0 e0       	ldi	r31, 0x00	; 0
    1280:	80 81       	ld	r24, Z
    1282:	81 60       	ori	r24, 0x01	; 1
    1284:	80 83       	st	Z, r24
//#else
	// Timer 2 not finished (may not be present on this CPU)
#endif

#if defined(TCCR3B) && defined(CS31) && defined(WGM30)
	sbi(TCCR3B, CS31);		// set timer 3 prescale factor to 64
    1286:	e1 e9       	ldi	r30, 0x91	; 145
    1288:	f0 e0       	ldi	r31, 0x00	; 0
    128a:	80 81       	ld	r24, Z
    128c:	82 60       	ori	r24, 0x02	; 2
    128e:	80 83       	st	Z, r24
	sbi(TCCR3B, CS30);
    1290:	80 81       	ld	r24, Z
    1292:	81 60       	ori	r24, 0x01	; 1
    1294:	80 83       	st	Z, r24
	sbi(TCCR3A, WGM30);		// put timer 3 in 8-bit phase correct pwm mode
    1296:	e0 e9       	ldi	r30, 0x90	; 144
    1298:	f0 e0       	ldi	r31, 0x00	; 0
    129a:	80 81       	ld	r24, Z
    129c:	81 60       	ori	r24, 0x01	; 1
    129e:	80 83       	st	Z, r24
	sbi(TCCR4D, WGM40);		// put timer 4 in phase- and frequency-correct PWM mode	
	sbi(TCCR4A, PWM4A);		// enable PWM mode for comparator OCR4A
	sbi(TCCR4C, PWM4D);		// enable PWM mode for comparator OCR4D
#else /* beginning of timer4 block for ATMEGA1280 and ATMEGA2560 */
#if defined(TCCR4B) && defined(CS41) && defined(WGM40)
	sbi(TCCR4B, CS41);		// set timer 4 prescale factor to 64
    12a0:	e1 ea       	ldi	r30, 0xA1	; 161
    12a2:	f0 e0       	ldi	r31, 0x00	; 0
    12a4:	80 81       	ld	r24, Z
    12a6:	82 60       	ori	r24, 0x02	; 2
    12a8:	80 83       	st	Z, r24
	sbi(TCCR4B, CS40);
    12aa:	80 81       	ld	r24, Z
    12ac:	81 60       	ori	r24, 0x01	; 1
    12ae:	80 83       	st	Z, r24
	sbi(TCCR4A, WGM40);		// put timer 4 in 8-bit phase correct pwm mode
    12b0:	e0 ea       	ldi	r30, 0xA0	; 160
    12b2:	f0 e0       	ldi	r31, 0x00	; 0
    12b4:	80 81       	ld	r24, Z
    12b6:	81 60       	ori	r24, 0x01	; 1
    12b8:	80 83       	st	Z, r24
#endif
#endif /* end timer4 block for ATMEGA1280/2560 and similar */	

#if defined(TCCR5B) && defined(CS51) && defined(WGM50)
	sbi(TCCR5B, CS51);		// set timer 5 prescale factor to 64
    12ba:	e1 e2       	ldi	r30, 0x21	; 33
    12bc:	f1 e0       	ldi	r31, 0x01	; 1
    12be:	80 81       	ld	r24, Z
    12c0:	82 60       	ori	r24, 0x02	; 2
    12c2:	80 83       	st	Z, r24
	sbi(TCCR5B, CS50);
    12c4:	80 81       	ld	r24, Z
    12c6:	81 60       	ori	r24, 0x01	; 1
    12c8:	80 83       	st	Z, r24
	sbi(TCCR5A, WGM50);		// put timer 5 in 8-bit phase correct pwm mode
    12ca:	e0 e2       	ldi	r30, 0x20	; 32
    12cc:	f1 e0       	ldi	r31, 0x01	; 1
    12ce:	80 81       	ld	r24, Z
    12d0:	81 60       	ori	r24, 0x01	; 1
    12d2:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
    12d4:	ea e7       	ldi	r30, 0x7A	; 122
    12d6:	f0 e0       	ldi	r31, 0x00	; 0
    12d8:	80 81       	ld	r24, Z
    12da:	84 60       	ori	r24, 0x04	; 4
    12dc:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
    12de:	80 81       	ld	r24, Z
    12e0:	82 60       	ori	r24, 0x02	; 2
    12e2:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
    12e4:	80 81       	ld	r24, Z
    12e6:	81 60       	ori	r24, 0x01	; 1
    12e8:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    12ea:	80 81       	ld	r24, Z
    12ec:	80 68       	ori	r24, 0x80	; 128
    12ee:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
    12f0:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7000c1>
    12f4:	08 95       	ret

000012f6 <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    12f6:	90 e0       	ldi	r25, 0x00	; 0
    12f8:	fc 01       	movw	r30, r24
    12fa:	31 97       	sbiw	r30, 0x01	; 1
    12fc:	e2 31       	cpi	r30, 0x12	; 18
    12fe:	f1 05       	cpc	r31, r1
    1300:	08 f0       	brcs	.+2      	; 0x1304 <turnOffPWM+0xe>
    1302:	4d c0       	rjmp	.+154    	; 0x139e <turnOffPWM+0xa8>
    1304:	88 27       	eor	r24, r24
    1306:	ee 58       	subi	r30, 0x8E	; 142
    1308:	ff 4f       	sbci	r31, 0xFF	; 255
    130a:	8f 4f       	sbci	r24, 0xFF	; 255
    130c:	b2 c2       	rjmp	.+1380   	; 0x1872 <__tablejump2__>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    130e:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
    1312:	8f 77       	andi	r24, 0x7F	; 127
    1314:	03 c0       	rjmp	.+6      	; 0x131c <turnOffPWM+0x26>
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    1316:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
    131a:	8f 7d       	andi	r24, 0xDF	; 223
    131c:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
    1320:	08 95       	ret
		#endif
		#if defined(TCCR1A) && defined(COM1C1)
		case TIMER1C:   cbi(TCCR1A, COM1C1);    break;
    1322:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
    1326:	87 7f       	andi	r24, 0xF7	; 247
    1328:	f9 cf       	rjmp	.-14     	; 0x131c <turnOffPWM+0x26>
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    132a:	84 b5       	in	r24, 0x24	; 36
    132c:	8f 77       	andi	r24, 0x7F	; 127
    132e:	02 c0       	rjmp	.+4      	; 0x1334 <turnOffPWM+0x3e>
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    1330:	84 b5       	in	r24, 0x24	; 36
    1332:	8f 7d       	andi	r24, 0xDF	; 223
    1334:	84 bd       	out	0x24, r24	; 36
    1336:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
    1338:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7000b0>
    133c:	8f 77       	andi	r24, 0x7F	; 127
    133e:	03 c0       	rjmp	.+6      	; 0x1346 <turnOffPWM+0x50>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
    1340:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7000b0>
    1344:	8f 7d       	andi	r24, 0xDF	; 223
    1346:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7000b0>
    134a:	08 95       	ret
		#endif
		
		#if defined(TCCR3A) && defined(COM3A1)
		case  TIMER3A:  cbi(TCCR3A, COM3A1);    break;
    134c:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
    1350:	8f 77       	andi	r24, 0x7F	; 127
    1352:	07 c0       	rjmp	.+14     	; 0x1362 <turnOffPWM+0x6c>
		#endif
		#if defined(TCCR3A) && defined(COM3B1)
		case  TIMER3B:  cbi(TCCR3A, COM3B1);    break;
    1354:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
    1358:	8f 7d       	andi	r24, 0xDF	; 223
    135a:	03 c0       	rjmp	.+6      	; 0x1362 <turnOffPWM+0x6c>
		#endif
		#if defined(TCCR3A) && defined(COM3C1)
		case  TIMER3C:  cbi(TCCR3A, COM3C1);    break;
    135c:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
    1360:	87 7f       	andi	r24, 0xF7	; 247
    1362:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
    1366:	08 95       	ret
		#endif

		#if defined(TCCR4A) && defined(COM4A1)
		case  TIMER4A:  cbi(TCCR4A, COM4A1);    break;
    1368:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
    136c:	8f 77       	andi	r24, 0x7F	; 127
    136e:	07 c0       	rjmp	.+14     	; 0x137e <turnOffPWM+0x88>
		#endif					
		#if defined(TCCR4A) && defined(COM4B1)
		case  TIMER4B:  cbi(TCCR4A, COM4B1);    break;
    1370:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
    1374:	8f 7d       	andi	r24, 0xDF	; 223
    1376:	03 c0       	rjmp	.+6      	; 0x137e <turnOffPWM+0x88>
		#endif
		#if defined(TCCR4A) && defined(COM4C1)
		case  TIMER4C:  cbi(TCCR4A, COM4C1);    break;
    1378:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
    137c:	87 7f       	andi	r24, 0xF7	; 247
    137e:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
    1382:	08 95       	ret
		#if defined(TCCR4C) && defined(COM4D1)
		case TIMER4D:	cbi(TCCR4C, COM4D1);	break;
		#endif			
			
		#if defined(TCCR5A)
		case  TIMER5A:  cbi(TCCR5A, COM5A1);    break;
    1384:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
    1388:	8f 77       	andi	r24, 0x7F	; 127
    138a:	07 c0       	rjmp	.+14     	; 0x139a <turnOffPWM+0xa4>
		case  TIMER5B:  cbi(TCCR5A, COM5B1);    break;
    138c:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
    1390:	8f 7d       	andi	r24, 0xDF	; 223
    1392:	03 c0       	rjmp	.+6      	; 0x139a <turnOffPWM+0xa4>
		case  TIMER5C:  cbi(TCCR5A, COM5C1);    break;
    1394:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
    1398:	87 7f       	andi	r24, 0xF7	; 247
    139a:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
    139e:	08 95       	ret

000013a0 <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    13a0:	cf 93       	push	r28
    13a2:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
    13a4:	90 e0       	ldi	r25, 0x00	; 0
    13a6:	fc 01       	movw	r30, r24
    13a8:	e7 57       	subi	r30, 0x77	; 119
    13aa:	fe 4f       	sbci	r31, 0xFE	; 254
    13ac:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
    13ae:	fc 01       	movw	r30, r24
    13b0:	e1 53       	subi	r30, 0x31	; 49
    13b2:	fe 4f       	sbci	r31, 0xFE	; 254
    13b4:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
    13b6:	88 23       	and	r24, r24
    13b8:	61 f1       	breq	.+88     	; 0x1412 <pinMode+0x72>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
    13ba:	90 e0       	ldi	r25, 0x00	; 0
    13bc:	88 0f       	add	r24, r24
    13be:	99 1f       	adc	r25, r25
    13c0:	fc 01       	movw	r30, r24
    13c2:	e7 5b       	subi	r30, 0xB7	; 183
    13c4:	fd 4f       	sbci	r31, 0xFD	; 253
    13c6:	c5 91       	lpm	r28, Z+
    13c8:	d4 91       	lpm	r29, Z
	out = portOutputRegister(port);
    13ca:	fc 01       	movw	r30, r24
    13cc:	e1 5d       	subi	r30, 0xD1	; 209
    13ce:	fd 4f       	sbci	r31, 0xFD	; 253
    13d0:	a5 91       	lpm	r26, Z+
    13d2:	b4 91       	lpm	r27, Z

	if (mode == INPUT) { 
    13d4:	61 11       	cpse	r22, r1
    13d6:	09 c0       	rjmp	.+18     	; 0x13ea <pinMode+0x4a>
		uint8_t oldSREG = SREG;
    13d8:	9f b7       	in	r25, 0x3f	; 63
                cli();
    13da:	f8 94       	cli
		*reg &= ~bit;
    13dc:	88 81       	ld	r24, Y
    13de:	20 95       	com	r18
    13e0:	82 23       	and	r24, r18
    13e2:	88 83       	st	Y, r24
		*out &= ~bit;
    13e4:	ec 91       	ld	r30, X
    13e6:	2e 23       	and	r18, r30
    13e8:	0b c0       	rjmp	.+22     	; 0x1400 <pinMode+0x60>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
    13ea:	62 30       	cpi	r22, 0x02	; 2
    13ec:	61 f4       	brne	.+24     	; 0x1406 <pinMode+0x66>
		uint8_t oldSREG = SREG;
    13ee:	9f b7       	in	r25, 0x3f	; 63
                cli();
    13f0:	f8 94       	cli
		*reg &= ~bit;
    13f2:	88 81       	ld	r24, Y
    13f4:	32 2f       	mov	r19, r18
    13f6:	30 95       	com	r19
    13f8:	83 23       	and	r24, r19
    13fa:	88 83       	st	Y, r24
		*out |= bit;
    13fc:	ec 91       	ld	r30, X
    13fe:	2e 2b       	or	r18, r30
    1400:	2c 93       	st	X, r18
		SREG = oldSREG;
    1402:	9f bf       	out	0x3f, r25	; 63
    1404:	06 c0       	rjmp	.+12     	; 0x1412 <pinMode+0x72>
	} else {
		uint8_t oldSREG = SREG;
    1406:	8f b7       	in	r24, 0x3f	; 63
                cli();
    1408:	f8 94       	cli
		*reg |= bit;
    140a:	e8 81       	ld	r30, Y
    140c:	2e 2b       	or	r18, r30
    140e:	28 83       	st	Y, r18
		SREG = oldSREG;
    1410:	8f bf       	out	0x3f, r24	; 63
	}
}
    1412:	df 91       	pop	r29
    1414:	cf 91       	pop	r28
    1416:	08 95       	ret

00001418 <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
    1418:	1f 93       	push	r17
    141a:	cf 93       	push	r28
    141c:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    141e:	28 2f       	mov	r18, r24
    1420:	30 e0       	ldi	r19, 0x00	; 0
    1422:	f9 01       	movw	r30, r18
    1424:	ed 5b       	subi	r30, 0xBD	; 189
    1426:	fe 4f       	sbci	r31, 0xFE	; 254
    1428:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    142a:	f9 01       	movw	r30, r18
    142c:	e7 57       	subi	r30, 0x77	; 119
    142e:	fe 4f       	sbci	r31, 0xFE	; 254
    1430:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    1432:	f9 01       	movw	r30, r18
    1434:	e1 53       	subi	r30, 0x31	; 49
    1436:	fe 4f       	sbci	r31, 0xFE	; 254
    1438:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    143a:	cc 23       	and	r28, r28
    143c:	b9 f0       	breq	.+46     	; 0x146c <digitalWrite+0x54>
    143e:	16 2f       	mov	r17, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    1440:	81 11       	cpse	r24, r1

	out = portOutputRegister(port);
    1442:	59 df       	rcall	.-334    	; 0x12f6 <turnOffPWM>
    1444:	ec 2f       	mov	r30, r28
    1446:	f0 e0       	ldi	r31, 0x00	; 0
    1448:	ee 0f       	add	r30, r30
    144a:	ff 1f       	adc	r31, r31
    144c:	e1 5d       	subi	r30, 0xD1	; 209
    144e:	fd 4f       	sbci	r31, 0xFD	; 253
    1450:	a5 91       	lpm	r26, Z+

	uint8_t oldSREG = SREG;
    1452:	b4 91       	lpm	r27, Z
	cli();
    1454:	9f b7       	in	r25, 0x3f	; 63

	if (val == LOW) {
    1456:	f8 94       	cli
    1458:	11 11       	cpse	r17, r1
		*out &= ~bit;
    145a:	04 c0       	rjmp	.+8      	; 0x1464 <digitalWrite+0x4c>
    145c:	8c 91       	ld	r24, X
    145e:	d0 95       	com	r29
    1460:	d8 23       	and	r29, r24
	} else {
		*out |= bit;
    1462:	02 c0       	rjmp	.+4      	; 0x1468 <digitalWrite+0x50>
    1464:	ec 91       	ld	r30, X
    1466:	de 2b       	or	r29, r30
	}

	SREG = oldSREG;
    1468:	dc 93       	st	X, r29
}
    146a:	9f bf       	out	0x3f, r25	; 63
    146c:	df 91       	pop	r29
    146e:	cf 91       	pop	r28
    1470:	1f 91       	pop	r17
    1472:	08 95       	ret

00001474 <digitalRead>:

int digitalRead(uint8_t pin)
{
    1474:	cf 93       	push	r28
    1476:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    1478:	28 2f       	mov	r18, r24
    147a:	30 e0       	ldi	r19, 0x00	; 0
    147c:	f9 01       	movw	r30, r18
    147e:	ed 5b       	subi	r30, 0xBD	; 189
    1480:	fe 4f       	sbci	r31, 0xFE	; 254
    1482:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    1484:	f9 01       	movw	r30, r18
    1486:	e7 57       	subi	r30, 0x77	; 119
    1488:	fe 4f       	sbci	r31, 0xFE	; 254
    148a:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    148c:	f9 01       	movw	r30, r18
    148e:	e1 53       	subi	r30, 0x31	; 49
    1490:	fe 4f       	sbci	r31, 0xFE	; 254
    1492:	c4 91       	lpm	r28, Z

	if (port == NOT_A_PIN) return LOW;
    1494:	cc 23       	and	r28, r28
    1496:	89 f0       	breq	.+34     	; 0x14ba <digitalRead+0x46>

	// If the pin that support PWM output, we need to turn it off
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    1498:	81 11       	cpse	r24, r1

	if (*portInputRegister(port) & bit) return HIGH;
    149a:	2d df       	rcall	.-422    	; 0x12f6 <turnOffPWM>
    149c:	ec 2f       	mov	r30, r28
    149e:	f0 e0       	ldi	r31, 0x00	; 0
    14a0:	ee 0f       	add	r30, r30
    14a2:	ff 1f       	adc	r31, r31
    14a4:	eb 5e       	subi	r30, 0xEB	; 235
    14a6:	fd 4f       	sbci	r31, 0xFD	; 253
    14a8:	a5 91       	lpm	r26, Z+
    14aa:	b4 91       	lpm	r27, Z
{
	uint8_t timer = digitalPinToTimer(pin);
	uint8_t bit = digitalPinToBitMask(pin);
	uint8_t port = digitalPinToPort(pin);

	if (port == NOT_A_PIN) return LOW;
    14ac:	ec 91       	ld	r30, X
    14ae:	ed 23       	and	r30, r29
    14b0:	81 e0       	ldi	r24, 0x01	; 1
    14b2:	90 e0       	ldi	r25, 0x00	; 0
    14b4:	21 f4       	brne	.+8      	; 0x14be <digitalRead+0x4a>
    14b6:	80 e0       	ldi	r24, 0x00	; 0
    14b8:	02 c0       	rjmp	.+4      	; 0x14be <digitalRead+0x4a>
    14ba:	80 e0       	ldi	r24, 0x00	; 0
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);

	if (*portInputRegister(port) & bit) return HIGH;
	return LOW;
}
    14bc:	90 e0       	ldi	r25, 0x00	; 0
    14be:	df 91       	pop	r29
    14c0:	cf 91       	pop	r28
    14c2:	08 95       	ret

000014c4 <_Z3maplllll>:
  long diff = howbig - howsmall;
  return random(diff) + howsmall;
}

long map(long x, long in_min, long in_max, long out_min, long out_max)
{
    14c4:	4f 92       	push	r4
    14c6:	5f 92       	push	r5
    14c8:	6f 92       	push	r6
    14ca:	7f 92       	push	r7
    14cc:	af 92       	push	r10
    14ce:	bf 92       	push	r11
    14d0:	cf 92       	push	r12
    14d2:	df 92       	push	r13
    14d4:	ef 92       	push	r14
    14d6:	ff 92       	push	r15
    14d8:	0f 93       	push	r16
    14da:	1f 93       	push	r17
    14dc:	cf 93       	push	r28
    14de:	df 93       	push	r29
    14e0:	cd b7       	in	r28, 0x3d	; 61
    14e2:	de b7       	in	r29, 0x3e	; 62
    14e4:	29 01       	movw	r4, r18
    14e6:	3a 01       	movw	r6, r20
  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
    14e8:	9b 01       	movw	r18, r22
    14ea:	ac 01       	movw	r20, r24
    14ec:	24 19       	sub	r18, r4
    14ee:	35 09       	sbc	r19, r5
    14f0:	46 09       	sbc	r20, r6
    14f2:	57 09       	sbc	r21, r7
    14f4:	8a 89       	ldd	r24, Y+18	; 0x12
    14f6:	9b 89       	ldd	r25, Y+19	; 0x13
    14f8:	ac 89       	ldd	r26, Y+20	; 0x14
    14fa:	bd 89       	ldd	r27, Y+21	; 0x15
    14fc:	bc 01       	movw	r22, r24
    14fe:	cd 01       	movw	r24, r26
    1500:	6a 19       	sub	r22, r10
    1502:	7b 09       	sbc	r23, r11
    1504:	8c 09       	sbc	r24, r12
    1506:	9d 09       	sbc	r25, r13
    1508:	67 d1       	rcall	.+718    	; 0x17d8 <__mulsi3>
    150a:	a8 01       	movw	r20, r16
    150c:	97 01       	movw	r18, r14
    150e:	24 19       	sub	r18, r4
    1510:	35 09       	sbc	r19, r5
    1512:	46 09       	sbc	r20, r6
    1514:	57 09       	sbc	r21, r7
    1516:	91 d1       	rcall	.+802    	; 0x183a <__divmodsi4>
    1518:	ca 01       	movw	r24, r20
    151a:	b9 01       	movw	r22, r18
    151c:	6a 0d       	add	r22, r10
    151e:	7b 1d       	adc	r23, r11
    1520:	8c 1d       	adc	r24, r12
    1522:	9d 1d       	adc	r25, r13
}
    1524:	df 91       	pop	r29
    1526:	cf 91       	pop	r28
    1528:	1f 91       	pop	r17
    152a:	0f 91       	pop	r16
    152c:	ff 90       	pop	r15
    152e:	ef 90       	pop	r14
    1530:	df 90       	pop	r13
    1532:	cf 90       	pop	r12
    1534:	bf 90       	pop	r11
    1536:	af 90       	pop	r10
    1538:	7f 90       	pop	r7
    153a:	6f 90       	pop	r6
    153c:	5f 90       	pop	r5
    153e:	4f 90       	pop	r4
    1540:	08 95       	ret

00001542 <_ZN6StringD1Ev>:
/*  Character Access                         */
/*********************************************/

char String::charAt(unsigned int loc) const
{
	return operator[](loc);
    1542:	fc 01       	movw	r30, r24
    1544:	80 81       	ld	r24, Z
    1546:	91 81       	ldd	r25, Z+1	; 0x01
    1548:	4d c2       	rjmp	.+1178   	; 0x19e4 <free>

0000154a <_ZN6String10invalidateEv>:
    154a:	cf 93       	push	r28
    154c:	df 93       	push	r29
    154e:	ec 01       	movw	r28, r24
    1550:	88 81       	ld	r24, Y
    1552:	99 81       	ldd	r25, Y+1	; 0x01
    1554:	00 97       	sbiw	r24, 0x00	; 0
    1556:	09 f0       	breq	.+2      	; 0x155a <_ZN6String10invalidateEv+0x10>
    1558:	45 d2       	rcall	.+1162   	; 0x19e4 <free>
    155a:	19 82       	std	Y+1, r1	; 0x01
    155c:	18 82       	st	Y, r1
    155e:	1d 82       	std	Y+5, r1	; 0x05
    1560:	1c 82       	std	Y+4, r1	; 0x04
    1562:	1b 82       	std	Y+3, r1	; 0x03
    1564:	1a 82       	std	Y+2, r1	; 0x02
    1566:	df 91       	pop	r29
    1568:	cf 91       	pop	r28
    156a:	08 95       	ret

0000156c <_ZN6String12changeBufferEj>:
    156c:	0f 93       	push	r16
    156e:	1f 93       	push	r17
    1570:	cf 93       	push	r28
    1572:	df 93       	push	r29
    1574:	ec 01       	movw	r28, r24
    1576:	8b 01       	movw	r16, r22
    1578:	6f 5f       	subi	r22, 0xFF	; 255
    157a:	7f 4f       	sbci	r23, 0xFF	; 255
    157c:	88 81       	ld	r24, Y
    157e:	99 81       	ldd	r25, Y+1	; 0x01
    1580:	ba d2       	rcall	.+1396   	; 0x1af6 <realloc>
    1582:	00 97       	sbiw	r24, 0x00	; 0
    1584:	31 f0       	breq	.+12     	; 0x1592 <_ZN6String12changeBufferEj+0x26>
    1586:	99 83       	std	Y+1, r25	; 0x01
    1588:	88 83       	st	Y, r24
    158a:	1b 83       	std	Y+3, r17	; 0x03
    158c:	0a 83       	std	Y+2, r16	; 0x02
    158e:	81 e0       	ldi	r24, 0x01	; 1
    1590:	01 c0       	rjmp	.+2      	; 0x1594 <_ZN6String12changeBufferEj+0x28>
    1592:	80 e0       	ldi	r24, 0x00	; 0
    1594:	df 91       	pop	r29
    1596:	cf 91       	pop	r28
    1598:	1f 91       	pop	r17
    159a:	0f 91       	pop	r16
    159c:	08 95       	ret

0000159e <_ZN6String7reserveEj>:
    159e:	cf 93       	push	r28
    15a0:	df 93       	push	r29
    15a2:	ec 01       	movw	r28, r24
    15a4:	88 81       	ld	r24, Y
    15a6:	99 81       	ldd	r25, Y+1	; 0x01
    15a8:	89 2b       	or	r24, r25
    15aa:	29 f0       	breq	.+10     	; 0x15b6 <_ZN6String7reserveEj+0x18>
    15ac:	8a 81       	ldd	r24, Y+2	; 0x02
    15ae:	9b 81       	ldd	r25, Y+3	; 0x03
    15b0:	86 17       	cp	r24, r22
    15b2:	97 07       	cpc	r25, r23
    15b4:	58 f4       	brcc	.+22     	; 0x15cc <_ZN6String7reserveEj+0x2e>
    15b6:	ce 01       	movw	r24, r28
    15b8:	d9 df       	rcall	.-78     	; 0x156c <_ZN6String12changeBufferEj>
    15ba:	88 23       	and	r24, r24
    15bc:	41 f0       	breq	.+16     	; 0x15ce <_ZN6String7reserveEj+0x30>
    15be:	8c 81       	ldd	r24, Y+4	; 0x04
    15c0:	9d 81       	ldd	r25, Y+5	; 0x05
    15c2:	89 2b       	or	r24, r25
    15c4:	19 f4       	brne	.+6      	; 0x15cc <_ZN6String7reserveEj+0x2e>
    15c6:	e8 81       	ld	r30, Y
    15c8:	f9 81       	ldd	r31, Y+1	; 0x01
    15ca:	10 82       	st	Z, r1
    15cc:	81 e0       	ldi	r24, 0x01	; 1
    15ce:	df 91       	pop	r29
    15d0:	cf 91       	pop	r28
    15d2:	08 95       	ret

000015d4 <_ZN6String4copyEPKcj>:
    15d4:	ef 92       	push	r14
    15d6:	ff 92       	push	r15
    15d8:	0f 93       	push	r16
    15da:	1f 93       	push	r17
    15dc:	cf 93       	push	r28
    15de:	df 93       	push	r29
    15e0:	ec 01       	movw	r28, r24
    15e2:	7b 01       	movw	r14, r22
    15e4:	8a 01       	movw	r16, r20
    15e6:	ba 01       	movw	r22, r20
    15e8:	da df       	rcall	.-76     	; 0x159e <_ZN6String7reserveEj>
    15ea:	81 11       	cpse	r24, r1
    15ec:	03 c0       	rjmp	.+6      	; 0x15f4 <_ZN6String4copyEPKcj+0x20>
    15ee:	ce 01       	movw	r24, r28
    15f0:	ac df       	rcall	.-168    	; 0x154a <_ZN6String10invalidateEv>
    15f2:	06 c0       	rjmp	.+12     	; 0x1600 <_ZN6String4copyEPKcj+0x2c>
    15f4:	1d 83       	std	Y+5, r17	; 0x05
    15f6:	0c 83       	std	Y+4, r16	; 0x04
    15f8:	b7 01       	movw	r22, r14
    15fa:	88 81       	ld	r24, Y
    15fc:	99 81       	ldd	r25, Y+1	; 0x01
    15fe:	da d4       	rcall	.+2484   	; 0x1fb4 <strcpy>
    1600:	ce 01       	movw	r24, r28
    1602:	df 91       	pop	r29
    1604:	cf 91       	pop	r28
    1606:	1f 91       	pop	r17
    1608:	0f 91       	pop	r16
    160a:	ff 90       	pop	r15
    160c:	ef 90       	pop	r14
    160e:	08 95       	ret

00001610 <_ZN6StringC1EPKc>:
    1610:	fc 01       	movw	r30, r24
    1612:	11 82       	std	Z+1, r1	; 0x01
    1614:	10 82       	st	Z, r1
    1616:	13 82       	std	Z+3, r1	; 0x03
    1618:	12 82       	std	Z+2, r1	; 0x02
    161a:	15 82       	std	Z+5, r1	; 0x05
    161c:	14 82       	std	Z+4, r1	; 0x04
    161e:	61 15       	cp	r22, r1
    1620:	71 05       	cpc	r23, r1
    1622:	49 f0       	breq	.+18     	; 0x1636 <_ZN6StringC1EPKc+0x26>
    1624:	fb 01       	movw	r30, r22
    1626:	01 90       	ld	r0, Z+
    1628:	00 20       	and	r0, r0
    162a:	e9 f7       	brne	.-6      	; 0x1626 <_ZN6StringC1EPKc+0x16>
    162c:	31 97       	sbiw	r30, 0x01	; 1
    162e:	af 01       	movw	r20, r30
    1630:	46 1b       	sub	r20, r22
    1632:	57 0b       	sbc	r21, r23
    1634:	cf cf       	rjmp	.-98     	; 0x15d4 <_ZN6String4copyEPKcj>
    1636:	08 95       	ret

00001638 <_ZN6String6concatEPKcj>:
    1638:	ef 92       	push	r14
    163a:	ff 92       	push	r15
    163c:	0f 93       	push	r16
    163e:	1f 93       	push	r17
    1640:	cf 93       	push	r28
    1642:	df 93       	push	r29
    1644:	61 15       	cp	r22, r1
    1646:	71 05       	cpc	r23, r1
    1648:	11 f4       	brne	.+4      	; 0x164e <_ZN6String6concatEPKcj+0x16>
    164a:	80 e0       	ldi	r24, 0x00	; 0
    164c:	1a c0       	rjmp	.+52     	; 0x1682 <_ZN6String6concatEPKcj+0x4a>
    164e:	41 15       	cp	r20, r1
    1650:	51 05       	cpc	r21, r1
    1652:	b1 f0       	breq	.+44     	; 0x1680 <_ZN6String6concatEPKcj+0x48>
    1654:	7b 01       	movw	r14, r22
    1656:	ec 01       	movw	r28, r24
    1658:	8c 81       	ldd	r24, Y+4	; 0x04
    165a:	9d 81       	ldd	r25, Y+5	; 0x05
    165c:	8a 01       	movw	r16, r20
    165e:	08 0f       	add	r16, r24
    1660:	19 1f       	adc	r17, r25
    1662:	b8 01       	movw	r22, r16
    1664:	ce 01       	movw	r24, r28
    1666:	9b df       	rcall	.-202    	; 0x159e <_ZN6String7reserveEj>
    1668:	88 23       	and	r24, r24
    166a:	79 f3       	breq	.-34     	; 0x164a <_ZN6String6concatEPKcj+0x12>
    166c:	28 81       	ld	r18, Y
    166e:	39 81       	ldd	r19, Y+1	; 0x01
    1670:	8c 81       	ldd	r24, Y+4	; 0x04
    1672:	9d 81       	ldd	r25, Y+5	; 0x05
    1674:	b7 01       	movw	r22, r14
    1676:	82 0f       	add	r24, r18
    1678:	93 1f       	adc	r25, r19
    167a:	9c d4       	rcall	.+2360   	; 0x1fb4 <strcpy>
    167c:	1d 83       	std	Y+5, r17	; 0x05
    167e:	0c 83       	std	Y+4, r16	; 0x04
    1680:	81 e0       	ldi	r24, 0x01	; 1
    1682:	df 91       	pop	r29
    1684:	cf 91       	pop	r28
    1686:	1f 91       	pop	r17
    1688:	0f 91       	pop	r16
    168a:	ff 90       	pop	r15
    168c:	ef 90       	pop	r14
    168e:	08 95       	ret

00001690 <_ZN6String6concatEc>:
    1690:	cf 93       	push	r28
    1692:	df 93       	push	r29
    1694:	1f 92       	push	r1
    1696:	1f 92       	push	r1
    1698:	cd b7       	in	r28, 0x3d	; 61
    169a:	de b7       	in	r29, 0x3e	; 62
    169c:	69 83       	std	Y+1, r22	; 0x01
    169e:	1a 82       	std	Y+2, r1	; 0x02
    16a0:	41 e0       	ldi	r20, 0x01	; 1
    16a2:	50 e0       	ldi	r21, 0x00	; 0
    16a4:	be 01       	movw	r22, r28
    16a6:	6f 5f       	subi	r22, 0xFF	; 255
    16a8:	7f 4f       	sbci	r23, 0xFF	; 255
    16aa:	c6 df       	rcall	.-116    	; 0x1638 <_ZN6String6concatEPKcj>
    16ac:	0f 90       	pop	r0
    16ae:	0f 90       	pop	r0
    16b0:	df 91       	pop	r29
    16b2:	cf 91       	pop	r28
    16b4:	08 95       	ret

000016b6 <_ZNK6String8getBytesEPhjj>:
	if (index >= len || !buffer) return 0;
	return buffer[index];
}

void String::getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index) const
{
    16b6:	0f 93       	push	r16
    16b8:	1f 93       	push	r17
    16ba:	cf 93       	push	r28
    16bc:	df 93       	push	r29
	if (!bufsize || !buf) return;
    16be:	41 15       	cp	r20, r1
    16c0:	51 05       	cpc	r21, r1
    16c2:	11 f1       	breq	.+68     	; 0x1708 <_ZNK6String8getBytesEPhjj+0x52>
    16c4:	61 15       	cp	r22, r1
    16c6:	71 05       	cpc	r23, r1
    16c8:	f9 f0       	breq	.+62     	; 0x1708 <_ZNK6String8getBytesEPhjj+0x52>
	if (index >= len) {
    16ca:	dc 01       	movw	r26, r24
    16cc:	14 96       	adiw	r26, 0x04	; 4
    16ce:	ed 91       	ld	r30, X+
    16d0:	fc 91       	ld	r31, X
    16d2:	15 97       	sbiw	r26, 0x05	; 5
    16d4:	2e 17       	cp	r18, r30
    16d6:	3f 07       	cpc	r19, r31
    16d8:	18 f0       	brcs	.+6      	; 0x16e0 <_ZNK6String8getBytesEPhjj+0x2a>
		buf[0] = 0;
    16da:	fb 01       	movw	r30, r22
    16dc:	10 82       	st	Z, r1
		return;
    16de:	14 c0       	rjmp	.+40     	; 0x1708 <_ZNK6String8getBytesEPhjj+0x52>
	}
	unsigned int n = bufsize - 1;
	if (n > len - index) n = len - index;
    16e0:	e2 1b       	sub	r30, r18
    16e2:	f3 0b       	sbc	r31, r19
    16e4:	ea 01       	movw	r28, r20
    16e6:	21 97       	sbiw	r28, 0x01	; 1
    16e8:	ec 17       	cp	r30, r28
    16ea:	fd 07       	cpc	r31, r29
    16ec:	08 f4       	brcc	.+2      	; 0x16f0 <_ZNK6String8getBytesEPhjj+0x3a>
    16ee:	ef 01       	movw	r28, r30
    16f0:	8b 01       	movw	r16, r22
    16f2:	fc 01       	movw	r30, r24
	strncpy((char *)buf, buffer + index, n);
    16f4:	60 81       	ld	r22, Z
    16f6:	71 81       	ldd	r23, Z+1	; 0x01
    16f8:	62 0f       	add	r22, r18
    16fa:	73 1f       	adc	r23, r19
    16fc:	ae 01       	movw	r20, r28
    16fe:	c8 01       	movw	r24, r16
    1700:	6a d4       	rcall	.+2260   	; 0x1fd6 <strncpy>
	buf[n] = 0;
    1702:	c0 0f       	add	r28, r16
    1704:	d1 1f       	adc	r29, r17
    1706:	18 82       	st	Y, r1
}
    1708:	df 91       	pop	r29
    170a:	cf 91       	pop	r28
    170c:	1f 91       	pop	r17
    170e:	0f 91       	pop	r16
    1710:	08 95       	ret

00001712 <__mulsf3>:
    1712:	0b d0       	rcall	.+22     	; 0x172a <__mulsf3x>
    1714:	49 ca       	rjmp	.-2926   	; 0xba8 <__fp_round>
    1716:	3a da       	rcall	.-2956   	; 0xb8c <__fp_pscA>
    1718:	28 f0       	brcs	.+10     	; 0x1724 <__mulsf3+0x12>
    171a:	3f da       	rcall	.-2946   	; 0xb9a <__fp_pscB>
    171c:	18 f0       	brcs	.+6      	; 0x1724 <__mulsf3+0x12>
    171e:	95 23       	and	r25, r21
    1720:	09 f0       	breq	.+2      	; 0x1724 <__mulsf3+0x12>
    1722:	2b ca       	rjmp	.-2986   	; 0xb7a <__fp_inf>
    1724:	30 ca       	rjmp	.-2976   	; 0xb86 <__fp_nan>
    1726:	11 24       	eor	r1, r1
    1728:	73 ca       	rjmp	.-2842   	; 0xc10 <__fp_szero>

0000172a <__mulsf3x>:
    172a:	4f da       	rcall	.-2914   	; 0xbca <__fp_split3>
    172c:	a0 f3       	brcs	.-24     	; 0x1716 <__mulsf3+0x4>

0000172e <__mulsf3_pse>:
    172e:	95 9f       	mul	r25, r21
    1730:	d1 f3       	breq	.-12     	; 0x1726 <__mulsf3+0x14>
    1732:	95 0f       	add	r25, r21
    1734:	50 e0       	ldi	r21, 0x00	; 0
    1736:	55 1f       	adc	r21, r21
    1738:	62 9f       	mul	r22, r18
    173a:	f0 01       	movw	r30, r0
    173c:	72 9f       	mul	r23, r18
    173e:	bb 27       	eor	r27, r27
    1740:	f0 0d       	add	r31, r0
    1742:	b1 1d       	adc	r27, r1
    1744:	63 9f       	mul	r22, r19
    1746:	aa 27       	eor	r26, r26
    1748:	f0 0d       	add	r31, r0
    174a:	b1 1d       	adc	r27, r1
    174c:	aa 1f       	adc	r26, r26
    174e:	64 9f       	mul	r22, r20
    1750:	66 27       	eor	r22, r22
    1752:	b0 0d       	add	r27, r0
    1754:	a1 1d       	adc	r26, r1
    1756:	66 1f       	adc	r22, r22
    1758:	82 9f       	mul	r24, r18
    175a:	22 27       	eor	r18, r18
    175c:	b0 0d       	add	r27, r0
    175e:	a1 1d       	adc	r26, r1
    1760:	62 1f       	adc	r22, r18
    1762:	73 9f       	mul	r23, r19
    1764:	b0 0d       	add	r27, r0
    1766:	a1 1d       	adc	r26, r1
    1768:	62 1f       	adc	r22, r18
    176a:	83 9f       	mul	r24, r19
    176c:	a0 0d       	add	r26, r0
    176e:	61 1d       	adc	r22, r1
    1770:	22 1f       	adc	r18, r18
    1772:	74 9f       	mul	r23, r20
    1774:	33 27       	eor	r19, r19
    1776:	a0 0d       	add	r26, r0
    1778:	61 1d       	adc	r22, r1
    177a:	23 1f       	adc	r18, r19
    177c:	84 9f       	mul	r24, r20
    177e:	60 0d       	add	r22, r0
    1780:	21 1d       	adc	r18, r1
    1782:	82 2f       	mov	r24, r18
    1784:	76 2f       	mov	r23, r22
    1786:	6a 2f       	mov	r22, r26
    1788:	11 24       	eor	r1, r1
    178a:	9f 57       	subi	r25, 0x7F	; 127
    178c:	50 40       	sbci	r21, 0x00	; 0
    178e:	8a f0       	brmi	.+34     	; 0x17b2 <__mulsf3_pse+0x84>
    1790:	e1 f0       	breq	.+56     	; 0x17ca <__mulsf3_pse+0x9c>
    1792:	88 23       	and	r24, r24
    1794:	4a f0       	brmi	.+18     	; 0x17a8 <__mulsf3_pse+0x7a>
    1796:	ee 0f       	add	r30, r30
    1798:	ff 1f       	adc	r31, r31
    179a:	bb 1f       	adc	r27, r27
    179c:	66 1f       	adc	r22, r22
    179e:	77 1f       	adc	r23, r23
    17a0:	88 1f       	adc	r24, r24
    17a2:	91 50       	subi	r25, 0x01	; 1
    17a4:	50 40       	sbci	r21, 0x00	; 0
    17a6:	a9 f7       	brne	.-22     	; 0x1792 <__mulsf3_pse+0x64>
    17a8:	9e 3f       	cpi	r25, 0xFE	; 254
    17aa:	51 05       	cpc	r21, r1
    17ac:	70 f0       	brcs	.+28     	; 0x17ca <__mulsf3_pse+0x9c>
    17ae:	e5 c9       	rjmp	.-3126   	; 0xb7a <__fp_inf>
    17b0:	2f ca       	rjmp	.-2978   	; 0xc10 <__fp_szero>
    17b2:	5f 3f       	cpi	r21, 0xFF	; 255
    17b4:	ec f3       	brlt	.-6      	; 0x17b0 <__mulsf3_pse+0x82>
    17b6:	98 3e       	cpi	r25, 0xE8	; 232
    17b8:	dc f3       	brlt	.-10     	; 0x17b0 <__mulsf3_pse+0x82>
    17ba:	86 95       	lsr	r24
    17bc:	77 95       	ror	r23
    17be:	67 95       	ror	r22
    17c0:	b7 95       	ror	r27
    17c2:	f7 95       	ror	r31
    17c4:	e7 95       	ror	r30
    17c6:	9f 5f       	subi	r25, 0xFF	; 255
    17c8:	c1 f7       	brne	.-16     	; 0x17ba <__mulsf3_pse+0x8c>
    17ca:	fe 2b       	or	r31, r30
    17cc:	88 0f       	add	r24, r24
    17ce:	91 1d       	adc	r25, r1
    17d0:	96 95       	lsr	r25
    17d2:	87 95       	ror	r24
    17d4:	97 f9       	bld	r25, 7
    17d6:	08 95       	ret

000017d8 <__mulsi3>:
    17d8:	db 01       	movw	r26, r22
    17da:	8f 93       	push	r24
    17dc:	9f 93       	push	r25
    17de:	51 d0       	rcall	.+162    	; 0x1882 <__muluhisi3>
    17e0:	bf 91       	pop	r27
    17e2:	af 91       	pop	r26
    17e4:	a2 9f       	mul	r26, r18
    17e6:	80 0d       	add	r24, r0
    17e8:	91 1d       	adc	r25, r1
    17ea:	a3 9f       	mul	r26, r19
    17ec:	90 0d       	add	r25, r0
    17ee:	b2 9f       	mul	r27, r18
    17f0:	90 0d       	add	r25, r0
    17f2:	11 24       	eor	r1, r1
    17f4:	08 95       	ret

000017f6 <__udivmodsi4>:
    17f6:	a1 e2       	ldi	r26, 0x21	; 33
    17f8:	1a 2e       	mov	r1, r26
    17fa:	aa 1b       	sub	r26, r26
    17fc:	bb 1b       	sub	r27, r27
    17fe:	fd 01       	movw	r30, r26
    1800:	0d c0       	rjmp	.+26     	; 0x181c <__udivmodsi4_ep>

00001802 <__udivmodsi4_loop>:
    1802:	aa 1f       	adc	r26, r26
    1804:	bb 1f       	adc	r27, r27
    1806:	ee 1f       	adc	r30, r30
    1808:	ff 1f       	adc	r31, r31
    180a:	a2 17       	cp	r26, r18
    180c:	b3 07       	cpc	r27, r19
    180e:	e4 07       	cpc	r30, r20
    1810:	f5 07       	cpc	r31, r21
    1812:	20 f0       	brcs	.+8      	; 0x181c <__udivmodsi4_ep>
    1814:	a2 1b       	sub	r26, r18
    1816:	b3 0b       	sbc	r27, r19
    1818:	e4 0b       	sbc	r30, r20
    181a:	f5 0b       	sbc	r31, r21

0000181c <__udivmodsi4_ep>:
    181c:	66 1f       	adc	r22, r22
    181e:	77 1f       	adc	r23, r23
    1820:	88 1f       	adc	r24, r24
    1822:	99 1f       	adc	r25, r25
    1824:	1a 94       	dec	r1
    1826:	69 f7       	brne	.-38     	; 0x1802 <__udivmodsi4_loop>
    1828:	60 95       	com	r22
    182a:	70 95       	com	r23
    182c:	80 95       	com	r24
    182e:	90 95       	com	r25
    1830:	9b 01       	movw	r18, r22
    1832:	ac 01       	movw	r20, r24
    1834:	bd 01       	movw	r22, r26
    1836:	cf 01       	movw	r24, r30
    1838:	08 95       	ret

0000183a <__divmodsi4>:
    183a:	05 2e       	mov	r0, r21
    183c:	97 fb       	bst	r25, 7
    183e:	16 f4       	brtc	.+4      	; 0x1844 <__divmodsi4+0xa>
    1840:	00 94       	com	r0
    1842:	0f d0       	rcall	.+30     	; 0x1862 <__negsi2>
    1844:	57 fd       	sbrc	r21, 7
    1846:	05 d0       	rcall	.+10     	; 0x1852 <__divmodsi4_neg2>
    1848:	d6 df       	rcall	.-84     	; 0x17f6 <__udivmodsi4>
    184a:	07 fc       	sbrc	r0, 7
    184c:	02 d0       	rcall	.+4      	; 0x1852 <__divmodsi4_neg2>
    184e:	46 f4       	brtc	.+16     	; 0x1860 <__divmodsi4_exit>
    1850:	08 c0       	rjmp	.+16     	; 0x1862 <__negsi2>

00001852 <__divmodsi4_neg2>:
    1852:	50 95       	com	r21
    1854:	40 95       	com	r20
    1856:	30 95       	com	r19
    1858:	21 95       	neg	r18
    185a:	3f 4f       	sbci	r19, 0xFF	; 255
    185c:	4f 4f       	sbci	r20, 0xFF	; 255
    185e:	5f 4f       	sbci	r21, 0xFF	; 255

00001860 <__divmodsi4_exit>:
    1860:	08 95       	ret

00001862 <__negsi2>:
    1862:	90 95       	com	r25
    1864:	80 95       	com	r24
    1866:	70 95       	com	r23
    1868:	61 95       	neg	r22
    186a:	7f 4f       	sbci	r23, 0xFF	; 255
    186c:	8f 4f       	sbci	r24, 0xFF	; 255
    186e:	9f 4f       	sbci	r25, 0xFF	; 255
    1870:	08 95       	ret

00001872 <__tablejump2__>:
    1872:	ee 0f       	add	r30, r30
    1874:	ff 1f       	adc	r31, r31
    1876:	88 1f       	adc	r24, r24
    1878:	8b bf       	out	0x3b, r24	; 59
    187a:	07 90       	elpm	r0, Z+
    187c:	f6 91       	elpm	r31, Z
    187e:	e0 2d       	mov	r30, r0
    1880:	19 94       	eijmp

00001882 <__muluhisi3>:
    1882:	09 d0       	rcall	.+18     	; 0x1896 <__umulhisi3>
    1884:	a5 9f       	mul	r26, r21
    1886:	90 0d       	add	r25, r0
    1888:	b4 9f       	mul	r27, r20
    188a:	90 0d       	add	r25, r0
    188c:	a4 9f       	mul	r26, r20
    188e:	80 0d       	add	r24, r0
    1890:	91 1d       	adc	r25, r1
    1892:	11 24       	eor	r1, r1
    1894:	08 95       	ret

00001896 <__umulhisi3>:
    1896:	a2 9f       	mul	r26, r18
    1898:	b0 01       	movw	r22, r0
    189a:	b3 9f       	mul	r27, r19
    189c:	c0 01       	movw	r24, r0
    189e:	a3 9f       	mul	r26, r19
    18a0:	70 0d       	add	r23, r0
    18a2:	81 1d       	adc	r24, r1
    18a4:	11 24       	eor	r1, r1
    18a6:	91 1d       	adc	r25, r1
    18a8:	b2 9f       	mul	r27, r18
    18aa:	70 0d       	add	r23, r0
    18ac:	81 1d       	adc	r24, r1
    18ae:	11 24       	eor	r1, r1
    18b0:	91 1d       	adc	r25, r1
    18b2:	08 95       	ret

000018b4 <malloc>:
    18b4:	0f 93       	push	r16
    18b6:	1f 93       	push	r17
    18b8:	cf 93       	push	r28
    18ba:	df 93       	push	r29
    18bc:	82 30       	cpi	r24, 0x02	; 2
    18be:	91 05       	cpc	r25, r1
    18c0:	10 f4       	brcc	.+4      	; 0x18c6 <malloc+0x12>
    18c2:	82 e0       	ldi	r24, 0x02	; 2
    18c4:	90 e0       	ldi	r25, 0x00	; 0
    18c6:	e0 91 e2 02 	lds	r30, 0x02E2	; 0x8002e2 <__flp>
    18ca:	f0 91 e3 02 	lds	r31, 0x02E3	; 0x8002e3 <__flp+0x1>
    18ce:	20 e0       	ldi	r18, 0x00	; 0
    18d0:	30 e0       	ldi	r19, 0x00	; 0
    18d2:	a0 e0       	ldi	r26, 0x00	; 0
    18d4:	b0 e0       	ldi	r27, 0x00	; 0
    18d6:	30 97       	sbiw	r30, 0x00	; 0
    18d8:	19 f1       	breq	.+70     	; 0x1920 <malloc+0x6c>
    18da:	40 81       	ld	r20, Z
    18dc:	51 81       	ldd	r21, Z+1	; 0x01
    18de:	02 81       	ldd	r16, Z+2	; 0x02
    18e0:	13 81       	ldd	r17, Z+3	; 0x03
    18e2:	48 17       	cp	r20, r24
    18e4:	59 07       	cpc	r21, r25
    18e6:	c8 f0       	brcs	.+50     	; 0x191a <malloc+0x66>
    18e8:	84 17       	cp	r24, r20
    18ea:	95 07       	cpc	r25, r21
    18ec:	69 f4       	brne	.+26     	; 0x1908 <malloc+0x54>
    18ee:	10 97       	sbiw	r26, 0x00	; 0
    18f0:	31 f0       	breq	.+12     	; 0x18fe <malloc+0x4a>
    18f2:	12 96       	adiw	r26, 0x02	; 2
    18f4:	0c 93       	st	X, r16
    18f6:	12 97       	sbiw	r26, 0x02	; 2
    18f8:	13 96       	adiw	r26, 0x03	; 3
    18fa:	1c 93       	st	X, r17
    18fc:	27 c0       	rjmp	.+78     	; 0x194c <malloc+0x98>
    18fe:	00 93 e2 02 	sts	0x02E2, r16	; 0x8002e2 <__flp>
    1902:	10 93 e3 02 	sts	0x02E3, r17	; 0x8002e3 <__flp+0x1>
    1906:	22 c0       	rjmp	.+68     	; 0x194c <malloc+0x98>
    1908:	21 15       	cp	r18, r1
    190a:	31 05       	cpc	r19, r1
    190c:	19 f0       	breq	.+6      	; 0x1914 <malloc+0x60>
    190e:	42 17       	cp	r20, r18
    1910:	53 07       	cpc	r21, r19
    1912:	18 f4       	brcc	.+6      	; 0x191a <malloc+0x66>
    1914:	9a 01       	movw	r18, r20
    1916:	bd 01       	movw	r22, r26
    1918:	ef 01       	movw	r28, r30
    191a:	df 01       	movw	r26, r30
    191c:	f8 01       	movw	r30, r16
    191e:	db cf       	rjmp	.-74     	; 0x18d6 <malloc+0x22>
    1920:	21 15       	cp	r18, r1
    1922:	31 05       	cpc	r19, r1
    1924:	f9 f0       	breq	.+62     	; 0x1964 <malloc+0xb0>
    1926:	28 1b       	sub	r18, r24
    1928:	39 0b       	sbc	r19, r25
    192a:	24 30       	cpi	r18, 0x04	; 4
    192c:	31 05       	cpc	r19, r1
    192e:	80 f4       	brcc	.+32     	; 0x1950 <malloc+0x9c>
    1930:	8a 81       	ldd	r24, Y+2	; 0x02
    1932:	9b 81       	ldd	r25, Y+3	; 0x03
    1934:	61 15       	cp	r22, r1
    1936:	71 05       	cpc	r23, r1
    1938:	21 f0       	breq	.+8      	; 0x1942 <malloc+0x8e>
    193a:	fb 01       	movw	r30, r22
    193c:	93 83       	std	Z+3, r25	; 0x03
    193e:	82 83       	std	Z+2, r24	; 0x02
    1940:	04 c0       	rjmp	.+8      	; 0x194a <malloc+0x96>
    1942:	90 93 e3 02 	sts	0x02E3, r25	; 0x8002e3 <__flp+0x1>
    1946:	80 93 e2 02 	sts	0x02E2, r24	; 0x8002e2 <__flp>
    194a:	fe 01       	movw	r30, r28
    194c:	32 96       	adiw	r30, 0x02	; 2
    194e:	44 c0       	rjmp	.+136    	; 0x19d8 <malloc+0x124>
    1950:	fe 01       	movw	r30, r28
    1952:	e2 0f       	add	r30, r18
    1954:	f3 1f       	adc	r31, r19
    1956:	81 93       	st	Z+, r24
    1958:	91 93       	st	Z+, r25
    195a:	22 50       	subi	r18, 0x02	; 2
    195c:	31 09       	sbc	r19, r1
    195e:	39 83       	std	Y+1, r19	; 0x01
    1960:	28 83       	st	Y, r18
    1962:	3a c0       	rjmp	.+116    	; 0x19d8 <malloc+0x124>
    1964:	20 91 e0 02 	lds	r18, 0x02E0	; 0x8002e0 <__brkval>
    1968:	30 91 e1 02 	lds	r19, 0x02E1	; 0x8002e1 <__brkval+0x1>
    196c:	23 2b       	or	r18, r19
    196e:	41 f4       	brne	.+16     	; 0x1980 <malloc+0xcc>
    1970:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <__malloc_heap_start>
    1974:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <__malloc_heap_start+0x1>
    1978:	30 93 e1 02 	sts	0x02E1, r19	; 0x8002e1 <__brkval+0x1>
    197c:	20 93 e0 02 	sts	0x02E0, r18	; 0x8002e0 <__brkval>
    1980:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__data_start>
    1984:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__data_start+0x1>
    1988:	21 15       	cp	r18, r1
    198a:	31 05       	cpc	r19, r1
    198c:	41 f4       	brne	.+16     	; 0x199e <malloc+0xea>
    198e:	2d b7       	in	r18, 0x3d	; 61
    1990:	3e b7       	in	r19, 0x3e	; 62
    1992:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
    1996:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
    199a:	24 1b       	sub	r18, r20
    199c:	35 0b       	sbc	r19, r21
    199e:	e0 91 e0 02 	lds	r30, 0x02E0	; 0x8002e0 <__brkval>
    19a2:	f0 91 e1 02 	lds	r31, 0x02E1	; 0x8002e1 <__brkval+0x1>
    19a6:	e2 17       	cp	r30, r18
    19a8:	f3 07       	cpc	r31, r19
    19aa:	a0 f4       	brcc	.+40     	; 0x19d4 <malloc+0x120>
    19ac:	2e 1b       	sub	r18, r30
    19ae:	3f 0b       	sbc	r19, r31
    19b0:	28 17       	cp	r18, r24
    19b2:	39 07       	cpc	r19, r25
    19b4:	78 f0       	brcs	.+30     	; 0x19d4 <malloc+0x120>
    19b6:	ac 01       	movw	r20, r24
    19b8:	4e 5f       	subi	r20, 0xFE	; 254
    19ba:	5f 4f       	sbci	r21, 0xFF	; 255
    19bc:	24 17       	cp	r18, r20
    19be:	35 07       	cpc	r19, r21
    19c0:	48 f0       	brcs	.+18     	; 0x19d4 <malloc+0x120>
    19c2:	4e 0f       	add	r20, r30
    19c4:	5f 1f       	adc	r21, r31
    19c6:	50 93 e1 02 	sts	0x02E1, r21	; 0x8002e1 <__brkval+0x1>
    19ca:	40 93 e0 02 	sts	0x02E0, r20	; 0x8002e0 <__brkval>
    19ce:	81 93       	st	Z+, r24
    19d0:	91 93       	st	Z+, r25
    19d2:	02 c0       	rjmp	.+4      	; 0x19d8 <malloc+0x124>
    19d4:	e0 e0       	ldi	r30, 0x00	; 0
    19d6:	f0 e0       	ldi	r31, 0x00	; 0
    19d8:	cf 01       	movw	r24, r30
    19da:	df 91       	pop	r29
    19dc:	cf 91       	pop	r28
    19de:	1f 91       	pop	r17
    19e0:	0f 91       	pop	r16
    19e2:	08 95       	ret

000019e4 <free>:
    19e4:	cf 93       	push	r28
    19e6:	df 93       	push	r29
    19e8:	00 97       	sbiw	r24, 0x00	; 0
    19ea:	09 f4       	brne	.+2      	; 0x19ee <free+0xa>
    19ec:	81 c0       	rjmp	.+258    	; 0x1af0 <free+0x10c>
    19ee:	fc 01       	movw	r30, r24
    19f0:	32 97       	sbiw	r30, 0x02	; 2
    19f2:	13 82       	std	Z+3, r1	; 0x03
    19f4:	12 82       	std	Z+2, r1	; 0x02
    19f6:	a0 91 e2 02 	lds	r26, 0x02E2	; 0x8002e2 <__flp>
    19fa:	b0 91 e3 02 	lds	r27, 0x02E3	; 0x8002e3 <__flp+0x1>
    19fe:	10 97       	sbiw	r26, 0x00	; 0
    1a00:	81 f4       	brne	.+32     	; 0x1a22 <free+0x3e>
    1a02:	20 81       	ld	r18, Z
    1a04:	31 81       	ldd	r19, Z+1	; 0x01
    1a06:	82 0f       	add	r24, r18
    1a08:	93 1f       	adc	r25, r19
    1a0a:	20 91 e0 02 	lds	r18, 0x02E0	; 0x8002e0 <__brkval>
    1a0e:	30 91 e1 02 	lds	r19, 0x02E1	; 0x8002e1 <__brkval+0x1>
    1a12:	28 17       	cp	r18, r24
    1a14:	39 07       	cpc	r19, r25
    1a16:	51 f5       	brne	.+84     	; 0x1a6c <free+0x88>
    1a18:	f0 93 e1 02 	sts	0x02E1, r31	; 0x8002e1 <__brkval+0x1>
    1a1c:	e0 93 e0 02 	sts	0x02E0, r30	; 0x8002e0 <__brkval>
    1a20:	67 c0       	rjmp	.+206    	; 0x1af0 <free+0x10c>
    1a22:	ed 01       	movw	r28, r26
    1a24:	20 e0       	ldi	r18, 0x00	; 0
    1a26:	30 e0       	ldi	r19, 0x00	; 0
    1a28:	ce 17       	cp	r28, r30
    1a2a:	df 07       	cpc	r29, r31
    1a2c:	40 f4       	brcc	.+16     	; 0x1a3e <free+0x5a>
    1a2e:	4a 81       	ldd	r20, Y+2	; 0x02
    1a30:	5b 81       	ldd	r21, Y+3	; 0x03
    1a32:	9e 01       	movw	r18, r28
    1a34:	41 15       	cp	r20, r1
    1a36:	51 05       	cpc	r21, r1
    1a38:	f1 f0       	breq	.+60     	; 0x1a76 <free+0x92>
    1a3a:	ea 01       	movw	r28, r20
    1a3c:	f5 cf       	rjmp	.-22     	; 0x1a28 <free+0x44>
    1a3e:	d3 83       	std	Z+3, r29	; 0x03
    1a40:	c2 83       	std	Z+2, r28	; 0x02
    1a42:	40 81       	ld	r20, Z
    1a44:	51 81       	ldd	r21, Z+1	; 0x01
    1a46:	84 0f       	add	r24, r20
    1a48:	95 1f       	adc	r25, r21
    1a4a:	c8 17       	cp	r28, r24
    1a4c:	d9 07       	cpc	r29, r25
    1a4e:	59 f4       	brne	.+22     	; 0x1a66 <free+0x82>
    1a50:	88 81       	ld	r24, Y
    1a52:	99 81       	ldd	r25, Y+1	; 0x01
    1a54:	84 0f       	add	r24, r20
    1a56:	95 1f       	adc	r25, r21
    1a58:	02 96       	adiw	r24, 0x02	; 2
    1a5a:	91 83       	std	Z+1, r25	; 0x01
    1a5c:	80 83       	st	Z, r24
    1a5e:	8a 81       	ldd	r24, Y+2	; 0x02
    1a60:	9b 81       	ldd	r25, Y+3	; 0x03
    1a62:	93 83       	std	Z+3, r25	; 0x03
    1a64:	82 83       	std	Z+2, r24	; 0x02
    1a66:	21 15       	cp	r18, r1
    1a68:	31 05       	cpc	r19, r1
    1a6a:	29 f4       	brne	.+10     	; 0x1a76 <free+0x92>
    1a6c:	f0 93 e3 02 	sts	0x02E3, r31	; 0x8002e3 <__flp+0x1>
    1a70:	e0 93 e2 02 	sts	0x02E2, r30	; 0x8002e2 <__flp>
    1a74:	3d c0       	rjmp	.+122    	; 0x1af0 <free+0x10c>
    1a76:	e9 01       	movw	r28, r18
    1a78:	fb 83       	std	Y+3, r31	; 0x03
    1a7a:	ea 83       	std	Y+2, r30	; 0x02
    1a7c:	49 91       	ld	r20, Y+
    1a7e:	59 91       	ld	r21, Y+
    1a80:	c4 0f       	add	r28, r20
    1a82:	d5 1f       	adc	r29, r21
    1a84:	ec 17       	cp	r30, r28
    1a86:	fd 07       	cpc	r31, r29
    1a88:	61 f4       	brne	.+24     	; 0x1aa2 <free+0xbe>
    1a8a:	80 81       	ld	r24, Z
    1a8c:	91 81       	ldd	r25, Z+1	; 0x01
    1a8e:	84 0f       	add	r24, r20
    1a90:	95 1f       	adc	r25, r21
    1a92:	02 96       	adiw	r24, 0x02	; 2
    1a94:	e9 01       	movw	r28, r18
    1a96:	99 83       	std	Y+1, r25	; 0x01
    1a98:	88 83       	st	Y, r24
    1a9a:	82 81       	ldd	r24, Z+2	; 0x02
    1a9c:	93 81       	ldd	r25, Z+3	; 0x03
    1a9e:	9b 83       	std	Y+3, r25	; 0x03
    1aa0:	8a 83       	std	Y+2, r24	; 0x02
    1aa2:	e0 e0       	ldi	r30, 0x00	; 0
    1aa4:	f0 e0       	ldi	r31, 0x00	; 0
    1aa6:	12 96       	adiw	r26, 0x02	; 2
    1aa8:	8d 91       	ld	r24, X+
    1aaa:	9c 91       	ld	r25, X
    1aac:	13 97       	sbiw	r26, 0x03	; 3
    1aae:	00 97       	sbiw	r24, 0x00	; 0
    1ab0:	19 f0       	breq	.+6      	; 0x1ab8 <free+0xd4>
    1ab2:	fd 01       	movw	r30, r26
    1ab4:	dc 01       	movw	r26, r24
    1ab6:	f7 cf       	rjmp	.-18     	; 0x1aa6 <free+0xc2>
    1ab8:	8d 91       	ld	r24, X+
    1aba:	9c 91       	ld	r25, X
    1abc:	11 97       	sbiw	r26, 0x01	; 1
    1abe:	9d 01       	movw	r18, r26
    1ac0:	2e 5f       	subi	r18, 0xFE	; 254
    1ac2:	3f 4f       	sbci	r19, 0xFF	; 255
    1ac4:	82 0f       	add	r24, r18
    1ac6:	93 1f       	adc	r25, r19
    1ac8:	20 91 e0 02 	lds	r18, 0x02E0	; 0x8002e0 <__brkval>
    1acc:	30 91 e1 02 	lds	r19, 0x02E1	; 0x8002e1 <__brkval+0x1>
    1ad0:	28 17       	cp	r18, r24
    1ad2:	39 07       	cpc	r19, r25
    1ad4:	69 f4       	brne	.+26     	; 0x1af0 <free+0x10c>
    1ad6:	30 97       	sbiw	r30, 0x00	; 0
    1ad8:	29 f4       	brne	.+10     	; 0x1ae4 <free+0x100>
    1ada:	10 92 e3 02 	sts	0x02E3, r1	; 0x8002e3 <__flp+0x1>
    1ade:	10 92 e2 02 	sts	0x02E2, r1	; 0x8002e2 <__flp>
    1ae2:	02 c0       	rjmp	.+4      	; 0x1ae8 <free+0x104>
    1ae4:	13 82       	std	Z+3, r1	; 0x03
    1ae6:	12 82       	std	Z+2, r1	; 0x02
    1ae8:	b0 93 e1 02 	sts	0x02E1, r27	; 0x8002e1 <__brkval+0x1>
    1aec:	a0 93 e0 02 	sts	0x02E0, r26	; 0x8002e0 <__brkval>
    1af0:	df 91       	pop	r29
    1af2:	cf 91       	pop	r28
    1af4:	08 95       	ret

00001af6 <realloc>:
    1af6:	6f 92       	push	r6
    1af8:	7f 92       	push	r7
    1afa:	8f 92       	push	r8
    1afc:	9f 92       	push	r9
    1afe:	af 92       	push	r10
    1b00:	bf 92       	push	r11
    1b02:	cf 92       	push	r12
    1b04:	df 92       	push	r13
    1b06:	ef 92       	push	r14
    1b08:	ff 92       	push	r15
    1b0a:	0f 93       	push	r16
    1b0c:	1f 93       	push	r17
    1b0e:	cf 93       	push	r28
    1b10:	df 93       	push	r29
    1b12:	00 97       	sbiw	r24, 0x00	; 0
    1b14:	81 f4       	brne	.+32     	; 0x1b36 <realloc+0x40>
    1b16:	cb 01       	movw	r24, r22
    1b18:	df 91       	pop	r29
    1b1a:	cf 91       	pop	r28
    1b1c:	1f 91       	pop	r17
    1b1e:	0f 91       	pop	r16
    1b20:	ff 90       	pop	r15
    1b22:	ef 90       	pop	r14
    1b24:	df 90       	pop	r13
    1b26:	cf 90       	pop	r12
    1b28:	bf 90       	pop	r11
    1b2a:	af 90       	pop	r10
    1b2c:	9f 90       	pop	r9
    1b2e:	8f 90       	pop	r8
    1b30:	7f 90       	pop	r7
    1b32:	6f 90       	pop	r6
    1b34:	bf ce       	rjmp	.-642    	; 0x18b4 <malloc>
    1b36:	fc 01       	movw	r30, r24
    1b38:	e6 0f       	add	r30, r22
    1b3a:	f7 1f       	adc	r31, r23
    1b3c:	9c 01       	movw	r18, r24
    1b3e:	22 50       	subi	r18, 0x02	; 2
    1b40:	31 09       	sbc	r19, r1
    1b42:	e2 17       	cp	r30, r18
    1b44:	f3 07       	cpc	r31, r19
    1b46:	08 f4       	brcc	.+2      	; 0x1b4a <realloc+0x54>
    1b48:	a5 c0       	rjmp	.+330    	; 0x1c94 <realloc+0x19e>
    1b4a:	ec 01       	movw	r28, r24
    1b4c:	d9 01       	movw	r26, r18
    1b4e:	0d 91       	ld	r16, X+
    1b50:	1c 91       	ld	r17, X
    1b52:	11 97       	sbiw	r26, 0x01	; 1
    1b54:	06 17       	cp	r16, r22
    1b56:	17 07       	cpc	r17, r23
    1b58:	a8 f0       	brcs	.+42     	; 0x1b84 <realloc+0x8e>
    1b5a:	05 30       	cpi	r16, 0x05	; 5
    1b5c:	11 05       	cpc	r17, r1
    1b5e:	08 f4       	brcc	.+2      	; 0x1b62 <realloc+0x6c>
    1b60:	97 c0       	rjmp	.+302    	; 0x1c90 <realloc+0x19a>
    1b62:	c8 01       	movw	r24, r16
    1b64:	04 97       	sbiw	r24, 0x04	; 4
    1b66:	86 17       	cp	r24, r22
    1b68:	97 07       	cpc	r25, r23
    1b6a:	08 f4       	brcc	.+2      	; 0x1b6e <realloc+0x78>
    1b6c:	91 c0       	rjmp	.+290    	; 0x1c90 <realloc+0x19a>
    1b6e:	02 50       	subi	r16, 0x02	; 2
    1b70:	11 09       	sbc	r17, r1
    1b72:	06 1b       	sub	r16, r22
    1b74:	17 0b       	sbc	r17, r23
    1b76:	01 93       	st	Z+, r16
    1b78:	11 93       	st	Z+, r17
    1b7a:	6d 93       	st	X+, r22
    1b7c:	7c 93       	st	X, r23
    1b7e:	cf 01       	movw	r24, r30
    1b80:	31 df       	rcall	.-414    	; 0x19e4 <free>
    1b82:	86 c0       	rjmp	.+268    	; 0x1c90 <realloc+0x19a>
    1b84:	5b 01       	movw	r10, r22
    1b86:	a0 1a       	sub	r10, r16
    1b88:	b1 0a       	sbc	r11, r17
    1b8a:	4c 01       	movw	r8, r24
    1b8c:	80 0e       	add	r8, r16
    1b8e:	91 1e       	adc	r9, r17
    1b90:	a0 91 e2 02 	lds	r26, 0x02E2	; 0x8002e2 <__flp>
    1b94:	b0 91 e3 02 	lds	r27, 0x02E3	; 0x8002e3 <__flp+0x1>
    1b98:	61 2c       	mov	r6, r1
    1b9a:	71 2c       	mov	r7, r1
    1b9c:	e1 2c       	mov	r14, r1
    1b9e:	f1 2c       	mov	r15, r1
    1ba0:	10 97       	sbiw	r26, 0x00	; 0
    1ba2:	09 f4       	brne	.+2      	; 0x1ba6 <realloc+0xb0>
    1ba4:	46 c0       	rjmp	.+140    	; 0x1c32 <realloc+0x13c>
    1ba6:	8d 91       	ld	r24, X+
    1ba8:	9c 91       	ld	r25, X
    1baa:	11 97       	sbiw	r26, 0x01	; 1
    1bac:	a8 15       	cp	r26, r8
    1bae:	b9 05       	cpc	r27, r9
    1bb0:	b1 f5       	brne	.+108    	; 0x1c1e <realloc+0x128>
    1bb2:	6c 01       	movw	r12, r24
    1bb4:	42 e0       	ldi	r20, 0x02	; 2
    1bb6:	c4 0e       	add	r12, r20
    1bb8:	d1 1c       	adc	r13, r1
    1bba:	ca 14       	cp	r12, r10
    1bbc:	db 04       	cpc	r13, r11
    1bbe:	78 f1       	brcs	.+94     	; 0x1c1e <realloc+0x128>
    1bc0:	4c 01       	movw	r8, r24
    1bc2:	8a 18       	sub	r8, r10
    1bc4:	9b 08       	sbc	r9, r11
    1bc6:	64 01       	movw	r12, r8
    1bc8:	42 e0       	ldi	r20, 0x02	; 2
    1bca:	c4 0e       	add	r12, r20
    1bcc:	d1 1c       	adc	r13, r1
    1bce:	12 96       	adiw	r26, 0x02	; 2
    1bd0:	bc 90       	ld	r11, X
    1bd2:	12 97       	sbiw	r26, 0x02	; 2
    1bd4:	13 96       	adiw	r26, 0x03	; 3
    1bd6:	ac 91       	ld	r26, X
    1bd8:	b5 e0       	ldi	r27, 0x05	; 5
    1bda:	cb 16       	cp	r12, r27
    1bdc:	d1 04       	cpc	r13, r1
    1bde:	40 f0       	brcs	.+16     	; 0x1bf0 <realloc+0xfa>
    1be0:	b2 82       	std	Z+2, r11	; 0x02
    1be2:	a3 83       	std	Z+3, r26	; 0x03
    1be4:	91 82       	std	Z+1, r9	; 0x01
    1be6:	80 82       	st	Z, r8
    1be8:	d9 01       	movw	r26, r18
    1bea:	6d 93       	st	X+, r22
    1bec:	7c 93       	st	X, r23
    1bee:	09 c0       	rjmp	.+18     	; 0x1c02 <realloc+0x10c>
    1bf0:	0e 5f       	subi	r16, 0xFE	; 254
    1bf2:	1f 4f       	sbci	r17, 0xFF	; 255
    1bf4:	80 0f       	add	r24, r16
    1bf6:	91 1f       	adc	r25, r17
    1bf8:	f9 01       	movw	r30, r18
    1bfa:	91 83       	std	Z+1, r25	; 0x01
    1bfc:	80 83       	st	Z, r24
    1bfe:	eb 2d       	mov	r30, r11
    1c00:	fa 2f       	mov	r31, r26
    1c02:	e1 14       	cp	r14, r1
    1c04:	f1 04       	cpc	r15, r1
    1c06:	31 f0       	breq	.+12     	; 0x1c14 <realloc+0x11e>
    1c08:	d7 01       	movw	r26, r14
    1c0a:	13 96       	adiw	r26, 0x03	; 3
    1c0c:	fc 93       	st	X, r31
    1c0e:	ee 93       	st	-X, r30
    1c10:	12 97       	sbiw	r26, 0x02	; 2
    1c12:	3e c0       	rjmp	.+124    	; 0x1c90 <realloc+0x19a>
    1c14:	f0 93 e3 02 	sts	0x02E3, r31	; 0x8002e3 <__flp+0x1>
    1c18:	e0 93 e2 02 	sts	0x02E2, r30	; 0x8002e2 <__flp>
    1c1c:	39 c0       	rjmp	.+114    	; 0x1c90 <realloc+0x19a>
    1c1e:	68 16       	cp	r6, r24
    1c20:	79 06       	cpc	r7, r25
    1c22:	08 f4       	brcc	.+2      	; 0x1c26 <realloc+0x130>
    1c24:	3c 01       	movw	r6, r24
    1c26:	7d 01       	movw	r14, r26
    1c28:	12 96       	adiw	r26, 0x02	; 2
    1c2a:	0d 90       	ld	r0, X+
    1c2c:	bc 91       	ld	r27, X
    1c2e:	a0 2d       	mov	r26, r0
    1c30:	b7 cf       	rjmp	.-146    	; 0x1ba0 <realloc+0xaa>
    1c32:	80 91 e0 02 	lds	r24, 0x02E0	; 0x8002e0 <__brkval>
    1c36:	90 91 e1 02 	lds	r25, 0x02E1	; 0x8002e1 <__brkval+0x1>
    1c3a:	88 16       	cp	r8, r24
    1c3c:	99 06       	cpc	r9, r25
    1c3e:	e1 f4       	brne	.+56     	; 0x1c78 <realloc+0x182>
    1c40:	66 16       	cp	r6, r22
    1c42:	77 06       	cpc	r7, r23
    1c44:	c8 f4       	brcc	.+50     	; 0x1c78 <realloc+0x182>
    1c46:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__data_start>
    1c4a:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <__data_start+0x1>
    1c4e:	00 97       	sbiw	r24, 0x00	; 0
    1c50:	41 f4       	brne	.+16     	; 0x1c62 <realloc+0x16c>
    1c52:	8d b7       	in	r24, 0x3d	; 61
    1c54:	9e b7       	in	r25, 0x3e	; 62
    1c56:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
    1c5a:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
    1c5e:	84 1b       	sub	r24, r20
    1c60:	95 0b       	sbc	r25, r21
    1c62:	e8 17       	cp	r30, r24
    1c64:	f9 07       	cpc	r31, r25
    1c66:	b0 f4       	brcc	.+44     	; 0x1c94 <realloc+0x19e>
    1c68:	f0 93 e1 02 	sts	0x02E1, r31	; 0x8002e1 <__brkval+0x1>
    1c6c:	e0 93 e0 02 	sts	0x02E0, r30	; 0x8002e0 <__brkval>
    1c70:	f9 01       	movw	r30, r18
    1c72:	71 83       	std	Z+1, r23	; 0x01
    1c74:	60 83       	st	Z, r22
    1c76:	0c c0       	rjmp	.+24     	; 0x1c90 <realloc+0x19a>
    1c78:	cb 01       	movw	r24, r22
    1c7a:	1c de       	rcall	.-968    	; 0x18b4 <malloc>
    1c7c:	7c 01       	movw	r14, r24
    1c7e:	00 97       	sbiw	r24, 0x00	; 0
    1c80:	49 f0       	breq	.+18     	; 0x1c94 <realloc+0x19e>
    1c82:	a8 01       	movw	r20, r16
    1c84:	be 01       	movw	r22, r28
    1c86:	8d d1       	rcall	.+794    	; 0x1fa2 <memcpy>
    1c88:	ce 01       	movw	r24, r28
    1c8a:	ac de       	rcall	.-680    	; 0x19e4 <free>
    1c8c:	c7 01       	movw	r24, r14
    1c8e:	04 c0       	rjmp	.+8      	; 0x1c98 <realloc+0x1a2>
    1c90:	ce 01       	movw	r24, r28
    1c92:	02 c0       	rjmp	.+4      	; 0x1c98 <realloc+0x1a2>
    1c94:	80 e0       	ldi	r24, 0x00	; 0
    1c96:	90 e0       	ldi	r25, 0x00	; 0
    1c98:	df 91       	pop	r29
    1c9a:	cf 91       	pop	r28
    1c9c:	1f 91       	pop	r17
    1c9e:	0f 91       	pop	r16
    1ca0:	ff 90       	pop	r15
    1ca2:	ef 90       	pop	r14
    1ca4:	df 90       	pop	r13
    1ca6:	cf 90       	pop	r12
    1ca8:	bf 90       	pop	r11
    1caa:	af 90       	pop	r10
    1cac:	9f 90       	pop	r9
    1cae:	8f 90       	pop	r8
    1cb0:	7f 90       	pop	r7
    1cb2:	6f 90       	pop	r6
    1cb4:	08 95       	ret

00001cb6 <strtod>:
    1cb6:	8f 92       	push	r8
    1cb8:	9f 92       	push	r9
    1cba:	af 92       	push	r10
    1cbc:	bf 92       	push	r11
    1cbe:	cf 92       	push	r12
    1cc0:	df 92       	push	r13
    1cc2:	ef 92       	push	r14
    1cc4:	ff 92       	push	r15
    1cc6:	0f 93       	push	r16
    1cc8:	1f 93       	push	r17
    1cca:	cf 93       	push	r28
    1ccc:	df 93       	push	r29
    1cce:	ec 01       	movw	r28, r24
    1cd0:	6b 01       	movw	r12, r22
    1cd2:	61 15       	cp	r22, r1
    1cd4:	71 05       	cpc	r23, r1
    1cd6:	19 f0       	breq	.+6      	; 0x1cde <strtod+0x28>
    1cd8:	fb 01       	movw	r30, r22
    1cda:	91 83       	std	Z+1, r25	; 0x01
    1cdc:	80 83       	st	Z, r24
    1cde:	7e 01       	movw	r14, r28
    1ce0:	ff ef       	ldi	r31, 0xFF	; 255
    1ce2:	ef 1a       	sub	r14, r31
    1ce4:	ff 0a       	sbc	r15, r31
    1ce6:	08 81       	ld	r16, Y
    1ce8:	80 2f       	mov	r24, r16
    1cea:	90 e0       	ldi	r25, 0x00	; 0
    1cec:	3a d1       	rcall	.+628    	; 0x1f62 <isspace>
    1cee:	89 2b       	or	r24, r25
    1cf0:	11 f0       	breq	.+4      	; 0x1cf6 <strtod+0x40>
    1cf2:	e7 01       	movw	r28, r14
    1cf4:	f4 cf       	rjmp	.-24     	; 0x1cde <strtod+0x28>
    1cf6:	0d 32       	cpi	r16, 0x2D	; 45
    1cf8:	39 f4       	brne	.+14     	; 0x1d08 <strtod+0x52>
    1cfa:	7e 01       	movw	r14, r28
    1cfc:	82 e0       	ldi	r24, 0x02	; 2
    1cfe:	e8 0e       	add	r14, r24
    1d00:	f1 1c       	adc	r15, r1
    1d02:	09 81       	ldd	r16, Y+1	; 0x01
    1d04:	11 e0       	ldi	r17, 0x01	; 1
    1d06:	08 c0       	rjmp	.+16     	; 0x1d18 <strtod+0x62>
    1d08:	0b 32       	cpi	r16, 0x2B	; 43
    1d0a:	29 f4       	brne	.+10     	; 0x1d16 <strtod+0x60>
    1d0c:	7e 01       	movw	r14, r28
    1d0e:	92 e0       	ldi	r25, 0x02	; 2
    1d10:	e9 0e       	add	r14, r25
    1d12:	f1 1c       	adc	r15, r1
    1d14:	09 81       	ldd	r16, Y+1	; 0x01
    1d16:	10 e0       	ldi	r17, 0x00	; 0
    1d18:	e7 01       	movw	r28, r14
    1d1a:	21 97       	sbiw	r28, 0x01	; 1
    1d1c:	43 e0       	ldi	r20, 0x03	; 3
    1d1e:	50 e0       	ldi	r21, 0x00	; 0
    1d20:	60 e1       	ldi	r22, 0x10	; 16
    1d22:	71 e0       	ldi	r23, 0x01	; 1
    1d24:	ce 01       	movw	r24, r28
    1d26:	25 d1       	rcall	.+586    	; 0x1f72 <strncasecmp_P>
    1d28:	89 2b       	or	r24, r25
    1d2a:	b9 f4       	brne	.+46     	; 0x1d5a <strtod+0xa4>
    1d2c:	23 96       	adiw	r28, 0x03	; 3
    1d2e:	45 e0       	ldi	r20, 0x05	; 5
    1d30:	50 e0       	ldi	r21, 0x00	; 0
    1d32:	6b e0       	ldi	r22, 0x0B	; 11
    1d34:	71 e0       	ldi	r23, 0x01	; 1
    1d36:	ce 01       	movw	r24, r28
    1d38:	1c d1       	rcall	.+568    	; 0x1f72 <strncasecmp_P>
    1d3a:	89 2b       	or	r24, r25
    1d3c:	09 f4       	brne	.+2      	; 0x1d40 <strtod+0x8a>
    1d3e:	25 96       	adiw	r28, 0x05	; 5
    1d40:	c1 14       	cp	r12, r1
    1d42:	d1 04       	cpc	r13, r1
    1d44:	19 f0       	breq	.+6      	; 0x1d4c <strtod+0x96>
    1d46:	f6 01       	movw	r30, r12
    1d48:	d1 83       	std	Z+1, r29	; 0x01
    1d4a:	c0 83       	st	Z, r28
    1d4c:	11 11       	cpse	r17, r1
    1d4e:	f3 c0       	rjmp	.+486    	; 0x1f36 <strtod+0x280>
    1d50:	60 e0       	ldi	r22, 0x00	; 0
    1d52:	70 e0       	ldi	r23, 0x00	; 0
    1d54:	80 e8       	ldi	r24, 0x80	; 128
    1d56:	9f e7       	ldi	r25, 0x7F	; 127
    1d58:	f7 c0       	rjmp	.+494    	; 0x1f48 <strtod+0x292>
    1d5a:	43 e0       	ldi	r20, 0x03	; 3
    1d5c:	50 e0       	ldi	r21, 0x00	; 0
    1d5e:	68 e0       	ldi	r22, 0x08	; 8
    1d60:	71 e0       	ldi	r23, 0x01	; 1
    1d62:	ce 01       	movw	r24, r28
    1d64:	06 d1       	rcall	.+524    	; 0x1f72 <strncasecmp_P>
    1d66:	89 2b       	or	r24, r25
    1d68:	59 f4       	brne	.+22     	; 0x1d80 <strtod+0xca>
    1d6a:	c1 14       	cp	r12, r1
    1d6c:	d1 04       	cpc	r13, r1
    1d6e:	09 f4       	brne	.+2      	; 0x1d72 <strtod+0xbc>
    1d70:	e7 c0       	rjmp	.+462    	; 0x1f40 <strtod+0x28a>
    1d72:	f2 e0       	ldi	r31, 0x02	; 2
    1d74:	ef 0e       	add	r14, r31
    1d76:	f1 1c       	adc	r15, r1
    1d78:	f6 01       	movw	r30, r12
    1d7a:	f1 82       	std	Z+1, r15	; 0x01
    1d7c:	e0 82       	st	Z, r14
    1d7e:	e0 c0       	rjmp	.+448    	; 0x1f40 <strtod+0x28a>
    1d80:	20 e0       	ldi	r18, 0x00	; 0
    1d82:	30 e0       	ldi	r19, 0x00	; 0
    1d84:	a9 01       	movw	r20, r18
    1d86:	c0 e0       	ldi	r28, 0x00	; 0
    1d88:	d0 e0       	ldi	r29, 0x00	; 0
    1d8a:	f7 01       	movw	r30, r14
    1d8c:	60 ed       	ldi	r22, 0xD0	; 208
    1d8e:	a6 2e       	mov	r10, r22
    1d90:	a0 0e       	add	r10, r16
    1d92:	89 e0       	ldi	r24, 0x09	; 9
    1d94:	8a 15       	cp	r24, r10
    1d96:	28 f1       	brcs	.+74     	; 0x1de2 <strtod+0x12c>
    1d98:	91 2f       	mov	r25, r17
    1d9a:	92 60       	ori	r25, 0x02	; 2
    1d9c:	b9 2e       	mov	r11, r25
    1d9e:	81 2f       	mov	r24, r17
    1da0:	88 70       	andi	r24, 0x08	; 8
    1da2:	12 ff       	sbrs	r17, 2
    1da4:	04 c0       	rjmp	.+8      	; 0x1dae <strtod+0xf8>
    1da6:	81 11       	cpse	r24, r1
    1da8:	23 c0       	rjmp	.+70     	; 0x1df0 <strtod+0x13a>
    1daa:	21 96       	adiw	r28, 0x01	; 1
    1dac:	21 c0       	rjmp	.+66     	; 0x1df0 <strtod+0x13a>
    1dae:	81 11       	cpse	r24, r1
    1db0:	21 97       	sbiw	r28, 0x01	; 1
    1db2:	a5 e0       	ldi	r26, 0x05	; 5
    1db4:	b0 e0       	ldi	r27, 0x00	; 0
    1db6:	65 dd       	rcall	.-1334   	; 0x1882 <__muluhisi3>
    1db8:	dc 01       	movw	r26, r24
    1dba:	cb 01       	movw	r24, r22
    1dbc:	88 0f       	add	r24, r24
    1dbe:	99 1f       	adc	r25, r25
    1dc0:	aa 1f       	adc	r26, r26
    1dc2:	bb 1f       	adc	r27, r27
    1dc4:	9c 01       	movw	r18, r24
    1dc6:	ad 01       	movw	r20, r26
    1dc8:	2a 0d       	add	r18, r10
    1dca:	31 1d       	adc	r19, r1
    1dcc:	41 1d       	adc	r20, r1
    1dce:	51 1d       	adc	r21, r1
    1dd0:	28 39       	cpi	r18, 0x98	; 152
    1dd2:	89 e9       	ldi	r24, 0x99	; 153
    1dd4:	38 07       	cpc	r19, r24
    1dd6:	48 07       	cpc	r20, r24
    1dd8:	89 e1       	ldi	r24, 0x19	; 25
    1dda:	58 07       	cpc	r21, r24
    1ddc:	48 f0       	brcs	.+18     	; 0x1df0 <strtod+0x13a>
    1dde:	16 60       	ori	r17, 0x06	; 6
    1de0:	06 c0       	rjmp	.+12     	; 0x1dee <strtod+0x138>
    1de2:	9e ef       	ldi	r25, 0xFE	; 254
    1de4:	a9 12       	cpse	r10, r25
    1de6:	0a c0       	rjmp	.+20     	; 0x1dfc <strtod+0x146>
    1de8:	13 fd       	sbrc	r17, 3
    1dea:	40 c0       	rjmp	.+128    	; 0x1e6c <strtod+0x1b6>
    1dec:	18 60       	ori	r17, 0x08	; 8
    1dee:	b1 2e       	mov	r11, r17
    1df0:	8f ef       	ldi	r24, 0xFF	; 255
    1df2:	e8 1a       	sub	r14, r24
    1df4:	f8 0a       	sbc	r15, r24
    1df6:	00 81       	ld	r16, Z
    1df8:	1b 2d       	mov	r17, r11
    1dfa:	c7 cf       	rjmp	.-114    	; 0x1d8a <strtod+0xd4>
    1dfc:	80 2f       	mov	r24, r16
    1dfe:	8f 7d       	andi	r24, 0xDF	; 223
    1e00:	85 34       	cpi	r24, 0x45	; 69
    1e02:	a1 f5       	brne	.+104    	; 0x1e6c <strtod+0x1b6>
    1e04:	80 81       	ld	r24, Z
    1e06:	8d 32       	cpi	r24, 0x2D	; 45
    1e08:	11 f4       	brne	.+4      	; 0x1e0e <strtod+0x158>
    1e0a:	10 61       	ori	r17, 0x10	; 16
    1e0c:	06 c0       	rjmp	.+12     	; 0x1e1a <strtod+0x164>
    1e0e:	8b 32       	cpi	r24, 0x2B	; 43
    1e10:	21 f0       	breq	.+8      	; 0x1e1a <strtod+0x164>
    1e12:	31 96       	adiw	r30, 0x01	; 1
    1e14:	61 e0       	ldi	r22, 0x01	; 1
    1e16:	70 e0       	ldi	r23, 0x00	; 0
    1e18:	04 c0       	rjmp	.+8      	; 0x1e22 <strtod+0x16c>
    1e1a:	81 81       	ldd	r24, Z+1	; 0x01
    1e1c:	32 96       	adiw	r30, 0x02	; 2
    1e1e:	62 e0       	ldi	r22, 0x02	; 2
    1e20:	70 e0       	ldi	r23, 0x00	; 0
    1e22:	80 53       	subi	r24, 0x30	; 48
    1e24:	8a 30       	cpi	r24, 0x0A	; 10
    1e26:	18 f0       	brcs	.+6      	; 0x1e2e <strtod+0x178>
    1e28:	e6 1b       	sub	r30, r22
    1e2a:	f7 0b       	sbc	r31, r23
    1e2c:	1f c0       	rjmp	.+62     	; 0x1e6c <strtod+0x1b6>
    1e2e:	60 e0       	ldi	r22, 0x00	; 0
    1e30:	70 e0       	ldi	r23, 0x00	; 0
    1e32:	60 38       	cpi	r22, 0x80	; 128
    1e34:	9c e0       	ldi	r25, 0x0C	; 12
    1e36:	79 07       	cpc	r23, r25
    1e38:	5c f4       	brge	.+22     	; 0x1e50 <strtod+0x19a>
    1e3a:	db 01       	movw	r26, r22
    1e3c:	aa 0f       	add	r26, r26
    1e3e:	bb 1f       	adc	r27, r27
    1e40:	aa 0f       	add	r26, r26
    1e42:	bb 1f       	adc	r27, r27
    1e44:	6a 0f       	add	r22, r26
    1e46:	7b 1f       	adc	r23, r27
    1e48:	66 0f       	add	r22, r22
    1e4a:	77 1f       	adc	r23, r23
    1e4c:	68 0f       	add	r22, r24
    1e4e:	71 1d       	adc	r23, r1
    1e50:	31 96       	adiw	r30, 0x01	; 1
    1e52:	df 01       	movw	r26, r30
    1e54:	11 97       	sbiw	r26, 0x01	; 1
    1e56:	8c 91       	ld	r24, X
    1e58:	80 53       	subi	r24, 0x30	; 48
    1e5a:	8a 30       	cpi	r24, 0x0A	; 10
    1e5c:	50 f3       	brcs	.-44     	; 0x1e32 <strtod+0x17c>
    1e5e:	14 ff       	sbrs	r17, 4
    1e60:	03 c0       	rjmp	.+6      	; 0x1e68 <strtod+0x1b2>
    1e62:	71 95       	neg	r23
    1e64:	61 95       	neg	r22
    1e66:	71 09       	sbc	r23, r1
    1e68:	c6 0f       	add	r28, r22
    1e6a:	d7 1f       	adc	r29, r23
    1e6c:	11 ff       	sbrs	r17, 1
    1e6e:	08 c0       	rjmp	.+16     	; 0x1e80 <strtod+0x1ca>
    1e70:	c1 14       	cp	r12, r1
    1e72:	d1 04       	cpc	r13, r1
    1e74:	29 f0       	breq	.+10     	; 0x1e80 <strtod+0x1ca>
    1e76:	cf 01       	movw	r24, r30
    1e78:	01 97       	sbiw	r24, 0x01	; 1
    1e7a:	f6 01       	movw	r30, r12
    1e7c:	91 83       	std	Z+1, r25	; 0x01
    1e7e:	80 83       	st	Z, r24
    1e80:	ca 01       	movw	r24, r20
    1e82:	b9 01       	movw	r22, r18
    1e84:	0e 94 5c 05 	call	0xab8	; 0xab8 <__floatunsisf>
    1e88:	21 2f       	mov	r18, r17
    1e8a:	23 70       	andi	r18, 0x03	; 3
    1e8c:	23 30       	cpi	r18, 0x03	; 3
    1e8e:	19 f0       	breq	.+6      	; 0x1e96 <strtod+0x1e0>
    1e90:	4b 01       	movw	r8, r22
    1e92:	5c 01       	movw	r10, r24
    1e94:	06 c0       	rjmp	.+12     	; 0x1ea2 <strtod+0x1ec>
    1e96:	4b 01       	movw	r8, r22
    1e98:	5c 01       	movw	r10, r24
    1e9a:	b7 fa       	bst	r11, 7
    1e9c:	b0 94       	com	r11
    1e9e:	b7 f8       	bld	r11, 7
    1ea0:	b0 94       	com	r11
    1ea2:	20 e0       	ldi	r18, 0x00	; 0
    1ea4:	30 e0       	ldi	r19, 0x00	; 0
    1ea6:	a9 01       	movw	r20, r18
    1ea8:	c5 01       	movw	r24, r10
    1eaa:	b4 01       	movw	r22, r8
    1eac:	0e 94 27 05 	call	0xa4e	; 0xa4e <__cmpsf2>
    1eb0:	88 23       	and	r24, r24
    1eb2:	09 f4       	brne	.+2      	; 0x1eb6 <strtod+0x200>
    1eb4:	3d c0       	rjmp	.+122    	; 0x1f30 <strtod+0x27a>
    1eb6:	d7 ff       	sbrs	r29, 7
    1eb8:	06 c0       	rjmp	.+12     	; 0x1ec6 <strtod+0x210>
    1eba:	d1 95       	neg	r29
    1ebc:	c1 95       	neg	r28
    1ebe:	d1 09       	sbc	r29, r1
    1ec0:	07 e2       	ldi	r16, 0x27	; 39
    1ec2:	11 e0       	ldi	r17, 0x01	; 1
    1ec4:	02 c0       	rjmp	.+4      	; 0x1eca <strtod+0x214>
    1ec6:	0f e3       	ldi	r16, 0x3F	; 63
    1ec8:	11 e0       	ldi	r17, 0x01	; 1
    1eca:	68 01       	movw	r12, r16
    1ecc:	f8 e1       	ldi	r31, 0x18	; 24
    1ece:	cf 1a       	sub	r12, r31
    1ed0:	d1 08       	sbc	r13, r1
    1ed2:	90 e2       	ldi	r25, 0x20	; 32
    1ed4:	e9 2e       	mov	r14, r25
    1ed6:	f1 2c       	mov	r15, r1
    1ed8:	ce 15       	cp	r28, r14
    1eda:	df 05       	cpc	r29, r15
    1edc:	6c f0       	brlt	.+26     	; 0x1ef8 <strtod+0x242>
    1ede:	f8 01       	movw	r30, r16
    1ee0:	25 91       	lpm	r18, Z+
    1ee2:	35 91       	lpm	r19, Z+
    1ee4:	45 91       	lpm	r20, Z+
    1ee6:	54 91       	lpm	r21, Z
    1ee8:	c5 01       	movw	r24, r10
    1eea:	b4 01       	movw	r22, r8
    1eec:	12 dc       	rcall	.-2012   	; 0x1712 <__mulsf3>
    1eee:	4b 01       	movw	r8, r22
    1ef0:	5c 01       	movw	r10, r24
    1ef2:	ce 19       	sub	r28, r14
    1ef4:	df 09       	sbc	r29, r15
    1ef6:	f0 cf       	rjmp	.-32     	; 0x1ed8 <strtod+0x222>
    1ef8:	04 50       	subi	r16, 0x04	; 4
    1efa:	11 09       	sbc	r17, r1
    1efc:	f5 94       	asr	r15
    1efe:	e7 94       	ror	r14
    1f00:	0c 15       	cp	r16, r12
    1f02:	1d 05       	cpc	r17, r13
    1f04:	49 f7       	brne	.-46     	; 0x1ed8 <strtod+0x222>
    1f06:	8a 2d       	mov	r24, r10
    1f08:	88 0f       	add	r24, r24
    1f0a:	8b 2d       	mov	r24, r11
    1f0c:	88 1f       	adc	r24, r24
    1f0e:	8f 3f       	cpi	r24, 0xFF	; 255
    1f10:	49 f0       	breq	.+18     	; 0x1f24 <strtod+0x26e>
    1f12:	20 e0       	ldi	r18, 0x00	; 0
    1f14:	30 e0       	ldi	r19, 0x00	; 0
    1f16:	a9 01       	movw	r20, r18
    1f18:	c5 01       	movw	r24, r10
    1f1a:	b4 01       	movw	r22, r8
    1f1c:	0e 94 27 05 	call	0xa4e	; 0xa4e <__cmpsf2>
    1f20:	81 11       	cpse	r24, r1
    1f22:	06 c0       	rjmp	.+12     	; 0x1f30 <strtod+0x27a>
    1f24:	82 e2       	ldi	r24, 0x22	; 34
    1f26:	90 e0       	ldi	r25, 0x00	; 0
    1f28:	90 93 e5 02 	sts	0x02E5, r25	; 0x8002e5 <errno+0x1>
    1f2c:	80 93 e4 02 	sts	0x02E4, r24	; 0x8002e4 <errno>
    1f30:	c5 01       	movw	r24, r10
    1f32:	b4 01       	movw	r22, r8
    1f34:	09 c0       	rjmp	.+18     	; 0x1f48 <strtod+0x292>
    1f36:	60 e0       	ldi	r22, 0x00	; 0
    1f38:	70 e0       	ldi	r23, 0x00	; 0
    1f3a:	80 e8       	ldi	r24, 0x80	; 128
    1f3c:	9f ef       	ldi	r25, 0xFF	; 255
    1f3e:	04 c0       	rjmp	.+8      	; 0x1f48 <strtod+0x292>
    1f40:	60 e0       	ldi	r22, 0x00	; 0
    1f42:	70 e0       	ldi	r23, 0x00	; 0
    1f44:	80 ec       	ldi	r24, 0xC0	; 192
    1f46:	9f e7       	ldi	r25, 0x7F	; 127
    1f48:	df 91       	pop	r29
    1f4a:	cf 91       	pop	r28
    1f4c:	1f 91       	pop	r17
    1f4e:	0f 91       	pop	r16
    1f50:	ff 90       	pop	r15
    1f52:	ef 90       	pop	r14
    1f54:	df 90       	pop	r13
    1f56:	cf 90       	pop	r12
    1f58:	bf 90       	pop	r11
    1f5a:	af 90       	pop	r10
    1f5c:	9f 90       	pop	r9
    1f5e:	8f 90       	pop	r8
    1f60:	08 95       	ret

00001f62 <isspace>:
    1f62:	91 11       	cpse	r25, r1
    1f64:	47 c0       	rjmp	.+142    	; 0x1ff4 <__ctype_isfalse>
    1f66:	80 32       	cpi	r24, 0x20	; 32
    1f68:	19 f0       	breq	.+6      	; 0x1f70 <isspace+0xe>
    1f6a:	89 50       	subi	r24, 0x09	; 9
    1f6c:	85 50       	subi	r24, 0x05	; 5
    1f6e:	d0 f7       	brcc	.-12     	; 0x1f64 <isspace+0x2>
    1f70:	08 95       	ret

00001f72 <strncasecmp_P>:
    1f72:	fb 01       	movw	r30, r22
    1f74:	dc 01       	movw	r26, r24
    1f76:	41 50       	subi	r20, 0x01	; 1
    1f78:	50 40       	sbci	r21, 0x00	; 0
    1f7a:	88 f0       	brcs	.+34     	; 0x1f9e <strncasecmp_P+0x2c>
    1f7c:	8d 91       	ld	r24, X+
    1f7e:	81 34       	cpi	r24, 0x41	; 65
    1f80:	1c f0       	brlt	.+6      	; 0x1f88 <strncasecmp_P+0x16>
    1f82:	8b 35       	cpi	r24, 0x5B	; 91
    1f84:	0c f4       	brge	.+2      	; 0x1f88 <strncasecmp_P+0x16>
    1f86:	80 5e       	subi	r24, 0xE0	; 224
    1f88:	65 91       	lpm	r22, Z+
    1f8a:	61 34       	cpi	r22, 0x41	; 65
    1f8c:	1c f0       	brlt	.+6      	; 0x1f94 <strncasecmp_P+0x22>
    1f8e:	6b 35       	cpi	r22, 0x5B	; 91
    1f90:	0c f4       	brge	.+2      	; 0x1f94 <strncasecmp_P+0x22>
    1f92:	60 5e       	subi	r22, 0xE0	; 224
    1f94:	86 1b       	sub	r24, r22
    1f96:	61 11       	cpse	r22, r1
    1f98:	71 f3       	breq	.-36     	; 0x1f76 <strncasecmp_P+0x4>
    1f9a:	99 0b       	sbc	r25, r25
    1f9c:	08 95       	ret
    1f9e:	88 1b       	sub	r24, r24
    1fa0:	fc cf       	rjmp	.-8      	; 0x1f9a <strncasecmp_P+0x28>

00001fa2 <memcpy>:
    1fa2:	fb 01       	movw	r30, r22
    1fa4:	dc 01       	movw	r26, r24
    1fa6:	02 c0       	rjmp	.+4      	; 0x1fac <memcpy+0xa>
    1fa8:	01 90       	ld	r0, Z+
    1faa:	0d 92       	st	X+, r0
    1fac:	41 50       	subi	r20, 0x01	; 1
    1fae:	50 40       	sbci	r21, 0x00	; 0
    1fb0:	d8 f7       	brcc	.-10     	; 0x1fa8 <memcpy+0x6>
    1fb2:	08 95       	ret

00001fb4 <strcpy>:
    1fb4:	fb 01       	movw	r30, r22
    1fb6:	dc 01       	movw	r26, r24
    1fb8:	01 90       	ld	r0, Z+
    1fba:	0d 92       	st	X+, r0
    1fbc:	00 20       	and	r0, r0
    1fbe:	e1 f7       	brne	.-8      	; 0x1fb8 <strcpy+0x4>
    1fc0:	08 95       	ret

00001fc2 <strlwr>:
    1fc2:	dc 01       	movw	r26, r24
    1fc4:	6c 91       	ld	r22, X
    1fc6:	61 54       	subi	r22, 0x41	; 65
    1fc8:	6a 31       	cpi	r22, 0x1A	; 26
    1fca:	08 f0       	brcs	.+2      	; 0x1fce <strlwr+0xc>
    1fcc:	60 52       	subi	r22, 0x20	; 32
    1fce:	6f 59       	subi	r22, 0x9F	; 159
    1fd0:	6d 93       	st	X+, r22
    1fd2:	c1 f7       	brne	.-16     	; 0x1fc4 <strlwr+0x2>
    1fd4:	08 95       	ret

00001fd6 <strncpy>:
    1fd6:	fb 01       	movw	r30, r22
    1fd8:	dc 01       	movw	r26, r24
    1fda:	41 50       	subi	r20, 0x01	; 1
    1fdc:	50 40       	sbci	r21, 0x00	; 0
    1fde:	48 f0       	brcs	.+18     	; 0x1ff2 <strncpy+0x1c>
    1fe0:	01 90       	ld	r0, Z+
    1fe2:	0d 92       	st	X+, r0
    1fe4:	00 20       	and	r0, r0
    1fe6:	c9 f7       	brne	.-14     	; 0x1fda <strncpy+0x4>
    1fe8:	01 c0       	rjmp	.+2      	; 0x1fec <strncpy+0x16>
    1fea:	1d 92       	st	X+, r1
    1fec:	41 50       	subi	r20, 0x01	; 1
    1fee:	50 40       	sbci	r21, 0x00	; 0
    1ff0:	e0 f7       	brcc	.-8      	; 0x1fea <strncpy+0x14>
    1ff2:	08 95       	ret

00001ff4 <__ctype_isfalse>:
    1ff4:	99 27       	eor	r25, r25
    1ff6:	88 27       	eor	r24, r24

00001ff8 <__ctype_istrue>:
    1ff8:	08 95       	ret

00001ffa <_exit>:
    1ffa:	f8 94       	cli

00001ffc <__stop_program>:
    1ffc:	ff cf       	rjmp	.-2      	; 0x1ffc <__stop_program>
